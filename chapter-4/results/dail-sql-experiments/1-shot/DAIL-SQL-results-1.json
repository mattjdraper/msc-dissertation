{
    "accuracy": 0.7630560928433269,
    "args": {
        "data_type": "spider",
        "split": "test",
        "tokenizer": "gpt-3.5-turbo",
        "max_seq_length": 2048,
        "prompt_repr": "SQL",
        "k-shot": 1,
        "example_type": "QA",
        "selector_type": "DAIL",
        "embedding_model": "all-mpnet-base-v2"
    },
    "questions": [
        {
            "index": 1,
            "question": "How many singers do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers do we have? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 1.0,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 2,
            "question": "What is the total number of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of students? */\nSELECT count(*) FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the total number of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 461,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student",
                    "question": "What is the total number of students?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 1.0,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 3,
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5299,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 0.8024691358024691,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 4,
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the years, titles, and publishers for all books, ordered by year descending? */\nSELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names, countries, and ages for every singer in descending order of age? */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6970,
                    "db_id": "culture_company",
                    "query": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
                    "question": "What are the years, titles, and publishers for all books, ordered by year descending?"
                }
            ],
            "example_quality": 0.9285714285714286,
            "example_similarity": 0.7609427609427609,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 5,
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average, maximum, and minimum budget for all movies before 2000. */\nSELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age of all singers from France? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6993,
                    "db_id": "culture_company",
                    "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
                    "question": "What is the average, maximum, and minimum budget for all movies before 2000."
                }
            ],
            "example_quality": 0.8628571428571428,
            "example_similarity": 0.7287542087542087,
            "db_id": "concert_singer",
            "pred": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
            "correct": 1
        },
        {
            "index": 6,
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum, maximum, and average seating for all tracks. */\nSELECT min(seating) ,  max(seating) ,  avg(seating) FROM track\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age for all French singers? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 756,
                    "db_id": "race_track",
                    "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
                    "question": "What is the minimum, maximum, and average seating for all tracks."
                }
            ],
            "example_quality": 0.8114452798663324,
            "example_similarity": 0.7249422327853701,
            "db_id": "concert_singer",
            "pred": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
            "correct": 1
        },
        {
            "index": 7,
            "question": "Show the name and the release year of the song by the youngest singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name and age of the youngest winning pilot? */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and the release year of the song by the youngest singer. */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4840,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
                    "question": "what is the name and age of the youngest winning pilot?"
                }
            ],
            "example_quality": 0.7148697636949517,
            "example_similarity": 0.6928076281017458,
            "db_id": "concert_singer",
            "pred": "SELECT t1.Name, t1.Song_release_year FROM singer AS t1 JOIN singer_in_concert AS t2 ON t1.Singer_ID = t2.Singer_ID ORDER BY t1.Age LIMIT 1",
            "correct": 0
        },
        {
            "index": 8,
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the last name of the youngest student? */\nSELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and release years for all the songs of the youngest singer? */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 486,
                    "db_id": "allergy_1",
                    "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
                    "question": "What is the last name of the youngest student?"
                }
            ],
            "example_quality": 0.6363469565457762,
            "example_similarity": 0.6723831451772628,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE Age = (SELECT min(Age) FROM singer)",
            "correct": 0
        },
        {
            "index": 9,
            "question": "What are all distinct countries where singers above age 20 are from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct president votes on 08/30/2015? */\nSELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all distinct countries where singers above age 20 are from? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5467,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
                    "question": "What are the distinct president votes on 08/30/2015?"
                }
            ],
            "example_quality": 0.6363488098588719,
            "example_similarity": 0.6495257586760855,
            "db_id": "concert_singer",
            "pred": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
            "correct": 1
        },
        {
            "index": 10,
            "question": "What are  the different countries with singers above age 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the star rating descriptions of the hotels with price above 10000? */\nSELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are  the different countries with singers above age 20? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5914,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000",
                    "question": "What are the star rating descriptions of the hotels with price above 10000?"
                }
            ],
            "example_quality": 0.5849588268321683,
            "example_similarity": 0.6512398494751437,
            "db_id": "concert_singer",
            "pred": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
            "correct": 1
        },
        {
            "index": 11,
            "question": "Show all countries and the number of singers in each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all party names and the number of members in each party. */\nSELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show all countries and the number of singers in each country. */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2058,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "Show all party names and the number of members in each party."
                }
            ],
            "example_quality": 0.5449120647969207,
            "example_similarity": 0.6759523107116691,
            "db_id": "concert_singer",
            "pred": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
            "correct": 1
        },
        {
            "index": 12,
            "question": "How many singers are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players are from each country? */\nSELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are from each country? */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1094,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
                    "question": "How many players are from each country?"
                }
            ],
            "example_quality": 0.5149789165400345,
            "example_similarity": 0.70295628481903,
            "db_id": "concert_singer",
            "pred": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
            "correct": 1
        },
        {
            "index": 13,
            "question": "List all song names by singers above the average age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all region names in alphabetical order. */\nSELECT region_name FROM region ORDER BY region_name\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all song names by singers above the average age. */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2695,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region ORDER BY region_name",
                    "question": "List all region names in alphabetical order."
                }
            ],
            "example_quality": 0.48670118611792657,
            "example_similarity": 0.676355251920863,
            "db_id": "concert_singer",
            "pred": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
            "correct": 1
        },
        {
            "index": 14,
            "question": "What are all the song names by singers who are older than average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Whare the names, friends, and ages of all people who are older than the average age of a person? */\nSELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all the song names by singers who are older than average? */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4468,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
                    "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
                }
            ],
            "example_quality": 0.4591337853779015,
            "example_similarity": 0.6594727339265155,
            "db_id": "concert_singer",
            "pred": "SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)",
            "correct": 1
        },
        {
            "index": 15,
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct winery of wines having price between 50 and 100. */\nSELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show location and name for all stadiums with a capacity between 5000 and 10000. */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6570,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
                    "question": "Find the distinct winery of wines having price between 50 and 100."
                }
            ],
            "example_quality": 0.47638811421595595,
            "example_similarity": 0.6421745516647479,
            "db_id": "concert_singer",
            "pred": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
            "correct": 1
        },
        {
            "index": 16,
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of all movies that have rating star is between 3 and 5? */\nSELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the locations and names of all stations with capacity between 5000 and 10000? */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2511,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
                    "question": "What are the titles of all movies that have rating star is between 3 and 5?"
                }
            ],
            "example_quality": 0.45633607929968084,
            "example_similarity": 0.6426636421857009,
            "db_id": "concert_singer",
            "pred": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
            "correct": 1
        },
        {
            "index": 17,
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the maximum capacity and the average of all stadiums ? */\nSELECT ",
            "response": "max(capacity), average from stadium",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 372,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is average and maximum salary of all employees."
                }
            ],
            "example_quality": 0.44583264979839243,
            "example_similarity": 0.6384733439058697,
            "db_id": "concert_singer",
            "pred": "SELECT max(Capacity), avg(Capacity) FROM stadium",
            "correct": 0
        },
        {
            "index": 18,
            "question": "What is the average and maximum capacities for all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average and maximum capacities for all stadiums ? */\nSELECT ",
            "response": "avg(capacity) , max(capacity) from stadium",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 372,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is average and maximum salary of all employees."
                }
            ],
            "example_quality": 0.44884194703181507,
            "example_similarity": 0.6307803803555436,
            "db_id": "concert_singer",
            "pred": "SELECT avg(Capacity), max(Capacity) FROM stadium",
            "correct": 1
        },
        {
            "index": 19,
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the date of the performance with the highest number of attendees? */\nSELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1313,
                    "db_id": "performance_attendance",
                    "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
                    "question": "What is the date of the performance with the highest number of attendees?"
                }
            ],
            "example_quality": 0.4594136415044477,
            "example_similarity": 0.6186340445473572,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert GROUP BY Stadium_ID ORDER BY AVG(Attendance) DESC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 20,
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the date of the performance with the highest number of attendees? */\nSELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with the highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1313,
                    "db_id": "performance_attendance",
                    "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
                    "question": "What is the date of the performance with the highest number of attendees?"
                }
            ],
            "example_quality": 0.46892816652981706,
            "example_similarity": 0.6102023423199893,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert GROUP BY Stadium_ID ORDER BY AVG(Attendance) DESC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 21,
            "question": "How many concerts are there in year 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gas station are opened between 2000 and 2005? */\nSELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts are there in year 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2016,
                    "db_id": "gas_company",
                    "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
                    "question": "How many gas station are opened between 2000 and 2005?"
                }
            ],
            "example_quality": 0.46306884207321514,
            "example_similarity": 0.6083559722775408,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM concert WHERE Year IN ('2014', '2015')",
            "correct": 1
        },
        {
            "index": 22,
            "question": "How many concerts occurred in 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trips did not end in San Francisco? */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts occurred in 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 167,
                    "db_id": "bike_1",
                    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
                    "question": "How many trips did not end in San Francisco?"
                }
            ],
            "example_quality": 0.4474585700309261,
            "example_similarity": 0.6072185795982586,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
            "correct": 1
        },
        {
            "index": 23,
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location codes and the number of documents in each location. */\nSELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and the number of concerts in each stadium. */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4227,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
                    "question": "Show the location codes and the number of documents in each location."
                }
            ],
            "example_quality": 0.43592655490880855,
            "example_similarity": 0.624296032659204,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, COUNT(c.concert_ID) FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;",
            "correct": 1
        },
        {
            "index": 24,
            "question": "For each stadium, how many concerts play there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players played each position? */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: For each stadium, how many concerts play there? */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1092,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "How many players played each position?"
                }
            ],
            "example_quality": 0.42535554104686746,
            "example_similarity": 0.6210109706923433,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, COUNT(c.concert_ID) FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name",
            "correct": 1
        },
        {
            "index": 25,
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the manager name with most number of gas stations opened after 2000. */\nSELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and capacity with most number of concerts in year 2014 or after. */\nSELECT ",
            "response": "T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2032,
                    "db_id": "gas_company",
                    "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the manager name with most number of gas stations opened after 2000."
                }
            ],
            "example_quality": 0.4176492827594677,
            "example_similarity": 0.6291117083352379,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 26,
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the 3 departments with the most courses? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity of the stadium with the most concerts after 2013 ? */\nSELECT ",
            "response": "t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1372,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the names of the 3 departments with the most courses?"
                }
            ],
            "example_quality": 0.403113301676315,
            "example_similarity": 0.6320644254354663,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 27,
            "question": "Which year has most number of concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which origin has most number of flights? */\nSELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Which year has most number of concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 408,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which origin has most number of flights?"
                }
            ],
            "example_quality": 0.4153436732191675,
            "example_similarity": 0.6456916689378565,
            "db_id": "concert_singer",
            "pred": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 28,
            "question": "What is the year that had the most concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the status of the city that has hosted the most competitions? */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the year that had the most concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 40,
                    "db_id": "farm",
                    "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the status of the city that has hosted the most competitions?"
                }
            ],
            "example_quality": 0.4083671134613401,
            "example_similarity": 0.6440598236186473,
            "db_id": "concert_singer",
            "pred": "SELECT T1.Year FROM concert AS T1 GROUP BY T1.Year ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 29,
            "question": "Show the stadium names without any concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the school name and type for schools without a school bus. */\nSELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium names without any concert. */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6362,
                    "db_id": "school_bus",
                    "query": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
                    "question": "Show the school name and type for schools without a school bus."
                }
            ],
            "example_quality": 0.42187169575577665,
            "example_similarity": 0.6390922434938664,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
            "correct": 1
        },
        {
            "index": 30,
            "question": "What are the names of the stadiums without any concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the main industries of the companies without gas stations and what are the companies? */\nSELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the stadiums without any concerts? */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2027,
                    "db_id": "gas_company",
                    "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
                    "question": "What are the main industries of the companies without gas stations and what are the companies?"
                }
            ],
            "example_quality": 0.43447597256391746,
            "example_similarity": 0.636307687229256,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
            "correct": 1
        },
        {
            "index": 31,
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show countries where a singer above age 40 and a singer below 30 are from. */\nSELECT ",
            "response": "country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 231,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
                    "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000."
                }
            ],
            "example_quality": 0.45271868312637176,
            "example_similarity": 0.6269478859042429,
            "db_id": "concert_singer",
            "pred": "SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30",
            "correct": 1
        },
        {
            "index": 32,
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of buildings except for those having an institution founded in 2003. */\nSELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show names for all stadiums except for stadiums having a concert in year 2014. */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1922,
                    "db_id": "protein_institute",
                    "query": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003",
                    "question": "Show the names of buildings except for those having an institution founded in 2003."
                }
            ],
            "example_quality": 0.4672170576120058,
            "example_similarity": 0.6254478697328929,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')",
            "correct": 1
        },
        {
            "index": 33,
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of all stadiums that did not have a concert in 2014? */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                }
            ],
            "example_quality": 0.45575256765069927,
            "example_similarity": 0.627228556296011,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')",
            "correct": 1
        },
        {
            "index": 34,
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and theme for all concerts and the number of singers in each concert. */\nSELECT ",
            "response": "T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 416,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
                    "question": "Show aircraft names and number of flights for each aircraft."
                }
            ],
            "example_quality": 0.46250618313365355,
            "example_similarity": 0.6278117994499346,
            "db_id": "concert_singer",
            "pred": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme",
            "correct": 1
        },
        {
            "index": 35,
            "question": "What are the names , themes , and number of singers for every concert ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the number of rooms for each bed type? */\nSELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names , themes , and number of singers for every concert ? */\nSELECT ",
            "response": "t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2612,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
                    "question": "What are the number of rooms for each bed type?"
                }
            ],
            "example_quality": 0.45092712239380794,
            "example_similarity": 0.6277314623227936,
            "db_id": "concert_singer",
            "pred": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme;",
            "correct": 1
        },
        {
            "index": 36,
            "question": "List singer names and number of concerts for each singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all publishers and the number of books for each publisher. */\nSELECT publisher ,  count(*) FROM book_club GROUP BY publisher\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List singer names and number of concerts for each singer. */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6971,
                    "db_id": "culture_company",
                    "query": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
                    "question": "Show all publishers and the number of books for each publisher."
                }
            ],
            "example_quality": 0.44346309738904166,
            "example_similarity": 0.6281516201154145,
            "db_id": "concert_singer",
            "pred": "SELECT s.\"Name\", count(c.\"concert_ID\") FROM singer s JOIN singer_in_concert sic ON s.\"Singer_ID\" = sic.\"Singer_ID\" JOIN concert c ON sic.\"concert_ID\" = c.\"concert_ID\" GROUP BY s.\"Name\"",
            "correct": 1
        },
        {
            "index": 37,
            "question": "What are the names of the singers and number of concerts for each person?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the number of rooms for each bed type? */\nSELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers and number of concerts for each person? */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2612,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
                    "question": "What are the number of rooms for each bed type?"
                }
            ],
            "example_quality": 0.4364025331953438,
            "example_similarity": 0.6309943691213041,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, COUNT(sc.concert_ID) AS num_concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name;",
            "correct": 1
        },
        {
            "index": 38,
            "question": "List all singer names in concerts in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all stores in Khanewal District. */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all singer names in concerts in year 2014. */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4917,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
                    "question": "Find the names of all stores in Khanewal District."
                }
            ],
            "example_quality": 0.44421650162002774,
            "example_similarity": 0.6256674496331495,
            "db_id": "concert_singer",
            "pred": "SELECT t2.Name FROM singer AS t2 JOIN singer_in_concert AS t1 ON t1.Singer_ID = t2.Singer_ID JOIN concert AS t3 ON t1.concert_ID = t3.concert_ID WHERE t3.Year = \"2014\"",
            "correct": 1
        },
        {
            "index": 39,
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of festivals held in year 2007? */\nSELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who performed in a concert in 2014? */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4605,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007",
                    "question": "What are the names of festivals held in year 2007?"
                }
            ],
            "example_quality": 0.4351650218658935,
            "example_similarity": 0.6256503355399918,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014;",
            "correct": 1
        },
        {
            "index": 40,
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which paper's title contains the word \"Database\"? */\nSELECT title FROM papers WHERE title LIKE \"%Database%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: what is the name and nation of the singer who have a song having 'Hey' in its name? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2907,
                    "db_id": "icfp_1",
                    "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
                    "question": "Which paper's title contains the word \"Database\"?"
                }
            ],
            "example_quality": 0.4391343811677311,
            "example_similarity": 0.6146387067811216,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country FROM singer WHERE Song_Name LIKE \"%Hey%\"",
            "correct": 1
        },
        {
            "index": 41,
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"? */\nSELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4152,
                    "db_id": "film_rank",
                    "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
                    "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?"
                }
            ],
            "example_quality": 0.44837944060709906,
            "example_similarity": 0.6071000933365956,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country FROM singer WHERE Song_Name LIKE \"%Hey%\"",
            "correct": 1
        },
        {
            "index": 42,
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the storm that affected both Afghanistan and Albania regions. */\nSELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2733,
                    "db_id": "storm_record",
                    "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
                    "question": "Find the name of the storm that affected both Afghanistan and Albania regions."
                }
            ],
            "example_quality": 0.4454450640181158,
            "example_similarity": 0.6067145932787978,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' AND s.Stadium_ID IN (SELECT s.Stadium_ID FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015')",
            "correct": 1
        },
        {
            "index": 43,
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6268,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'",
                    "question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?"
                }
            ],
            "example_quality": 0.4492561363730113,
            "example_similarity": 0.604232858551384,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' INTERSECT SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015'",
            "correct": 1
        },
        {
            "index": 44,
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers are in the state with the highest point. */\nSELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the number of concerts happened in the stadium with the highest capacity . */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7562,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
                    "question": "how many rivers are in the state with the highest point."
                }
            ],
            "example_quality": 0.43972467821090644,
            "example_similarity": 0.6025323791458045,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));",
            "correct": 1
        },
        {
            "index": 45,
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average age of students who are living in the dorm with the largest capacity? */\nSELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the number of concerts that occurred in the stadium with the largest capacity ? */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5746,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
                    "question": "What is the average age of students who are living in the dorm with the largest capacity?"
                }
            ],
            "example_quality": 0.43039598657993683,
            "example_similarity": 0.6028993844769559,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT max(Capacity) FROM stadium))",
            "correct": 1
        },
        {
            "index": 46,
            "question": "Find the number of pets whose weight is heavier than 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes whose destination airports are in Canada. */\nSELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets whose weight is heavier than 10. */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6828,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
                    "question": "Find the number of routes whose destination airports are in Canada."
                }
            ],
            "example_quality": 0.4236275438074952,
            "example_similarity": 0.6028363543796308,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Pets WHERE weight > 10",
            "correct": 1
        },
        {
            "index": 47,
            "question": "How many pets have a greater weight than 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many flights have a velocity larger than 200? */\nSELECT count(*) FROM flight WHERE velocity  >  200\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets have a greater weight than 10? */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6367,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) FROM flight WHERE velocity  >  200",
                    "question": "How many flights have a velocity larger than 200?"
                }
            ],
            "example_quality": 0.43589078755627186,
            "example_similarity": 0.6074181727584007,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Pets WHERE weight > 10",
            "correct": 1
        },
        {
            "index": 48,
            "question": "Find the weight of the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the team that attended the least number of home games in 1980. */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the weight of the youngest dog. */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3703,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
                    "question": "Find the team that attended the least number of home games in 1980."
                }
            ],
            "example_quality": 0.4287328064052598,
            "example_similarity": 0.6044858497148229,
            "db_id": "pets_1",
            "pred": "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');",
            "correct": 1
        },
        {
            "index": 49,
            "question": "How much does the youngest dog weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which team had the least number of attendances in home games in 1980? */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How much does the youngest dog weigh? */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3702,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
                    "question": "Which team had the least number of attendances in home games in 1980?"
                }
            ],
            "example_quality": 0.42186698775020737,
            "example_similarity": 0.5953717453704818,
            "db_id": "pets_1",
            "pred": "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');",
            "correct": 1
        },
        {
            "index": 50,
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the maximum weight for each type of pet. List the maximum weight and pet type. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                }
            ],
            "example_quality": 0.4154751025406578,
            "example_similarity": 0.5910833580821196,
            "db_id": "pets_1",
            "pred": "SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 51,
            "question": "List the maximum weight and type for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: List the maximum weight and type for each type of pet. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                }
            ],
            "example_quality": 0.40933387949618855,
            "example_similarity": 0.5880719196883526,
            "db_id": "pets_1",
            "pred": "SELECT T2.PetType, MAX(T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T3 ON T1.PetID = T3.PetID GROUP BY T1.PetType",
            "correct": 0
        },
        {
            "index": 52,
            "question": "Find number of pets owned by students who are older than 20.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of distinct products Rodrick Heaney has bought so far. */\nSELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find number of pets owned by students who are older than 20. */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6115,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
                    "question": "Find the number of distinct products Rodrick Heaney has bought so far."
                }
            ],
            "example_quality": 0.40660689119443255,
            "example_similarity": 0.5838478645526455,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20",
            "correct": 1
        },
        {
            "index": 53,
            "question": "How many pets are owned by students that have an age greater than 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets are owned by students that have an age greater than 20? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                }
            ],
            "example_quality": 0.401184700213986,
            "example_similarity": 0.583314047401757,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
            "correct": 1
        },
        {
            "index": 54,
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of female students (with F sex) living in Smith Hall */\nSELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of dog pets that are raised by female students (with sex F). */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5749,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
                    "question": "Find the number of female students (with F sex) living in Smith Hall"
                }
            ],
            "example_quality": 0.40995905761743073,
            "example_similarity": 0.5845489724498726,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'",
            "correct": 1
        },
        {
            "index": 55,
            "question": "How many dog pets are raised by female students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many female students live in Smith Hall? */\nSELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many dog pets are raised by female students? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5750,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
                    "question": "How many female students live in Smith Hall?"
                }
            ],
            "example_quality": 0.41841434747893197,
            "example_similarity": 0.584526869920481,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'Dog'",
            "correct": 0
        },
        {
            "index": 56,
            "question": "Find the number of distinct type of pets.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find how many different affiliation types there are. */\nSELECT count(DISTINCT affiliation) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of distinct type of pets. */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1008,
                    "db_id": "university_basketball",
                    "query": "SELECT count(DISTINCT affiliation) FROM university",
                    "question": "Find how many different affiliation types there are."
                }
            ],
            "example_quality": 0.4287998055596654,
            "example_similarity": 0.5776603186719009,
            "db_id": "pets_1",
            "pred": "SELECT count(DISTINCT PetType) FROM Pets",
            "correct": 1
        },
        {
            "index": 57,
            "question": "How many different types of pet are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different types of transactions are there? */\nSELECT count(DISTINCT transaction_type) FROM Financial_Transactions\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many different types of pet are there? */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 737,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
                    "question": "How many different types of transactions are there?"
                }
            ],
            "example_quality": 0.4388208616024783,
            "example_similarity": 0.5850697867653764,
            "db_id": "pets_1",
            "pred": "SELECT count(DISTINCT PetType) FROM Pets",
            "correct": 1
        },
        {
            "index": 58,
            "question": "Find the first name of students who have cat or dog pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of users who are followed by Mary or Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have cat or dog pet. */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 290,
                    "db_id": "twitter_1",
                    "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"",
                    "question": "Find the id of users who are followed by Mary or Susan."
                }
            ],
            "example_quality": 0.4385529001761182,
            "example_similarity": 0.5876260548096515,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"cat\" OR PetType = \"dog\"))",
            "correct": 0
        },
        {
            "index": 59,
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the first names of every student who has a cat or dog as a pet? */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                }
            ],
            "example_quality": 0.43183671326364886,
            "example_similarity": 0.5851239182874539,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))",
            "correct": 0
        },
        {
            "index": 60,
            "question": "Find the first name of students who have both cat and dog pets .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of users who are followed by Mary and Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have both cat and dog pets . */\nSELECT ",
            "response": "t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 289,
                    "db_id": "twitter_1",
                    "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
                    "question": "Find the id of users who are followed by Mary and Susan."
                }
            ],
            "example_quality": 0.42876204577899907,
            "example_similarity": 0.5868301863159964,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) )",
            "correct": 1
        },
        {
            "index": 61,
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tourist attractions that have parking or shopping as their feature details? */\nSELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the students' first names who have both cats and dogs as pets? */\nSELECT ",
            "response": "T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5960,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
                    "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?"
                }
            ],
            "example_quality": 0.4373196115591548,
            "example_similarity": 0.5861518971215464,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) )",
            "correct": 1
        },
        {
            "index": 62,
            "question": "Find the major and age of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the major and age of students who do not have a cat pet. */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                }
            ],
            "example_quality": 0.4324732001672838,
            "example_similarity": 0.5868845914803669,
            "db_id": "pets_1",
            "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Cat\"))",
            "correct": 0
        },
        {
            "index": 63,
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the famous titles of artists who do not have any volumes? */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What major is every student who does not own a cat as a pet, and also how old are they? */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6191,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
                    "question": "What are the famous titles of artists who do not have any volumes?"
                }
            ],
            "example_quality": 0.4266396138941089,
            "example_similarity": 0.582859968335176,
            "db_id": "pets_1",
            "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 1
        },
        {
            "index": 64,
            "question": "Find the id of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of scientists who are not assigned to any project. */\nSELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of students who do not have a cat pet. */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6508,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "Find the name of scientists who are not assigned to any project."
                }
            ],
            "example_quality": 0.42078202432609335,
            "example_similarity": 0.5820248401534682,
            "db_id": "pets_1",
            "pred": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 1
        },
        {
            "index": 65,
            "question": "What are the ids of the students who do not own cats as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and first names of customers who do not hold a credit card? */\nSELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the ids of the students who do not own cats as pets? */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 729,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
                    "question": "What are the ids and first names of customers who do not hold a credit card?"
                }
            ],
            "example_quality": 0.4203649858839906,
            "example_similarity": 0.5823013810741842,
            "db_id": "pets_1",
            "pred": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Cat\"))",
            "correct": 0
        },
        {
            "index": 66,
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last and first name of students who are playing Football or Lacrosse. */\nSELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a dog but do not have a cat as a pet. */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6050,
                    "db_id": "game_1",
                    "query": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
                    "question": "Find the last and first name of students who are playing Football or Lacrosse."
                }
            ],
            "example_quality": 0.4161829771529992,
            "example_similarity": 0.5816857035831611,
            "db_id": "pets_1",
            "pred": "SELECT T1.fname, T1.age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Dog\" AND T1.StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\")",
            "correct": 0
        },
        {
            "index": 67,
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the cities that have a branch that opened in 2001 and a branch with more than 100 members? */\nSELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name of every student who has a dog but does not have a cat? */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5434,
                    "db_id": "shop_membership",
                    "query": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
                    "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?"
                }
            ],
            "example_quality": 0.4103927528941071,
            "example_similarity": 0.5786651758405406,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 0
        },
        {
            "index": 68,
            "question": "Find the type and weight of the youngest pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name and age of the youngest winning pilot? */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the type and weight of the youngest pet. */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4840,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
                    "question": "what is the name and age of the youngest winning pilot?"
                }
            ],
            "example_quality": 0.4063489869201741,
            "example_similarity": 0.5770181389409248,
            "db_id": "pets_1",
            "pred": "SELECT t2.PetType, t2.weight FROM Has_Pet AS t1 JOIN Pets AS t2 ON t1.PetID = t2.PetID ORDER BY t2.pet_age LIMIT 1",
            "correct": 1
        },
        {
            "index": 69,
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name and age of the youngest winning pilot? */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What type of pet is the youngest animal, and how much does it weigh? */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4840,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
                    "question": "what is the name and age of the youngest winning pilot?"
                }
            ],
            "example_quality": 0.4024224315541813,
            "example_similarity": 0.5744526586664186,
            "db_id": "pets_1",
            "pred": "SELECT t2.PetType, t2.weight FROM Has_Pet AS t1 JOIN Pets AS t2 ON t1.PetID = t2.PetID ORDER BY t2.pet_age LIMIT 1",
            "correct": 1
        },
        {
            "index": 70,
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name of students who is older than 20. */\nSELECT fname FROM student WHERE age  >  20\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id and weight of all pets whose age is older than 1. */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5675,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE age  >  20",
                    "question": "Find the first name of students who is older than 20."
                }
            ],
            "example_quality": 0.40734020634150253,
            "example_similarity": 0.5760676206854698,
            "db_id": "pets_1",
            "pred": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
            "correct": 1
        },
        {
            "index": 71,
            "question": "What is the id and weight of every pet who is older than 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students who are older than 20? */\nSELECT fname FROM student WHERE age  >  20\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id and weight of every pet who is older than 1? */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5676,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE age  >  20",
                    "question": "What are the first names of all students who are older than 20?"
                }
            ],
            "example_quality": 0.41211945226157526,
            "example_similarity": 0.5753668906684024,
            "db_id": "pets_1",
            "pred": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
            "correct": 1
        },
        {
            "index": 72,
            "question": "Find the average and maximum age for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average and maximum age for each type of pet. */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                }
            ],
            "example_quality": 0.4202844598690534,
            "example_similarity": 0.5757090171868968,
            "db_id": "pets_1",
            "pred": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 73,
            "question": "What is the average and maximum age for each pet type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average and minimum weights for people of each sex? */\nSELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average and maximum age for each pet type? */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2414,
                    "db_id": "candidate_poll",
                    "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",
                    "question": "What are the average and minimum weights for people of each sex?"
                }
            ],
            "example_quality": 0.42594266361513944,
            "example_similarity": 0.5769550123852498,
            "db_id": "pets_1",
            "pred": "SELECT avg(pet_age), max(pet_age), PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 74,
            "question": "Find the average weight for each pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each bed type, find the average base price of different bed type. */\nSELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average weight for each pet type. */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2598,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
                    "question": "For each bed type, find the average base price of different bed type."
                }
            ],
            "example_quality": 0.4260078874956001,
            "example_similarity": 0.5772664311368005,
            "db_id": "pets_1",
            "pred": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;",
            "correct": 1
        },
        {
            "index": 75,
            "question": "What is the average weight for each type of pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average age for each gender? */\nSELECT avg(age) ,  gender FROM Person GROUP BY gender\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average weight for each type of pet? */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4421,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender",
                    "question": "What is the average age for each gender?"
                }
            ],
            "example_quality": 0.4336611156623254,
            "example_similarity": 0.5804786362974008,
            "db_id": "pets_1",
            "pred": "SELECT avg(weight), PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 76,
            "question": "Find the first name and age of students who have a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of nurses who are nursing an undergoing treatment. */\nSELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a pet. */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3955,
                    "db_id": "hospital_1",
                    "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
                    "question": "Find the names of nurses who are nursing an undergoing treatment."
                }
            ],
            "example_quality": 0.43591476245104394,
            "example_similarity": 0.5816126893285753,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
            "correct": 0
        },
        {
            "index": 77,
            "question": "What are the different first names and ages of the students who do have pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct last names of the students who have class president votes? */\nSELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the different first names and ages of the students who do have pets? */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5474,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
                    "question": "What are the distinct last names of the students who have class president votes?"
                }
            ],
            "example_quality": 0.4391661877413411,
            "example_similarity": 0.583438787158363,
            "db_id": "pets_1",
            "pred": "SELECT T1.FName, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID",
            "correct": 1
        },
        {
            "index": 78,
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first and last name of students who are living in the dorms that have amenity TV Lounge. */\nSELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5763,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                    "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge."
                }
            ],
            "example_quality": 0.4359396981549136,
            "example_similarity": 0.5807071407892861,
            "db_id": "pets_1",
            "pred": "SELECT T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'",
            "correct": 1
        },
        {
            "index": 79,
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and salary of the employee with the id 242518965? */\nSELECT name ,  salary FROM Employee WHERE eid  =  242518965\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id of the pet owned by the student whose last name is 'Smith'? */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 371,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
                    "question": "What is the name and salary of the employee with the id 242518965?"
                }
            ],
            "example_quality": 0.43191530225877867,
            "example_similarity": 0.5805896905442137,
            "db_id": "pets_1",
            "pred": "SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'",
            "correct": 1
        },
        {
            "index": 80,
            "question": "Find the number of pets for each student who has any pet and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students for the cities where have more than one student. */\nSELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets for each student who has any pet and student id. */\nSELECT ",
            "response": "count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5731,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",
                    "question": "Find the number of students for the cities where have more than one student."
                }
            ],
            "example_quality": 0.4283130276472106,
            "example_similarity": 0.5784459557760474,
            "db_id": "pets_1",
            "pred": "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS num_pets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;",
            "correct": 1
        },
        {
            "index": 81,
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in. */\nSELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: For students who have pets , how many pets does each student have ? list their ids instead of names . */\nSELECT ",
            "response": "count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6781,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
                    "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in."
                }
            ],
            "example_quality": 0.4262402330672038,
            "example_similarity": 0.574749953450934,
            "db_id": "pets_1",
            "pred": "SELECT Student.StuID, COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID",
            "correct": 1
        },
        {
            "index": 82,
            "question": "Find the first name and gender of student who have more than one pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and gender of student who have more than one pet. */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                }
            ],
            "example_quality": 0.4296925879484981,
            "example_similarity": 0.5774969052381177,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 )",
            "correct": 1
        },
        {
            "index": 83,
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of students who have more than one advisor? */\nSELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name and gender of the all the students who have more than one pet? */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1392,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
                    "question": "What are the names of students who have more than one advisor?"
                }
            ],
            "example_quality": 0.43388638541632074,
            "example_similarity": 0.5777680268617549,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)",
            "correct": 1
        },
        {
            "index": 84,
            "question": "Find the last name of the student who has a cat that is age 3.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the last name of the student who has a cat that is age 3. */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                }
            ],
            "example_quality": 0.42932953691268727,
            "example_similarity": 0.5771256637301807,
            "db_id": "pets_1",
            "pred": "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3))",
            "correct": 1
        },
        {
            "index": 85,
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How old is the doctor named Zach? */\nSELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the last name of the student who has a cat that is 3 years old? */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4415,
                    "db_id": "network_2",
                    "query": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
                    "question": "How old is the doctor named Zach?"
                }
            ],
            "example_quality": 0.4255704120262866,
            "example_similarity": 0.5746703153643148,
            "db_id": "pets_1",
            "pred": "SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3",
            "correct": 1
        },
        {
            "index": 86,
            "question": "Find the average age of students who do not have any pet .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average credit score of the customers who do not have any loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average age of students who do not have any pet . */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3085,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who do not have any loan."
                }
            ],
            "example_quality": 0.42368189438338605,
            "example_similarity": 0.5780656217748074,
            "db_id": "pets_1",
            "pred": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
            "correct": 1
        },
        {
            "index": 87,
            "question": "What is the average age for all students who do not own any pets ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents do not have any expense? */\nSELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average age for all students who do not own any pets ? */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6464,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                    "question": "How many documents do not have any expense?"
                }
            ],
            "example_quality": 0.4192142864019678,
            "example_similarity": 0.5744459927283939,
            "db_id": "pets_1",
            "pred": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
            "correct": 1
        },
        {
            "index": 88,
            "question": "How many continents are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many continents are there? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.41950099274335967,
            "example_similarity": 0.5792818337201168,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM continents;",
            "correct": 1
        },
        {
            "index": 89,
            "question": "What is the number of continents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of employees? */\nSELECT count(*) FROM Employee\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of continents? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 363,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Employee",
                    "question": "What is the number of employees?"
                }
            ],
            "example_quality": 0.42602345349905224,
            "example_similarity": 0.5840090041277558,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM continents",
            "correct": 1
        },
        {
            "index": 90,
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries does each continent have? List the continent id, continent name and the number of countries. */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                }
            ],
            "example_quality": 0.43139086967229506,
            "example_similarity": 0.5871159747889626,
            "db_id": "car_1",
            "pred": "SELECT T1.ContId, T1.Continent, count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent",
            "correct": 1
        },
        {
            "index": 91,
            "question": "For each continent, list its id, name, and how many countries it has?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For each continent, list its id, name, and how many countries it has? */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                }
            ],
            "example_quality": 0.43664032065491715,
            "example_similarity": 0.585938876164908,
            "db_id": "car_1",
            "pred": "SELECT T1.ContId, T1.Continent, count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "correct": 1
        },
        {
            "index": 92,
            "question": "How many countries are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many reviewers listed? */\nSELECT count(*) FROM Reviewer\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries are listed? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2443,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Reviewer",
                    "question": "How many reviewers listed?"
                }
            ],
            "example_quality": 0.44276379543040717,
            "example_similarity": 0.5886279463515214,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM countries",
            "correct": 1
        },
        {
            "index": 93,
            "question": "How many countries exist?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students exist? */\nSELECT count(*) FROM student\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries exist? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5686,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student",
                    "question": "How many students exist?"
                }
            ],
            "example_quality": 0.4487555825763168,
            "example_similarity": 0.5930513017670964,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM countries",
            "correct": 1
        },
        {
            "index": 94,
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets does each third party company supply? List the count and the company id. */\nSELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many models does each car maker produce? List maker full name, id and the number. */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3129,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
                    "question": "How many assets does each third party company supply? List the count and the company id."
                }
            ],
            "example_quality": 0.45012815912101317,
            "example_similarity": 0.5939956302782782,
            "db_id": "car_1",
            "pred": "SELECT c.FullName, c.Id, COUNT(m.ModelId) AS NumberOfModels FROM car_makers c JOIN model_list m ON c.Id = m.Maker GROUP BY c.FullName, c.Id",
            "correct": 1
        },
        {
            "index": 95,
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the studios of each film and the number of films produced by that studio. */\nSELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the full name of each car maker, along with its id and how many models it produces? */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4141,
                    "db_id": "film_rank",
                    "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
                    "question": "List the studios of each film and the number of films produced by that studio."
                }
            ],
            "example_quality": 0.44704033895912637,
            "example_similarity": 0.5911265033430181,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
            "correct": 1
        },
        {
            "index": 96,
            "question": "Which model of the car has the minimum horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which school has the smallest amount of professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model of the car has the minimum horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3214,
                    "db_id": "college_1",
                    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
                    "question": "Which school has the smallest amount of professors?"
                }
            ],
            "example_quality": 0.4480086687616356,
            "example_similarity": 0.5910453244887505,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.MakeId JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Horsepower LIMIT 1",
            "correct": 0
        },
        {
            "index": 97,
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the area of the state with the smallest population density */\nSELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model of the car with the smallest amount of horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7207,
                    "db_id": "geo",
                    "query": "SELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
                    "question": "what is the area of the state with the smallest population density"
                }
            ],
            "example_quality": 0.4438705502916191,
            "example_similarity": 0.5925122111778699,
            "db_id": "car_1",
            "pred": "SELECT Model FROM car_names WHERE MakeId = (SELECT MakeId FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data));",
            "correct": 0
        },
        {
            "index": 98,
            "question": "Find the model of the car whose weight is below the average weight.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the checking balance of the accounts whose savings balance is higher than the average savings balance. */\nSELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the model of the car whose weight is below the average weight. */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1795,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
                    "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance."
                }
            ],
            "example_quality": 0.44139424110877173,
            "example_similarity": 0.5934479082711139,
            "db_id": "car_1",
            "pred": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Weight < (SELECT AVG(Weight) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 99,
            "question": "What is the model for the car with a weight smaller than the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what rivers flow through states that border the state with the largest population */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model for the car with a weight smaller than the average? */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7522,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
                    "question": "what rivers flow through states that border the state with the largest population"
                }
            ],
            "example_quality": 0.43764278412787505,
            "example_similarity": 0.5908204883222475,
            "db_id": "car_1",
            "pred": "SELECT Model FROM model_list WHERE ModelId IN (SELECT MakeId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data));",
            "correct": 0
        },
        {
            "index": 100,
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the person who has friends with age above 40 and under age 30? */\nSELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the name of the makers that produced some cars in the year of 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4445,
                    "db_id": "network_2",
                    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
                    "question": "Find the name of the person who has friends with age above 40 and under age 30?"
                }
            ],
            "example_quality": 0.43486921157536984,
            "example_similarity": 0.5885122834390251,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;",
            "correct": 0
        },
        {
            "index": 101,
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department in the Building Mergenthaler? */\nSELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the different car makers who produced a car in 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4659,
                    "db_id": "college_3",
                    "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"",
                    "question": "What is the name of the department in the Building Mergenthaler?"
                }
            ],
            "example_quality": 0.4311564001723985,
            "example_similarity": 0.5890919521527913,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;",
            "correct": 0
        },
        {
            "index": 102,
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the make and production time of the cars that were produced in the earliest year? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 999,
                    "db_id": "university_basketball",
                    "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
                    "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
                }
            ],
            "example_quality": 0.4273516994165605,
            "example_similarity": 0.5869930114454109,
            "db_id": "car_1",
            "pred": "SELECT Make, Year FROM cars_data WHERE Year = (SELECT MIN(Year) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 103,
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maker of the carr produced in the earliest year and what year was it? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 999,
                    "db_id": "university_basketball",
                    "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
                    "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
                }
            ],
            "example_quality": 0.4236208763453019,
            "example_similarity": 0.5859373595824965,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year LIMIT 1",
            "correct": 0
        },
        {
            "index": 104,
            "question": "Which distinct car models are the produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct president votes on 08/30/2015? */\nSELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinct car models are the produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5467,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
                    "question": "What are the distinct president votes on 08/30/2015?"
                }
            ],
            "example_quality": 0.42042001895079967,
            "example_similarity": 0.5859123208685622,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent IN (SELECT ContId FROM continents WHERE Continent = \"Europe\"))) AND Year > 1980;",
            "correct": 0
        },
        {
            "index": 105,
            "question": "What are the different models for the cards produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles and authors or editors that correspond to books made after 1989? */\nSELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models for the cards produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6966,
                    "db_id": "culture_company",
                    "query": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
                    "question": "What are the titles and authors or editors that correspond to books made after 1989?"
                }
            ],
            "example_quality": 0.4172162885241655,
            "example_similarity": 0.58350680670156,
            "db_id": "car_1",
            "pred": "SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent IN (SELECT ContId FROM continents WHERE Continent = 'Europe'))) AND Year > 1980",
            "correct": 0
        },
        {
            "index": 106,
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many hosts does each nationality have? List the nationality and the count. */\nSELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in each continents? List the continent name and the count. */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2674,
                    "db_id": "party_host",
                    "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",
                    "question": "How many hosts does each nationality have? List the nationality and the count."
                }
            ],
            "example_quality": 0.41431334037481504,
            "example_similarity": 0.5841341009779604,
            "db_id": "car_1",
            "pred": "SELECT c.Continent, COUNT(cm.Id) FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent",
            "correct": 1
        },
        {
            "index": 107,
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of each continent and how many car makers are there in each one? */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                }
            ],
            "example_quality": 0.414434870587861,
            "example_similarity": 0.5824824496361795,
            "db_id": "car_1",
            "pred": "SELECT T1.Continent, count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "correct": 1
        },
        {
            "index": 108,
            "question": "Which of the countries has the most car makers? List the country name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer have the most policies? Give me the customer details. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which of the countries has the most car makers? List the country name. */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1541,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer have the most policies? Give me the customer details."
                }
            ],
            "example_quality": 0.41837528845278826,
            "example_similarity": 0.5822331265428404,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 109,
            "question": "What is the name of the country with the most car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department with the most students enrolled? */\nSELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the country with the most car makers? */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3255,
                    "db_id": "college_1",
                    "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the department with the most students enrolled?"
                }
            ],
            "example_quality": 0.4171894201757764,
            "example_similarity": 0.5860658501525391,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId ORDER BY COUNT(car_makers.Id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 110,
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets does each third party company supply? List the count and the company id. */\nSELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced by each maker ? Only list the count and the maker full name . */\nSELECT ",
            "response": "count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3129,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
                    "question": "How many assets does each third party company supply? List the count and the company id."
                }
            ],
            "example_quality": 0.4162181056976894,
            "example_similarity": 0.5873495490354499,
            "db_id": "car_1",
            "pred": "SELECT COUNT(DISTINCT ML.ModelId) AS ModelCount, CM.FullName FROM car_makers CM JOIN model_list ML ON CM.Id = ML.Maker GROUP BY CM.FullName",
            "correct": 1
        },
        {
            "index": 111,
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the studios of each film and the number of films produced by that studio. */\nSELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models that are produced by each maker and what is the id and full name of each maker? */\nSELECT ",
            "response": "Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4141,
                    "db_id": "film_rank",
                    "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
                    "question": "List the studios of each film and the number of films produced by that studio."
                }
            ],
            "example_quality": 0.4137313160357997,
            "example_similarity": 0.5867294496614235,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName",
            "correct": 1
        },
        {
            "index": 112,
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the course title of the prerequisite of course Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the accelerate of the car make amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1437,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the course title of the prerequisite of course Mobile Computing?"
                }
            ],
            "example_quality": 0.4137409901320409,
            "example_similarity": 0.5881872224323036,
            "db_id": "car_1",
            "pred": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
            "correct": 0
        },
        {
            "index": 113,
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the course title of the prerequisite of course Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How much does the car accelerate that makes amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1437,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the course title of the prerequisite of course Mobile Computing?"
                }
            ],
            "example_quality": 0.4137504930053398,
            "example_similarity": 0.5865218487824603,
            "db_id": "car_1",
            "pred": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
            "correct": 0
        },
        {
            "index": 114,
            "question": "How many car makers are there in france?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in france? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                }
            ],
            "example_quality": 0.4179696715062163,
            "example_similarity": 0.5891741912395342,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = \"France\"",
            "correct": 0
        },
        {
            "index": 115,
            "question": "What is the number of makers of care in France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many drivers did not race in 2009? */\nSELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of makers of care in France? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2175,
                    "db_id": "formula_1",
                    "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
                    "question": "How many drivers did not race in 2009?"
                }
            ],
            "example_quality": 0.41490618047368377,
            "example_similarity": 0.5862248504461469,
            "db_id": "car_1",
            "pred": "SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
            "correct": 0
        },
        {
            "index": 116,
            "question": "How many car models are produced in the usa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced in the usa? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                }
            ],
            "example_quality": 0.41196306058601645,
            "example_similarity": 0.5848657692230891,
            "db_id": "car_1",
            "pred": "SELECT COUNT(DISTINCT Model) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = 'USA');",
            "correct": 0
        },
        {
            "index": 117,
            "question": "What is the count of the car models produced in the United States?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the count of the car models produced in the United States? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                }
            ],
            "example_quality": 0.4090702504400187,
            "example_similarity": 0.5849951216228917,
            "db_id": "car_1",
            "pred": "SELECT COUNT(DISTINCT Model) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = 'United States');",
            "correct": 0
        },
        {
            "index": 118,
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for flights from LA to Honolulu? */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon(mpg) of the cars with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 395,
                    "db_id": "flight_1",
                    "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                    "question": "What is the average price for flights from LA to Honolulu?"
                }
            ],
            "example_quality": 0.4090930848081741,
            "example_similarity": 0.5832659458544975,
            "db_id": "car_1",
            "pred": "SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4",
            "correct": 1
        },
        {
            "index": 119,
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of customers across banks in the state of Utah? */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon of all the cards with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3014,
                    "db_id": "loan_1",
                    "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
                    "question": "What is the average number of customers across banks in the state of Utah?"
                }
            ],
            "example_quality": 0.41219127550539764,
            "example_similarity": 0.581965991927749,
            "db_id": "car_1",
            "pred": "SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4",
            "correct": 1
        },
        {
            "index": 120,
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. */\nSELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the smallest weight of the car produced with 8 cylinders on 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5855,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50",
                    "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50."
                }
            ],
            "example_quality": 0.4109493306656596,
            "example_similarity": 0.5790607197727956,
            "db_id": "car_1",
            "pred": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
            "correct": 1
        },
        {
            "index": 121,
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. */\nSELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the minimum weight of the car with 8 cylinders produced in 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5855,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50",
                    "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50."
                }
            ],
            "example_quality": 0.40972791383980156,
            "example_similarity": 0.5765549457991818,
            "db_id": "car_1",
            "pred": "SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
            "correct": 1
        },
        {
            "index": 122,
            "question": "What are all the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the calendar dates and day Numbers? */\nSELECT calendar_date ,  day_Number FROM Ref_calendar\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are all the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4164,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar",
                    "question": "What are all the calendar dates and day Numbers?"
                }
            ],
            "example_quality": 0.41456620962799995,
            "example_similarity": 0.5783864626368933,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;",
            "correct": 0
        },
        {
            "index": 123,
            "question": "What are the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions for the aircrafts? */\nSELECT Description FROM aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4801,
                    "db_id": "aircraft",
                    "query": "SELECT Description FROM aircraft",
                    "question": "What are the descriptions for the aircrafts?"
                }
            ],
            "example_quality": 0.41607380141964223,
            "example_similarity": 0.5791041878729078,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;",
            "correct": 0
        },
        {
            "index": 124,
            "question": "What are the countries having at least one car maker? List name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the countries that have more than one mountain. */\nSELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the countries having at least one car maker? List name and id. */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1141,
                    "db_id": "climbing",
                    "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
                    "question": "List the countries that have more than one mountain."
                }
            ],
            "example_quality": 0.4140969173028723,
            "example_similarity": 0.5768533476481262,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;",
            "correct": 0
        },
        {
            "index": 125,
            "question": "What are the names and ids of all countries with at least one car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of parties with at least 2 events? */\nSELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all countries with at least one car maker? */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2076,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
                    "question": "What are the names of parties with at least 2 events?"
                }
            ],
            "example_quality": 0.41645880863111595,
            "example_similarity": 0.5782385208669413,
            "db_id": "car_1",
            "pred": "SELECT T2.CountryId, T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryId HAVING COUNT(DISTINCT T1.Id) >= 1",
            "correct": 1
        },
        {
            "index": 126,
            "question": "What is the number of the cars with horsepower more than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of purchases for members with level 6? */\nSELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of the cars with horsepower more than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5439,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
                    "question": "What is the total number of purchases for members with level 6?"
                }
            ],
            "example_quality": 0.4142590221680572,
            "example_similarity": 0.5786096437172036,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
            "correct": 1
        },
        {
            "index": 127,
            "question": "What is the number of cars with a horsepower greater than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of professors with a Ph.D. ? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a horsepower greater than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3251,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
                    "question": "What is the total number of professors with a Ph.D. ?"
                }
            ],
            "example_quality": 0.4157215495525607,
            "example_similarity": 0.5796779592334911,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
            "correct": 1
        },
        {
            "index": 128,
            "question": "What is the average weight of cars each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average rating of songs for each language? */\nSELECT avg(rating) ,  languages FROM song GROUP BY languages\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight of cars each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3564,
                    "db_id": "music_1",
                    "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
                    "question": "What is the average rating of songs for each language?"
                }
            ],
            "example_quality": 0.41744531585577227,
            "example_similarity": 0.5822514979042522,
            "db_id": "car_1",
            "pred": "SELECT avg(Weight), Year FROM cars_data GROUP BY Year",
            "correct": 1
        },
        {
            "index": 129,
            "question": "What is the average weight and year for each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average rating star for each reviewer? */\nSELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight and year for each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2457,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
                    "question": "What is the average rating star for each reviewer?"
                }
            ],
            "example_quality": 0.4150021174946633,
            "example_similarity": 0.5847851367506604,
            "db_id": "car_1",
            "pred": "SELECT T2.Continent, AVG(T1.Weight), AVG(T1.Year) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id JOIN countries AS T5 ON T4.Country = T5.CountryId JOIN continents AS T6 ON T5.Continent = T6.ContId GROUP BY T2.Continent",
            "correct": 0
        },
        {
            "index": 130,
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which locations have 2 or more cinemas with capacity over 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which countries in europe have at least 3 car manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1945,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Which locations have 2 or more cinemas with capacity over 300?"
                }
            ],
            "example_quality": 0.4128624250928825,
            "example_similarity": 0.5836521741602706,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY CountryName HAVING COUNT(DISTINCT CountryId) >= 3",
            "correct": 0
        },
        {
            "index": 131,
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all English songs. */\nSELECT song_name FROM song WHERE languages  =  \"english\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of all European countries with at least 3 manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3534,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song WHERE languages  =  \"english\"",
                    "question": "Find the names of all English songs."
                }
            ],
            "example_quality": 0.41020284278573954,
            "example_similarity": 0.5820594094720243,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = \"Europe\") GROUP BY CountryName HAVING COUNT(DISTINCT (SELECT Id FROM car_makers WHERE Country = countries.CountryId)) >= 3;",
            "correct": 0
        },
        {
            "index": 132,
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum age of students with major 600? */\nSELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum horsepower and the make of the car models with 3 cylinders? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5461,
                    "db_id": "voter_2",
                    "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
                    "question": "What are the maximum and minimum age of students with major 600?"
                }
            ],
            "example_quality": 0.4079806879381491,
            "example_similarity": 0.5822794981208053,
            "db_id": "car_1",
            "pred": "SELECT max(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3",
            "correct": 0
        },
        {
            "index": 133,
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total and maximum duration of trips with bike id 636? */\nSELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 122,
                    "db_id": "bike_1",
                    "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
                    "question": "What is the total and maximum duration of trips with bike id 636?"
                }
            ],
            "example_quality": 0.4057919489529285,
            "example_similarity": 0.5821979122058262,
            "db_id": "car_1",
            "pred": "SELECT max(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY Make",
            "correct": 0
        },
        {
            "index": 134,
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of driver who is driving the school bus with the longest working history. */\nSELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6366,
                    "db_id": "school_bus",
                    "query": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1",
                    "question": "find the name of driver who is driving the school bus with the longest working history."
                }
            ],
            "example_quality": 0.40853261166485516,
            "example_similarity": 0.5790568107907128,
            "db_id": "car_1",
            "pred": "SELECT t1.Model FROM model_list AS t1 JOIN car_names AS t2 ON t1.ModelId = t2.MakeId JOIN cars_data AS t3 ON t2.MakeId = t3.Id ORDER BY t3.MPG DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 135,
            "question": "What is the car model with the highest mpg ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the author of the submission with the highest score? */\nSELECT Author FROM submission ORDER BY Scores DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the car model with the highest mpg ? */\nSELECT ",
            "response": "t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5825,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
                    "question": "What is the author of the submission with the highest score?"
                }
            ],
            "example_quality": 0.40578741479683966,
            "example_similarity": 0.5809403405873249,
            "db_id": "car_1",
            "pred": "SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 136,
            "question": "What is the average horsepower of the cars before 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average enrollment of colleges in the state FL? */\nSELECT avg(enr) FROM College WHERE state  =  'FL'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower of the cars before 1980? */\nSELECT ",
            "response": "avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4969,
                    "db_id": "soccer_2",
                    "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
                    "question": "What is average enrollment of colleges in the state FL?"
                }
            ],
            "example_quality": 0.4061459297949912,
            "example_similarity": 0.581759218173504,
            "db_id": "car_1",
            "pred": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980",
            "correct": 1
        },
        {
            "index": 137,
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price of wines produced in appelations in Sonoma County? */\nSELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower for all cars produced before 1980 ? */\nSELECT ",
            "response": "avg(horsepower) from cars_data where year < 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6543,
                    "db_id": "wine_1",
                    "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
                    "question": "What is the average price of wines produced in appelations in Sonoma County?"
                }
            ],
            "example_quality": 0.4033078816456361,
            "example_similarity": 0.5813771199730103,
            "db_id": "car_1",
            "pred": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
            "correct": 1
        },
        {
            "index": 138,
            "question": "What is the average edispl of the cars of model volvo?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average enrollment of colleges in the state FL? */\nSELECT avg(enr) FROM College WHERE state  =  'FL'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl of the cars of model volvo? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4969,
                    "db_id": "soccer_2",
                    "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
                    "question": "What is average enrollment of colleges in the state FL?"
                }
            ],
            "example_quality": 0.4015737665612474,
            "example_similarity": 0.5827383783009652,
            "db_id": "car_1",
            "pred": "SELECT avg(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'volvo')))",
            "correct": 1
        },
        {
            "index": 139,
            "question": "What is the average edispl for all volvos?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average enrollment of colleges in the state FL? */\nSELECT avg(enr) FROM College WHERE state  =  'FL'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl for all volvos? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4969,
                    "db_id": "soccer_2",
                    "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
                    "question": "What is average enrollment of colleges in the state FL?"
                }
            ],
            "example_quality": 0.399864602773037,
            "example_similarity": 0.5824198398848541,
            "db_id": "car_1",
            "pred": "SELECT avg(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'Volvo')))",
            "correct": 0
        },
        {
            "index": 140,
            "question": "What is the maximum accelerate for different number of cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for different number of cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                }
            ],
            "example_quality": 0.39773894651946334,
            "example_similarity": 0.5815930315047243,
            "db_id": "car_1",
            "pred": "SELECT T1.Cylinders, max(T2.Accelerate) FROM cars_data AS T2 JOIN model_list AS T3 ON T2.Id = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id GROUP BY T1.Cylinders",
            "correct": 0
        },
        {
            "index": 141,
            "question": "What is the maximum accelerate for all the different cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for all the different cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                }
            ],
            "example_quality": 0.39564344141842267,
            "example_similarity": 0.5801278326997262,
            "db_id": "car_1",
            "pred": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders",
            "correct": 1
        },
        {
            "index": 142,
            "question": "Which model has the most version(make) of cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which college has the most authors with submissions? */\nSELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model has the most version(make) of cars? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5830,
                    "db_id": "workshop_paper",
                    "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which college has the most authors with submissions?"
                }
            ],
            "example_quality": 0.3998994735211098,
            "example_similarity": 0.5803761199017324,
            "db_id": "car_1",
            "pred": "SELECT Model, COUNT(DISTINCT Make) AS NumVersions FROM car_names GROUP BY Model ORDER BY NumVersions DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 143,
            "question": "What model has the most different versions?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which payment method is used by most customers? */\nSELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What model has the most different versions? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6066,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which payment method is used by most customers?"
                }
            ],
            "example_quality": 0.4040959806992839,
            "example_similarity": 0.5778160471351869,
            "db_id": "car_1",
            "pred": "SELECT Model, COUNT(DISTINCT MakeId) AS NumVersions FROM car_names GROUP BY Model ORDER BY NumVersions DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 144,
            "question": "How many cars have more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many courses have more than 2 credits? */\nSELECT count(*) FROM COURSE WHERE Credits  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4638,
                    "db_id": "college_3",
                    "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
                    "question": "How many courses have more than 2 credits?"
                }
            ],
            "example_quality": 0.4082342030555388,
            "example_similarity": 0.5807478801411926,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
            "correct": 1
        },
        {
            "index": 145,
            "question": "What is the number of cars with more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of professors with a Ph.D. ? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3251,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
                    "question": "What is the total number of professors with a Ph.D. ?"
                }
            ],
            "example_quality": 0.4095567257930869,
            "example_similarity": 0.5811762198840613,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
            "correct": 1
        },
        {
            "index": 146,
            "question": "how many cars were produced in 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: how many cars were produced in 1980? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                }
            ],
            "example_quality": 0.41020014892804174,
            "example_similarity": 0.57982991279318,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980;",
            "correct": 1
        },
        {
            "index": 147,
            "question": "In 1980, how many cars were made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many patients stay in room 112? */\nSELECT count(patient) FROM stay WHERE room  =  112\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In 1980, how many cars were made? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3919,
                    "db_id": "hospital_1",
                    "query": "SELECT count(patient) FROM stay WHERE room  =  112",
                    "question": "How many patients stay in room 112?"
                }
            ],
            "example_quality": 0.41117733263496775,
            "example_similarity": 0.5806473963796208,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Year = 1980",
            "correct": 1
        },
        {
            "index": 148,
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trips did not end in San Francisco? */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models were produced by the maker with full name American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 167,
                    "db_id": "bike_1",
                    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
                    "question": "How many trips did not end in San Francisco?"
                }
            ],
            "example_quality": 0.4138045128198666,
            "example_similarity": 0.5792134345975395,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = \"American Motor Company\")",
            "correct": 1
        },
        {
            "index": 149,
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total number of students enrolled in ACCT-211? */\nSELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models created by the car maker American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3243,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
                    "question": "What are the total number of students enrolled in ACCT-211?"
                }
            ],
            "example_quality": 0.41639642884120975,
            "example_similarity": 0.5783462303384956,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'",
            "correct": 0
        },
        {
            "index": 150,
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which teams had more than 3 eliminations? */\nSELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which makers designed more than 3 car models? List full name and the id. */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1868,
                    "db_id": "wrestler",
                    "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
                    "question": "Which teams had more than 3 eliminations?"
                }
            ],
            "example_quality": 0.41495378598226834,
            "example_similarity": 0.5772356868421215,
            "db_id": "car_1",
            "pred": "SELECT Id, FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)",
            "correct": 1
        },
        {
            "index": 151,
            "question": "What are the names and ids of all makers with more than 3 models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the albums that have more than 10 tracks? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all makers with more than 3 models? */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 629,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
                    "question": "What are the names of the albums that have more than 10 tracks?"
                }
            ],
            "example_quality": 0.4168966968918781,
            "example_similarity": 0.5774600274001942,
            "db_id": "car_1",
            "pred": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(T2.ModelId) > 3;",
            "correct": 0
        },
        {
            "index": 152,
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct types of mills that are built by American or Canadian architects? */\nSELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6953,
                    "db_id": "architecture",
                    "query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
                    "question": "What are the distinct types of mills that are built by American or Canadian architects?"
                }
            ],
            "example_quality": 0.41602864611006585,
            "example_similarity": 0.5766762991497542,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = 'General Motors' OR T4.Weight > 3500;",
            "correct": 0
        },
        {
            "index": 153,
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the names of the channels that broadcast in both morning and night? */\nSELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models created by either the car maker General Motors or weighed more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3747,
                    "db_id": "program_share",
                    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'",
                    "question": "what are the names of the channels that broadcast in both morning and night?"
                }
            ],
            "example_quality": 0.4149714550658653,
            "example_similarity": 0.5756304845583614,
            "db_id": "car_1",
            "pred": "SELECT t3.Model FROM model_list AS t1 JOIN car_makers AS t2 ON t1.Maker = t2.Id JOIN car_names AS t3 ON t1.ModelId = t3.MakeId JOIN cars_data AS t4 ON t3.MakeId = t4.Id WHERE t2.Maker = 'General Motors' OR t4.Weight > 3500;",
            "correct": 0
        },
        {
            "index": 154,
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the dates in which the mean sea level pressure was between 30.3 and 31? */\nSELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In which years cars were produced weighing no less than 3000 and no more than 4000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 200,
                    "db_id": "bike_1",
                    "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
                    "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?"
                }
            ],
            "example_quality": 0.413641744827979,
            "example_similarity": 0.5738906262670234,
            "db_id": "car_1",
            "pred": "SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000",
            "correct": 1
        },
        {
            "index": 155,
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the names of the channels that broadcast in both morning and night? */\nSELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3747,
                    "db_id": "program_share",
                    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'",
                    "question": "what are the names of the channels that broadcast in both morning and night?"
                }
            ],
            "example_quality": 0.41099765222145956,
            "example_similarity": 0.5729530830560842,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000",
            "correct": 0
        },
        {
            "index": 156,
            "question": "What is the horsepower of the car with the largest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the ship with the largest tonnage? */\nSELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the largest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4009,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
                    "question": "What is the name of the ship with the largest tonnage?"
                }
            ],
            "example_quality": 0.4110492545729093,
            "example_similarity": 0.5756905632929041,
            "db_id": "car_1",
            "pred": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 157,
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the entrepreneur with the greatest weight? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the greatest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2280,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
                    "question": "What is the name of the entrepreneur with the greatest weight?"
                }
            ],
            "example_quality": 0.4105019545610395,
            "example_similarity": 0.5783931711700193,
            "db_id": "car_1",
            "pred": "SELECT T2.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Accelerate DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 158,
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which team had the least number of attendances in home games in 1980? */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For model volvo, how many cylinders does the car with the least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3702,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
                    "question": "Which team had the least number of attendances in home games in 1980?"
                }
            ],
            "example_quality": 0.4124246365846134,
            "example_similarity": 0.5770339508691734,
            "db_id": "car_1",
            "pred": "SELECT MIN(Cylinders) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 159,
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the lowest point of all states through which the mississippi river runs through */\nSELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For a volvo model, how many cylinders does the version with least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7361,
                    "db_id": "geo",
                    "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
                    "question": "what is the lowest point of all states through which the mississippi river runs through"
                }
            ],
            "example_quality": 0.410745672755497,
            "example_similarity": 0.5746142888656421,
            "db_id": "car_1",
            "pred": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = \"volvo\"))) ORDER BY Accelerate LIMIT 1;",
            "correct": 0
        },
        {
            "index": 160,
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border the state with the largest population */\nSELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have a larger accelerate than the car with the largest horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7253,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many states border the state with the largest population"
                }
            ],
            "example_quality": 0.40908997063410857,
            "example_similarity": 0.5751896162268985,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);",
            "correct": 0
        },
        {
            "index": 161,
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of branches that have more than the average number of memberships? */\nSELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a greater accelerate than the one with the most horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5402,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
                    "question": "What is the number of branches that have more than the average number of memberships?"
                }
            ],
            "example_quality": 0.40824299735518405,
            "example_similarity": 0.5742050016333566,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 162,
            "question": "How many countries has more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are there that have more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries has more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6854,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "How many cities are there that have more than 3 airports?"
                }
            ],
            "example_quality": 0.406142949165435,
            "example_similarity": 0.5741878631753025,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM (SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName HAVING count(DISTINCT car_makers.Id) > 2)",
            "correct": 0
        },
        {
            "index": 163,
            "question": "What is the number of countries with more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the count of cities with more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of countries with more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6855,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "What is the count of cities with more than 3 airports?"
                }
            ],
            "example_quality": 0.4040686684381369,
            "example_similarity": 0.5754855712890384,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM (SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName HAVING count(DISTINCT car_makers.Id) > 2)",
            "correct": 0
        },
        {
            "index": 164,
            "question": "How many cars has over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars has over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 504,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
                    "question": "How many students have cat allergies?"
                }
            ],
            "example_quality": 0.4052633716793677,
            "example_similarity": 0.5760415535779264,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 6",
            "correct": 1
        },
        {
            "index": 165,
            "question": "What is the number of carsw ith over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers have an active value of 1? */\nSELECT count(*) FROM customer WHERE active = '1'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of carsw ith over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2947,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM customer WHERE active = '1'",
                    "question": "How many customers have an active value of 1?"
                }
            ],
            "example_quality": 0.4064435936691897,
            "example_similarity": 0.5739764176025879,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 6",
            "correct": 1
        },
        {
            "index": 166,
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which campus has the most faculties in year 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For the cars with 4 cylinders, which model has the largest horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2351,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
                    "question": "Which campus has the most faculties in year 2003?"
                }
            ],
            "example_quality": 0.4086805465855065,
            "example_similarity": 0.5735307765326928,
            "db_id": "car_1",
            "pred": "SELECT T4.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Cylinders = 4 ORDER BY CAST(T1.Horsepower AS INTEGER) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 167,
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which campus has the most faculties in year 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For all of the 4 cylinder cars, which model has the most horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2351,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
                    "question": "Which campus has the most faculties in year 2003?"
                }
            ],
            "example_quality": 0.4108907096465381,
            "example_similarity": 0.5734647239786048,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T1.ModelId = T3.Id WHERE T3.Cylinders = 4 ORDER BY T3.Horsepower DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 168,
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct names of all songs that have a higher resolution than some songs in English. */\nSELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. */\nSELECT ",
            "response": "T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3570,
                    "db_id": "music_1",
                    "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
                    "question": "Find the distinct names of all songs that have a higher resolution than some songs in English."
                }
            ],
            "example_quality": 0.40909799283741755,
            "example_similarity": 0.5713382447657335,
            "db_id": "car_1",
            "pred": "SELECT MakeId, Make FROM car_names WHERE MakeId IN ( SELECT MakeId FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3 )",
            "correct": 0
        },
        {
            "index": 169,
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of instructors who earn more than at least one instructor from the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? */\nSELECT ",
            "response": "t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1490,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?"
                }
            ],
            "example_quality": 0.40688970551824605,
            "example_similarity": 0.5700459544207918,
            "db_id": "car_1",
            "pred": "SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Cylinders < 4 AND Horsepower > (SELECT MIN(Horsepower) FROM cars_data))",
            "correct": 0
        },
        {
            "index": 170,
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005? */\nSELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6547,
                    "db_id": "wine_1",
                    "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005",
                    "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?"
                }
            ],
            "example_quality": 0.4048666070326267,
            "example_similarity": 0.5695249869329135,
            "db_id": "car_1",
            "pred": "SELECT max(T1.MPG) FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId WHERE T1.Cylinders = 8 AND T1.Year < 1980",
            "correct": 1
        },
        {
            "index": 171,
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005? */\nSELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6547,
                    "db_id": "wine_1",
                    "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005",
                    "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?"
                }
            ],
            "example_quality": 0.40286717051759946,
            "example_similarity": 0.5692267034918935,
            "db_id": "car_1",
            "pred": "SELECT max(T1.MPG) FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId WHERE T1.Cylinders = 8 OR T1.Year < 1980",
            "correct": 1
        },
        {
            "index": 172,
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20? */\nSELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1978,
                    "db_id": "products_for_hire",
                    "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",
                    "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?"
                }
            ],
            "example_quality": 0.4010252111351704,
            "example_similarity": 0.5679802616673908,
            "db_id": "car_1",
            "pred": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'",
            "correct": 0
        },
        {
            "index": 173,
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                }
            ],
            "example_quality": 0.3989365418248381,
            "example_similarity": 0.5667615483464398,
            "db_id": "car_1",
            "pred": "SELECT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford'",
            "correct": 0
        },
        {
            "index": 174,
            "question": "What are the name of the countries where there is not a single car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the dorms that don't have any amenities? */\nSELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the name of the countries where there is not a single car maker? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5694,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
                    "question": "What are the names of all the dorms that don't have any amenities?"
                }
            ],
            "example_quality": 0.39706378539525233,
            "example_similarity": 0.5655032985683368,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
            "correct": 1
        },
        {
            "index": 175,
            "question": "What are the names of the countries with no car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the dorms that don't have any amenities? */\nSELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of the countries with no car makers? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5694,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
                    "question": "What are the names of all the dorms that don't have any amenities?"
                }
            ],
            "example_quality": 0.3952124318962906,
            "example_similarity": 0.5651289940050892,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
            "correct": 1
        },
        {
            "index": 176,
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail. */\nSELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . */\nSELECT ",
            "response": "t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3127,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
                    "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail."
                }
            ],
            "example_quality": 0.39496073195374987,
            "example_similarity": 0.565052830050123,
            "db_id": "car_1",
            "pred": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) > 3",
            "correct": 0
        },
        {
            "index": 177,
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What types of ships have both ships that have Panama Flags and Malta flags? */\nSELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? */\nSELECT ",
            "response": "T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6256,
                    "db_id": "ship_1",
                    "query": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'",
                    "question": "What types of ships have both ships that have Panama Flags and Malta flags?"
                }
            ],
            "example_quality": 0.3930483130445988,
            "example_similarity": 0.5644680031093791,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(*) > 3",
            "correct": 0
        },
        {
            "index": 178,
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all stations that have more than 10 bikes available and are not located in San Jose? */\nSELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? */\nSELECT ",
            "response": "T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 173,
                    "db_id": "bike_1",
                    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
                    "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?"
                }
            ],
            "example_quality": 0.3923056078690335,
            "example_similarity": 0.5642930892342328,
            "db_id": "car_1",
            "pred": "SELECT T2.CountryId, T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.Maker IN (SELECT Maker FROM model_list WHERE Model = 'fiat') OR T2.CountryId IN (SELECT CountryId FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3)",
            "correct": 0
        },
        {
            "index": 179,
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of rooms that have either king or queen bed? */\nSELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? */\nSELECT ",
            "response": "t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2630,
                    "db_id": "inn_1",
                    "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
                    "question": "What are the names of rooms that have either king or queen bed?"
                }
            ],
            "example_quality": 0.3902280454838895,
            "example_similarity": 0.5646957179891456,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN ( SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(DISTINCT car_makers.Id) > 3 ) OR countries.CountryId IN ( SELECT countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country INNER JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = \"Fiat\" );",
            "correct": 0
        },
        {
            "index": 180,
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which institution does \"Katsuhiro Ueno\" belong to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which country does Airline \"JetBlue Airways\" belong to? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2873,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
                    "question": "Which institution does \"Katsuhiro Ueno\" belong to?"
                }
            ],
            "example_quality": 0.3882965185172533,
            "example_similarity": 0.5666090246063776,
            "db_id": "flight_2",
            "pred": "SELECT a.Country FROM airlines AS a WHERE a.Airline = \"JetBlue Airways\"",
            "correct": 1
        },
        {
            "index": 181,
            "question": "What country is Jetblue Airways affiliated with?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What country is Jetblue Airways affiliated with? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 582,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "What country does Roberto Almeida live?"
                }
            ],
            "example_quality": 0.3888522774695828,
            "example_similarity": 0.566241018945569,
            "db_id": "flight_2",
            "pred": "SELECT Country FROM airlines WHERE Airline = \"Jetblue Airways\";",
            "correct": 0
        },
        {
            "index": 182,
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the address of the location \"UK Gallery\"? */\nSELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of Airline \"JetBlue Airways\"? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5900,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
                    "question": "What is the address of the location \"UK Gallery\"?"
                }
            ],
            "example_quality": 0.39221023198898064,
            "example_similarity": 0.5681664345923882,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\"",
            "correct": 1
        },
        {
            "index": 183,
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which abbreviation corresponds to Jetblue Airways? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 583,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "In which country does Roberto Almeida?"
                }
            ],
            "example_quality": 0.3927385306605649,
            "example_similarity": 0.5680975226850831,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation FROM airlines WHERE Airline = \"Jetblue Airways\";",
            "correct": 0
        },
        {
            "index": 184,
            "question": "List all airline names and their abbreviations in \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of all the employees with role \"HR\". */\nSELECT employee_name FROM Employees WHERE role_code  =  \"HR\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List all airline names and their abbreviations in \"USA\". */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4203,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"",
                    "question": "Show the names of all the employees with role \"HR\"."
                }
            ],
            "example_quality": 0.39466205313885894,
            "example_similarity": 0.5671235627187994,
            "db_id": "flight_2",
            "pred": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\"",
            "correct": 1
        },
        {
            "index": 185,
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the employee ids and job titles for employees in department 80? */\nSELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the airline names and abbreviations for airlines in the USA? */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3493,
                    "db_id": "hr_1",
                    "query": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
                    "question": "what are the employee ids and job titles for employees in department 80?"
                }
            ],
            "example_quality": 0.3930518484924239,
            "example_similarity": 0.5683823542716707,
            "db_id": "flight_2",
            "pred": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
            "correct": 1
        },
        {
            "index": 186,
            "question": "List the airport code and name in the city of Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all songs in English? */\nSELECT song_name FROM song WHERE languages  =  \"english\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List the airport code and name in the city of Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3535,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song WHERE languages  =  \"english\"",
                    "question": "What are the names of all songs in English?"
                }
            ],
            "example_quality": 0.3949530034288446,
            "example_similarity": 0.5669078128350425,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\"",
            "correct": 1
        },
        {
            "index": 187,
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the role name and role description for employee called Ebba? */\nSELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airport code and airport name corresonding to the city Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4213,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"",
                    "question": "What is the role name and role description for employee called Ebba?"
                }
            ],
            "example_quality": 0.3934709663073592,
            "example_similarity": 0.5662529285120982,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\"",
            "correct": 1
        },
        {
            "index": 188,
            "question": "How many airlines do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines do we have? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                }
            ],
            "example_quality": 0.3966971845716818,
            "example_similarity": 0.56856009378597,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM airlines",
            "correct": 1
        },
        {
            "index": 189,
            "question": "What is the total number of airlines?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of students? */\nSELECT count(*) FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the total number of airlines? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 461,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student",
                    "question": "What is the total number of students?"
                }
            ],
            "example_quality": 0.3998892629601914,
            "example_similarity": 0.5708428446124992,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM airlines",
            "correct": 1
        },
        {
            "index": 190,
            "question": "How many airports do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airports do we have? */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                }
            ],
            "example_quality": 0.4030477405235588,
            "example_similarity": 0.5731015664829598,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airports",
            "correct": 1
        },
        {
            "index": 191,
            "question": "Return the number of  airports.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of  airports. */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.4032644771933016,
            "example_similarity": 0.5745886936591896,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airports;",
            "correct": 1
        },
        {
            "index": 192,
            "question": "How many flights do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights do we have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                }
            ],
            "example_quality": 0.4063724747079199,
            "example_similarity": 0.5768043775463814,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights",
            "correct": 1
        },
        {
            "index": 193,
            "question": "Return the number of flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.40656973879981895,
            "example_similarity": 0.5782569085287464,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights;",
            "correct": 1
        },
        {
            "index": 194,
            "question": "Which airline has abbreviation 'UAL'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which city is the headquarter of the store named \"Blackville\" in? */\nSELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has abbreviation 'UAL'? */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4921,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
                    "question": "Which city is the headquarter of the store named \"Blackville\" in?"
                }
            ],
            "example_quality": 0.40478556262270426,
            "example_similarity": 0.5767922731603449,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
            "correct": 1
        },
        {
            "index": 195,
            "question": "Give the airline with abbreviation 'UAL'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the color description for the product 'catnip'. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airline with abbreviation 'UAL'. */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5546,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "Give the color description for the product 'catnip'."
                }
            ],
            "example_quality": 0.40331413482903467,
            "example_similarity": 0.5772531674860182,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
            "correct": 1
        },
        {
            "index": 196,
            "question": "How many airlines are from USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines are from USA? */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                }
            ],
            "example_quality": 0.406358450467662,
            "example_similarity": 0.5794100390804773,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airlines WHERE Country = \"USA\"",
            "correct": 1
        },
        {
            "index": 197,
            "question": "Return the number of airlines in the USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of airlines in the USA. */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                }
            ],
            "example_quality": 0.4093718593485368,
            "example_similarity": 0.5801606111017578,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'",
            "correct": 1
        },
        {
            "index": 198,
            "question": "Which city and country is the Alton airport at?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Where is the history department? */\nSELECT dept_address FROM department WHERE dept_name  =  'History'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city and country is the Alton airport at? */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3189,
                    "db_id": "college_1",
                    "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
                    "question": "Where is the history department?"
                }
            ],
            "example_quality": 0.4110753684764062,
            "example_similarity": 0.5795261911191502,
            "db_id": "flight_2",
            "pred": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
            "correct": 1
        },
        {
            "index": 199,
            "question": "Give the city and country for the Alton airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the city and country for the Alton airport. */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                }
            ],
            "example_quality": 0.41199428317722525,
            "example_similarity": 0.5802686360244446,
            "db_id": "flight_2",
            "pred": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
            "correct": 1
        },
        {
            "index": 200,
            "question": "What is the airport name for airport 'AKO'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the document type code for document type \"Paper\"? */\nSELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport name for airport 'AKO'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4171,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
                    "question": "What is the document type code for document type \"Paper\"?"
                }
            ],
            "example_quality": 0.4149343117613391,
            "example_similarity": 0.5803672928443224,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
            "correct": 1
        },
        {
            "index": 201,
            "question": "Return the name of the airport with code 'AKO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the description of the budget type that has the code ORG. */\nSELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the name of the airport with code 'AKO'. */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6445,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
                    "question": "Return the description of the budget type that has the code ORG."
                }
            ],
            "example_quality": 0.41784508632969064,
            "example_similarity": 0.5798211283788985,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
            "correct": 1
        },
        {
            "index": 202,
            "question": "What are airport names at City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the login names of the students with family name \"Ward\"? */\nSELECT login_name FROM Students WHERE family_name  =  \"Ward\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airport names at City 'Aberdeen'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3789,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
                    "question": "What are the login names of the students with family name \"Ward\"?"
                }
            ],
            "example_quality": 0.4207270413478605,
            "example_similarity": 0.5788759192725123,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 203,
            "question": "What are the names of airports in Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all songs in English? */\nSELECT song_name FROM song WHERE languages  =  \"english\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the names of airports in Aberdeen? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3535,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song WHERE languages  =  \"english\"",
                    "question": "What are the names of all songs in English?"
                }
            ],
            "example_quality": 0.42358060272053116,
            "example_similarity": 0.5804578112958003,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE City = \"Aberdeen\"",
            "correct": 1
        },
        {
            "index": 204,
            "question": "How many flights depart from 'APG'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many architects are female? */\nSELECT count(*) FROM architect WHERE gender  =  'female'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from 'APG'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6946,
                    "db_id": "architecture",
                    "query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
                    "question": "How many architects are female?"
                }
            ],
            "example_quality": 0.42640618800131286,
            "example_similarity": 0.5800634102600366,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 205,
            "question": "Count the number of flights departing from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of characteristics of the 'flax' product. */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights departing from 'APG'. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5568,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
                    "question": "Count the number of characteristics of the 'flax' product."
                }
            ],
            "example_quality": 0.4247477175870939,
            "example_similarity": 0.5803697211507542,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 206,
            "question": "How many flights have destination ATO?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights have destination ATO? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 504,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
                    "question": "How many students have cat allergies?"
                }
            ],
            "example_quality": 0.4275402043949236,
            "example_similarity": 0.5824067613393429,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = \"ATO\"",
            "correct": 1
        },
        {
            "index": 207,
            "question": "Count the number of flights into ATO.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights into ATO. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                }
            ],
            "example_quality": 0.4263011339948463,
            "example_similarity": 0.5833505826747942,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
            "correct": 1
        },
        {
            "index": 208,
            "question": "How many flights depart from City Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many patients stay in room 112? */\nSELECT count(patient) FROM stay WHERE room  =  112\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City Aberdeen? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3919,
                    "db_id": "hospital_1",
                    "query": "SELECT count(patient) FROM stay WHERE room  =  112",
                    "question": "How many patients stay in room 112?"
                }
            ],
            "example_quality": 0.42486483537183345,
            "example_similarity": 0.5834306279503961,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 209,
            "question": "Return the number of flights departing from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights departing from Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                }
            ],
            "example_quality": 0.42383929221593697,
            "example_similarity": 0.582847411843162,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 210,
            "question": "How many flights arriving in Aberdeen city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many drivers did not race in 2009? */\nSELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights arriving in Aberdeen city? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2175,
                    "db_id": "formula_1",
                    "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
                    "question": "How many drivers did not race in 2009?"
                }
            ],
            "example_quality": 0.42213371559950386,
            "example_similarity": 0.5834052813105756,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 211,
            "question": "Return the number of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of people who has no friend living in the city of Austin. */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights arriving in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4481,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who has no friend living in the city of Austin."
                }
            ],
            "example_quality": 0.42053230677297526,
            "example_similarity": 0.5822990951432269,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
            "correct": 1
        },
        {
            "index": 212,
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents have document type code CV or BK? */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4174,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
                    "question": "How many documents have document type code CV or BK?"
                }
            ],
            "example_quality": 0.4191947472927711,
            "example_similarity": 0.5821729463715869,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley'",
            "correct": 1
        },
        {
            "index": 213,
            "question": "How many flights fly from Aberdeen to Ashley?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights fly from Aberdeen to Ashley? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                }
            ],
            "example_quality": 0.41886467284017076,
            "example_similarity": 0.5815737562691168,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
            "correct": 1
        },
        {
            "index": 214,
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For how many clubs is \"Tracy Kim\" a member? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights does airline 'JetBlue Airways' have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4270,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
                    "question": "For how many clubs is \"Tracy Kim\" a member?"
                }
            ],
            "example_quality": 0.4186519095714472,
            "example_similarity": 0.5809005144173919,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways')",
            "correct": 1
        },
        {
            "index": 215,
            "question": "Give the number of Jetblue Airways flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of activities Mark Giuliano is involved in. */\nSELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the number of Jetblue Airways flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6777,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
                    "question": "Find the number of activities Mark Giuliano is involved in."
                }
            ],
            "example_quality": 0.4195358339556447,
            "example_similarity": 0.5809118298542103,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = \"Jetblue Airways\")",
            "correct": 0
        },
        {
            "index": 216,
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many papers are \"Atsushi Ohori\" the author of? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights go to Airport 'ASY'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2870,
                    "db_id": "icfp_1",
                    "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
                    "question": "How many papers are \"Atsushi Ohori\" the author of?"
                }
            ],
            "example_quality": 0.41977975241984183,
            "example_similarity": 0.5799280762559573,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
            "correct": 1
        },
        {
            "index": 217,
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara. */\nSELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights arriving in ASY Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3502,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
                    "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara."
                }
            ],
            "example_quality": 0.4181591611879917,
            "example_similarity": 0.578484475290108,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = \"United Airlines\") AND DestAirport = \"ASY\"",
            "correct": 1
        },
        {
            "index": 218,
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many papers are \"Atsushi Ohori\" the author of? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights depart from Airport 'AHD'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2870,
                    "db_id": "icfp_1",
                    "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
                    "question": "How many papers are \"Atsushi Ohori\" the author of?"
                }
            ],
            "example_quality": 0.41840715688080926,
            "example_similarity": 0.5775208816081882,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD'",
            "correct": 1
        },
        {
            "index": 219,
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students who are older than 18 and do not have allergy to either food or animal. */\nSELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of United Airlines flights leaving from AHD Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 534,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
                    "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal."
                }
            ],
            "example_quality": 0.4180112672013223,
            "example_similarity": 0.5765961287241325,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD';",
            "correct": 1
        },
        {
            "index": 220,
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many United Airlines flights go to City 'Aberdeen'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                }
            ],
            "example_quality": 0.41640908832719636,
            "example_similarity": 0.5768973151520098,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
            "correct": 1
        },
        {
            "index": 221,
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights that arrive in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                }
            ],
            "example_quality": 0.4148214088093974,
            "example_similarity": 0.5765493634997383,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
            "correct": 1
        },
        {
            "index": 222,
            "question": "Which city has most number of arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which city does has most number of customers? */\nSELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of arriving flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6689,
                    "db_id": "driving_school",
                    "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city does has most number of customers?"
                }
            ],
            "example_quality": 0.41673662768863434,
            "example_similarity": 0.5775558978983881,
            "db_id": "flight_2",
            "pred": "SELECT T2.City FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 223,
            "question": "Which city has the most frequent destination airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which program is broadcast most frequently? Give me the program name. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has the most frequent destination airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3768,
                    "db_id": "program_share",
                    "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which program is broadcast most frequently? Give me the program name."
                }
            ],
            "example_quality": 0.41863466971693647,
            "example_similarity": 0.5770586367717885,
            "db_id": "flight_2",
            "pred": "SELECT t1.City FROM airports AS t1 JOIN flights AS t2 ON t1.AirportCode = t2.DestAirport GROUP BY t2.DestAirport ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 224,
            "question": "Which city has most number of departing flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which sport has most number of students on scholarship? */\nSELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of departing flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6020,
                    "db_id": "game_1",
                    "query": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which sport has most number of students on scholarship?"
                }
            ],
            "example_quality": 0.41803752364489577,
            "example_similarity": 0.5777292353900962,
            "db_id": "flight_2",
            "pred": "SELECT City, COUNT(*) AS DepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY DepartingFlights DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 225,
            "question": "Which city is the most frequent source airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which program is broadcast most frequently? Give me the program name. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city is the most frequent source airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3768,
                    "db_id": "program_share",
                    "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which program is broadcast most frequently? Give me the program name."
                }
            ],
            "example_quality": 0.4199129124286962,
            "example_similarity": 0.5777012324391562,
            "db_id": "flight_2",
            "pred": "SELECT SourceAirport, COUNT(SourceAirport) AS Frequency FROM flights GROUP BY SourceAirport ORDER BY Frequency DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 226,
            "question": "What is the code of airport that has the highest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the code of the city with the most students? */\nSELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has the highest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5714,
                    "db_id": "dorm_1",
                    "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the code of the city with the most students?"
                }
            ],
            "example_quality": 0.41893403392724254,
            "example_similarity": 0.577487562227947,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 227,
            "question": "What is the airport code of the airport with the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department with the most credits? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport code of the airport with the most flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1374,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
                    "question": "What is the name of the department with the most credits?"
                }
            ],
            "example_quality": 0.4178227239393105,
            "example_similarity": 0.5790099823197926,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 228,
            "question": "What is the code of airport that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and code of the location with the smallest number of documents? */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has fewest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4234,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What are the name and code of the location with the smallest number of documents?"
                }
            ],
            "example_quality": 0.41801149749763855,
            "example_similarity": 0.5784441490640041,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 229,
            "question": "Give the code of the airport with the least flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the code of the airport with the least flights. */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4233,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the location name and code with the least documents."
                }
            ],
            "example_quality": 0.4181986223786012,
            "example_similarity": 0.5784135133538058,
            "db_id": "flight_2",
            "pred": "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 230,
            "question": "Which airline has most number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which origin has most number of flights? */\nSELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has most number of flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 408,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which origin has most number of flights?"
                }
            ],
            "example_quality": 0.4175281935856508,
            "example_similarity": 0.5802464980783545,
            "db_id": "flight_2",
            "pred": "SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 231,
            "question": "What airline serves the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What airline serves the most flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 911,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer uses the most policies? Give me the customer name."
                }
            ],
            "example_quality": 0.4196889661963911,
            "example_similarity": 0.579177609919285,
            "db_id": "flight_2",
            "pred": "SELECT t1.Airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.Airline GROUP BY t1.Airline ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 232,
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the role with the smallest number of employees? Find the role codes. */\nSELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the abbreviation and country of the airline that has fewest number of flights? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4212,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the role with the smallest number of employees? Find the role codes."
                }
            ],
            "example_quality": 0.41878604052403684,
            "example_similarity": 0.5787336998601091,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 )",
            "correct": 0
        },
        {
            "index": 233,
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which school has the smallest amount of professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of the airilne has the fewest flights and what country is it in? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3214,
                    "db_id": "college_1",
                    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
                    "question": "Which school has the smallest amount of professors?"
                }
            ],
            "example_quality": 0.4200759490167866,
            "example_similarity": 0.5774761058079813,
            "db_id": "flight_2",
            "pred": "SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Abbreviation, T1.Country ORDER BY COUNT(*) LIMIT 1",
            "correct": 1
        },
        {
            "index": 234,
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and flags of ships that do not have a captain with the rank of Midshipman? */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have some flight departing from airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6266,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?"
                }
            ],
            "example_quality": 0.4186348430075573,
            "example_similarity": 0.5765467207404257,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights WHERE SourceAirport = 'AHD'",
            "correct": 1
        },
        {
            "index": 235,
            "question": "Which airlines have a flight with source airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID. */\nSELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with source airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 335,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
                    "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID."
                }
            ],
            "example_quality": 0.4196487011037004,
            "example_similarity": 0.5758850437652705,
            "db_id": "flight_2",
            "pred": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'",
            "correct": 1
        },
        {
            "index": 236,
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the characteristic names of product \"sesame\"? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have flights arriving at airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5559,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
                    "question": "What are all the characteristic names of product \"sesame\"?"
                }
            ],
            "example_quality": 0.4196089032611271,
            "example_similarity": 0.5750926871768113,
            "db_id": "flight_2",
            "pred": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'",
            "correct": 1
        },
        {
            "index": 237,
            "question": "Which airlines have a flight with destination airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID. */\nSELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with destination airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 335,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
                    "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID."
                }
            ],
            "example_quality": 0.4206100956338699,
            "example_similarity": 0.5744427291363139,
            "db_id": "flight_2",
            "pred": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'AHD'",
            "correct": 1
        },
        {
            "index": 238,
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the swimmers who have both \"win\" and \"loss\" results in the record. */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from both airports 'APG' and 'CVO'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5628,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
                    "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record."
                }
            ],
            "example_quality": 0.4224018747751732,
            "example_similarity": 0.5735297044640726,
            "db_id": "flight_2",
            "pred": "SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline JOIN airports apg ON f1.SourceAirport = apg.AirportCode JOIN airports cvo ON f2.SourceAirport = cvo.AirportCode WHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO';",
            "correct": 1
        },
        {
            "index": 239,
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names and ages of all students who are playing both Football and Lacrosse? */\nSELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departing flights from both APG and CVO airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6053,
                    "db_id": "game_1",
                    "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
                    "question": "What are the first names and ages of all students who are playing both Football and Lacrosse?"
                }
            ],
            "example_quality": 0.42110018595023124,
            "example_similarity": 0.5726514896488938,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;",
            "correct": 1
        },
        {
            "index": 240,
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from airport 'CVO' but not from 'APG'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                }
            ],
            "example_quality": 0.4195552454479753,
            "example_similarity": 0.5713456886889371,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
            "correct": 1
        },
        {
            "index": 241,
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departures from CVO but not from APG airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                }
            ],
            "example_quality": 0.4180291816873708,
            "example_similarity": 0.5703580855546814,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE uid IN ( SELECT Airline FROM flights WHERE SourceAirport = 'CVO' ) AND uid NOT IN ( SELECT Airline FROM flights WHERE SourceAirport = 'APG' )",
            "correct": 1
        },
        {
            "index": 242,
            "question": "Find all airlines that have at least 10 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the wineries that have at least four wines. */\nSELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have at least 10 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6580,
                    "db_id": "wine_1",
                    "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
                    "question": "Find the wineries that have at least four wines."
                }
            ],
            "example_quality": 0.4171115387711403,
            "example_similarity": 0.5713821505655372,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10",
            "correct": 0
        },
        {
            "index": 243,
            "question": "Which airlines have at least 10 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which countries have at least 3 cities? */\nSELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have at least 10 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2943,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
                    "question": "Which countries have at least 3 cities?"
                }
            ],
            "example_quality": 0.41848145013422205,
            "example_similarity": 0.5731460100282305,
            "db_id": "flight_2",
            "pred": "SELECT T1.Airline FROM flights AS T1 GROUP BY T1.Airline HAVING COUNT(*) >= 10;",
            "correct": 0
        },
        {
            "index": 244,
            "question": "Find all airlines that have fewer than 200 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the wineries that have at least four wines. */\nSELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have fewer than 200 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6580,
                    "db_id": "wine_1",
                    "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
                    "question": "Find the wineries that have at least four wines."
                }
            ],
            "example_quality": 0.417569475322031,
            "example_similarity": 0.5730038605545966,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200",
            "correct": 0
        },
        {
            "index": 245,
            "question": "Which airlines have less than 200 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which states have more than 2 parks? */\nSELECT state FROM park GROUP BY state HAVING count(*)  >  2;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have less than 200 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3705,
                    "db_id": "baseball_1",
                    "query": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
                    "question": "Which states have more than 2 parks?"
                }
            ],
            "example_quality": 0.4166649452021843,
            "example_similarity": 0.5738396724616299,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;",
            "correct": 0
        },
        {
            "index": 246,
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the course that is a prerequisite for Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of Airline \"United Airlines\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1438,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the title of the course that is a prerequisite for Mobile Computing?"
                }
            ],
            "example_quality": 0.4166574243469511,
            "example_similarity": 0.5733136755997714,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",
            "correct": 1
        },
        {
            "index": 247,
            "question": "Which flight numbers correspond to United Airlines flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What campuses are in Los Angeles county? */\nSELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which flight numbers correspond to United Airlines flights? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2368,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
                    "question": "What campuses are in Los Angeles county?"
                }
            ],
            "example_quality": 0.41559519070297846,
            "example_similarity": 0.5726794771830381,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = \"United Airlines\")",
            "correct": 1
        },
        {
            "index": 248,
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the characteristic names of product \"sesame\"? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5559,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
                    "question": "What are all the characteristic names of product \"sesame\"?"
                }
            ],
            "example_quality": 0.4141631115486905,
            "example_similarity": 0.5730584577857948,
            "db_id": "flight_2",
            "pred": "SELECT t2.FlightNo FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport = t2.AirportCode WHERE t2.AirportName = \"APG\"",
            "correct": 0
        },
        {
            "index": 249,
            "question": "Give the flight numbers of flights leaving from APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: When did the staff member with first name as Janessa and last name as Sawayn leave the company? */\nSELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6635,
                    "db_id": "driving_school",
                    "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
                    "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?"
                }
            ],
            "example_quality": 0.41446321507214506,
            "example_similarity": 0.5715936982498412,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\";",
            "correct": 1
        },
        {
            "index": 250,
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the address for the customer with id 10? */\nSELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4717,
                    "db_id": "department_store",
                    "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
                    "question": "What is the address for the customer with id 10?"
                }
            ],
            "example_quality": 0.4131795118717205,
            "example_similarity": 0.5706406567901752,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = \"APG\"",
            "correct": 1
        },
        {
            "index": 251,
            "question": "Give the flight numbers of flights landing at APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the aircraft that was on flight number 99? */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights landing at APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 413,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
                    "question": "What is the name of the aircraft that was on flight number 99?"
                }
            ],
            "example_quality": 0.41190603738205617,
            "example_similarity": 0.569695209286363,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'",
            "correct": 1
        },
        {
            "index": 252,
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the characteristic names of product \"sesame\"? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from City \"Aberdeen \"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5559,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
                    "question": "What are all the characteristic names of product \"sesame\"?"
                }
            ],
            "example_quality": 0.41189949124266867,
            "example_similarity": 0.5700800166569198,
            "db_id": "flight_2",
            "pred": "SELECT t2.FlightNo FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport = t2.AirportCode WHERE t2.City = \"Aberdeen\"",
            "correct": 0
        },
        {
            "index": 253,
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: When did the staff member with first name as Janessa and last name as Sawayn leave the company? */\nSELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6635,
                    "db_id": "driving_school",
                    "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
                    "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?"
                }
            ],
            "example_quality": 0.41087290792962844,
            "example_similarity": 0.5686501878690795,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = \"Aberdeen\");",
            "correct": 1
        },
        {
            "index": 254,
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the address for the customer with id 10? */\nSELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at City \"Aberdeen\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4717,
                    "db_id": "department_store",
                    "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
                    "question": "What is the address for the customer with id 10?"
                }
            ],
            "example_quality": 0.41240490435510224,
            "example_similarity": 0.5677237435598836,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "correct": 1
        },
        {
            "index": 255,
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the course with Differential Geometry as a prerequisite? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights arriving in Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1426,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
                    "question": "What is the title of the course with Differential Geometry as a prerequisite?"
                }
            ],
            "example_quality": 0.4124143549843561,
            "example_similarity": 0.5668045654805639,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
            "correct": 1
        },
        {
            "index": 256,
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the number of flights landing in the city of Aberdeen or Abilene. */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                }
            ],
            "example_quality": 0.4110882878807867,
            "example_similarity": 0.5670318913966554,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')",
            "correct": 1
        },
        {
            "index": 257,
            "question": "How many flights land in Aberdeen or Abilene?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights land in Aberdeen or Abilene? */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                }
            ],
            "example_quality": 0.4104614852042077,
            "example_similarity": 0.5679383820916102,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABZ', 'ABI')",
            "correct": 1
        },
        {
            "index": 258,
            "question": "Find the name of airports which do not have any flight in and out.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of dorms that do not have any amenity */\nSELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the name of airports which do not have any flight in and out. */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5693,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
                    "question": "Find the name of dorms that do not have any amenity"
                }
            ],
            "example_quality": 0.409675889438989,
            "example_similarity": 0.5681595511532705,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
            "correct": 1
        },
        {
            "index": 259,
            "question": "Which airports do not have departing or arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which buildings do not have any company office? Give me the building names. */\nSELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airports do not have departing or arriving flights? */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4577,
                    "db_id": "company_office",
                    "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
                    "question": "Which buildings do not have any company office? Give me the building names."
                }
            ],
            "example_quality": 0.40904802431964704,
            "example_similarity": 0.567467386434103,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
            "correct": 1
        },
        {
            "index": 260,
            "question": "How many employees are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many employees are there? */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.4091841643970501,
            "example_similarity": 0.5691309734093564,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT COUNT(*) FROM employee;",
            "correct": 1
        },
        {
            "index": 261,
            "question": "Count the number of employees",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of cinemas. */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1934,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "Count the number of cinemas."
                }
            ],
            "example_quality": 0.41144782660242535,
            "example_similarity": 0.5701432429876093,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) FROM employee",
            "correct": 1
        },
        {
            "index": 262,
            "question": "Sort employee names by their age in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Sort the names of all counties in ascending order of population. */\nSELECT County_name FROM county ORDER BY Population ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort employee names by their age in ascending order. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2780,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY Population ASC",
                    "question": "Sort the names of all counties in ascending order of population."
                }
            ],
            "example_quality": 0.41321710970699627,
            "example_similarity": 0.5697482942230254,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 263,
            "question": "List the names of employees and sort in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the hosts of performances in ascending order of attendance. */\nSELECT HOST FROM performance ORDER BY Attendance ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: List the names of employees and sort in ascending order of age. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1309,
                    "db_id": "performance_attendance",
                    "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
                    "question": "List the hosts of performances in ascending order of attendance."
                }
            ],
            "example_quality": 0.4149729381871978,
            "example_similarity": 0.5707992659033708,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 264,
            "question": "What is the number of employees from each city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the numbers of races for each constructor id? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the number of employees from each city? */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2190,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "What are the numbers of races for each constructor id?"
                }
            ],
            "example_quality": 0.41718894978497356,
            "example_similarity": 0.5709681498029209,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City",
            "correct": 1
        },
        {
            "index": 265,
            "question": "Count the number of employees for each city.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of voting records for each election cycle. */\nSELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees for each city. */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5508,
                    "db_id": "voter_2",
                    "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
                    "question": "Count the number of voting records for each election cycle."
                }
            ],
            "example_quality": 0.41886574039536406,
            "example_similarity": 0.5719010315703884,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City, count(*) FROM employee GROUP BY City",
            "correct": 1
        },
        {
            "index": 266,
            "question": "Which cities do more than one employee under age 30 come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What categories have two or more corresponding books that were made after 1989? */\nSELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which cities do more than one employee under age 30 come from? */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6978,
                    "db_id": "culture_company",
                    "query": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2",
                    "question": "What categories have two or more corresponding books that were made after 1989?"
                }
            ],
            "example_quality": 0.42016589130497906,
            "example_similarity": 0.5706054364414499,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 267,
            "question": "Find the cities that have more than one employee under age 30.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the cities that have more than one employee under age 30. */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 304,
                    "db_id": "product_catalog",
                    "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
                    "question": "Find the list of attribute data types possessed by more than 3 attribute definitions."
                }
            ],
            "example_quality": 0.42089935238623377,
            "example_similarity": 0.5702424355953258,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 268,
            "question": "Find the number of shops in each location.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of shops in each location. */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1411,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "Find the total number of students in each department."
                }
            ],
            "example_quality": 0.42306017569822546,
            "example_similarity": 0.5714728742684777,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) , Location FROM shop GROUP BY Location",
            "correct": 1
        },
        {
            "index": 269,
            "question": "How many shops are there in each location?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are there in each major? */\nSELECT count(*) ,  major FROM student GROUP BY major\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many shops are there in each location? */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5726,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  major FROM student GROUP BY major",
                    "question": "How many students are there in each major?"
                }
            ],
            "example_quality": 0.4252049334093845,
            "example_similarity": 0.5730659119106023,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) , Location FROM shop GROUP BY Location",
            "correct": 1
        },
        {
            "index": 270,
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the stories of the building with the largest height. */\nSELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the manager name and district of the shop whose number of products is the largest. */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4560,
                    "db_id": "company_office",
                    "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
                    "question": "Find the stories of the building with the largest height."
                }
            ],
            "example_quality": 0.42652658655250264,
            "example_similarity": 0.5730010587389169,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 271,
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the top three products that were purchased in the largest amount? */\nSELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the manager name and district of the shop that sells the largest number of products? */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4710,
                    "db_id": "department_store",
                    "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
                    "question": "What are the ids of the top three products that were purchased in the largest amount?"
                }
            ],
            "example_quality": 0.4278384857978856,
            "example_similarity": 0.5725779306008889,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
            "correct": 1
        },
        {
            "index": 272,
            "question": "find the minimum and maximum number of products of all stores.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the minimum and maximum number of products of all stores. */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 28,
                    "db_id": "farm",
                    "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
                    "question": "Return the maximum and minimum number of cows across all farms."
                }
            ],
            "example_quality": 0.42994202077656984,
            "example_similarity": 0.5723110999736797,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT min(Number_products), max(Number_products) FROM shop",
            "correct": 1
        },
        {
            "index": 273,
            "question": "What are the minimum and maximum number of products across all the shops?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum and minimum height of all players? */\nSELECT max(weight) ,  min(weight) FROM Player\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the minimum and maximum number of products across all the shops? */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1297,
                    "db_id": "soccer_1",
                    "query": "SELECT max(weight) ,  min(weight) FROM Player",
                    "question": "What is the maximum and minimum height of all players?"
                }
            ],
            "example_quality": 0.4320301452425897,
            "example_similarity": 0.572656724760101,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT min(Number_products), max(Number_products) FROM shop",
            "correct": 1
        },
        {
            "index": 274,
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the weights of entrepreneurs, ordered descending by amount of money requested. */\nSELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Return the name, location and district of all shops in descending order of number of products. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2287,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
                    "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested."
                }
            ],
            "example_quality": 0.4307980806411366,
            "example_similarity": 0.572478450304077,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
            "correct": 1
        },
        {
            "index": 275,
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name and number of followers for each user, and sort the results by the number of followers in descending order. */\nSELECT name ,  followers FROM user_profiles ORDER BY followers DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort all the shops by number products in descending order, and return the name, location and district of each shop. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 293,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
                    "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order."
                }
            ],
            "example_quality": 0.4315811925157283,
            "example_similarity": 0.5724573165453954,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
            "correct": 1
        },
        {
            "index": 276,
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of companies whose revenue is greater than the average revenue of all companies. */\nSELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of stores whose number products is more than the average number of products. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5301,
                    "db_id": "manufactory_1",
                    "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
                    "question": "Find the name of companies whose revenue is greater than the average revenue of all companies."
                }
            ],
            "example_quality": 0.4325258537468586,
            "example_similarity": 0.5726261219892441,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)",
            "correct": 1
        },
        {
            "index": 277,
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date. */\nSELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops' number products is above the average? Give me the shop names. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3863,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
                    "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date."
                }
            ],
            "example_quality": 0.43216775800529356,
            "example_similarity": 0.5720527175901793,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
            "correct": 1
        },
        {
            "index": 278,
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30. */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the name of employee who was awarded the most times in the evaluation. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4838,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
                    "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30."
                }
            ],
            "example_quality": 0.4325399384026742,
            "example_similarity": 0.5715365978455075,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 279,
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the aircraft that has won an award the most? */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the most awards in evaluations? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4825,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the aircraft that has won an award the most?"
                }
            ],
            "example_quality": 0.43400036873098,
            "example_similarity": 0.5705789319969106,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 280,
            "question": "Find the name of the employee who got the highest one time bonus.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the employee who got the highest one time bonus. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2415,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
                    "question": "Find the name and gender of the candidate who got the highest support rate."
                }
            ],
            "example_quality": 0.4351240863581831,
            "example_similarity": 0.5710621585002829,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 281,
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which party had the most hosts? Give me the party location. */\nSELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the biggest bonus? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2672,
                    "db_id": "party_host",
                    "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
                    "question": "Which party had the most hosts? Give me the party location."
                }
            ],
            "example_quality": 0.43426280294863745,
            "example_similarity": 0.5716396359907919,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY Bonus DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 282,
            "question": "Find the names of employees who never won any award in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of artworks that are not nominated. */\nSELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of employees who never won any award in the evaluation. */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4617,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
                    "question": "List the name of artworks that are not nominated."
                }
            ],
            "example_quality": 0.43626896322186925,
            "example_similarity": 0.5705457291069126,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "correct": 1
        },
        {
            "index": 283,
            "question": "What are the names of the employees who never received any evaluation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of scientists who have not been assigned a project? */\nSELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the names of the employees who never received any evaluation? */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6509,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "What are the names of scientists who have not been assigned a project?"
                }
            ],
            "example_quality": 0.43750375234728417,
            "example_similarity": 0.5702964509121886,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "correct": 1
        },
        {
            "index": 284,
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the largest major? */\nSELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the name of the shop that is hiring the largest number of employees? */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 493,
                    "db_id": "allergy_1",
                    "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the largest major?"
                }
            ],
            "example_quality": 0.43689282364183596,
            "example_similarity": 0.5696087873526386,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1)",
            "correct": 1
        },
        {
            "index": 285,
            "question": "Which shop has the most employees? Give me the shop name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shop has the most employees? Give me the shop name. */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                }
            ],
            "example_quality": 0.4385762406349056,
            "example_similarity": 0.5694994987600382,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T2.Name FROM shop AS T2 JOIN hiring AS T1 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 286,
            "question": "Find the name of the shops that do not hire any employee.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the famous titles of artists that do not have any volume. */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the shops that do not hire any employee. */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6190,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
                    "question": "Find the famous titles of artists that do not have any volume."
                }
            ],
            "example_quality": 0.4397323753502757,
            "example_similarity": 0.5705052447683698,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID NOT IN(SELECT Shop_ID FROM hiring)",
            "correct": 1
        },
        {
            "index": 287,
            "question": "Which shops run with no employees? Find the shop names",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the courses that do not have any prerequisite? */\nSELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops run with no employees? Find the shop names */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1349,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
                    "question": "Find the name of the courses that do not have any prerequisite?"
                }
            ],
            "example_quality": 0.44168452735253955,
            "example_similarity": 0.5696788618016972,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
            "correct": 1
        },
        {
            "index": 288,
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of stores in each city. */\nSELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of employees hired in each shop; show the shop name as well. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4923,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
                    "question": "Find the number of stores in each city."
                }
            ],
            "example_quality": 0.4414416677394713,
            "example_similarity": 0.5695390454923368,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT t2.Name AS Shop_Name, COUNT(t1.Employee_ID) AS Num_Employees FROM hiring AS t1 JOIN shop AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t2.Name;",
            "correct": 1
        },
        {
            "index": 289,
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of companies and the number of employees they have */\nSELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: For each shop, return the number of employees working there and the name of the shop. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4110,
                    "db_id": "company_employee",
                    "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
                    "question": "Show the names of companies and the number of employees they have"
                }
            ],
            "example_quality": 0.4412004888157669,
            "example_similarity": 0.5686214288161937,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T2.Name, COUNT(*) FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name",
            "correct": 1
        },
        {
            "index": 290,
            "question": "What is total bonus given in all evaluations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total checking balance in all accounts? */\nSELECT sum(balance) FROM checking\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is total bonus given in all evaluations? */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1781,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "What is the total checking balance in all accounts?"
                }
            ],
            "example_quality": 0.44312738368191945,
            "example_similarity": 0.5691685022591471,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT sum(Bonus) FROM evaluation",
            "correct": 1
        },
        {
            "index": 291,
            "question": "Find the total amount of bonus given in all the evaluations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total hours of all projects. */\nSELECT sum(hours) FROM projects\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the total amount of bonus given in all the evaluations. */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6472,
                    "db_id": "scientist_1",
                    "query": "SELECT sum(hours) FROM projects",
                    "question": "Find the total hours of all projects."
                }
            ],
            "example_quality": 0.4450410352843871,
            "example_similarity": 0.569503547497661,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT sum(Bonus) FROM evaluation",
            "correct": 1
        },
        {
            "index": 292,
            "question": "Give me all the information about hiring.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all information regarding the basketball match. */\nSELECT * FROM basketball_match\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Give me all the information about hiring. */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1020,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "List all information regarding the basketball match."
                }
            ],
            "example_quality": 0.4469415796840981,
            "example_similarity": 0.5691098553985096,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT * FROM hiring",
            "correct": 1
        },
        {
            "index": 293,
            "question": "What is all the information about hiring?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is all the information about the basketball match? */\nSELECT * FROM basketball_match\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is all the information about hiring? */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1021,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "What is all the information about the basketball match?"
                }
            ],
            "example_quality": 0.44882915108449367,
            "example_similarity": 0.5698978763698457,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT * FROM hiring",
            "correct": 1
        },
        {
            "index": 294,
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the districts that have both mall and village store style shops? */\nSELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which district has both stores with less than 3000 products and stores with more than 10000 products? */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4944,
                    "db_id": "store_product",
                    "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
                    "question": "What are the names of the districts that have both mall and village store style shops?"
                }
            ],
            "example_quality": 0.4474486266587326,
            "example_similarity": 0.568663177986697,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT DISTINCT District FROM shop WHERE Shop_ID IN ( SELECT Shop_ID FROM shop WHERE Number_products < 3000 ) AND Shop_ID IN ( SELECT Shop_ID FROM shop WHERE Number_products > 10000 )",
            "correct": 1
        },
        {
            "index": 295,
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components. */\nSELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3405,
                    "db_id": "manufacturer",
                    "query": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10",
                    "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components."
                }
            ],
            "example_quality": 0.44615693700110753,
            "example_similarity": 0.5682663973942872,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;",
            "correct": 1
        },
        {
            "index": 296,
            "question": "How many different store locations are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts are there in total? */\nSELECT count(*) FROM accounts\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many different store locations are there? */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1779,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM accounts",
                    "question": "How many accounts are there in total?"
                }
            ],
            "example_quality": 0.44615115155328106,
            "example_similarity": 0.5683736055111984,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT COUNT(DISTINCT Location) FROM shop",
            "correct": 1
        },
        {
            "index": 297,
            "question": "Count the number of distinct store locations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of distinct governors. */\nSELECT count(DISTINCT Governor) FROM party\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of distinct store locations. */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2752,
                    "db_id": "election",
                    "query": "SELECT count(DISTINCT Governor) FROM party",
                    "question": "Count the number of distinct governors."
                }
            ],
            "example_quality": 0.4480159624908121,
            "example_similarity": 0.568704558579062,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(DISTINCT Location) FROM shop",
            "correct": 1
        },
        {
            "index": 298,
            "question": "How many documents do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents do we have? */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                }
            ],
            "example_quality": 0.4498682579186953,
            "example_similarity": 0.5701518587180585,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Documents",
            "correct": 1
        },
        {
            "index": 299,
            "question": "Count the number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents. */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                }
            ],
            "example_quality": 0.451708163410606,
            "example_similarity": 0.5715894779196703,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Documents",
            "correct": 1
        },
        {
            "index": 300,
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all role codes, role names, and role descriptions. */\nSELECT role_code ,  role_name ,  role_description FROM ROLES\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List document IDs, document names, and document descriptions for all documents. */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4191,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code ,  role_name ,  role_description FROM ROLES",
                    "question": "List all role codes, role names, and role descriptions."
                }
            ],
            "example_quality": 0.45353580286590395,
            "example_similarity": 0.5725413225170809,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
            "correct": 1
        },
        {
            "index": 301,
            "question": "What are the ids, names, and descriptions for all documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, names, and descriptions for all documents? */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.45429924981097847,
            "example_similarity": 0.5725079626416089,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
            "correct": 1
        },
        {
            "index": 302,
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the project that has a scientist assigned to it whose name contains 'Smith'? */\nSELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document name and template id for document with description with the letter 'w' in it? */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6487,
                    "db_id": "scientist_1",
                    "query": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'",
                    "question": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?"
                }
            ],
            "example_quality": 0.45299871739948006,
            "example_similarity": 0.5722678700500803,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Document_Name, T2.Template_ID FROM Documents AS T2 JOIN Templates AS T1 ON T2.Template_ID = T1.Template_ID WHERE T2.Document_Description LIKE '%w%'",
            "correct": 1
        },
        {
            "index": 303,
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of customers whose name contains \"Diana\". */\nSELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the names and template ids for documents that contain the letter w in their description. */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1530,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
                    "question": "Find the names of customers whose name contains \"Diana\"."
                }
            ],
            "example_quality": 0.4534638681471365,
            "example_similarity": 0.571066765968507,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"%w%\"",
            "correct": 1
        },
        {
            "index": 304,
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the color code and description of the product named \"chervil\"? */\nSELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id, template id and description for document named \"Robbin CV\"? */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5547,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
                    "question": "What is the color code and description of the product named \"chervil\"?"
                }
            ],
            "example_quality": 0.4523584585638851,
            "example_similarity": 0.5713264147646632,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t1.Document_ID, t2.Template_ID, t1.Document_Description FROM Documents AS t1 JOIN Templates AS t2 ON t1.Template_ID = t2.Template_ID WHERE t1.Document_Name = \"Robbin CV\"",
            "correct": 1
        },
        {
            "index": 305,
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the color code and description for the product with the name 'chervil'. */\nSELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the document id, template id, and description for the document with the name Robbin CV. */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5548,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
                    "question": "Return the color code and description for the product with the name 'chervil'."
                }
            ],
            "example_quality": 0.4512602975680649,
            "example_similarity": 0.5716390057545057,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t1.Document_ID, t2.Template_ID, t1.Document_Description FROM Documents AS t1 JOIN Templates AS t2 ON t1.Template_ID = t2.Template_ID WHERE t1.Document_Name = \"Robbin CV\"",
            "correct": 1
        },
        {
            "index": 306,
            "question": "How many different templates do all document use?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different services are provided by all stations? */\nSELECT count(DISTINCT services) FROM station\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many different templates do all document use? */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3169,
                    "db_id": "station_weather",
                    "query": "SELECT count(DISTINCT services) FROM station",
                    "question": "How many different services are provided by all stations?"
                }
            ],
            "example_quality": 0.4530535645694765,
            "example_similarity": 0.5716772225112994,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(DISTINCT Template_ID) FROM Documents",
            "correct": 1
        },
        {
            "index": 307,
            "question": "Count the number of different templates used for documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different payment method codes used by parties. */\nSELECT count(DISTINCT payment_method_code) FROM parties\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of different templates used for documents. */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6340,
                    "db_id": "e_government",
                    "query": "SELECT count(DISTINCT payment_method_code) FROM parties",
                    "question": "Count the number of different payment method codes used by parties."
                }
            ],
            "example_quality": 0.4548351490497062,
            "example_similarity": 0.5720701556376719,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(DISTINCT Template_ID) FROM Documents",
            "correct": 1
        },
        {
            "index": 308,
            "question": "How many documents are using the template with type code 'PPT'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents are using the template with type code 'PPT'? */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                }
            ],
            "example_quality": 0.4536779333008847,
            "example_similarity": 0.5713491486388484,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')",
            "correct": 1
        },
        {
            "index": 309,
            "question": "Count the number of documents that use the PPT template type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents that use the PPT template type. */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                }
            ],
            "example_quality": 0.45289103486233645,
            "example_similarity": 0.5714916582399673,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"PPT\"",
            "correct": 1
        },
        {
            "index": 310,
            "question": "Show all template ids and number of documents using each template.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template ids and number of documents using each template. */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                }
            ],
            "example_quality": 0.4546559024918128,
            "example_similarity": 0.5726258042555703,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;",
            "correct": 1
        },
        {
            "index": 311,
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different card types, and how many transactions have been made with each? */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are all different template ids used for documents, and how many times were each of them used? */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 741,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
                    "question": "What are the different card types, and how many transactions have been made with each?"
                }
            ],
            "example_quality": 0.45365843799648364,
            "example_similarity": 0.572327972087546,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID",
            "correct": 1
        },
        {
            "index": 312,
            "question": "What is the id and type code for the template used by the most documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the type code of the most frequently used policy. */\nSELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the id and type code for the template used by the most documents? */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1513,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the type code of the most frequently used policy."
                }
            ],
            "example_quality": 0.4529455302824924,
            "example_similarity": 0.5716153824334194,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 313,
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the customer last name, id and phone number with most number of orders? */\nSELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and type code of the template that is used for the greatest number of documents. */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1612,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer last name, id and phone number with most number of orders?"
                }
            ],
            "example_quality": 0.4536656191101309,
            "example_similarity": 0.5707019603991729,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 314,
            "question": "Show ids for all templates that are used by more than one document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and details of events that have more than one participants? */\nSELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates that are used by more than one document. */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2140,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
                    "question": "What are the ids and details of events that have more than one participants?"
                }
            ],
            "example_quality": 0.4527303782849394,
            "example_similarity": 0.5700976623754569,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING count(*) > 1",
            "correct": 1
        },
        {
            "index": 315,
            "question": "What are the template ids of any templates used in more than a single document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the carriers of devices that are in stock in more than a single shop? */\nSELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids of any templates used in more than a single document? */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5090,
                    "db_id": "device",
                    "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
                    "question": "What are the carriers of devices that are in stock in more than a single shop?"
                }
            ],
            "example_quality": 0.45189543524326686,
            "example_similarity": 0.5706270098131957,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 316,
            "question": "Show ids for all templates not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the students who are not involved in any activity */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates not used by any document. */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6789,
                    "db_id": "activity_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                    "question": "What are the ids of the students who are not involved in any activity"
                }
            ],
            "example_quality": 0.4536299433595856,
            "example_similarity": 0.569612367377078,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
            "correct": 1
        },
        {
            "index": 317,
            "question": "What are the ids for templates that are not used in any documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and cities of the branches that do not have any registered members? */\nSELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids for templates that are not used in any documents? */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5428,
                    "db_id": "shop_membership",
                    "query": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
                    "question": "What are the names and cities of the branches that do not have any registered members?"
                }
            ],
            "example_quality": 0.45243260623250203,
            "example_similarity": 0.5691059905370585,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
            "correct": 1
        },
        {
            "index": 318,
            "question": "How many templates do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates do we have? */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                }
            ],
            "example_quality": 0.45415451627579606,
            "example_similarity": 0.5704610031454325,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates",
            "correct": 1
        },
        {
            "index": 319,
            "question": "Count the number of templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates. */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                }
            ],
            "example_quality": 0.4558656306448374,
            "example_similarity": 0.5718075203769515,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates",
            "correct": 1
        },
        {
            "index": 320,
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show cinema name, film title, date, and price for each record in schedule. */\nSELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show template ids, version numbers, and template type codes for all templates. */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1954,
                    "db_id": "cinema",
                    "query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
                    "question": "Show cinema name, film title, date, and price for each record in schedule."
                }
            ],
            "example_quality": 0.45454905746151475,
            "example_similarity": 0.5724511774313291,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 321,
            "question": "What are the ids, version numbers, and type codes for each template?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the type codes and descriptions of each budget type? */\nSELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, version numbers, and type codes for each template? */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6443,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
                    "question": "What are the type codes and descriptions of each budget type?"
                }
            ],
            "example_quality": 0.45526178106236154,
            "example_similarity": 0.5725003491344018,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 322,
            "question": "Show all distinct template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct unit prices for tracks. */\nSELECT distinct(UnitPrice) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all distinct template type codes for all templates. */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 887,
                    "db_id": "chinook_1",
                    "query": "SELECT distinct(UnitPrice) FROM TRACK",
                    "question": "Find the distinct unit prices for tracks."
                }
            ],
            "example_quality": 0.45522818684926236,
            "example_similarity": 0.5726986823245547,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT Template_Type_Code FROM Templates;",
            "correct": 1
        },
        {
            "index": 323,
            "question": "What are the different template type codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different card type codes? */\nSELECT DISTINCT card_type_code FROM Customers_Cards\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes? */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 731,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
                    "question": "What are the different card type codes?"
                }
            ],
            "example_quality": 0.4569147868899767,
            "example_similarity": 0.5740215966207635,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
            "correct": 0
        },
        {
            "index": 324,
            "question": "What are the ids of templates with template type code PP or PPT?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and locations of all circuits in France or Belgium? */\nSELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of templates with template type code PP or PPT? */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2217,
                    "db_id": "formula_1",
                    "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
                    "question": "What are the ids and locations of all circuits in France or Belgium?"
                }
            ],
            "example_quality": 0.4576264696464892,
            "example_similarity": 0.574247020160605,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = \"PP\" OR Template_Type_Code = \"PPT\"",
            "correct": 1
        },
        {
            "index": 325,
            "question": "Return the ids of templates that have the code PP or PPT.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids of templates that have the code PP or PPT. */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.45783206341509824,
            "example_similarity": 0.5732493370216493,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = \"PP\" OR Templates.Template_Type_Code = \"PPT\"",
            "correct": 1
        },
        {
            "index": 326,
            "question": "How many templates have template type code CV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates have template type code CV? */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 504,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
                    "question": "How many students have cat allergies?"
                }
            ],
            "example_quality": 0.45949515524511325,
            "example_similarity": 0.5738767248767295,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
            "correct": 1
        },
        {
            "index": 327,
            "question": "Count the number of templates of the type CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of customer cards of the type Debit. */\nSELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates of the type CV. */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 709,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
                    "question": "Count the number of customer cards of the type Debit."
                }
            ],
            "example_quality": 0.46114807525965423,
            "example_similarity": 0.5749018447061306,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
            "correct": 1
        },
        {
            "index": 328,
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names and department numbers for employees with last name McEwen? */\nSELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the version number and template type code for the template with version number later than 5? */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3411,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
                    "question": "What are the first names and department numbers for employees with last name McEwen?"
                }
            ],
            "example_quality": 0.4613837870377088,
            "example_similarity": 0.575036435481562,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
            "correct": 1
        },
        {
            "index": 329,
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the date of birth for all the guests with gender code \"Male\". */\nSELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the version numbers and template type codes of templates with a version number greater than 5. */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1219,
                    "db_id": "apartment_rentals",
                    "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
                    "question": "Return the date of birth for all the guests with gender code \"Male\"."
                }
            ],
            "example_quality": 0.46139984442259924,
            "example_similarity": 0.5747422848252812,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
            "correct": 1
        },
        {
            "index": 330,
            "question": "Show all template type codes and number of templates for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the number of rooms for each bed type? */\nSELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and number of templates for each. */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2612,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
                    "question": "What are the number of rooms for each bed type?"
                }
            ],
            "example_quality": 0.4630319661061671,
            "example_similarity": 0.5743263991136895,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;",
            "correct": 1
        },
        {
            "index": 331,
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the allergy types and how many allergies correspond to each one? */\nSELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many templates correspond to each? */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 455,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
                    "question": "What are the allergy types and how many allergies correspond to each one?"
                }
            ],
            "example_quality": 0.4646542260272965,
            "example_similarity": 0.5749015637156208,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
            "correct": 1
        },
        {
            "index": 332,
            "question": "Which template type code has most number of templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type has most number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code has most number of templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 456,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which allergy type has most number of allergies?"
                }
            ],
            "example_quality": 0.4662667132982986,
            "example_similarity": 0.5758807758731039,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 333,
            "question": "Return the type code of the template type that the most templates belong to.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the type code of the most frequently used policy. */\nSELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type that the most templates belong to. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1513,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the type code of the most frequently used policy."
                }
            ],
            "example_quality": 0.4678695159610665,
            "example_similarity": 0.5754860721751199,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 334,
            "question": "Show all template type codes with less than three templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product type codes that have at least two products. */\nSELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes with less than three templates. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4592,
                    "db_id": "solvency_ii",
                    "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2",
                    "question": "Show the product type codes that have at least two products."
                }
            ],
            "example_quality": 0.4689637190070913,
            "example_similarity": 0.5748197700921722,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
            "correct": 1
        },
        {
            "index": 335,
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that have fewer than 3 templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                }
            ],
            "example_quality": 0.4700513894976174,
            "example_similarity": 0.5753426961515985,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
            "correct": 1
        },
        {
            "index": 336,
            "question": "What the smallest version number and its template type code?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which major has least number of students? List the major and the number of students. */\nSELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What the smallest version number and its template type code? */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2833,
                    "db_id": "restaurant_1",
                    "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
                    "question": "Which major has least number of students? List the major and the number of students."
                }
            ],
            "example_quality": 0.46890452786921055,
            "example_similarity": 0.5746224301908299,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates;",
            "correct": 1
        },
        {
            "index": 337,
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return the smallest salary for every departments. */\nSELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the lowest version number, along with its corresponding template type code. */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3472,
                    "db_id": "hr_1",
                    "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
                    "question": "return the smallest salary for every departments."
                }
            ],
            "example_quality": 0.46903484236461496,
            "example_similarity": 0.5737900717839101,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code",
            "correct": 0
        },
        {
            "index": 338,
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ? */\nSELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code of the template used by document with the name \"Data base\"? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1833,
                    "db_id": "browser_web",
                    "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
                    "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?"
                }
            ],
            "example_quality": 0.4686566879138109,
            "example_similarity": 0.573685549495974,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base'",
            "correct": 1
        },
        {
            "index": 339,
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the login names of the students whose family name is \"Ward\". */\nSELECT login_name FROM Students WHERE family_name  =  \"Ward\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type code of the template that is used by a document named Data base. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3790,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
                    "question": "Return the login names of the students whose family name is \"Ward\"."
                }
            ],
            "example_quality": 0.4677293399090082,
            "example_similarity": 0.5736788917435628,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\"",
            "correct": 1
        },
        {
            "index": 340,
            "question": "Show all document names using templates with template type code BK.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all invoice dates corresponding to customers with first name Astrid and last name Gruber. */\nSELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document names using templates with template type code BK. */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 856,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
                    "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber."
                }
            ],
            "example_quality": 0.46845928035312623,
            "example_similarity": 0.5738947150723448,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = \"BK\"",
            "correct": 1
        },
        {
            "index": 341,
            "question": "What are the names of documents that use templates with the code BK?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and ids of documents that have the type code BK? */\nSELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the names of documents that use templates with the code BK? */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6407,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"",
                    "question": "What are the names and ids of documents that have the type code BK?"
                }
            ],
            "example_quality": 0.46751966940796147,
            "example_similarity": 0.5740038540636608,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = \"BK\")",
            "correct": 1
        },
        {
            "index": 342,
            "question": "Show all template type codes and the number of documents using each type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the types of competition and number of competitions for that type? */\nSELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and the number of documents using each type. */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3367,
                    "db_id": "sports_competition",
                    "query": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",
                    "question": "What are the types of competition and number of competitions for that type?"
                }
            ],
            "example_quality": 0.4666854663460148,
            "example_similarity": 0.5733001390907652,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
            "correct": 0
        },
        {
            "index": 343,
            "question": "What are the different template type codes, and how many documents use each type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different budget type codes, and how many documents are there for each? */\nSELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many documents use each type? */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6455,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
                    "question": "What are the different budget type codes, and how many documents are there for each?"
                }
            ],
            "example_quality": 0.4658561274418638,
            "example_similarity": 0.5737769378259616,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
            "correct": 0
        },
        {
            "index": 344,
            "question": "Which template type code is used by most number of documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which payment method is used by most customers? */\nSELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code is used by most number of documents? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6066,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which payment method is used by most customers?"
                }
            ],
            "example_quality": 0.46526933637371887,
            "example_similarity": 0.5742892141694906,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 345,
            "question": "Return the code of the template type that is most commonly used in documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the code of the card type that is most common. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the code of the template type that is most commonly used in documents. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 723,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the card type that is most common."
                }
            ],
            "example_quality": 0.4646859469929255,
            "example_similarity": 0.5746173613747965,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 346,
            "question": "Show all template type codes that are not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of artists that do not have any albums. */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes that are not used by any document. */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 878,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
                    "question": "Find the names of artists that do not have any albums."
                }
            ],
            "example_quality": 0.4657706696894777,
            "example_similarity": 0.5743166991606906,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT DISTINCT Template_ID FROM Documents))",
            "correct": 1
        },
        {
            "index": 347,
            "question": "What are the codes of template types that are not used for any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what rivers run through the states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that are not used for any document? */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7433,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "what rivers run through the states that border the state with the capital atlanta"
                }
            ],
            "example_quality": 0.46458861719930195,
            "example_similarity": 0.5734133932991825,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates);",
            "correct": 0
        },
        {
            "index": 348,
            "question": "Show all template type codes and descriptions.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all information regarding the basketball match. */\nSELECT * FROM basketball_match\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and descriptions. */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1020,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "List all information regarding the basketball match."
                }
            ],
            "example_quality": 0.4642080259347719,
            "example_similarity": 0.5727235080693955,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
            "correct": 1
        },
        {
            "index": 349,
            "question": "What are the type codes and descriptions for all template types?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the type codes and descriptions of each budget type? */\nSELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the type codes and descriptions for all template types? */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6443,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
                    "question": "What are the type codes and descriptions of each budget type?"
                }
            ],
            "example_quality": 0.4657432464908327,
            "example_similarity": 0.5731291304367775,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
            "correct": 1
        },
        {
            "index": 350,
            "question": "What is the template type descriptions for template type code \"AD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the document ids for the budget type code 'SF'? */\nSELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type descriptions for template type code \"AD\". */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6448,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'",
                    "question": "What are the document ids for the budget type code 'SF'?"
                }
            ],
            "example_quality": 0.46726969435800175,
            "example_similarity": 0.5728450020941762,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
            "correct": 1
        },
        {
            "index": 351,
            "question": "Return the template type description of the template type with the code AD.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the description of the budget type that has the code ORG. */\nSELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type description of the template type with the code AD. */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6445,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
                    "question": "Return the description of the budget type that has the code ORG."
                }
            ],
            "example_quality": 0.468787444516526,
            "example_similarity": 0.5728888490799982,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
            "correct": 1
        },
        {
            "index": 352,
            "question": "What is the template type code for template type description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the document ids for the budget type code 'SF'? */\nSELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code for template type description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6448,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'",
                    "question": "What are the document ids for the budget type code 'SF'?"
                }
            ],
            "example_quality": 0.47029657109460404,
            "example_similarity": 0.5726070177204705,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
            "correct": 1
        },
        {
            "index": 353,
            "question": "Return the type code of the template type with the description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the apartment numbers of the apartments with type code \"Flat\". */\nSELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type with the description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1215,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
                    "question": "Return the apartment numbers of the apartments with type code \"Flat\"."
                }
            ],
            "example_quality": 0.47179714738045503,
            "example_similarity": 0.573286601239676,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
            "correct": 1
        },
        {
            "index": 354,
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the capital of the state that borders the state that borders texas */\nSELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the distinct template type descriptions for the templates ever used by any document? */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7466,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
                    "question": "what is the capital of the state that borders the state that borders texas"
                }
            ],
            "example_quality": 0.470559771918268,
            "example_similarity": 0.5726943689300622,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));",
            "correct": 0
        },
        {
            "index": 355,
            "question": "Return the different descriptions for templates that have been used in a document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all distinct building descriptions. */\nSELECT DISTINCT building_description FROM Apartment_Buildings\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different descriptions for templates that have been used in a document. */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1199,
                    "db_id": "apartment_rentals",
                    "query": "SELECT DISTINCT building_description FROM Apartment_Buildings",
                    "question": "Show all distinct building descriptions."
                }
            ],
            "example_quality": 0.4694247276244673,
            "example_similarity": 0.5715782456041615,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT t.Template_Details FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;",
            "correct": 0
        },
        {
            "index": 356,
            "question": "What are the template ids with template type description \"Presentation\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the famous titles of the artist \"Triumfall\"? */\nSELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids with template type description \"Presentation\". */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6150,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
                    "question": "What are the famous titles of the artist \"Triumfall\"?"
                }
            ],
            "example_quality": 0.4685395056768865,
            "example_similarity": 0.5715527449142621,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Presentation\")",
            "correct": 1
        },
        {
            "index": 357,
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all documents with budget types described as 'Government'. */\nSELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids corresponding to templates with the description 'Presentation'. */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6452,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
                    "question": "Show ids for all documents with budget types described as 'Government'."
                }
            ],
            "example_quality": 0.46946796644529865,
            "example_similarity": 0.570752076961321,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'",
            "correct": 1
        },
        {
            "index": 358,
            "question": "How many paragraphs in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many colleges in total? */\nSELECT count(*) FROM College\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs in total? */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4949,
                    "db_id": "soccer_2",
                    "query": "SELECT count(*) FROM College",
                    "question": "How many colleges in total?"
                }
            ],
            "example_quality": 0.4709498994999207,
            "example_similarity": 0.5719510935061217,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs",
            "correct": 1
        },
        {
            "index": 359,
            "question": "Count the number of paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs. */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                }
            ],
            "example_quality": 0.47242357666008805,
            "example_similarity": 0.5731434302930127,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs",
            "correct": 1
        },
        {
            "index": 360,
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many clubs does the student named \"Eric Tai\" belong to? */\nSELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs for the document with name 'Summer Show'? */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4309,
                    "db_id": "club_1",
                    "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
                    "question": "How many clubs does the student named \"Eric Tai\" belong to?"
                }
            ],
            "example_quality": 0.47181529395340127,
            "example_similarity": 0.5727209558521404,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
            "correct": 1
        },
        {
            "index": 361,
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different positions in the club \"Bootup Baltimore\". */\nSELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs in the document named 'Summer Show'. */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4300,
                    "db_id": "club_1",
                    "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"",
                    "question": "Count the number of different positions in the club \"Bootup Baltimore\"."
                }
            ],
            "example_quality": 0.4722081501021075,
            "example_similarity": 0.5729268779232686,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
            "correct": 1
        },
        {
            "index": 362,
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the color description for the product 'catnip'. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show paragraph details for paragraph with text 'Korea ' . */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5546,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "Give the color description for the product 'catnip'."
                }
            ],
            "example_quality": 0.47096454695133866,
            "example_similarity": 0.5729227389550512,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t3.Paragraph_Text, t3.Other_Details FROM Paragraphs AS t3 JOIN Documents AS t2 ON t3.Document_ID = t2.Document_ID JOIN Templates AS t1 ON t2.Template_ID = t1.Template_ID WHERE t3.Paragraph_Text = 'Korea'",
            "correct": 0
        },
        {
            "index": 363,
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the color code and description of the product named \"chervil\"? */\nSELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the details for the paragraph that includes the text 'Korea ' ? */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5547,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
                    "question": "What is the color code and description of the product named \"chervil\"?"
                }
            ],
            "example_quality": 0.46971770875830027,
            "example_similarity": 0.5720331446328609,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t1.Paragraph_Text, t1.Other_Details FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.Document_ID = t2.Document_ID WHERE t1.Paragraph_Text LIKE '%Korea%'",
            "correct": 0
        },
        {
            "index": 364,
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the course that is a prerequisite for Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph ids and texts for the document with name 'Welcome to NY'. */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1438,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the title of the course that is a prerequisite for Mobile Computing?"
                }
            ],
            "example_quality": 0.4695388076384957,
            "example_similarity": 0.5712308557739795,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
            "correct": 1
        },
        {
            "index": 365,
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the course with Differential Geometry as a prerequisite? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1426,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
                    "question": "What is the title of the course with Differential Geometry as a prerequisite?"
                }
            ],
            "example_quality": 0.46936088679879967,
            "example_similarity": 0.5707379064371358,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
            "correct": 1
        },
        {
            "index": 366,
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of festivals that have nominated artworks of type \"Program Talent Show\". */\nSELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph texts for the document \"Customer reviews\". */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4611,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
                    "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\"."
                }
            ],
            "example_quality": 0.4691993991579735,
            "example_similarity": 0.5704080214468705,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T3.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T3 ON T1.Document_ID = T3.Document_ID WHERE T1.Document_Name = \"Customer reviews\"",
            "correct": 1
        },
        {
            "index": 367,
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents? */\nSELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the paragraph texts for the document with the name 'Customer reviews'? */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6425,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
                    "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?"
                }
            ],
            "example_quality": 0.46971082176408563,
            "example_similarity": 0.5703209738093084,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews'",
            "correct": 1
        },
        {
            "index": 368,
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the different statuses, ordered by the number of cities that have each. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids and the number of paragraphs in each document. Order by document id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 45,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
                    "question": "Please show the different statuses, ordered by the number of cities that have each."
                }
            ],
            "example_quality": 0.46994990188889063,
            "example_similarity": 0.5696073089557295,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;",
            "correct": 0
        },
        {
            "index": 369,
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the different statuses of cities, ascending by frequency. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 46,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
                    "question": "Return the different statuses of cities, ascending by frequency."
                }
            ],
            "example_quality": 0.4701876861864609,
            "example_similarity": 0.5692250978977775,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, COUNT(Paragraph_ID) AS Num_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;",
            "correct": 1
        },
        {
            "index": 370,
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of products and the number of events they are in. */\nSELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids, names and the number of paragraphs in each document. */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4594,
                    "db_id": "solvency_ii",
                    "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
                    "question": "Show the names of products and the number of events they are in."
                }
            ],
            "example_quality": 0.47096738888852563,
            "example_similarity": 0.5691091267939287,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name, COUNT(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name",
            "correct": 1
        },
        {
            "index": 371,
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the the full names and ids for all customers, and how many accounts does each have? */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and names of each document, as well as the number of paragraphs in each? */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1571,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "What are the the full names and ids for all customers, and how many accounts does each have?"
                }
            ],
            "example_quality": 0.471953882508069,
            "example_similarity": 0.568730318982008,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name, COUNT(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name",
            "correct": 1
        },
        {
            "index": 372,
            "question": "List all document ids with at least two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of studios that have at least two films. */\nSELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List all document ids with at least two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4145,
                    "db_id": "film_rank",
                    "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2",
                    "question": "List the names of studios that have at least two films."
                }
            ],
            "example_quality": 0.4733733613185312,
            "example_similarity": 0.5684559543252464,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 373,
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names of accounts with 4 or more transactions? */\nSELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that have 2 or more paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1595,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
                    "question": "What are the ids and names of accounts with 4 or more transactions?"
                }
            ],
            "example_quality": 0.472533218258696,
            "example_similarity": 0.5687751072627123,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 374,
            "question": "What is the document id and name with greatest number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the department that has the biggest number of students minored in? */\nSELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id and name with greatest number of paragraphs? */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4672,
                    "db_id": "college_3",
                    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the department that has the biggest number of students minored in?"
                }
            ],
            "example_quality": 0.4732144859300024,
            "example_similarity": 0.5682729074597433,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN (SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1) AS T2 ON T1.Document_ID = T2.Document_ID",
            "correct": 1
        },
        {
            "index": 375,
            "question": "Return the id and name of the document with the most paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the id and full name of the customer with the most accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and name of the document with the most paragraphs. */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1569,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the id and full name of the customer with the most accounts."
                }
            ],
            "example_quality": 0.4742365312514731,
            "example_similarity": 0.5692337035160413,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T2.Document_Name FROM Documents AS T1 JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) AS T3 ON T1.Document_ID = T3.Document_ID JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID;",
            "correct": 1
        },
        {
            "index": 376,
            "question": "What is the document id with least number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the employee id of the head whose department has the least number of employees? */\nSELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with least number of paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3901,
                    "db_id": "hospital_1",
                    "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
                    "question": "What is the employee id of the head whose department has the least number of employees?"
                }
            ],
            "example_quality": 0.4746440164885495,
            "example_similarity": 0.5691973254629549,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1;",
            "correct": 1
        },
        {
            "index": 377,
            "question": "Return the id of the document with the fewest paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the id of the project that has the fewest corresponding documents. */\nSELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id of the document with the fewest paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6415,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Return the id of the project that has the fewest corresponding documents."
                }
            ],
            "example_quality": 0.47603753368619256,
            "example_similarity": 0.569582175300681,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 378,
            "question": "What is the document id with 1 to 2 paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the address for the customer with id 10? */\nSELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with 1 to 2 paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4717,
                    "db_id": "department_store",
                    "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
                    "question": "What is the address for the customer with id 10?"
                }
            ],
            "example_quality": 0.4748957530268228,
            "example_similarity": 0.5699068459805937,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID FROM Documents AS T1 JOIN ( SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID HAVING Paragraph_Count BETWEEN 1 AND 2 ) AS T2 ON T1.Document_ID = T2.Document_ID",
            "correct": 1
        },
        {
            "index": 379,
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which events have the number of notes between one and three? List the event id and the property id. */\nSELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Give the ids of documents that have between one and two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4851,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
                    "question": "Which events have the number of notes between one and three? List the event id and the property id."
                }
            ],
            "example_quality": 0.4741519184703941,
            "example_similarity": 0.5693530020598007,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2",
            "correct": 1
        },
        {
            "index": 380,
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of authors from college \"Florida\" or \"Temple\" */\nSELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show the document id with paragraph text 'Brazil' and 'Ireland'. */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5821,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"",
                    "question": "Show the names of authors from college \"Florida\" or \"Temple\""
                }
            ],
            "example_quality": 0.47368726747721623,
            "example_similarity": 0.5685412035417943,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland'",
            "correct": 0
        },
        {
            "index": 381,
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and locations of all circuits in France or Belgium? */\nSELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2217,
                    "db_id": "formula_1",
                    "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
                    "question": "What are the ids and locations of all circuits in France or Belgium?"
                }
            ],
            "example_quality": 0.47299827235056635,
            "example_similarity": 0.5683613053697685,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND p.Paragraph_Text LIKE '%Ireland%'",
            "correct": 0
        },
        {
            "index": 382,
            "question": "How many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: How many teachers are there? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.47292352410997446,
            "example_similarity": 0.5694912495965493,
            "db_id": "course_teach",
            "pred": "SELECT count(*) FROM teacher",
            "correct": 1
        },
        {
            "index": 383,
            "question": "What is the total count of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total count of enzymes? */\nSELECT count(*) FROM enzyme\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the total count of teachers? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 935,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme",
                    "question": "What is the total count of enzymes?"
                }
            ],
            "example_quality": 0.47429970289819906,
            "example_similarity": 0.5706152933312841,
            "db_id": "course_teach",
            "pred": "SELECT count(*) FROM teacher",
            "correct": 1
        },
        {
            "index": 384,
            "question": "List the names of teachers in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers in ascending order of age. */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 651,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC",
                    "question": "List the names of editors in ascending order of age."
                }
            ],
            "example_quality": 0.4756687140885683,
            "example_similarity": 0.5717334826715673,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 385,
            "question": "What are the names of the teachers ordered by ascending age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the names of the ships ordered by ascending tonnage? */\nSELECT Name FROM ship ORDER BY Tonnage ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers ordered by ascending age? */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4002,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
                    "question": "what are the names of the ships ordered by ascending tonnage?"
                }
            ],
            "example_quality": 0.47703061353249415,
            "example_similarity": 0.5728458632360567,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 386,
            "question": "What are the age and hometown of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the characters and duration of actors? */\nSELECT Character ,  Duration FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the age and hometown of teachers? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 239,
                    "db_id": "musical",
                    "query": "SELECT Character ,  Duration FROM actor",
                    "question": "What are the characters and duration of actors?"
                }
            ],
            "example_quality": 0.4776452640525801,
            "example_similarity": 0.5739524801706783,
            "db_id": "course_teach",
            "pred": "SELECT Age, Hometown FROM teacher",
            "correct": 1
        },
        {
            "index": 387,
            "question": "What is the age and hometown of every teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the types and nationalities of every ship? */\nSELECT TYPE ,  Nationality FROM ship\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the age and hometown of every teacher? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4004,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  Nationality FROM ship",
                    "question": "What are the types and nationalities of every ship?"
                }
            ],
            "example_quality": 0.47899501789223753,
            "example_similarity": 0.5745835637314306,
            "db_id": "course_teach",
            "pred": "SELECT Age, Hometown FROM teacher",
            "correct": 1
        },
        {
            "index": 388,
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of artworks whose type is not \"Program Talent Show\". */\nSELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the name of teachers whose hometown is not `` Little Lever Urban District '' . */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4601,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
                    "question": "List the name of artworks whose type is not \"Program Talent Show\"."
                }
            ],
            "example_quality": 0.47893200355371496,
            "example_similarity": 0.5749640757378502,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
            "correct": 0
        },
        {
            "index": 389,
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of the books whose writer is not \"Elaine Lee\"? */\nSELECT Title FROM book WHERE Writer != \"Elaine Lee\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 217,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
                    "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?"
                }
            ],
            "example_quality": 0.4788693131963672,
            "example_similarity": 0.5752855048490639,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
            "correct": 0
        },
        {
            "index": 390,
            "question": "Show the name of teachers aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of companies in the banking or retailing industry? */\nSELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of teachers aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4100,
                    "db_id": "company_employee",
                    "query": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
                    "question": "Show the names of companies in the banking or retailing industry?"
                }
            ],
            "example_quality": 0.4794729449940322,
            "example_similarity": 0.5757828003987606,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Age = \"32\" OR Age = \"33\"",
            "correct": 1
        },
        {
            "index": 391,
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of people aged either 35 or 36. */\nSELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who are aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1497,
                    "db_id": "debate",
                    "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
                    "question": "Show the names of people aged either 35 or 36."
                }
            ],
            "example_quality": 0.4808042162344567,
            "example_similarity": 0.5756642043995461,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "correct": 1
        },
        {
            "index": 392,
            "question": "What is the hometown of the youngest teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the youngest editor? */\nSELECT Name FROM editor ORDER BY Age ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the hometown of the youngest teacher? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 655,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
                    "question": "What is the name of the youngest editor?"
                }
            ],
            "example_quality": 0.4821286952746749,
            "example_similarity": 0.5767466936740371,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 393,
            "question": "Where is the youngest teacher from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How old is the youngest winning pilot and what is their name? */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Where is the youngest teacher from? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4841,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
                    "question": "How old is the youngest winning pilot and what is their name?"
                }
            ],
            "example_quality": 0.4811802125894976,
            "example_similarity": 0.5761273212558673,
            "db_id": "course_teach",
            "pred": "SELECT t1.Hometown FROM teacher AS t1 ORDER BY t1.Age LIMIT 1",
            "correct": 1
        },
        {
            "index": 394,
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different teams of technicians and the number of technicians in each team. */\nSELECT Team ,  COUNT(*) FROM technician GROUP BY Team\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show different hometown of teachers and the number of teachers from each hometown. */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2246,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
                    "question": "Show different teams of technicians and the number of technicians in each team."
                }
            ],
            "example_quality": 0.4824970140803872,
            "example_similarity": 0.5768647307619861,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
            "correct": 1
        },
        {
            "index": 395,
            "question": "For each hometown, how many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each team, how many technicians are there? */\nSELECT Team ,  COUNT(*) FROM technician GROUP BY Team\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: For each hometown, how many teachers are there? */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2247,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
                    "question": "For each team, how many technicians are there?"
                }
            ],
            "example_quality": 0.48380714822195586,
            "example_similarity": 0.5779359592917026,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
            "correct": 1
        },
        {
            "index": 396,
            "question": "List the most common hometown of teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the most common type of artworks. */\nSELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the most common hometown of teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4615,
                    "db_id": "entertainment_awards",
                    "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of artworks."
                }
            ],
            "example_quality": 0.48511066552442567,
            "example_similarity": 0.5790017775763195,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown ORDER BY Frequency DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 397,
            "question": "What is the most commmon hometowns for teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which college has the most authors with submissions? */\nSELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the most commmon hometowns for teachers? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5830,
                    "db_id": "workshop_paper",
                    "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which college has the most authors with submissions?"
                }
            ],
            "example_quality": 0.48640761598909965,
            "example_similarity": 0.5785121393068965,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 398,
            "question": "Show the hometowns shared by at least two teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the headquarters shared by more than two companies. */\nSELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the hometowns shared by at least two teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4582,
                    "db_id": "company_office",
                    "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
                    "question": "Show the headquarters shared by more than two companies."
                }
            ],
            "example_quality": 0.4872792886457434,
            "example_similarity": 0.5787336330942326,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 399,
            "question": "What are the towns from which at least two teachers come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which headquarter locations are used by more than 2 companies? */\nSELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the towns from which at least two teachers come from? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4583,
                    "db_id": "company_office",
                    "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
                    "question": "Which headquarter locations are used by more than 2 companies?"
                }
            ],
            "example_quality": 0.48814659201588767,
            "example_similarity": 0.5777844259937459,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 400,
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the addresses of all the course authors or tutors. */\nSELECT address_line_1 FROM Course_Authors_and_Tutors\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3775,
                    "db_id": "e_learning",
                    "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
                    "question": "List the addresses of all the course authors or tutors."
                }
            ],
            "example_quality": 0.4870328922025147,
            "example_similarity": 0.5771732982620947,
            "db_id": "course_teach",
            "pred": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;",
            "correct": 1
        },
        {
            "index": 401,
            "question": "What is the name of each teacher and what course they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the employee ids and the names of the countries in which they work? */\nSELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the name of each teacher and what course they teach? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3463,
                    "db_id": "hr_1",
                    "query": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
                    "question": "What are all the employee ids and the names of the countries in which they work?"
                }
            ],
            "example_quality": 0.48696441732940393,
            "example_similarity": 0.5768027200334397,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, T1.Course FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID",
            "correct": 1
        },
        {
            "index": 402,
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                }
            ],
            "example_quality": 0.48591687812842677,
            "example_similarity": 0.5763007232174362,
            "db_id": "course_teach",
            "pred": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;",
            "correct": 1
        },
        {
            "index": 403,
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the technicians by ascending order of quality rank for the machine they are assigned? */\nSELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2255,
                    "db_id": "machine_repair",
                    "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
                    "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?"
                }
            ],
            "example_quality": 0.48642429655506847,
            "example_similarity": 0.5764931436408325,
            "db_id": "course_teach",
            "pred": "SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID ORDER BY T.Name, C.Course;",
            "correct": 0
        },
        {
            "index": 404,
            "question": "Show the name of the teacher for the math course.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the statement detail and the corresponding document name for the statement with detail 'Private Project'. */\nSELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of the teacher for the math course. */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6424,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
                    "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'."
                }
            ],
            "example_quality": 0.48623226050661456,
            "example_similarity": 0.576303804176375,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Course_ID = (SELECT Course_ID FROM course WHERE Course = 'Math')",
            "correct": 1
        },
        {
            "index": 405,
            "question": "What are the names of the people who teach math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the last names of the teachers who teach grade 5? */\nSELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the people who teach math courses? */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4048,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
                    "question": "what are the last names of the teachers who teach grade 5?"
                }
            ],
            "example_quality": 0.48586106340881413,
            "example_similarity": 0.5768208670937525,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID = T3.Course_ID WHERE T3.Course = 'Math'",
            "correct": 1
        },
        {
            "index": 406,
            "question": "Show names of teachers and the number of courses they teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name and the number of enrolled student for each course. */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the number of courses they teach. */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3828,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "List the name and the number of enrolled student for each course."
                }
            ],
            "example_quality": 0.4866582622908707,
            "example_similarity": 0.5763579804479277,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, COUNT(T1.Course_ID) FROM teacher AS T2 JOIN course_arrange AS T1 ON T2.Teacher_ID = T1.Teacher_ID GROUP BY T2.Name",
            "correct": 1
        },
        {
            "index": 407,
            "question": "What are the names of the teachers and how many courses do they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and how many courses do they teach? */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3827,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "What is the name of each course and the corresponding number of student enrollment?"
                }
            ],
            "example_quality": 0.48745154373370353,
            "example_similarity": 0.5758353229127642,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, COUNT(T1.Course_ID) FROM teacher AS T2 JOIN course_arrange AS T1 ON T2.Teacher_ID = T1.Teacher_ID GROUP BY T2.Name",
            "correct": 1
        },
        {
            "index": 408,
            "question": "Show names of teachers that teach at least two courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the addresses and author IDs of the course authors that teach at least two courses. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers that teach at least two courses. */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3809,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Find the addresses and author IDs of the course authors that teach at least two courses."
                }
            ],
            "example_quality": 0.4879643258977549,
            "example_similarity": 0.5757856176006142,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2",
            "correct": 1
        },
        {
            "index": 409,
            "question": "What are the names of the teachers who teach at least two courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all professors who teach more than one class? */\nSELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who teach at least two courses? */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3331,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
                    "question": "What are the first names of all professors who teach more than one class?"
                }
            ],
            "example_quality": 0.4886049999175648,
            "example_similarity": 0.5754780733033021,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 410,
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of technicians who have not been assigned to repair machines. */\nSELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers who have not been arranged to teach courses. */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2260,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
                    "question": "List the names of technicians who have not been assigned to repair machines."
                }
            ],
            "example_quality": 0.4898523047958146,
            "example_similarity": 0.5759037365391477,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
            "correct": 1
        },
        {
            "index": 411,
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the technicians that have not been assigned to repair machines? */\nSELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose courses have not been arranged? */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2261,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
                    "question": "What are the names of the technicians that have not been assigned to repair machines?"
                }
            ],
            "example_quality": 0.49109354006395134,
            "example_similarity": 0.57612457091902,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
            "correct": 1
        },
        {
            "index": 412,
            "question": "How many visitors below age 30 are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many staff live in state Georgia? */\nSELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many visitors below age 30 are there? */\nSELECT ",
            "response": "count(*) FROM visitor WHERE age < 30",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6651,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
                    "question": "How many staff live in state Georgia?"
                }
            ],
            "example_quality": 0.49135787613175724,
            "example_similarity": 0.5757375371708348,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM visitor WHERE Age < 30;",
            "correct": 1
        },
        {
            "index": 413,
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the names of the companies with more than 200 sales in the descending order of sales and profits. */\nSELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. */\nSELECT ",
            "response": "name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4112,
                    "db_id": "company_employee",
                    "query": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
                    "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits."
                }
            ],
            "example_quality": 0.49198412824766097,
            "example_similarity": 0.5751980786703499,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "correct": 1
        },
        {
            "index": 414,
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average height of the players who belong to the college called 'Yale University'. */\nSELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the average age of the visitors whose membership level is not higher than 4? */\nSELECT ",
            "response": "avg(age) FROM visitor WHERE Level_of_membership <= 4",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3657,
                    "db_id": "baseball_1",
                    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
                    "question": "Find the average height of the players who belong to the college called 'Yale University'."
                }
            ],
            "example_quality": 0.4908978777513242,
            "example_similarity": 0.574412576064866,
            "db_id": "museum_visit",
            "pred": "SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4;",
            "correct": 1
        },
        {
            "index": 415,
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List names of all pilot aged 30 or younger in descending alphabetical order. */\nSELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. */\nSELECT ",
            "response": "name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4814,
                    "db_id": "aircraft",
                    "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
                    "question": "List names of all pilot aged 30 or younger in descending alphabetical order."
                }
            ],
            "example_quality": 0.4911406941101563,
            "example_similarity": 0.5732889508408738,
            "db_id": "museum_visit",
            "pred": "SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 416,
            "question": "Find the id and name of the museum that has the most staff members?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, headquarters and founders of the company with the highest revenue? */\nSELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the id and name of the museum that has the most staff members? */\nSELECT ",
            "response": "museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5298,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
                    "question": "What are the names, headquarters and founders of the company with the highest revenue?"
                }
            ],
            "example_quality": 0.49159697220352716,
            "example_similarity": 0.5727469728026902,
            "db_id": "museum_visit",
            "pred": "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 417,
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average height of the players who belong to the college called 'Yale University'. */\nSELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the average number of staff working for the museums that were open before 2009. */\nSELECT ",
            "response": "avg(num_of_staff) FROM museum WHERE open_year < 2009",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3657,
                    "db_id": "baseball_1",
                    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
                    "question": "Find the average height of the players who belong to the college called 'Yale University'."
                }
            ],
            "example_quality": 0.49051946489072307,
            "example_similarity": 0.5722367882156334,
            "db_id": "museum_visit",
            "pred": "SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year < '2009';",
            "correct": 1
        },
        {
            "index": 418,
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the open dates and years for the shop named Apple? */\nSELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the opening year and staff number of the museum named Plaza Museum? */\nSELECT ",
            "response": "Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5066,
                    "db_id": "device",
                    "query": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
                    "question": "What are the open dates and years for the shop named Apple?"
                }
            ],
            "example_quality": 0.49173831784552985,
            "example_similarity": 0.5721968809604657,
            "db_id": "museum_visit",
            "pred": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = \"Plaza Museum\"",
            "correct": 1
        },
        {
            "index": 419,
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin. */\nSELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. */\nSELECT ",
            "response": "name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5303,
                    "db_id": "manufactory_1",
                    "query": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
                    "question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin."
                }
            ],
            "example_quality": 0.49175803546403696,
            "example_similarity": 0.571854099451184,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > '2010')",
            "correct": 1
        },
        {
            "index": 420,
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names and ids of tourist attractions that are visited at most once. */\nSELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the id, name and age for visitors who visited some museums more than once. */\nSELECT ",
            "response": "t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5956,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
                    "question": "Show the names and ids of tourist attractions that are visited at most once."
                }
            ],
            "example_quality": 0.49205112135913653,
            "example_similarity": 0.5712861928651892,
            "db_id": "museum_visit",
            "pred": "SELECT V.ID, V.Name, V.Age FROM visitor V JOIN visit VS ON V.ID = VS.visitor_ID GROUP BY V.ID, V.Name, V.Age HAVING COUNT(VS.Museum_ID) > 1;",
            "correct": 1
        },
        {
            "index": 421,
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and last names of all drivers who participated in the most races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? */\nSELECT ",
            "response": "t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2233,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the ids and last names of all drivers who participated in the most races?"
                }
            ],
            "example_quality": 0.49173502453636986,
            "example_similarity": 0.5709585138639258,
            "db_id": "museum_visit",
            "pred": "SELECT T2.ID, T2.Name, T2.Level_of_membership FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T1.visitor_ID ORDER BY SUM(T1.Total_spent) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 422,
            "question": "What are the id and name of the museum visited most times?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the organisation type and id of the organisation which has the most number of research staff? */\nSELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id and name of the museum visited most times? */\nSELECT ",
            "response": "t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4331,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the organisation type and id of the organisation which has the most number of research staff?"
                }
            ],
            "example_quality": 0.4924316578566966,
            "example_similarity": 0.5708467863993419,
            "db_id": "museum_visit",
            "pred": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY SUM(T2.Num_of_Ticket) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 423,
            "question": "What is the name of the museum that had no visitor yet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the details of the project with no outcomes? */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the museum that had no visitor yet? */\nSELECT ",
            "response": "name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4360,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                    "question": "What are the details of the project with no outcomes?"
                }
            ],
            "example_quality": 0.49242968381603186,
            "example_similarity": 0.5706792999066721,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
            "correct": 1
        },
        {
            "index": 424,
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the date of the performance with the highest number of attendees? */\nSELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and age of the visitor who bought the most tickets at once. */\nSELECT ",
            "response": "t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1313,
                    "db_id": "performance_attendance",
                    "query": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
                    "question": "What is the date of the performance with the highest number of attendees?"
                }
            ],
            "example_quality": 0.491661374813321,
            "example_similarity": 0.5699229808031185,
            "db_id": "museum_visit",
            "pred": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)",
            "correct": 1
        },
        {
            "index": 425,
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the average and maximum attendances of all events? */\nSELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the average and maximum number of tickets bought in all visits? */\nSELECT ",
            "response": "avg(num_of_ticket) , max(num_of_ticket) FROM visit",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2818,
                    "db_id": "news_report",
                    "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
                    "question": "what are the average and maximum attendances of all events?"
                }
            ],
            "example_quality": 0.4916809951078779,
            "example_similarity": 0.5701506130051505,
            "db_id": "museum_visit",
            "pred": "SELECT avg(Num_of_Ticket), max(Num_of_Ticket) FROM visit",
            "correct": 1
        },
        {
            "index": 426,
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total salary expenses of team Boston Red Stockings in 2010? */\nSELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the total ticket expense of the visitors whose membership level is 1? */\nSELECT ",
            "response": "sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3679,
                    "db_id": "baseball_1",
                    "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010",
                    "question": "What is the total salary expenses of team Boston Red Stockings in 2010?"
                }
            ],
            "example_quality": 0.4917005232883758,
            "example_similarity": 0.5697064856998624,
            "db_id": "museum_visit",
            "pred": "SELECT sum(T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1",
            "correct": 1
        },
        {
            "index": 427,
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the denominations used by both schools founded before 1890 and schools founded  after 1900? */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? */\nSELECT ",
            "response": "t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4896,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?"
                }
            ],
            "example_quality": 0.4907802273959328,
            "example_similarity": 0.569683753883235,
            "db_id": "museum_visit",
            "pred": "SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 INTERSECT SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > 2011",
            "correct": 1
        },
        {
            "index": 428,
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the number of visitors who did not visit any museum opened after 2010. */\nSELECT ",
            "response": "count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                }
            ],
            "example_quality": 0.4898770271597642,
            "example_similarity": 0.569520941374162,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > '2010'))",
            "correct": 1
        },
        {
            "index": 429,
            "question": "How many museums were opened after 2013 or before 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trips did not end in San Francisco? */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many museums were opened after 2013 or before 2008? */\nSELECT ",
            "response": "count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 167,
                    "db_id": "bike_1",
                    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
                    "question": "How many trips did not end in San Francisco?"
                }
            ],
            "example_quality": 0.48895823289066054,
            "example_similarity": 0.5693588878977653,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008",
            "correct": 1
        },
        {
            "index": 430,
            "question": "Find the total number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of employees. */\nSELECT count(*) FROM employee\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of players. */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3248,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM employee",
                    "question": "Find the total number of employees."
                }
            ],
            "example_quality": 0.49014670211649625,
            "example_similarity": 0.5703603788561427,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM players",
            "correct": 1
        },
        {
            "index": 431,
            "question": "How many players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there? */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.49004066439567945,
            "example_similarity": 0.5713572225246899,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(player_id) FROM players",
            "correct": 1
        },
        {
            "index": 432,
            "question": "Find the total number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of employees. */\nSELECT count(*) FROM employee\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3248,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM employee",
                    "question": "Find the total number of employees."
                }
            ],
            "example_quality": 0.49122112582068944,
            "example_similarity": 0.5723494511762531,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM matches",
            "correct": 1
        },
        {
            "index": 433,
            "question": "Count the number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Count the number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                }
            ],
            "example_quality": 0.49239613476798577,
            "example_similarity": 0.5733370967855459,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM matches",
            "correct": 1
        },
        {
            "index": 434,
            "question": "List the first name and birth date of all players from the country with code USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first name and birth date of all players from the country with code USA. */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4306,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
                    "question": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs."
                }
            ],
            "example_quality": 0.49139210751833273,
            "example_similarity": 0.5729694838976719,
            "db_id": "wta_1",
            "pred": "SELECT first_name, birth_date FROM players WHERE country_code = \"USA\"",
            "correct": 1
        },
        {
            "index": 435,
            "question": "What are the first names and birth dates of players from the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the airports in the city of Goroka? */\nSELECT name FROM airports WHERE city  =  'Goroka'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and birth dates of players from the USA? */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6805,
                    "db_id": "flight_4",
                    "query": "SELECT name FROM airports WHERE city  =  'Goroka'",
                    "question": "What are the names of the airports in the city of Goroka?"
                }
            ],
            "example_quality": 0.4919789455853404,
            "example_similarity": 0.5730045777142696,
            "db_id": "wta_1",
            "pred": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
            "correct": 1
        },
        {
            "index": 436,
            "question": "Find the average age of losers and winners of all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average height and weight for all males (sex is M). */\nSELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average age of losers and winners of all matches. */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2409,
                    "db_id": "candidate_poll",
                    "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
                    "question": "Find the average height and weight for all males (sex is M)."
                }
            ],
            "example_quality": 0.49188266360005295,
            "example_similarity": 0.5728371360222644,
            "db_id": "wta_1",
            "pred": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
            "correct": 1
        },
        {
            "index": 437,
            "question": "What are the average ages of losers and winners across matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average distance and price for all flights from LA? */\nSELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the average ages of losers and winners across matches? */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 403,
                    "db_id": "flight_1",
                    "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
                    "question": "What is the average distance and price for all flights from LA?"
                }
            ],
            "example_quality": 0.49178682226458376,
            "example_similarity": 0.5726031568443968,
            "db_id": "wta_1",
            "pred": "SELECT avg(loser_age), avg(winner_age) FROM matches",
            "correct": 1
        },
        {
            "index": 438,
            "question": "Find the average rank of winners in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average hours of all projects. */\nSELECT avg(hours) FROM projects\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average rank of winners in all matches. */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6478,
                    "db_id": "scientist_1",
                    "query": "SELECT avg(hours) FROM projects",
                    "question": "Find the average hours of all projects."
                }
            ],
            "example_quality": 0.4929471263233404,
            "example_similarity": 0.5731223277191813,
            "db_id": "wta_1",
            "pred": "SELECT avg(winner_rank) FROM matches",
            "correct": 1
        },
        {
            "index": 439,
            "question": "What is the average rank for winners in all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average age for all person? */\nSELECT avg(age) FROM Person\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the average rank for winners in all matches? */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4403,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) FROM Person",
                    "question": "What is the average age for all person?"
                }
            ],
            "example_quality": 0.4941021442588226,
            "example_similarity": 0.573680549793128,
            "db_id": "wta_1",
            "pred": "SELECT avg(winner_rank) FROM matches",
            "correct": 1
        },
        {
            "index": 440,
            "question": "Find the highest rank of losers in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum age of all the students. */\nSELECT max(Age) FROM STUDENT\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the highest rank of losers in all matches. */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5451,
                    "db_id": "voter_2",
                    "query": "SELECT max(Age) FROM STUDENT",
                    "question": "Find the maximum age of all the students."
                }
            ],
            "example_quality": 0.49434282120368883,
            "example_similarity": 0.5737024879375375,
            "db_id": "wta_1",
            "pred": "SELECT max(loser_rank) FROM matches",
            "correct": 0
        },
        {
            "index": 441,
            "question": "What is the best rank of losers across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the best rank of losers across all matches? */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1695,
                    "db_id": "epinions_1",
                    "query": "SELECT min(rank) FROM review",
                    "question": "Find the highest rank of all reviews."
                }
            ],
            "example_quality": 0.4954894361215943,
            "example_similarity": 0.5732114230151006,
            "db_id": "wta_1",
            "pred": "SELECT max(loser_rank) FROM matches",
            "correct": 0
        },
        {
            "index": 442,
            "question": "find the number of distinct country codes of all players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of distinct gender for dorms. */\nSELECT count(DISTINCT gender) FROM dorm\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of distinct country codes of all players. */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5695,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT gender) FROM dorm",
                    "question": "Find the number of distinct gender for dorms."
                }
            ],
            "example_quality": 0.4966308627367038,
            "example_similarity": 0.5734228602179323,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT country_code) FROM players",
            "correct": 1
        },
        {
            "index": 443,
            "question": "How many distinct countries do players come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct countries are the climbers from? */\nSELECT COUNT(DISTINCT Country) FROM climber\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many distinct countries do players come from? */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1119,
                    "db_id": "climbing",
                    "query": "SELECT COUNT(DISTINCT Country) FROM climber",
                    "question": "How many distinct countries are the climbers from?"
                }
            ],
            "example_quality": 0.4977671361842507,
            "example_similarity": 0.5735649387193898,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT country_code) FROM players",
            "correct": 1
        },
        {
            "index": 444,
            "question": "Find the number of distinct name of losers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of distinct amenities. */\nSELECT count(*) FROM dorm_amenity\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of distinct name of losers. */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5681,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM dorm_amenity",
                    "question": "Find the number of distinct amenities."
                }
            ],
            "example_quality": 0.4976470400316836,
            "example_similarity": 0.574024877546098,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT loser_name) FROM matches;",
            "correct": 1
        },
        {
            "index": 445,
            "question": "How many different loser names are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different loser names are there? */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 127,
                    "db_id": "bike_1",
                    "query": "SELECT count(DISTINCT bike_id) FROM trip",
                    "question": "How many different bike ids are there?"
                }
            ],
            "example_quality": 0.4987759230877922,
            "example_similarity": 0.5749821250122865,
            "db_id": "wta_1",
            "pred": "SELECT count(DISTINCT loser_name) FROM matches",
            "correct": 1
        },
        {
            "index": 446,
            "question": "Find the name of tourney that has more than 10 matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which membership card has more than 5 members? */\nSELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of tourney that has more than 10 matches. */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 795,
                    "db_id": "coffee_shop",
                    "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
                    "question": "Which membership card has more than 5 members?"
                }
            ],
            "example_quality": 0.49989974388804376,
            "example_similarity": 0.5745897884091199,
            "db_id": "wta_1",
            "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "correct": 1
        },
        {
            "index": 447,
            "question": "What are the names of tournaments that have more than 10 matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the categories of music festivals for which there have been more than 1 music festival? */\nSELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of tournaments that have more than 10 matches? */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6187,
                    "db_id": "music_4",
                    "query": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1",
                    "question": "What are the categories of music festivals for which there have been more than 1 music festival?"
                }
            ],
            "example_quality": 0.5010185364073099,
            "example_similarity": 0.5743696557195928,
            "db_id": "wta_1",
            "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
            "correct": 1
        },
        {
            "index": 448,
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of states that have some college students playing in goalie and mid positions. */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the names of all winners who played in both 2013 and 2016. */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5029,
                    "db_id": "soccer_2",
                    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
                    "question": "Find the names of states that have some college students playing in goalie and mid positions."
                }
            ],
            "example_quality": 0.5001306003309869,
            "example_similarity": 0.5740007299458679,
            "db_id": "wta_1",
            "pred": "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year = 2013 AND EXISTS ( SELECT 1 FROM matches m2 WHERE m2.winner_id = m.winner_id AND m2.year = 2016 )",
            "correct": 0
        },
        {
            "index": 449,
            "question": "What are the names of players who won in both 2013 and 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name and age of the student who has allergy to both milk and cat. */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of players who won in both 2013 and 2016? */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 520,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the last name and age of the student who has allergy to both milk and cat."
                }
            ],
            "example_quality": 0.49952887715998623,
            "example_similarity": 0.5734647223810294,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE year = 2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)",
            "correct": 0
        },
        {
            "index": 450,
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the players who played for Columbus Crew, and how many years did each play for? */\nSELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the number of all matches who played in years of 2013 or 2016. */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1090,
                    "db_id": "match_season",
                    "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
                    "question": "What are the players who played for Columbus Crew, and how many years did each play for?"
                }
            ],
            "example_quality": 0.4986073985964601,
            "example_similarity": 0.5727664880185365,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
            "correct": 1
        },
        {
            "index": 451,
            "question": "How many matches were played in 2013 or 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many games were played in city Atlanta in 2000? */\nSELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in 2013 or 2016? */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3692,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
                    "question": "How many games were played in city Atlanta in 2000?"
                }
            ],
            "example_quality": 0.4978429612466811,
            "example_similarity": 0.5731594669808014,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;",
            "correct": 1
        },
        {
            "index": 452,
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix? */\nSELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2182,
                    "db_id": "formula_1",
                    "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
                    "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?"
                }
            ],
            "example_quality": 0.4975988396510027,
            "example_similarity": 0.5733409115533951,
            "db_id": "wta_1",
            "pred": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = \"WTA Championships\" INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = \"Australian Open\"",
            "correct": 1
        },
        {
            "index": 453,
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the storms that affected both the regions of Afghanistan and Albania? */\nSELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2734,
                    "db_id": "storm_record",
                    "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
                    "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?"
                }
            ],
            "example_quality": 0.49736567658515435,
            "example_similarity": 0.57336296987962,
            "db_id": "wta_1",
            "pred": "SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' INTERSECT SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open'",
            "correct": 1
        },
        {
            "index": 454,
            "question": "Find the first name and country code of the oldest player.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the order id and customer id associated with the oldest order. */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the oldest player. */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6889,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "Find the order id and customer id associated with the oldest order."
                }
            ],
            "example_quality": 0.4984728006455395,
            "example_similarity": 0.5738307040554673,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
            "correct": 1
        },
        {
            "index": 455,
            "question": "What is the first name and country code of the oldest player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the order id and customer id of the oldest order? */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the oldest player? */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6888,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "what are the order id and customer id of the oldest order?"
                }
            ],
            "example_quality": 0.4995750582265383,
            "example_similarity": 0.5744533681281869,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
            "correct": 1
        },
        {
            "index": 456,
            "question": "List the first and last name of all players in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name and assets of each company in ascending order of company name. */\nSELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4551,
                    "db_id": "company_office",
                    "query": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
                    "question": "List the name and assets of each company in ascending order of company name."
                }
            ],
            "example_quality": 0.5000743952200606,
            "example_similarity": 0.574777422632779,
            "db_id": "wta_1",
            "pred": "SELECT first_name, last_name FROM players ORDER BY birth_date;",
            "correct": 1
        },
        {
            "index": 457,
            "question": "What are the full names of all players, sorted by birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all customers, ordered by account balance? */\nSELECT cust_name FROM customer ORDER BY acc_bal\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all players, sorted by birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3022,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
                    "question": "What are the names of all customers, ordered by account balance?"
                }
            ],
            "example_quality": 0.5005582852112905,
            "example_similarity": 0.5752702510296438,
            "db_id": "wta_1",
            "pred": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;",
            "correct": 0
        },
        {
            "index": 458,
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all titles and their instructors' names for courses in 2008, in alphabetical order by title. */\nSELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players who are left / L hand in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1388,
                    "db_id": "college_2",
                    "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
                    "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title."
                }
            ],
            "example_quality": 0.49962709697736646,
            "example_similarity": 0.57481478468824,
            "db_id": "wta_1",
            "pred": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
            "correct": 1
        },
        {
            "index": 459,
            "question": "What are the full names of all left handed players, in order of birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all employees that are professors ordered by date of birth? */\nSELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all left handed players, in order of birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3261,
                    "db_id": "college_1",
                    "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
                    "question": "What are the first names of all employees that are professors ordered by date of birth?"
                }
            ],
            "example_quality": 0.5002837386855326,
            "example_similarity": 0.5744702354115045,
            "db_id": "wta_1",
            "pred": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
            "correct": 0
        },
        {
            "index": 460,
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first and last name of the faculty who is involved in the largest number of activities. */\nSELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the player who did the most number of tours. */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6785,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the first and last name of the faculty who is involved in the largest number of activities."
                }
            ],
            "example_quality": 0.5006198298077068,
            "example_similarity": 0.5747036005123886,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 461,
            "question": "What is the first name and country code of the player with the most tours?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department with the most credits? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the player with the most tours? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1374,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
                    "question": "What is the name of the department with the most credits?"
                }
            ],
            "example_quality": 0.4998753343144306,
            "example_similarity": 0.5750838530058541,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY tours DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 462,
            "question": "Find the year that has the most number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and hours of project that has the most number of scientists. */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the year that has the most number of matches. */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6484,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and hours of project that has the most number of scientists."
                }
            ],
            "example_quality": 0.4991985201431595,
            "example_similarity": 0.5754263843485543,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 463,
            "question": "Which year had the most matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which project made the most number of outcomes? List the project details and the project id. */\nSELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Which year had the most matches? */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4357,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which project made the most number of outcomes? List the project details and the project id."
                }
            ],
            "example_quality": 0.4985246295752201,
            "example_similarity": 0.5748656134831885,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 464,
            "question": "Find the name and rank points of the winner who won the most times.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30. */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank points of the winner who won the most times. */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4838,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
                    "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30."
                }
            ],
            "example_quality": 0.49778853499464,
            "example_similarity": 0.5746643545780126,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 465,
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30. */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner who has won the most matches, and how many rank points does this player have? */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4838,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
                    "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30."
                }
            ],
            "example_quality": 0.49705560641225593,
            "example_similarity": 0.5742051002909869,
            "db_id": "wta_1",
            "pred": "SELECT t1.first_name, t1.last_name, t2.ranking_points FROM players AS t1 JOIN matches AS t2 ON t1.player_id = t2.winner_id GROUP BY t2.winner_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 466,
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, age, and job title of persons who are friends with Alice for the longest years. */\nSELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4475,
                    "db_id": "network_2",
                    "query": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
                    "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years."
                }
            ],
            "example_quality": 0.49604573179285427,
            "example_similarity": 0.573969221780246,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
            "correct": 1
        },
        {
            "index": 467,
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the student who most recently registered course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner with the most rank points who participated in the Australian Open tournament? */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 90,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
                    "question": "What is the id of the student who most recently registered course 301?"
                }
            ],
            "example_quality": 0.4968393526384085,
            "example_similarity": 0.5737642788418841,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 468,
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the SSN and name of scientists who are assigned to the project with the longest hours. */\nSELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the names of loser and winner who played in the match with greatest number of minutes. */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6502,
                    "db_id": "scientist_1",
                    "query": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
                    "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours."
                }
            ],
            "example_quality": 0.4958101648917014,
            "example_similarity": 0.5736066628614527,
            "db_id": "wta_1",
            "pred": "SELECT T1.loser_name, T2.winner_name FROM matches JOIN players AS T1 ON matches.loser_id = T1.player_id JOIN players AS T2 ON matches.winner_id = T2.player_id WHERE minutes = (SELECT max(minutes) FROM matches)",
            "correct": 0
        },
        {
            "index": 469,
            "question": "What are the names of the winner and loser who played in the longest match?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of the winner and loser who played in the longest match? */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 545,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "What are the first and last names of the 5 customers who purchased something most recently?"
                }
            ],
            "example_quality": 0.4950648340497148,
            "example_similarity": 0.5736020187432589,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name AS winner_first_name, T1.last_name AS winner_last_name, T2.first_name AS loser_first_name, T2.last_name AS loser_last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.minutes = (SELECT MAX(minutes) FROM matches);",
            "correct": 0
        },
        {
            "index": 470,
            "question": "Find the average ranking for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each bed type, find the average base price of different bed type. */\nSELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average ranking for each player and their first name. */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2598,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
                    "question": "For each bed type, find the average base price of different bed type."
                }
            ],
            "example_quality": 0.494309376955992,
            "example_similarity": 0.573633153371715,
            "db_id": "wta_1",
            "pred": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, first_name;",
            "correct": 0
        },
        {
            "index": 471,
            "question": "What are the first names of all players, and their average rankings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the line 1 and average monthly rentals of all student addresses? */\nSELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their average rankings? */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3121,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id",
                    "question": "What are the line 1 and average monthly rentals of all student addresses?"
                }
            ],
            "example_quality": 0.49465923158897485,
            "example_similarity": 0.5740076052753844,
            "db_id": "wta_1",
            "pred": "SELECT first_name, avg(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, first_name",
            "correct": 0
        },
        {
            "index": 472,
            "question": "Find the total ranking points for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total revenue for each manufacturer. */\nSELECT sum(revenue) ,  name FROM manufacturers GROUP BY name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total ranking points for each player and their first name. */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5311,
                    "db_id": "manufactory_1",
                    "query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
                    "question": "Find the total revenue for each manufacturer."
                }
            ],
            "example_quality": 0.49399728877251986,
            "example_similarity": 0.5740952684323954,
            "db_id": "wta_1",
            "pred": "SELECT sum(ranking_points), first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
            "correct": 1
        },
        {
            "index": 473,
            "question": "What are the first names of all players, and their total ranking points?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the different bank branches, and what are their total loan amounts? */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their total ranking points? */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3062,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "What are the names of the different bank branches, and what are their total loan amounts?"
                }
            ],
            "example_quality": 0.4950670619463623,
            "example_similarity": 0.5742557435519887,
            "db_id": "wta_1",
            "pred": "SELECT sum(ranking_points), first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
            "correct": 1
        },
        {
            "index": 474,
            "question": "find the number of players for each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students for each department. */\nSELECT count(*) ,  dept_code FROM student GROUP BY dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of players for each country. */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3218,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",
                    "question": "Find the number of students for each department."
                }
            ],
            "example_quality": 0.4961323213093447,
            "example_similarity": 0.5751539381858453,
            "db_id": "wta_1",
            "pred": "SELECT count(*) , country_code FROM players GROUP BY country_code",
            "correct": 1
        },
        {
            "index": 475,
            "question": "How many players are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players are from each country? */\nSELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are from each country? */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1094,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
                    "question": "How many players are from each country?"
                }
            ],
            "example_quality": 0.49542467431711446,
            "example_similarity": 0.5760483509475594,
            "db_id": "wta_1",
            "pred": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code",
            "correct": 1
        },
        {
            "index": 476,
            "question": "find the code of the country where has the greatest number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the code of the location with the largest number of documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the code of the country where has the greatest number of players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4230,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the location with the largest number of documents."
                }
            ],
            "example_quality": 0.49648470651392723,
            "example_similarity": 0.5762824930674174,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 477,
            "question": "What is the code of the country with the most players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the code of the city with the most students? */\nSELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the code of the country with the most players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5714,
                    "db_id": "dorm_1",
                    "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the code of the city with the most students?"
                }
            ],
            "example_quality": 0.49754029413129847,
            "example_similarity": 0.5771707897276535,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 478,
            "question": "Find the codes of countries that have more than 50 players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the codes of document types that have more than 2 corresponding documents. */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the codes of countries that have more than 50 players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4543,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                    "question": "Give the codes of document types that have more than 2 corresponding documents."
                }
            ],
            "example_quality": 0.4985914650640782,
            "example_similarity": 0.5774974896096737,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "correct": 1
        },
        {
            "index": 479,
            "question": "What are the codes of countries with more than 50 players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the codes of countries with more than 50 players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                }
            ],
            "example_quality": 0.49929029986213513,
            "example_similarity": 0.5775966597775032,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "correct": 1
        },
        {
            "index": 480,
            "question": "Find the total number of tours for each ranking date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all branch names with the number of members in each branch registered after 2015. */\nSELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of tours for each ranking date. */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5423,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
                    "question": "Show all branch names with the number of members in each branch registered after 2015."
                }
            ],
            "example_quality": 0.4984103681476787,
            "example_similarity": 0.5772705263854229,
            "db_id": "wta_1",
            "pred": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date",
            "correct": 1
        },
        {
            "index": 481,
            "question": "How many total tours were there for each ranking date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of degrees granted after 2000 for each Orange county campus? */\nSELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many total tours were there for each ranking date? */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2360,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
                    "question": "What is the total number of degrees granted after 2000 for each Orange county campus?"
                }
            ],
            "example_quality": 0.49748757206950356,
            "example_similarity": 0.5767980304885716,
            "db_id": "wta_1",
            "pred": "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date",
            "correct": 1
        },
        {
            "index": 482,
            "question": "Find the number of matches happened in each year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many storms occured in each region? */\nSELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of matches happened in each year. */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2714,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
                    "question": "How many storms occured in each region?"
                }
            ],
            "example_quality": 0.4967136236719413,
            "example_similarity": 0.5761941223043927,
            "db_id": "wta_1",
            "pred": "SELECT year, count(*) FROM matches GROUP BY year",
            "correct": 1
        },
        {
            "index": 483,
            "question": "How many matches were played in each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players played each position? */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in each year? */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1092,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "How many players played each position?"
                }
            ],
            "example_quality": 0.49682032786361785,
            "example_similarity": 0.5766114797691408,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) FROM matches GROUP BY year",
            "correct": 1
        },
        {
            "index": 484,
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank of the 3 youngest winners across all matches. */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 545,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "What are the first and last names of the 5 customers who purchased something most recently?"
                }
            ],
            "example_quality": 0.49607197054285707,
            "example_similarity": 0.5762653628875742,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name, T1.last_name, T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_age ASC LIMIT 3;",
            "correct": 0
        },
        {
            "index": 485,
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names for the 3 branches that have the most memberships? */\nSELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names and ranks of the three youngest winners across all matches? */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5406,
                    "db_id": "shop_membership",
                    "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
                    "question": "What are the names for the 3 branches that have the most memberships?"
                }
            ],
            "example_quality": 0.4962481901119201,
            "example_similarity": 0.5760050219331668,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3",
            "correct": 1
        },
        {
            "index": 486,
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trips did not end in San Francisco? */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different winners both participated in the WTA Championships and were left handed? */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 167,
                    "db_id": "bike_1",
                    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
                    "question": "How many trips did not end in San Francisco?"
                }
            ],
            "example_quality": 0.4954457981863518,
            "example_similarity": 0.5756200093137342,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND winner_hand = \"L\"",
            "correct": 1
        },
        {
            "index": 487,
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players born in USA are right-handed batters? That is, have the batter value 'R'. */\nSELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of left handed winners who participated in the WTA Championships. */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3654,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';",
                    "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'."
                }
            ],
            "example_quality": 0.4957168560553576,
            "example_similarity": 0.5749171619297909,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';",
            "correct": 1
        },
        {
            "index": 488,
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                }
            ],
            "example_quality": 0.494895349031825,
            "example_similarity": 0.5746172731319255,
            "db_id": "wta_1",
            "pred": "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE p.player_id = (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 489,
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2556,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "What are the names of cities that are in the county with the most police officers?"
                }
            ],
            "example_quality": 0.49407720195521887,
            "example_similarity": 0.5743589062381361,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1)",
            "correct": 1
        },
        {
            "index": 490,
            "question": "Find the number of players for each hand type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of complaints with Product Failure type for each complaint status. */\nSELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of players for each hand type. */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5809,
                    "db_id": "customer_complaints",
                    "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
                    "question": "Find the number of complaints with Product Failure type for each complaint status."
                }
            ],
            "example_quality": 0.4939997150069124,
            "example_similarity": 0.5746444711525189,
            "db_id": "wta_1",
            "pred": "SELECT hand, count(*) FROM players GROUP BY hand",
            "correct": 1
        },
        {
            "index": 491,
            "question": "How many players are there for each hand type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there for each hand type? */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.4947482664255103,
            "example_similarity": 0.5749553229979776,
            "db_id": "wta_1",
            "pred": "SELECT hand, count(*) FROM players GROUP BY hand",
            "correct": 1
        },
        {
            "index": 492,
            "question": "How many ships ended up being 'Captured'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many lessons did the customer with the first name Ray take? */\nSELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many ships ended up being 'Captured'? */\nSELECT ",
            "response": "count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6710,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
                    "question": "How many lessons did the customer with the first name Ray take?"
                }
            ],
            "example_quality": 0.494090348468505,
            "example_similarity": 0.5742146136337327,
            "db_id": "battle_death",
            "pred": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "correct": 1
        },
        {
            "index": 493,
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of perpetrators in descending order of the year. */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and tonnage ordered by in descending alphaetical order for the names. */\nSELECT ",
            "response": "name , tonnage FROM ship ORDER BY name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2319,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
                    "question": "List the names of perpetrators in descending order of the year."
                }
            ],
            "example_quality": 0.49331351431565035,
            "example_similarity": 0.5742430531478989,
            "db_id": "battle_death",
            "pred": "SELECT T1.name, T2.tonnage FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id ORDER BY T1.name DESC",
            "correct": 0
        },
        {
            "index": 494,
            "question": "List the name, date and result of each battle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name, origin and owner of each program. */\nSELECT name ,  origin ,  OWNER FROM program\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name, date and result of each battle. */\nSELECT ",
            "response": "name , date FROM battle",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3739,
                    "db_id": "program_share",
                    "query": "SELECT name ,  origin ,  OWNER FROM program",
                    "question": "List the name, origin and owner of each program."
                }
            ],
            "example_quality": 0.4933145540852418,
            "example_similarity": 0.5751049093156156,
            "db_id": "battle_death",
            "pred": "SELECT name, date, result FROM battle",
            "correct": 0
        },
        {
            "index": 495,
            "question": "What is maximum and minimum death toll caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum and minimum market value of companies? */\nSELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is maximum and minimum death toll caused each time? */\nSELECT ",
            "response": "max(killed) , min(killed) FROM death",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4101,
                    "db_id": "company_employee",
                    "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
                    "question": "What is the maximum and minimum market value of companies?"
                }
            ],
            "example_quality": 0.4943381610466857,
            "example_similarity": 0.5750974823703893,
            "db_id": "battle_death",
            "pred": "SELECT max(killed) , min(killed) FROM death",
            "correct": 1
        },
        {
            "index": 496,
            "question": "What is the average number of injuries caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of international passengers for an airport? */\nSELECT avg(International_Passengers) FROM airport\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the average number of injuries caused each time? */\nSELECT ",
            "response": "avg(injured) FROM death",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4803,
                    "db_id": "aircraft",
                    "query": "SELECT avg(International_Passengers) FROM airport",
                    "question": "What is the average number of international passengers for an airport?"
                }
            ],
            "example_quality": 0.4953576405607045,
            "example_similarity": 0.5750132804570081,
            "db_id": "battle_death",
            "pred": "SELECT avg(injured) FROM death",
            "correct": 1
        },
        {
            "index": 497,
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the season of the game which causes the player 'Walter Samuel' to get injured? */\nSELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the death and injury situations caused by the ship with tonnage 't'? */\nSELECT ",
            "response": "T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1281,
                    "db_id": "game_injury",
                    "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
                    "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?"
                }
            ],
            "example_quality": 0.4957109808049194,
            "example_similarity": 0.5747416239570946,
            "db_id": "battle_death",
            "pred": "SELECT T1.note, T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "correct": 0
        },
        {
            "index": 498,
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is allergy type of a cat allergy? */\nSELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the name and results of the battles when the bulgarian commander is not 'Boril' */\nSELECT ",
            "response": "name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 451,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
                    "question": "What is allergy type of a cat allergy?"
                }
            ],
            "example_quality": 0.49590822661442635,
            "example_similarity": 0.5742903355555743,
            "db_id": "battle_death",
            "pred": "SELECT name, result FROM battle WHERE bulgarian_commander <> \"Boril\"",
            "correct": 1
        },
        {
            "index": 499,
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different years for all competitions that are not of type equal to tournament? */\nSELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the different ids and names of the battles that lost any 'Brig' type shipes? */\nSELECT ",
            "response": "DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3347,
                    "db_id": "sports_competition",
                    "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
                    "question": "What are the different years for all competitions that are not of type equal to tournament?"
                }
            ],
            "example_quality": 0.4951725144945335,
            "example_similarity": 0.5740212166466452,
            "db_id": "battle_death",
            "pred": "SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'",
            "correct": 1
        },
        {
            "index": 500,
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me ids for all the trip that took place in a zip code area with average mean temperature above 60. */\nSELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the ids and names of the battles that led to more than 10 people killed in total. */\nSELECT ",
            "response": "T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 156,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
                    "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60."
                }
            ],
            "example_quality": 0.49499897618823346,
            "example_similarity": 0.5734186287588066,
            "db_id": "battle_death",
            "pred": "SELECT B.id, B.name FROM battle AS B JOIN ship AS S ON B.id = S.lost_in_battle JOIN death AS D ON S.id = D.caused_by_ship_id GROUP BY B.id, B.name HAVING SUM(D.killed) > 10",
            "correct": 1
        },
        {
            "index": 501,
            "question": "What is the ship id and name that caused most total injuries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the ship id and name that caused most total injuries? */\nSELECT ",
            "response": "T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                }
            ],
            "example_quality": 0.4953416262690287,
            "example_similarity": 0.573141910155886,
            "db_id": "battle_death",
            "pred": "SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name ORDER BY SUM(T2.injured) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 502,
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct types of mills that are built by American or Canadian architects? */\nSELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? */\nSELECT ",
            "response": "name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6953,
                    "db_id": "architecture",
                    "query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
                    "question": "What are the distinct types of mills that are built by American or Canadian architects?"
                }
            ],
            "example_quality": 0.49460081982252363,
            "example_similarity": 0.5729195925291581,
            "db_id": "battle_death",
            "pred": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "correct": 1
        },
        {
            "index": 503,
            "question": "How many different results are there for the battles?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different roles are there on the project staff? */\nSELECT count(DISTINCT role_code) FROM Project_Staff\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many different results are there for the battles? */\nSELECT ",
            "response": "count(DISTINCT RESULT) FROM battle",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4346,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(DISTINCT role_code) FROM Project_Staff",
                    "question": "How many different roles are there on the project staff?"
                }
            ],
            "example_quality": 0.4956055895644272,
            "example_similarity": 0.573271641052957,
            "db_id": "battle_death",
            "pred": "SELECT count(DISTINCT result) FROM battle",
            "correct": 1
        },
        {
            "index": 504,
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many drivers did not race in 2009? */\nSELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many battles did not lose any ship with tonnage '225'? */\nSELECT ",
            "response": "count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2175,
                    "db_id": "formula_1",
                    "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
                    "question": "How many drivers did not race in 2009?"
                }
            ],
            "example_quality": 0.4954033646060182,
            "example_similarity": 0.5731923983789101,
            "db_id": "battle_death",
            "pred": "SELECT count(DISTINCT id) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
            "correct": 1
        },
        {
            "index": 505,
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\" */\nSELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' */\nSELECT ",
            "response": "T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1040,
                    "db_id": "phone_1",
                    "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
                    "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\""
                }
            ],
            "example_quality": 0.4948184074483825,
            "example_similarity": 0.5728274409343754,
            "db_id": "battle_death",
            "pred": "SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'",
            "correct": 0
        },
        {
            "index": 506,
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the document name and the document date for all documents on project with details 'Graph Database project'. */\nSELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. */\nSELECT ",
            "response": "name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6410,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
                    "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'."
                }
            ],
            "example_quality": 0.4945852870860976,
            "example_similarity": 0.5730392444107898,
            "db_id": "battle_death",
            "pred": "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')",
            "correct": 1
        },
        {
            "index": 507,
            "question": "What are the notes of the death events which has substring 'East'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all of the products whose name includes the substring \"Scanner\"? */\nSELECT product FROM product WHERE product LIKE \"%Scanner%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the notes of the death events which has substring 'East'? */\nSELECT ",
            "response": "note FROM death WHERE note LIKE '%East%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4936,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
                    "question": "What are all of the products whose name includes the substring \"Scanner\"?"
                }
            ],
            "example_quality": 0.49479320565200274,
            "example_similarity": 0.5727542980284636,
            "db_id": "battle_death",
            "pred": "SELECT note FROM death WHERE note LIKE \"%East%\"",
            "correct": 1
        },
        {
            "index": 508,
            "question": "what are all the addresses including line 1 and line 2?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the calendar dates and day Numbers? */\nSELECT calendar_date ,  day_Number FROM Ref_calendar\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: what are all the addresses including line 1 and line 2? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4164,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar",
                    "question": "What are all the calendar dates and day Numbers?"
                }
            ],
            "example_quality": 0.49578770721567994,
            "example_similarity": 0.5732672488853628,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT line_1, line_2 FROM Addresses",
            "correct": 1
        },
        {
            "index": 509,
            "question": "What is the first and second line for all addresses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, checking balances, and savings balances for all customers? */\nSELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first and second line for all addresses? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1818,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
                    "question": "What are the names, checking balances, and savings balances for all customers?"
                }
            ],
            "example_quality": 0.49487123633569635,
            "example_similarity": 0.5731810887985663,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT line_1, line_2 FROM Addresses",
            "correct": 1
        },
        {
            "index": 510,
            "question": "How many courses in total are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many reviewers listed? */\nSELECT count(*) FROM Reviewer\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses in total are listed? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2443,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Reviewer",
                    "question": "How many reviewers listed?"
                }
            ],
            "example_quality": 0.4958616848919009,
            "example_similarity": 0.5732826945068045,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Courses;",
            "correct": 1
        },
        {
            "index": 511,
            "question": "How many courses are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses are there? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.4957610640691074,
            "example_similarity": 0.5741177577269476,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Courses",
            "correct": 1
        },
        {
            "index": 512,
            "question": "How is the math course described?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the complete description of the researcher role. */\nSELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How is the math course described? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4353,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
                    "question": "What is the complete description of the researcher role."
                }
            ],
            "example_quality": 0.4967459057408474,
            "example_similarity": 0.5735973955198488,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_description FROM Courses WHERE course_name = 'Math'",
            "correct": 0
        },
        {
            "index": 513,
            "question": "What are the descriptions for all the math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the card numbers of members from Kentucky? */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the descriptions for all the math courses? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5444,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "What are the card numbers of members from Kentucky?"
                }
            ],
            "example_quality": 0.4967975361843006,
            "example_similarity": 0.5733146938298909,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_description FROM Courses WHERE course_name LIKE \"%Math%\"",
            "correct": 1
        },
        {
            "index": 514,
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the zip code of the customer Carole Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code of the address in the city Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6688,
                    "db_id": "driving_school",
                    "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "What is the zip code of the customer Carole Bernhard?"
                }
            ],
            "example_quality": 0.49598836267604546,
            "example_similarity": 0.5737279226078761,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\"",
            "correct": 1
        },
        {
            "index": 515,
            "question": "What is the zip code for Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the zip code of the customer Carole Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code for Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6688,
                    "db_id": "driving_school",
                    "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "What is the zip code of the customer Carole Bernhard?"
                }
            ],
            "example_quality": 0.49518233158918173,
            "example_similarity": 0.5739083861885728,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\"",
            "correct": 1
        },
        {
            "index": 516,
            "question": "Which department offers the most number of degrees? List department name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the customer last name, id and phone number with most number of orders? */\nSELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which department offers the most number of degrees? List department name and id. */\nSELECT ",
            "response": "T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1612,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer last name, id and phone number with most number of orders?"
                }
            ],
            "example_quality": 0.49588252374013575,
            "example_similarity": 0.5738112953700087,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.department_name, T2.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 517,
            "question": "What is the name and id of the department with the most number of degrees ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the account with the most transactions? */\nSELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name and id of the department with the most number of degrees ? */\nSELECT ",
            "response": "t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1593,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the account with the most transactions?"
                }
            ],
            "example_quality": 0.4950174678888949,
            "example_similarity": 0.5741520859012079,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT department_id, department_name FROM Departments WHERE department_id IN ( SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 518,
            "question": "How many departments offer any degree?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many departments offer courses? */\nSELECT count(DISTINCT dept_name) FROM course\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many departments offer any degree? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1339,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT dept_name) FROM course",
                    "question": "How many departments offer courses?"
                }
            ],
            "example_quality": 0.4959923376420052,
            "example_similarity": 0.5746984001314042,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 519,
            "question": "How many different departments offer degrees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many courses are offered? */\nSELECT count(DISTINCT crs_code) FROM CLASS\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different departments offer degrees? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3230,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT crs_code) FROM CLASS",
                    "question": "How many courses are offered?"
                }
            ],
            "example_quality": 0.49696345067159664,
            "example_similarity": 0.5744474291185199,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 520,
            "question": "How many different degree names are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different source system code for the cmi cross references are there? */\nSELECT count(DISTINCT source_system_code) FROM CMI_cross_references\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degree names are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2654,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
                    "question": "How many different source system code for the cmi cross references are there?"
                }
            ],
            "example_quality": 0.49793082865107435,
            "example_similarity": 0.5740638763702149,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 521,
            "question": "How many different degrees are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different services are provided by all stations? */\nSELECT count(DISTINCT services) FROM station\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degrees are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3169,
                    "db_id": "station_weather",
                    "query": "SELECT count(DISTINCT services) FROM station",
                    "question": "How many different services are provided by all stations?"
                }
            ],
            "example_quality": 0.49889449308744466,
            "example_similarity": 0.5740089640268068,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 522,
            "question": "How many degrees does the engineering department offer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department offer? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                }
            ],
            "example_quality": 0.49812728658423644,
            "example_similarity": 0.573472773764416,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')",
            "correct": 1
        },
        {
            "index": 523,
            "question": "How many degrees does the engineering department have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department have? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                }
            ],
            "example_quality": 0.4973630139491092,
            "example_similarity": 0.5730932847132412,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')",
            "correct": 1
        },
        {
            "index": 524,
            "question": "What are the names and descriptions of all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions of all the project outcomes? */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions of all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4395,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
                    "question": "What are the descriptions of all the project outcomes?"
                }
            ],
            "example_quality": 0.49653631186713504,
            "example_similarity": 0.5734308929485212,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.section_name, T1.section_description FROM Sections AS T1",
            "correct": 1
        },
        {
            "index": 525,
            "question": "What are the names and descriptions for all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions of all the project outcomes? */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions for all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4395,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
                    "question": "What are the descriptions of all the project outcomes?"
                }
            ],
            "example_quality": 0.49571275912642554,
            "example_similarity": 0.5735108048007805,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.section_name, T1.section_description FROM Sections AS T1",
            "correct": 1
        },
        {
            "index": 526,
            "question": "What are the names and id of courses having at most 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of parties with at least 2 events? */\nSELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and id of courses having at most 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2076,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
                    "question": "What are the names of parties with at least 2 events?"
                }
            ],
            "example_quality": 0.49611888189107745,
            "example_similarity": 0.5736086930045813,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.course_id, T2.course_name FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "correct": 1
        },
        {
            "index": 527,
            "question": "What are the names and ids of every course with less than 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students who have advisor number 1121? */\nSELECT StuID FROM Student WHERE Advisor  =  1121\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and ids of every course with less than 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5993,
                    "db_id": "game_1",
                    "query": "SELECT StuID FROM Student WHERE Advisor  =  1121",
                    "question": "What are the ids of all students who have advisor number 1121?"
                }
            ],
            "example_quality": 0.49532952576818773,
            "example_similarity": 0.5734190829809034,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) < 2 )",
            "correct": 0
        },
        {
            "index": 528,
            "question": "List the section_name in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the names of all counties sorted by county name in descending alphabetical order. */\nSELECT County_name FROM county ORDER BY County_name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List the section_name in reversed lexicographical order. */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2781,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                    "question": "Return the names of all counties sorted by county name in descending alphabetical order."
                }
            ],
            "example_quality": 0.49628534106029343,
            "example_similarity": 0.5727317860733437,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "correct": 1
        },
        {
            "index": 529,
            "question": "What are the names of the sections in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names of all the races in reverse alphabetical order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of the sections in reverse alphabetical order? */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2203,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "What are the different names of all the races in reverse alphabetical order?"
                }
            ],
            "example_quality": 0.49674744956630557,
            "example_similarity": 0.5730353806806405,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "correct": 1
        },
        {
            "index": 530,
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the semester which most student registered in? Show both the name and the id. */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 57,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "which course has most number of registered students?"
                }
            ],
            "example_quality": 0.4973031490789507,
            "example_similarity": 0.5724932654071192,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 531,
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and builder of the railway that are associated with the most trains. */\nSELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: For each semester, what is the name and id of the one with the most students registered? */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5644,
                    "db_id": "railway",
                    "query": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the id and builder of the railway that are associated with the most trains."
                }
            ],
            "example_quality": 0.497846296228923,
            "example_similarity": 0.5721684193329062,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC;",
            "correct": 0
        },
        {
            "index": 532,
            "question": "What is the description of the department whose name has the substring the computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all of the products whose name includes the substring \"Scanner\"? */\nSELECT product FROM product WHERE product LIKE \"%Scanner%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description of the department whose name has the substring the computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4936,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
                    "question": "What are all of the products whose name includes the substring \"Scanner\"?"
                }
            ],
            "example_quality": 0.49803831446909425,
            "example_similarity": 0.572032764409348,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
            "correct": 1
        },
        {
            "index": 533,
            "question": "What is the department description for the one whose name has the word computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the countries of all airlines whose names start with Orbit? */\nSELECT country FROM airlines WHERE name LIKE 'Orbit%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the department description for the one whose name has the word computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6817,
                    "db_id": "flight_4",
                    "query": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
                    "question": "What are the countries of all airlines whose names start with Orbit?"
                }
            ],
            "example_quality": 0.4989800812336926,
            "example_similarity": 0.5715849230752467,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "correct": 1
        },
        {
            "index": 534,
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the student IDs and middle names of the students enrolled in at most two courses? */\nSELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3842,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
                    "question": "What are the student IDs and middle names of the students enrolled in at most two courses?"
                }
            ],
            "example_quality": 0.49897864715968615,
            "example_similarity": 0.5713260249671157,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.student_id, T2.first_name, T2.middle_name, T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(DISTINCT T1.degree_program_id) = 2;",
            "correct": 1
        },
        {
            "index": 535,
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the courses that have just one student enrollment. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3824,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
                    "question": "Find the names of the courses that have just one student enrollment."
                }
            ],
            "example_quality": 0.4990606630394945,
            "example_similarity": 0.5705696523347784,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Degree_Programs AS T4 ON T2.degree_program_id = T4.degree_program_id GROUP BY T1.student_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2 AND COUNT(DISTINCT T2.semester_id) = 1;",
            "correct": 0
        },
        {
            "index": 536,
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the physicians who have 'senior' in their titles. */\nSELECT name FROM physician WHERE POSITION LIKE '%senior%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3948,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
                    "question": "What are the names of the physicians who have 'senior' in their titles."
                }
            ],
            "example_quality": 0.49821480751633923,
            "example_similarity": 0.5699554912489764,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%'",
            "correct": 1
        },
        {
            "index": 537,
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the text of tweets about the topic 'intern'. */\nSELECT text FROM tweets WHERE text LIKE '%intern%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names for everybody enrolled in a Bachelors program? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 284,
                    "db_id": "twitter_1",
                    "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
                    "question": "Return the text of tweets about the topic 'intern'."
                }
            ],
            "example_quality": 0.49737210229308404,
            "example_similarity": 0.5691010324405259,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'",
            "correct": 0
        },
        {
            "index": 538,
            "question": "Find the kind of program which most number of students are enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the kind of program which most number of students are enrolled in? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3837,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Find the student ID and login name of the student with the most course enrollments"
                }
            ],
            "example_quality": 0.4978928730649311,
            "example_similarity": 0.5684304605091,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.degree_summary_name, COUNT(*) AS num_students_enrolled FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 539,
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the degree summary name that has the most number of students enrolled? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.4988244261761278,
            "example_similarity": 0.5685096453896231,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 540,
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the program which most number of students are enrolled in. List both the id and the summary. */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3837,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Find the student ID and login name of the student with the most course enrollments"
                }
            ],
            "example_quality": 0.49961007894816634,
            "example_similarity": 0.5680055465950059,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.degree_program_id, T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 541,
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the student ID and login name of the student who are enrolled in the most courses? */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the program id and the summary of the degree that has the most students enrolled? */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3838,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What are the student ID and login name of the student who are enrolled in the most courses?"
                }
            ],
            "example_quality": 0.5003928272737278,
            "example_similarity": 0.5677376563482072,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.degree_program_id, T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 542,
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3837,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Find the student ID and login name of the student with the most course enrollments"
                }
            ],
            "example_quality": 0.5005168018263849,
            "example_similarity": 0.5673754624645917,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 543,
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3837,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Find the student ID and login name of the student with the most course enrollments"
                }
            ],
            "example_quality": 0.5006403197508555,
            "example_similarity": 0.5670560590234771,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 544,
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that are not employed by any company */\nSELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which semesters do not have any student enrolled? List the semester name. */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4111,
                    "db_id": "company_employee",
                    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)",
                    "question": "List the names of people that are not employed by any company"
                }
            ],
            "example_quality": 0.5007540323983724,
            "example_similarity": 0.5666909211440803,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
            "correct": 1
        },
        {
            "index": 545,
            "question": "What is the name of the semester with no students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name of courses that have at least five enrollments? */\nSELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the semester with no students enrolled? */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4684,
                    "db_id": "college_3",
                    "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
                    "question": "What are the name of courses that have at least five enrollments?"
                }
            ],
            "example_quality": 0.4998960090602677,
            "example_similarity": 0.5662305515157136,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.semester_id IS NULL",
            "correct": 1
        },
        {
            "index": 546,
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the  ids of every student who has never attended a course? */\nSELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are all the course names of the courses which ever have students enrolled in? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 64,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
                    "question": "What are the  ids of every student who has never attended a course?"
                }
            ],
            "example_quality": 0.4990777471389119,
            "example_similarity": 0.565750912824452,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections WHERE section_id IN (SELECT section_id FROM Student_Enrolment_Courses))",
            "correct": 0
        },
        {
            "index": 547,
            "question": "What are the names of all courses that have some students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the courses that have exactly 1 student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of all courses that have some students enrolled? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3823,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
                    "question": "What are the names of the courses that have exactly 1 student enrollment?"
                }
            ],
            "example_quality": 0.49884927718654754,
            "example_similarity": 0.5657920177262677,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id;",
            "correct": 1
        },
        {
            "index": 548,
            "question": "What's the name of the course with most number of enrollments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What's the name of the course with most number of enrollments? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.4997637858048202,
            "example_similarity": 0.5655278947588457,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 549,
            "question": "What is the name of the course with the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the course with the most students enrolled? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.500674962879857,
            "example_similarity": 0.5657500661709425,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 550,
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                }
            ],
            "example_quality": 0.5004507511120138,
            "example_similarity": 0.5652062781718438,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT t1.last_name FROM Students AS t1 JOIN Addresses AS t2 ON t1.current_address_id = t2.address_id LEFT JOIN Student_Enrolment AS t3 ON t1.student_id = t3.student_id WHERE t2.state_province_county = 'North Carolina' AND t3.degree_program_id IS NULL",
            "correct": 0
        },
        {
            "index": 551,
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of instructors who didn't teach courses in the Spring? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the last name of the students who live in North Carolina but have not registered in any degree programs? */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1446,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "What are the names of instructors who didn't teach courses in the Spring?"
                }
            ],
            "example_quality": 0.4996305683641563,
            "example_similarity": 0.565163556553867,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
            "correct": 0
        },
        {
            "index": 552,
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and color description of the products with at least 2 characteristics. */\nSELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date and id of the transcript with at least 2 course results. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5549,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
                    "question": "Find the id and color description of the products with at least 2 characteristics."
                }
            ],
            "example_quality": 0.4994787113039397,
            "example_similarity": 0.5655250462745175,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;",
            "correct": 1
        },
        {
            "index": 553,
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and name of the mountains that have at least 2 photos? */\nSELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with at least 2 courses listed? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3719,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
                    "question": "What are the id and name of the mountains that have at least 2 photos?"
                }
            ],
            "example_quality": 0.4998480150876644,
            "example_similarity": 0.5655873879629904,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 554,
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name, last name, and phone of the customer with account name 162? */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the phone number of the man with the first name Timmothy and the last name Ward? */\nSELECT ",
            "response": "cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 674,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
                    "question": "What is the first name, last name, and phone of the customer with account name 162?"
                }
            ],
            "example_quality": 0.49910267228890537,
            "example_similarity": 0.5655051002590861,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.cell_mobile_number FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.first_name = \"Timmothy\" AND T1.last_name = \"Ward\"",
            "correct": 0
        },
        {
            "index": 555,
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the phone number of the performer Ashley? */\nSELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the mobile phone number of the student named Timmothy Ward ? */\nSELECT ",
            "response": "cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5115,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
                    "question": "What is the phone number of the performer Ashley?"
                }
            ],
            "example_quality": 0.4986758606671636,
            "example_similarity": 0.5658721735365125,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\"",
            "correct": 0
        },
        {
            "index": 556,
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the last name of the staff who has handled the first ever complaint? */\nSELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the first student to register? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5803,
                    "db_id": "customer_complaints",
                    "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
                    "question": "What is the last name of the staff who has handled the first ever complaint?"
                }
            ],
            "example_quality": 0.49798267134846275,
            "example_similarity": 0.5655738422891448,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT t1.first_name, t1.middle_name, t1.last_name FROM Students AS t1 JOIN Student_Enrolment AS t2 ON t1.student_id = t2.student_id ORDER BY t2.date_first_registered LIMIT 1",
            "correct": 0
        },
        {
            "index": 557,
            "question": "What is the first, middle, and last name of the first student to register?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the oldest log id and its corresponding problem id? */\nSELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the first student to register? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5355,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                    "question": "What is the oldest log id and its corresponding problem id?"
                }
            ],
            "example_quality": 0.4984186384134217,
            "example_similarity": 0.5652423854465294,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
            "correct": 1
        },
        {
            "index": 558,
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id of students who attended  statistics courses in the order of attendance date. */\nSELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the earliest graduate of the school? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 108,
                    "db_id": "student_assessment",
                    "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
                    "question": "List the id of students who attended  statistics courses in the order of attendance date."
                }
            ],
            "example_quality": 0.49760325437224057,
            "example_similarity": 0.5649186811439646,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Transcript_Contents AS TC ON SE.student_enrolment_id = TC.student_course_id JOIN Transcripts AS T ON TC.transcript_id = T.transcript_id ORDER BY T.transcript_date LIMIT 1;",
            "correct": 0
        },
        {
            "index": 559,
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first, last name, gpa of the youngest one among students whose GPA is above 3? */\nSELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the earliest school graduate? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3266,
                    "db_id": "college_1",
                    "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
                    "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?"
                }
            ],
            "example_quality": 0.4976650799327376,
            "example_similarity": 0.5645706519654787,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses c ON sec.course_id = c.course_id JOIN Sections sec2 ON c.course_id = sec2.course_id JOIN Semesters sem ON se.semester_id = sem.semester_id WHERE sec2.section_name = 'Graduation' ORDER BY sem.semester_name ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 560,
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the physicians' employee ids together with their primary affiliation departments' ids. */\nSELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Whose permanent address is different from his or her current address? List his or her first name. */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3961,
                    "db_id": "hospital_1",
                    "query": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
                    "question": "List the physicians' employee ids together with their primary affiliation departments' ids."
                }
            ],
            "example_quality": 0.49781805895666725,
            "example_similarity": 0.5641119406364196,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id",
            "correct": 1
        },
        {
            "index": 561,
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of patients who are staying in room 111 and have an undergoing treatment? */\nSELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first name of the student whose permanent address is different from his or her current one? */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3952,
                    "db_id": "hospital_1",
                    "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
                    "question": "What are the names of patients who are staying in room 111 and have an undergoing treatment?"
                }
            ],
            "example_quality": 0.4969923911344633,
            "example_similarity": 0.5637430117888373,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.line_1 <> T3.line_1;",
            "correct": 1
        },
        {
            "index": 562,
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which building has the largest number of company offices? Give me the building name. */\nSELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which address holds the most number of students currently? List the address id and all lines. */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4567,
                    "db_id": "company_office",
                    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which building has the largest number of company offices? Give me the building name."
                }
            ],
            "example_quality": 0.4967865088543443,
            "example_similarity": 0.5637104700337942,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 563,
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the account with the most transactions? */\nSELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id, line 1, and line 2 of the address with the most students? */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1593,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the account with the most transactions?"
                }
            ],
            "example_quality": 0.4962679317270842,
            "example_similarity": 0.5638310179509071,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN ( SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 564,
            "question": "On average, when were the transcripts printed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average amount of items ordered in each order? */\nSELECT avg(order_quantity) FROM order_items\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: On average, when were the transcripts printed? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6060,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT avg(order_quantity) FROM order_items",
                    "question": "What is the average amount of items ordered in each order?"
                }
            ],
            "example_quality": 0.4971610736921071,
            "example_similarity": 0.5632485057163259,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT avg(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 565,
            "question": "What is the average transcript date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of bank customers? */\nSELECT avg(no_of_customers) FROM bank\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the average transcript date? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3016,
                    "db_id": "loan_1",
                    "query": "SELECT avg(no_of_customers) FROM bank",
                    "question": "What is the average number of bank customers?"
                }
            ],
            "example_quality": 0.49805105409265205,
            "example_similarity": 0.5636282035429833,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT avg(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 566,
            "question": "When is the first transcript released? List the date and details.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Tell me the the date when the first claim was made. */\nSELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When is the first transcript released? List the date and details. */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3872,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                    "question": "Tell me the the date when the first claim was made."
                }
            ],
            "example_quality": 0.49855282127985817,
            "example_similarity": 0.5631903259283918,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 567,
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Tell me the the date when the first claim was made. */\nSELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the earliest date of a transcript release, and what details can you tell me? */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3872,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                    "question": "Tell me the the date when the first claim was made."
                }
            ],
            "example_quality": 0.4990528185651693,
            "example_similarity": 0.5625497786163488,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MIN(transcript_date) AS Earliest_Transcript_Release_Date, other_details FROM Transcripts GROUP BY other_details ORDER BY Earliest_Transcript_Release_Date ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 568,
            "question": "How many transcripts are released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many available hotels are there in total? */\nSELECT count(*) FROM HOTELS\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are released? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5886,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM HOTELS",
                    "question": "How many available hotels are there in total?"
                }
            ],
            "example_quality": 0.4999347678282588,
            "example_similarity": 0.5624396557666721,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 569,
            "question": "How many transcripts are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many reviewers listed? */\nSELECT count(*) FROM Reviewer\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are listed? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2443,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Reviewer",
                    "question": "How many reviewers listed?"
                }
            ],
            "example_quality": 0.5008136170939385,
            "example_similarity": 0.5629157430734677,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 570,
            "question": "What is the last transcript release date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is maximum group equity shareholding of the companies? */\nSELECT max(group_equity_shareholding) FROM operate_company\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the last transcript release date? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6370,
                    "db_id": "flight_company",
                    "query": "SELECT max(group_equity_shareholding) FROM operate_company",
                    "question": "What is maximum group equity shareholding of the companies?"
                }
            ],
            "example_quality": 0.5001742311628327,
            "example_similarity": 0.5630445990266083,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT max(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 571,
            "question": "When was the last transcript released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the song that was released in the most recent year? */\nSELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When was the last transcript released? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3530,
                    "db_id": "music_1",
                    "query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
                    "question": "What is the name of the song that was released in the most recent year?"
                }
            ],
            "example_quality": 0.5004174518690937,
            "example_similarity": 0.5625450073956996,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 572,
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students participated in tryouts for each college by descennding count? */\nSELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4988,
                    "db_id": "soccer_2",
                    "query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
                    "question": "How many students participated in tryouts for each college by descennding count?"
                }
            ],
            "example_quality": 0.5009365355779472,
            "example_similarity": 0.5619232443613088,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MAX(count), student_course_id FROM ( SELECT student_course_id, COUNT(transcript_id) as count FROM Transcript_Contents GROUP BY student_course_id ) as counts;",
            "correct": 1
        },
        {
            "index": 573,
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many engineer visits are required at most for a single fault log? List the number and the log entry id. */\nSELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3138,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id."
                }
            ],
            "example_quality": 0.5005165071742513,
            "example_similarity": 0.5613559125304219,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MAX(course_count), student_course_id FROM ( SELECT COUNT(course_id) AS course_count, student_course_id FROM Student_Enrolment_Courses GROUP BY student_course_id ) AS course_counts;",
            "correct": 0
        },
        {
            "index": 574,
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the id of the project that has the fewest corresponding documents. */\nSELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date of the transcript which shows the least number of results, also list the id. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6415,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Return the id of the project that has the fewest corresponding documents."
                }
            ],
            "example_quality": 0.5000473690628524,
            "example_similarity": 0.5609586606502878,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_id, transcript_date FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 575,
            "question": "What is the date and id of the transcript with the least number of results?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the project with least number of documents? */\nSELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with the least number of results? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6414,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the id of the project with least number of documents?"
                }
            ],
            "example_quality": 0.4995798627361888,
            "example_similarity": 0.5613961238491568,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_id, transcript_date FROM Transcript_Contents GROUP BY transcript_id ORDER BY count(*) ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 576,
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name and age of the student who has allergy to both milk and cat. */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the semester when both Master students and Bachelor students got enrolled in. */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 520,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the last name and age of the student who has allergy to both milk and cat."
                }
            ],
            "example_quality": 0.4989354898019794,
            "example_similarity": 0.5612106192149491,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = \"Master\") INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = \"Bachelor\")",
            "correct": 1
        },
        {
            "index": 577,
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which directors had a movie in either 1999 or 2000? */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id of the semester that had both Masters and Bachelors students enrolled? */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6992,
                    "db_id": "culture_company",
                    "query": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
                    "question": "Which directors had a movie in either 1999 or 2000?"
                }
            ],
            "example_quality": 0.4981510535795733,
            "example_similarity": 0.5607331558986566,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",
            "correct": 0
        },
        {
            "index": 578,
            "question": "How many different addresses do the students currently live?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many schools are there in the department? */\nSELECT count(DISTINCT school_code) FROM department\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different addresses do the students currently live? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3227,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT school_code) FROM department",
                    "question": "How many schools are there in the department?"
                }
            ],
            "example_quality": 0.499019304351927,
            "example_similarity": 0.5605615387803864,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT current_address_id) FROM Students",
            "correct": 1
        },
        {
            "index": 579,
            "question": "What are the different addresses that have students living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different cities where people live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the different addresses that have students living there? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 93,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "What are the different cities where people live?"
                }
            ],
            "example_quality": 0.4982590353105796,
            "example_similarity": 0.5605233695224955,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id",
            "correct": 0
        },
        {
            "index": 580,
            "question": "List all the student details in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List all the student details in reversed lexicographical order. */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.4991241059393544,
            "example_similarity": 0.5604853318827352,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC",
            "correct": 0
        },
        {
            "index": 581,
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names of all the races in reverse alphabetical order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What other details can you tell me about students in reverse alphabetical order? */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2203,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "What are the different names of all the races in reverse alphabetical order?"
                }
            ],
            "example_quality": 0.4995399693383242,
            "example_similarity": 0.5602091092805275,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT * FROM Students ORDER BY last_name DESC",
            "correct": 0
        },
        {
            "index": 582,
            "question": "Describe the section h.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the lieutenant governor and comptroller from the democratic party. */\nSELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Describe the section h. */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2753,
                    "db_id": "election",
                    "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
                    "question": "Show the lieutenant governor and comptroller from the democratic party."
                }
            ],
            "example_quality": 0.49994167614931206,
            "example_similarity": 0.5595108911440422,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name, section_description, other_details FROM Sections WHERE section_id = 'h'",
            "correct": 0
        },
        {
            "index": 583,
            "question": "What is the description for the section named h?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the description of the restaurant type Sandwich? */\nSELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description for the section named h? */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2825,
                    "db_id": "restaurant_1",
                    "query": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";",
                    "question": "What is the description of the restaurant type Sandwich?"
                }
            ],
            "example_quality": 0.500799409123327,
            "example_similarity": 0.559954580555771,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_description FROM Sections WHERE section_name = \"h\";",
            "correct": 1
        },
        {
            "index": 584,
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first and last name of students who are living in the dorms that have amenity TV Lounge. */\nSELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5763,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                    "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge."
                }
            ],
            "example_quality": 0.5002045747739178,
            "example_similarity": 0.5598519186027645,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
            "correct": 0
        },
        {
            "index": 585,
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first and last names of all students who are living in a dorm with a TV Lounge? */\nSELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5764,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                    "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?"
                }
            ],
            "example_quality": 0.4996117740462159,
            "example_similarity": 0.5596611903009973,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT S.first_name FROM Students AS S JOIN Addresses AS A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'",
            "correct": 0
        },
        {
            "index": 586,
            "question": "List the title of all cartoons in alphabetical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoons in alphabetical order. */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.5000390577082531,
            "example_similarity": 0.5601023517820225,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon ORDER BY Title",
            "correct": 1
        },
        {
            "index": 587,
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the teams of the players, sorted in ascending alphabetical order? */\nSELECT Team FROM player ORDER BY Team ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of the cartoons sorted alphabetically? */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4871,
                    "db_id": "school_player",
                    "query": "SELECT Team FROM player ORDER BY Team ASC",
                    "question": "What are the teams of the players, sorted in ascending alphabetical order?"
                }
            ],
            "example_quality": 0.5003229207558824,
            "example_similarity": 0.5601703205183394,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon ORDER BY Title ASC",
            "correct": 1
        },
        {
            "index": 588,
            "question": "List all cartoon directed by \"Ben Jones\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the papers which have \"Olin Shivers\" as an author. */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List all cartoon directed by \"Ben Jones\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2891,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
                    "question": "Find the papers which have \"Olin Shivers\" as an author."
                }
            ],
            "example_quality": 0.4995499792806739,
            "example_similarity": 0.5599616975242605,
            "db_id": "tvshow",
            "pred": "SELECT t1.Title FROM Cartoon AS t1 WHERE t1.Directed_by = \"Ben Jones\"",
            "correct": 1
        },
        {
            "index": 589,
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all games played by Linda Smith? */\nSELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the names of all cartoons directed by Ben Jones? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6049,
                    "db_id": "game_1",
                    "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
                    "question": "What are the names of all games played by Linda Smith?"
                }
            ],
            "example_quality": 0.49879991894422165,
            "example_similarity": 0.560447592513445,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
            "correct": 1
        },
        {
            "index": 590,
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For how many clubs is \"Tracy Kim\" a member? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons were written by \"Joseph Kuhr\"? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4270,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
                    "question": "For how many clubs is \"Tracy Kim\" a member?"
                }
            ],
            "example_quality": 0.4980650597170457,
            "example_similarity": 0.5605872697174173,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
            "correct": 1
        },
        {
            "index": 591,
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many patients stay in room 112? */\nSELECT count(patient) FROM stay WHERE room  =  112\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the number of cartoones written by Joseph Kuhr? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3919,
                    "db_id": "hospital_1",
                    "query": "SELECT count(patient) FROM stay WHERE room  =  112",
                    "question": "How many patients stay in room 112?"
                }
            ],
            "example_quality": 0.4979322599875421,
            "example_similarity": 0.5602430321326889,
            "db_id": "tvshow",
            "pred": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "correct": 1
        },
        {
            "index": 592,
            "question": "list all cartoon titles and their directors ordered by their air date",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me a list of the names of all songs ordered by their resolution. */\nSELECT song_name FROM song ORDER BY resolution\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: list all cartoon titles and their directors ordered by their air date */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3580,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song ORDER BY resolution",
                    "question": "Give me a list of the names of all songs ordered by their resolution."
                }
            ],
            "example_quality": 0.4983094219152863,
            "example_similarity": 0.5598878918757078,
            "db_id": "tvshow",
            "pred": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;",
            "correct": 1
        },
        {
            "index": 593,
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and location of the shops in ascending alphabetical order of name. */\nSELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name and directors of all the cartoons that are ordered by air date? */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5061,
                    "db_id": "device",
                    "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC",
                    "question": "What are the names and location of the shops in ascending alphabetical order of name."
                }
            ],
            "example_quality": 0.4986955320423646,
            "example_similarity": 0.5595761079096442,
            "db_id": "tvshow",
            "pred": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;",
            "correct": 1
        },
        {
            "index": 594,
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tracks that are Rock or Jazz songs? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 635,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
                    "question": "What are the names of the tracks that are Rock or Jazz songs?"
                }
            ],
            "example_quality": 0.4981233569537609,
            "example_similarity": 0.559195227817765,
            "db_id": "tvshow",
            "pred": "SELECT C.Title FROM Cartoon AS C WHERE C.Directed_by = \"Ben Jones\" OR C.Directed_by = \"Brandon Vietti\"",
            "correct": 1
        },
        {
            "index": 595,
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tracks that are Rock or Jazz songs? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 635,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
                    "question": "What are the names of the tracks that are Rock or Jazz songs?"
                }
            ],
            "example_quality": 0.4975531051427659,
            "example_similarity": 0.5592824814031319,
            "db_id": "tvshow",
            "pred": "SELECT T2.Title FROM Cartoon AS T2 WHERE T2.Directed_by = \"Ben Jones\" OR T2.Directed_by = \"Brandon Vietti\"",
            "correct": 1
        },
        {
            "index": 596,
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which Advisor has most of students? List advisor and the number of students. */\nSELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Which country has the most of TV Channels? List the country and number of TV Channels it has. */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2832,
                    "db_id": "restaurant_1",
                    "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
                    "question": "Which Advisor has most of students? List advisor and the number of students."
                }
            ],
            "example_quality": 0.4981129992616539,
            "example_similarity": 0.5596024772397038,
            "db_id": "tvshow",
            "pred": "SELECT Country, count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 597,
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the party that has the largest number of representatives? */\nSELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the country with the most number of TV Channels and how many does it have? */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1189,
                    "db_id": "election_representative",
                    "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the party that has the largest number of representatives?"
                }
            ],
            "example_quality": 0.49895368100493426,
            "example_similarity": 0.5593829947461222,
            "db_id": "tvshow",
            "pred": "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 598,
            "question": "List the number of different series names and contents in the TV Channel table.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different majors are there and how many different city codes are there for each student? */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the number of different series names and contents in the TV Channel table. */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5702,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "How many different majors are there and how many different city codes are there for each student?"
                }
            ],
            "example_quality": 0.4997915511035882,
            "example_similarity": 0.5588191807452461,
            "db_id": "tvshow",
            "pred": "SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel",
            "correct": 1
        },
        {
            "index": 599,
            "question": "How many different series and contents are listed in the TV Channel table?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different majors are there and how many different city codes are there for each student? */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many different series and contents are listed in the TV Channel table? */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5702,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "How many different majors are there and how many different city codes are there for each student?"
                }
            ],
            "example_quality": 0.5006266236393084,
            "example_similarity": 0.5585395232612408,
            "db_id": "tvshow",
            "pred": "SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel",
            "correct": 1
        },
        {
            "index": 600,
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the color description of the product with name \"catnip\"? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5545,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "What is the color description of the product with name \"catnip\"?"
                }
            ],
            "example_quality": 0.49998867450467155,
            "example_similarity": 0.558962790722472,
            "db_id": "tvshow",
            "pred": "SELECT \"Content\" FROM \"TV_Channel\" WHERE \"series_name\" = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 601,
            "question": "What is the content of the series Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of the series Sky Radio? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 592,
                    "db_id": "store_1",
                    "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is the address of employee Nancy Edwards?"
                }
            ],
            "example_quality": 0.4999702056434139,
            "example_similarity": 0.5595302403219354,
            "db_id": "tvshow",
            "pred": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "correct": 1
        },
        {
            "index": 602,
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which problem id and log id are assigned to the staff named Rylan Homenick? */\nSELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the Package Option of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5364,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
                    "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?"
                }
            ],
            "example_quality": 0.4992438067348336,
            "example_similarity": 0.5591785722930893,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 603,
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students in Smith Hall? */\nSELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the Package Options of the TV Channels whose series names are Sky Radio? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5744,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
                    "question": "What are the first names of all students in Smith Hall?"
                }
            ],
            "example_quality": 0.49851610483384645,
            "example_similarity": 0.5591725639734582,
            "db_id": "tvshow",
            "pred": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.series_name = 'Sky Radio'",
            "correct": 0
        },
        {
            "index": 604,
            "question": "How many TV Channel using language English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many churches have a wedding in year 2016? */\nSELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channel using language English? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1649,
                    "db_id": "wedding",
                    "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many churches have a wedding in year 2016?"
                }
            ],
            "example_quality": 0.4983275274824913,
            "example_similarity": 0.5593003637621836,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
            "correct": 1
        },
        {
            "index": 605,
            "question": "How many TV Channels use the English language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channels use the English language? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.49778657724132847,
            "example_similarity": 0.5592774781120884,
            "db_id": "tvshow",
            "pred": "SELECT count(*) FROM TV_Channel WHERE Language = \"English\"",
            "correct": 1
        },
        {
            "index": 606,
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. */\nSELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the language used least number of TV Channel. List language and number of TV Channel. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1034,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
                    "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company."
                }
            ],
            "example_quality": 0.49861531226238237,
            "example_similarity": 0.5591796604914414,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 607,
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the payment method that were used the least often? */\nSELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the languages used by the least number of TV Channels and how many channels use it? */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3882,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the payment method that were used the least often?"
                }
            ],
            "example_quality": 0.49905032273092326,
            "example_similarity": 0.5588314667953377,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language ORDER BY Num_Channels ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 608,
            "question": "List each language and the number of TV Channels using it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List each language and the number of TV Channels using it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                }
            ],
            "example_quality": 0.49987425312116834,
            "example_similarity": 0.5590088273214419,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language;",
            "correct": 1
        },
        {
            "index": 609,
            "question": "For each language, list the number of TV Channels that use it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: For each language, list the number of TV Channels that use it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                }
            ],
            "example_quality": 0.5006954776644833,
            "example_similarity": 0.5587822982643935,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language;",
            "correct": 1
        },
        {
            "index": 610,
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\" */\nSELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1033,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";",
                    "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\""
                }
            ],
            "example_quality": 0.5007384059313122,
            "example_similarity": 0.5587123748774978,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "correct": 1
        },
        {
            "index": 611,
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name, role code, and date of birth of the employee named 'Armani'? */\nSELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4200,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'",
                    "question": "What are the name, role code, and date of birth of the employee named 'Armani'?"
                }
            ],
            "example_quality": 0.5001263720660986,
            "example_similarity": 0.5584526164898096,
            "db_id": "tvshow",
            "pred": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle')",
            "correct": 0
        },
        {
            "index": 612,
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\". */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 253,
                    "db_id": "musical",
                    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
                    "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\"."
                }
            ],
            "example_quality": 0.5006163616542258,
            "example_similarity": 0.5583244259399897,
            "db_id": "tvshow",
            "pred": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id JOIN TV_series AS T3 ON T2.id = T3.Channel WHERE T3.series_name = \"Sky Radio\"",
            "correct": 0
        },
        {
            "index": 613,
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the dates of the orders made by the customer named \"Jeramie\"? */\nSELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6905,
                    "db_id": "tracking_orders",
                    "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
                    "question": "What are the dates of the orders made by the customer named \"Jeramie\"?"
                }
            ],
            "example_quality": 0.5011047525813804,
            "example_similarity": 0.5583271593397613,
            "db_id": "tvshow",
            "pred": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 614,
            "question": "List the Episode of all TV series sorted by rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the course name of courses sorted by credits. */\nSELECT CName FROM COURSE ORDER BY Credits\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all TV series sorted by rating. */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4662,
                    "db_id": "college_3",
                    "query": "SELECT CName FROM COURSE ORDER BY Credits",
                    "question": "List the course name of courses sorted by credits."
                }
            ],
            "example_quality": 0.5019172855576323,
            "example_similarity": 0.558898435805154,
            "db_id": "tvshow",
            "pred": "SELECT Episode FROM TV_series ORDER BY Rating",
            "correct": 1
        },
        {
            "index": 615,
            "question": "What are all of the episodes ordered by ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the course names, ordered by credits? */\nSELECT CName FROM COURSE ORDER BY Credits\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are all of the episodes ordered by ratings? */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4663,
                    "db_id": "college_3",
                    "query": "SELECT CName FROM COURSE ORDER BY Credits",
                    "question": "What are the course names, ordered by credits?"
                }
            ],
            "example_quality": 0.5027271761502214,
            "example_similarity": 0.5590736687008638,
            "db_id": "tvshow",
            "pred": "SELECT Episode FROM TV_series ORDER BY Rating;",
            "correct": 1
        },
        {
            "index": 616,
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the top 3 highest support rates? */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2399,
                    "db_id": "candidate_poll",
                    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                    "question": "what are the top 3 highest support rates?"
                }
            ],
            "example_quality": 0.502965775120776,
            "example_similarity": 0.5586530945633624,
            "db_id": "tvshow",
            "pred": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 617,
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which physician was trained in the procedure that costs the most. */\nSELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are 3 most highly rated episodes in the TV series table and what were those ratings? */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3976,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
                    "question": "Which physician was trained in the procedure that costs the most."
                }
            ],
            "example_quality": 0.5022822811578574,
            "example_similarity": 0.5582409304329307,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name, T2.Episode, T2.Rating FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel ORDER BY T2.Rating DESC LIMIT 3",
            "correct": 0
        },
        {
            "index": 618,
            "question": "What is minimum and maximum share of TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum population of the counties? */\nSELECT max(Population) ,  min(Population) FROM county\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is minimum and maximum share of TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2742,
                    "db_id": "election",
                    "query": "SELECT max(Population) ,  min(Population) FROM county",
                    "question": "What are the maximum and minimum population of the counties?"
                }
            ],
            "example_quality": 0.5030876496349483,
            "example_similarity": 0.5583333959425612,
            "db_id": "tvshow",
            "pred": "SELECT min(Share), max(Share) FROM TV_series",
            "correct": 1
        },
        {
            "index": 619,
            "question": "What is the maximum and minimum share for the TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum and minimum market value of companies? */\nSELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the maximum and minimum share for the TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4101,
                    "db_id": "company_employee",
                    "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
                    "question": "What is the maximum and minimum market value of companies?"
                }
            ],
            "example_quality": 0.5038904159521778,
            "example_similarity": 0.5586741025229945,
            "db_id": "tvshow",
            "pred": "SELECT max(Share), min(Share) FROM TV_series",
            "correct": 1
        },
        {
            "index": 620,
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name of the author with last name \"Ueno\"? */\nSELECT fname FROM authors WHERE lname  =  \"Ueno\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the air date of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2915,
                    "db_id": "icfp_1",
                    "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
                    "question": "What is the first name of the author with last name \"Ueno\"?"
                }
            ],
            "example_quality": 0.504690592700642,
            "example_similarity": 0.5589614702693495,
            "db_id": "tvshow",
            "pred": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 621,
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which distinct years was the governor \"Eliot Spitzer\"? */\nSELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: When did the episode \"A Love of a Lifetime\" air? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2755,
                    "db_id": "election",
                    "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
                    "question": "In which distinct years was the governor \"Eliot Spitzer\"?"
                }
            ],
            "example_quality": 0.5048316830381735,
            "example_similarity": 0.5588191623225296,
            "db_id": "tvshow",
            "pred": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 622,
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the project detail for the project with document \"King Book\"? */\nSELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6438,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                    "question": "What is the project detail for the project with document \"King Book\"?"
                }
            ],
            "example_quality": 0.5042095374751815,
            "example_similarity": 0.5588853694570594,
            "db_id": "tvshow",
            "pred": "SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.Channel = T2.Channel WHERE T2.Title = \"A Love of a Lifetime\"",
            "correct": 0
        },
        {
            "index": 623,
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the project detail for the project with document \"King Book\"? */\nSELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the weekly rank for the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6438,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                    "question": "What is the project detail for the project with document \"King Book\"?"
                }
            ],
            "example_quality": 0.5035893891692136,
            "example_similarity": 0.5591475473908717,
            "db_id": "tvshow",
            "pred": "SELECT T2.Weekly_Rank FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.Channel = T2.Channel WHERE T2.Title = \"A Love of a Lifetime\"",
            "correct": 0
        },
        {
            "index": 624,
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the open date of open year of the shop named \"Apple\". */\nSELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5065,
                    "db_id": "device",
                    "query": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
                    "question": "List the open date of open year of the shop named \"Apple\"."
                }
            ],
            "example_quality": 0.5030196176289615,
            "example_similarity": 0.5591760338164041,
            "db_id": "tvshow",
            "pred": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 625,
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the course that is a prerequisite for Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name of the series that has the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1438,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the title of the course that is a prerequisite for Mobile Computing?"
                }
            ],
            "example_quality": 0.5028784899444588,
            "example_similarity": 0.5591540794350252,
            "db_id": "tvshow",
            "pred": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime')",
            "correct": 1
        },
        {
            "index": 626,
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\". */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 253,
                    "db_id": "musical",
                    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
                    "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\"."
                }
            ],
            "example_quality": 0.5033531249445475,
            "example_similarity": 0.5589981439431777,
            "db_id": "tvshow",
            "pred": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 627,
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the address content of the customer named \"Maudie Kertzmann\"? */\nSELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the episode for the TV series named \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6078,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
                    "question": "What is the address content of the customer named \"Maudie Kertzmann\"?"
                }
            ],
            "example_quality": 0.5032712886772918,
            "example_similarity": 0.5594888433414607,
            "db_id": "tvshow",
            "pred": "SELECT t2.Episode FROM TV_series AS t1 JOIN TV_Channel AS t2 ON t1.Channel = t2.id WHERE t2.series_name = \"Sky Radio\"",
            "correct": 0
        },
        {
            "index": 628,
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of products for each manufacturer, showing the name of each company. */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the number of cartoons directed by each of the listed directors. */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5321,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Find the number of products for each manufacturer, showing the name of each company."
                }
            ],
            "example_quality": 0.5026999083520801,
            "example_similarity": 0.5595710444047882,
            "db_id": "tvshow",
            "pred": "SELECT count(*) , Directed_by FROM Cartoon GROUP BY Directed_by",
            "correct": 1
        },
        {
            "index": 629,
            "question": "How many cartoons did each director create?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all directors along with the number of films directed by each director. */\nSELECT directed_by ,  count(*) FROM film GROUP BY directed_by\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons did each director create? */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1950,
                    "db_id": "cinema",
                    "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
                    "question": "List all directors along with the number of films directed by each director."
                }
            ],
            "example_quality": 0.5032703988976865,
            "example_similarity": 0.5589324493212227,
            "db_id": "tvshow",
            "pred": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by",
            "correct": 1
        },
        {
            "index": 630,
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of the program that was launched most recently. */\nSELECT name FROM program ORDER BY launch DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the production code and channel of the most recently aired cartoon . */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3741,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
                    "question": "find the name of the program that was launched most recently."
                }
            ],
            "example_quality": 0.5028025839923679,
            "example_similarity": 0.5591034560154218,
            "db_id": "tvshow",
            "pred": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 631,
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and zip code of the address with the highest monthly rental? */\nSELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the produdction code and channel of the most recent cartoon ? */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3117,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
                    "question": "What are the id and zip code of the address with the highest monthly rental?"
                }
            ],
            "example_quality": 0.5020973148858472,
            "example_similarity": 0.5589305503798981,
            "db_id": "tvshow",
            "pred": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 ORDER BY T1.Original_air_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 632,
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\". */\nSELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the package choice and series name of the TV channel that has high definition TV. */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1032,
                    "db_id": "phone_1",
                    "query": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
                    "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\"."
                }
            ],
            "example_quality": 0.5014592234531351,
            "example_similarity": 0.5586586614935274,
            "db_id": "tvshow",
            "pred": "SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = \"Yes\";",
            "correct": 0
        },
        {
            "index": 633,
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names, locations, and products of the enzymes that are capable inhibitor interactions? */\nSELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options and the name of the series for the TV Channel that supports high definition TV? */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 967,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
                    "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?"
                }
            ],
            "example_quality": 0.5008088038106239,
            "example_similarity": 0.5586267545061151,
            "db_id": "tvshow",
            "pred": "SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'",
            "correct": 0
        },
        {
            "index": 634,
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which city does staff with first name as Janessa and last name as Sawayn live? */\nSELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are playing some cartoon written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6643,
                    "db_id": "driving_school",
                    "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
                    "question": "Which city does staff with first name as Janessa and last name as Sawayn live?"
                }
            ],
            "example_quality": 0.5010816555261338,
            "example_similarity": 0.5585342832844966,
            "db_id": "tvshow",
            "pred": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\";",
            "correct": 1
        },
        {
            "index": 635,
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that have cartoons on TV that were written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 627,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "What is the name of all tracks in the album named Balls to the Wall?"
                }
            ],
            "example_quality": 0.5015523930764862,
            "example_similarity": 0.5582709290554282,
            "db_id": "tvshow",
            "pred": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\";",
            "correct": 1
        },
        {
            "index": 636,
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are not playing any cartoon written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                }
            ],
            "example_quality": 0.5009035510887699,
            "example_similarity": 0.5580363692756097,
            "db_id": "tvshow",
            "pred": "SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
            "correct": 0
        },
        {
            "index": 637,
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the studios that have not produced films with director \"Walter Hill\". */\nSELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that are not playing cartoons written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4153,
                    "db_id": "film_rank",
                    "query": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
                    "question": "Show the studios that have not produced films with director \"Walter Hill\"."
                }
            ],
            "example_quality": 0.5005469957146553,
            "example_similarity": 0.557758372433658,
            "db_id": "tvshow",
            "pred": "SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = \"Todd Casey\")",
            "correct": 0
        },
        {
            "index": 638,
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 627,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "What is the name of all tracks in the album named Balls to the Wall?"
                }
            ],
            "example_quality": 0.5000592949994191,
            "example_similarity": 0.5574999065565789,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang');",
            "correct": 0
        },
        {
            "index": 639,
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tourist attractions Vincent and Marcelle visit? */\nSELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5964,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
                    "question": "What are the names of the tourist attractions Vincent and Marcelle visit?"
                }
            ],
            "example_quality": 0.4998750043214687,
            "example_similarity": 0.5573229809507696,
            "db_id": "tvshow",
            "pred": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = \"Ben Jones\" OR Cartoon.Directed_by = \"Michael Chang\"",
            "correct": 0
        },
        {
            "index": 640,
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the enrollment for each school that does not have \"Catholic\" as denomination. */\nSELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the pixel aspect ratio and nation of the tv channels that do not use English. */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4868,
                    "db_id": "school_player",
                    "query": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
                    "question": "List the enrollment for each school that does not have \"Catholic\" as denomination."
                }
            ],
            "example_quality": 0.5002606162938831,
            "example_similarity": 0.5569521637930339,
            "db_id": "tvshow",
            "pred": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != \"English\"",
            "correct": 1
        },
        {
            "index": 641,
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names and countries of origins for all artists whose song ratings are above 9? */\nSELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3539,
                    "db_id": "music_1",
                    "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
                    "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?"
                }
            ],
            "example_quality": 0.49958927378785517,
            "example_similarity": 0.5567766447300877,
            "db_id": "tvshow",
            "pred": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language <> 'English'",
            "correct": 1
        },
        {
            "index": 642,
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product type codes which have at least two products. */\nSELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find id of the tv channels that from the countries where have more than two tv channels. */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5659,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2",
                    "question": "Show the product type codes which have at least two products."
                }
            ],
            "example_quality": 0.4998894582403784,
            "example_similarity": 0.5564758031707516,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel WHERE Country IN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2 )",
            "correct": 0
        },
        {
            "index": 643,
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all playlists that have more than 100 tracks? */\nSELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of all tv channels that have more than 2 TV channels? */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 639,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
                    "question": "What are the names of all playlists that have more than 100 tracks?"
                }
            ],
            "example_quality": 0.499334198029829,
            "example_similarity": 0.5569711751720413,
            "db_id": "tvshow",
            "pred": "SELECT T1.id FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel GROUP BY T1.id HAVING COUNT(DISTINCT T2.id) + COUNT(DISTINCT T3.id) > 2;",
            "correct": 0
        },
        {
            "index": 644,
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of students who have taken any course in the fall semester of year 2003. */\nSELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the id of tv channels that do not play any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1427,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
                    "question": "Find the names of students who have taken any course in the fall semester of year 2003."
                }
            ],
            "example_quality": 0.4987989718311447,
            "example_similarity": 0.5570238737989622,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
            "correct": 1
        },
        {
            "index": 645,
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and flags of ships that do not have a captain with the rank of Midshipman? */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6266,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?"
                }
            ],
            "example_quality": 0.4982432383510855,
            "example_similarity": 0.5572388013960383,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
            "correct": 1
        },
        {
            "index": 646,
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of students who have taken the prerequisite course of the course with title International Finance. */\nSELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1457,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
                    "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance."
                }
            ],
            "example_quality": 0.49754103928476706,
            "example_similarity": 0.5573857597732015,
            "db_id": "tvshow",
            "pred": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones')",
            "correct": 1
        },
        {
            "index": 647,
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and flags of ships that do not have a captain with the rank of Midshipman? */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6266,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?"
                }
            ],
            "example_quality": 0.49806957890386255,
            "example_similarity": 0.5572684424960892,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
            "correct": 1
        },
        {
            "index": 648,
            "question": "How many poker players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customer cards are there? */\nSELECT count(*) FROM Customers_cards\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many poker players are there? */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 699,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards",
                    "question": "How many customer cards are there?"
                }
            ],
            "example_quality": 0.4988441628870356,
            "example_similarity": 0.5579516702082866,
            "db_id": "poker_player",
            "pred": "SELECT count(*) FROM poker_player",
            "correct": 1
        },
        {
            "index": 649,
            "question": "Count the number of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of party events. */\nSELECT count(*) FROM party_events\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of poker players. */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2071,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM party_events",
                    "question": "Count the number of party events."
                }
            ],
            "example_quality": 0.49961635986255637,
            "example_similarity": 0.5586327924421721,
            "db_id": "poker_player",
            "pred": "SELECT count(*) FROM poker_player",
            "correct": 1
        },
        {
            "index": 650,
            "question": "List the earnings of poker players in descending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the earnings of poker players in descending order. */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                }
            ],
            "example_quality": 0.5003861808473832,
            "example_similarity": 0.5591579727614918,
            "db_id": "poker_player",
            "pred": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 651,
            "question": "What are the earnings of poker players, ordered descending by value?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of captains, sorted by age descending? */\nSELECT name FROM captain ORDER BY age DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the earnings of poker players, ordered descending by value? */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6228,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain ORDER BY age DESC",
                    "question": "What are the names of captains, sorted by age descending?"
                }
            ],
            "example_quality": 0.5008122816107171,
            "example_similarity": 0.5595059855310045,
            "db_id": "poker_player",
            "pred": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 652,
            "question": "List the final tables made and the best finishes of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the login names and family names of course author and tutors. */\nSELECT login_name ,  family_name FROM Course_Authors_and_Tutors\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the final tables made and the best finishes of poker players. */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3777,
                    "db_id": "e_learning",
                    "query": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
                    "question": "List all the login names and family names of course author and tutors."
                }
            ],
            "example_quality": 0.5015779069456701,
            "example_similarity": 0.5598748413814172,
            "db_id": "poker_player",
            "pred": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
            "correct": 1
        },
        {
            "index": 653,
            "question": "What are the final tables made and best finishes for all poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, checking balances, and savings balances for all customers? */\nSELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the final tables made and best finishes for all poker players? */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1818,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
                    "question": "What are the names, checking balances, and savings balances for all customers?"
                }
            ],
            "example_quality": 0.5008546697670458,
            "example_similarity": 0.5602617099244778,
            "db_id": "poker_player",
            "pred": "SELECT T1.Final_Table_Made, T1.Best_Finish, T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
            "correct": 0
        },
        {
            "index": 654,
            "question": "What is the average earnings of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average speed of roller coasters? */\nSELECT avg(Speed) FROM roller_coaster\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players? */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6210,
                    "db_id": "roller_coaster",
                    "query": "SELECT avg(Speed) FROM roller_coaster",
                    "question": "What is the average speed of roller coasters?"
                }
            ],
            "example_quality": 0.5016178889264234,
            "example_similarity": 0.5609340926310152,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player",
            "correct": 1
        },
        {
            "index": 655,
            "question": "Return the average earnings across all poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the average age across all gymnasts. */\nSELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the average earnings across all poker players. */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1758,
                    "db_id": "gymnast",
                    "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
                    "question": "Return the average age across all gymnasts."
                }
            ],
            "example_quality": 0.5009665639051617,
            "example_similarity": 0.5614347869764471,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player",
            "correct": 1
        },
        {
            "index": 656,
            "question": "What is the money rank of the poker player with the highest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and sex of the candidate with the highest support rate? */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the poker player with the highest earnings? */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2416,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
                    "question": "What is the name and sex of the candidate with the highest support rate?"
                }
            ],
            "example_quality": 0.5003934441431112,
            "example_similarity": 0.562001705492235,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 657,
            "question": "Return the money rank of the player with the greatest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the name of the mountain with the greatest height. */\nSELECT Name FROM mountain ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the player with the greatest earnings. */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1126,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
                    "question": "Return the name of the mountain with the greatest height."
                }
            ],
            "example_quality": 0.5011538803011887,
            "example_similarity": 0.562541530395088,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
            "correct": 1
        },
        {
            "index": 658,
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum elevation of all airports in the country of Iceland? */\nSELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the maximum number of final tables made among poker players with earnings less than 200000? */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6812,
                    "db_id": "flight_4",
                    "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
                    "question": "What is the maximum elevation of all airports in the country of Iceland?"
                }
            ],
            "example_quality": 0.5013041023676001,
            "example_similarity": 0.5623774026202406,
            "db_id": "poker_player",
            "pred": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "correct": 1
        },
        {
            "index": 659,
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the maximum number of points for climbers from the United Kingdom. */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the maximum final tables made across all poker players who have earnings below 200000. */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1118,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "Return the maximum number of points for climbers from the United Kingdom."
                }
            ],
            "example_quality": 0.5014538685248572,
            "example_similarity": 0.5621020990972241,
            "db_id": "poker_player",
            "pred": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "correct": 1
        },
        {
            "index": 660,
            "question": "What are the names of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1157,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of body builders?"
                }
            ],
            "example_quality": 0.5020072212493145,
            "example_similarity": 0.5627655807652586,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
            "correct": 1
        },
        {
            "index": 661,
            "question": "Return the names of all the poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return all detention summaries. */\nSELECT detention_summary FROM Detention\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of all the poker players. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3093,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT detention_summary FROM Detention",
                    "question": "Return all detention summaries."
                }
            ],
            "example_quality": 0.5013852876179374,
            "example_similarity": 0.5627546730115375,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;",
            "correct": 1
        },
        {
            "index": 662,
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wines with scores higher than 90? */\nSELECT Name FROM WINE WHERE score  >  90\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players whose earnings is higher than 300000? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6533,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE score  >  90",
                    "question": "What are the names of wines with scores higher than 90?"
                }
            ],
            "example_quality": 0.5008609680207589,
            "example_similarity": 0.5630123447038664,
            "db_id": "poker_player",
            "pred": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;",
            "correct": 1
        },
        {
            "index": 663,
            "question": "Give the names of poker players who have earnings above 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the first name and job id for all employees in the Finance department. */\nSELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the names of poker players who have earnings above 300000. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3495,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
                    "question": "Give the first name and job id for all employees in the Finance department."
                }
            ],
            "example_quality": 0.5009939987002984,
            "example_similarity": 0.5627982274895,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000",
            "correct": 1
        },
        {
            "index": 664,
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of roller coasters by ascending order of length. */\nSELECT Name FROM roller_coaster ORDER BY LENGTH ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of poker players ordered by the final tables made in ascending order. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6205,
                    "db_id": "roller_coaster",
                    "query": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
                    "question": "List the names of roller coasters by ascending order of length."
                }
            ],
            "example_quality": 0.5004263482114034,
            "example_similarity": 0.562925125977512,
            "db_id": "poker_player",
            "pred": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
            "correct": 1
        },
        {
            "index": 665,
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of companies by ascending number of sales. */\nSELECT Name FROM company ORDER BY Sales_in_Billion ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players, ordered ascending by the number of final tables they have made? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4098,
                    "db_id": "company_employee",
                    "query": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
                    "question": "List the names of companies by ascending number of sales."
                }
            ],
            "example_quality": 0.49986040494202394,
            "example_similarity": 0.5626937963280584,
            "db_id": "poker_player",
            "pred": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
            "correct": 1
        },
        {
            "index": 666,
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the room name and base price of the room with the lowest base price? */\nSELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the birth date of the poker player with the lowest earnings? */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2594,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
                    "question": "What are the room name and base price of the room with the lowest base price?"
                }
            ],
            "example_quality": 0.4993894537282247,
            "example_similarity": 0.5629333284990706,
            "db_id": "poker_player",
            "pred": "SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 667,
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the total points of the gymnast with the lowest age. */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the birth date of the poker player with the lowest earnings. */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1756,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "Return the total points of the gymnast with the lowest age."
                }
            ],
            "example_quality": 0.49999720852737567,
            "example_similarity": 0.5634732739182279,
            "db_id": "poker_player",
            "pred": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 668,
            "question": "What is the money rank of the tallest poker player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the age of the tallest person? */\nSELECT Age FROM people ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the tallest poker player? */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1751,
                    "db_id": "gymnast",
                    "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
                    "question": "What is the age of the tallest person?"
                }
            ],
            "example_quality": 0.49953778673059196,
            "example_similarity": 0.5638545741341913,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 669,
            "question": "Return the money rank of the poker player with the greatest height.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the poker player with the greatest height. */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 246,
                    "db_id": "musical",
                    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
                    "question": "Return the duration of the actor with the greatest age."
                }
            ],
            "example_quality": 0.4990797383920946,
            "example_similarity": 0.5642765461401997,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 670,
            "question": "What is the average earnings of poker players with height higher than 200?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price of products with manufacturer codes equal to 2? */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players with height higher than 200? */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5334,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "What is the average price of products with manufacturer codes equal to 2?"
                }
            ],
            "example_quality": 0.498579619379569,
            "example_similarity": 0.5645537453250652,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200",
            "correct": 1
        },
        {
            "index": 671,
            "question": "Give average earnings of poker players who are taller than 200.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average price range of hotels that have 5 star ratings and allow pets. */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give average earnings of poker players who are taller than 200. */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5898,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
                    "question": "Show the average price range of hotels that have 5 star ratings and allow pets."
                }
            ],
            "example_quality": 0.4980352881037922,
            "example_similarity": 0.564209154547134,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200",
            "correct": 1
        },
        {
            "index": 672,
            "question": "What are the names of poker players in descending order of earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the lifespans of representatives in descending order of vote percent? */\nSELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players in descending order of earnings? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1186,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
                    "question": "What are the lifespans of representatives in descending order of vote percent?"
                }
            ],
            "example_quality": 0.49841409361642436,
            "example_similarity": 0.564857652829058,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 673,
            "question": "Return the names of poker players sorted by their earnings descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the characters for actors, ordered by age descending. */\nSELECT Character FROM actor ORDER BY age DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of poker players sorted by their earnings descending. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 244,
                    "db_id": "musical",
                    "query": "SELECT Character FROM actor ORDER BY age DESC",
                    "question": "Return the characters for actors, ordered by age descending."
                }
            ],
            "example_quality": 0.4978947396718069,
            "example_similarity": 0.5648108113439231,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 674,
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many companies operates airlines in each airport? */\nSELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are different nationalities of people and the corresponding number of people from each nation? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6382,
                    "db_id": "flight_company",
                    "query": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
                    "question": "How many companies operates airlines in each airport?"
                }
            ],
            "example_quality": 0.4972695767098014,
            "example_similarity": 0.5643437329888135,
            "db_id": "poker_player",
            "pred": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
            "correct": 1
        },
        {
            "index": 675,
            "question": "How many people are there of each nationality?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers are there of each gender? */\nSELECT gender ,  count(*) FROM Customers GROUP BY gender\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many people are there of each nationality? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1577,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
                    "question": "How many customers are there of each gender?"
                }
            ],
            "example_quality": 0.49801436252208314,
            "example_similarity": 0.5649891496806818,
            "db_id": "poker_player",
            "pred": "SELECT Nationality, count(*) FROM people GROUP BY Nationality",
            "correct": 1
        },
        {
            "index": 676,
            "question": "What is the most common nationality of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the most common nationality of people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                }
            ],
            "example_quality": 0.49760309867219843,
            "example_similarity": 0.5656326568557104,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 677,
            "question": "Give the nationality that is most common across all people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the name of the characteristic that is most common across all products. */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the nationality that is most common across all people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5596,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name of the characteristic that is most common across all products."
                }
            ],
            "example_quality": 0.49705409250861454,
            "example_similarity": 0.5657818946840871,
            "db_id": "poker_player",
            "pred": "SELECT t2.Nationality FROM people AS t1 JOIN people AS t2 ON t1.People_ID = t2.People_ID GROUP BY t2.Nationality ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 678,
            "question": "What are the nationalities that are shared by at least two people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the hometowns that are shared by at least two gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the nationalities that are shared by at least two people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1765,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
                    "question": "What are the hometowns that are shared by at least two gymnasts?"
                }
            ],
            "example_quality": 0.4966008022839088,
            "example_similarity": 0.5664223343674439,
            "db_id": "poker_player",
            "pred": "SELECT T2.Nationality FROM people AS T1 JOIN people AS T2 ON T1.Nationality = T2.Nationality GROUP BY T2.Nationality HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 679,
            "question": "Return the nationalities for which there are two or more people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return complaint status codes have more than 3 corresponding complaints? */\nSELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the nationalities for which there are two or more people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5798,
                    "db_id": "customer_complaints",
                    "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3",
                    "question": "Return complaint status codes have more than 3 corresponding complaints?"
                }
            ],
            "example_quality": 0.49709672648280345,
            "example_similarity": 0.5658981870646782,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 680,
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of actors in ascending alphabetical order. */\nSELECT Name FROM actor ORDER BY Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names and birth dates of people in ascending alphabetical order of name. */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 237,
                    "db_id": "musical",
                    "query": "SELECT Name FROM actor ORDER BY Name ASC",
                    "question": "List the name of actors in ascending alphabetical order."
                }
            ],
            "example_quality": 0.4974566109759436,
            "example_similarity": 0.5660463760052693,
            "db_id": "poker_player",
            "pred": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
            "correct": 1
        },
        {
            "index": 681,
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of actors, ordered alphabetically? */\nSELECT Name FROM actor ORDER BY Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names and birth dates of people, ordered by their names in alphabetical order? */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 238,
                    "db_id": "musical",
                    "query": "SELECT Name FROM actor ORDER BY Name ASC",
                    "question": "What are the names of actors, ordered alphabetically?"
                }
            ],
            "example_quality": 0.49781543853958865,
            "example_similarity": 0.5659107487431857,
            "db_id": "poker_player",
            "pred": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
            "correct": 1
        },
        {
            "index": 682,
            "question": "Show names of people whose nationality is not \"Russia\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of countries whose language is not \"German\". */\nSELECT Name FROM country WHERE Languages != \"German\"\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Show names of people whose nationality is not \"Russia\". */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6207,
                    "db_id": "roller_coaster",
                    "query": "SELECT Name FROM country WHERE Languages != \"German\"",
                    "question": "List the names of countries whose language is not \"German\"."
                }
            ],
            "example_quality": 0.4985517795387975,
            "example_similarity": 0.5662330413193896,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
            "correct": 1
        },
        {
            "index": 683,
            "question": "What are the names of people who are not from Russia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of climbers who are not from the country of Switzerland? */\nSELECT Name FROM climber WHERE Country != \"Switzerland\"\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who are not from Russia? */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1116,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
                    "question": "What are the names of climbers who are not from the country of Switzerland?"
                }
            ],
            "example_quality": 0.4992859643418153,
            "example_similarity": 0.5665753062662133,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
            "correct": 1
        },
        {
            "index": 684,
            "question": "List the names of people that are not poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that are not entrepreneurs. */\nSELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of people that are not poker players. */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2296,
                    "db_id": "entrepreneur",
                    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
                    "question": "List the names of people that are not entrepreneurs."
                }
            ],
            "example_quality": 0.5000180024056431,
            "example_similarity": 0.5670760600715127,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "correct": 1
        },
        {
            "index": 685,
            "question": "What are the names of people who do not play poker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who do not play poker? */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 270,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
                    "question": "What are the names of musicals who have no actors?"
                }
            ],
            "example_quality": 0.5007479031320582,
            "example_similarity": 0.5671866893894478,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "correct": 1
        },
        {
            "index": 686,
            "question": "How many distinct nationalities are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct allergies are there? */\nSELECT count(DISTINCT allergytype) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many distinct nationalities are there? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 443,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
                    "question": "How many distinct allergies are there?"
                }
            ],
            "example_quality": 0.5014756758680173,
            "example_similarity": 0.5678176125827576,
            "db_id": "poker_player",
            "pred": "SELECT count(DISTINCT Nationality) FROM people",
            "correct": 1
        },
        {
            "index": 687,
            "question": "Count the number of different nationalities.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of different nationalities. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.5022013299060551,
            "example_similarity": 0.5684466990273243,
            "db_id": "poker_player",
            "pred": "SELECT count(DISTINCT Nationality) FROM people",
            "correct": 1
        },
        {
            "index": 688,
            "question": "How many states are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many states are there? */\nSELECT ",
            "response": "count(*) FROM area_code_state",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.5021173809446283,
            "example_similarity": 0.5690739567322264,
            "db_id": "voter_1",
            "pred": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE",
            "correct": 1
        },
        {
            "index": 689,
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the company name and rank for all companies in the decreasing order of their sales. */\nSELECT company ,  rank FROM company ORDER BY Sales_billion DESC\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the contestant numbers and names, ordered by contestant name descending. */\nSELECT ",
            "response": "contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1996,
                    "db_id": "gas_company",
                    "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
                    "question": "List the company name and rank for all companies in the decreasing order of their sales."
                }
            ],
            "example_quality": 0.5025761101713877,
            "example_similarity": 0.5687757889628565,
            "db_id": "voter_1",
            "pred": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC",
            "correct": 1
        },
        {
            "index": 690,
            "question": "List the vote ids, phone numbers and states of all votes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first name and last name of all customers. */\nSELECT first_name ,  last_name FROM Customers;\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the vote ids, phone numbers and states of all votes. */\nSELECT ",
            "response": "vote_id , phone_number , state FROM votes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6659,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  last_name FROM Customers;",
                    "question": "List the first name and last name of all customers."
                }
            ],
            "example_quality": 0.5028380771614774,
            "example_similarity": 0.5691777861471913,
            "db_id": "voter_1",
            "pred": "SELECT vote_id, phone_number, state FROM Votes;",
            "correct": 1
        },
        {
            "index": 691,
            "question": "What are the maximum and minimum values of area codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum and minimum height of all players? */\nSELECT max(weight) ,  min(weight) FROM Player\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the maximum and minimum values of area codes? */\nSELECT ",
            "response": "max(area_code) , min(area_code) FROM area_code_state",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1297,
                    "db_id": "soccer_1",
                    "query": "SELECT max(weight) ,  min(weight) FROM Player",
                    "question": "What is the maximum and minimum height of all players?"
                }
            ],
            "example_quality": 0.503557558960086,
            "example_similarity": 0.5693559770388852,
            "db_id": "voter_1",
            "pred": "SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE",
            "correct": 1
        },
        {
            "index": 692,
            "question": "What is last date created of votes from the state 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\". */\nSELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is last date created of votes from the state 'CA'? */\nSELECT ",
            "response": "max(created) FROM votes WHERE state = 'CA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6101,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
                    "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\"."
                }
            ],
            "example_quality": 0.5030177358980049,
            "example_similarity": 0.5688129024869457,
            "db_id": "voter_1",
            "pred": "SELECT max(created) FROM VOTES WHERE state = 'CA'",
            "correct": 1
        },
        {
            "index": 693,
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of the books whose writer is not \"Elaine Lee\"? */\nSELECT Title FROM book WHERE Writer != \"Elaine Lee\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the names of the contestants whose names are not 'Jessie Alloway' */\nSELECT ",
            "response": "contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 217,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
                    "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?"
                }
            ],
            "example_quality": 0.5034142150349167,
            "example_similarity": 0.5686792481921457,
            "db_id": "voter_1",
            "pred": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
            "correct": 1
        },
        {
            "index": 694,
            "question": "What are the distinct states and create time of all votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the distinct last names of all the engineers? */\nSELECT DISTINCT last_name FROM Maintenance_Engineers\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the distinct states and create time of all votes? */\nSELECT ",
            "response": "DISTINCT state , created FROM votes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3139,
                    "db_id": "assets_maintenance",
                    "query": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
                    "question": "What are all the distinct last names of all the engineers?"
                }
            ],
            "example_quality": 0.5036357260465996,
            "example_similarity": 0.5688890557801767,
            "db_id": "voter_1",
            "pred": "SELECT DISTINCT state, created FROM VOTES",
            "correct": 1
        },
        {
            "index": 695,
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of studios that have made two or more films? */\nSELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the contestant numbers and names of the contestants who had at least two votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4146,
                    "db_id": "film_rank",
                    "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2",
                    "question": "What are the names of studios that have made two or more films?"
                }
            ],
            "example_quality": 0.5031988401098418,
            "example_similarity": 0.5686591303892569,
            "db_id": "voter_1",
            "pred": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN ( SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2 )",
            "correct": 1
        },
        {
            "index": 696,
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What country is the artist who made the fewest songs from? */\nSELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3613,
                    "db_id": "music_1",
                    "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
                    "question": "What country is the artist who made the fewest songs from?"
                }
            ],
            "example_quality": 0.5034711013922886,
            "example_similarity": 0.5683394388889187,
            "db_id": "voter_1",
            "pred": "SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number ORDER BY count(*) LIMIT 1",
            "correct": 1
        },
        {
            "index": 697,
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total number of students enrolled in ACCT-211? */\nSELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the number of votes from state 'NY' or 'CA'? */\nSELECT ",
            "response": "count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3243,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
                    "question": "What are the total number of students enrolled in ACCT-211?"
                }
            ],
            "example_quality": 0.5029984398035277,
            "example_similarity": 0.5682791467089829,
            "db_id": "voter_1",
            "pred": "SELECT count(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
            "correct": 1
        },
        {
            "index": 698,
            "question": "How many contestants did not get voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many contestants did not get voted? */\nSELECT ",
            "response": "count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.5031732271390527,
            "example_similarity": 0.568467858533182,
            "db_id": "voter_1",
            "pred": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
            "correct": 1
        },
        {
            "index": 699,
            "question": "What is the area code in which the most voters voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which building has most faculty members? */\nSELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is the area code in which the most voters voted? */\nSELECT ",
            "response": "T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6738,
                    "db_id": "activity_1",
                    "query": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which building has most faculty members?"
                }
            ],
            "example_quality": 0.5028310622933602,
            "example_similarity": 0.5681655337815507,
            "db_id": "voter_1",
            "pred": "SELECT state FROM VOTES GROUP BY state ORDER BY count(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 700,
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"? */\nSELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? */\nSELECT ",
            "response": "T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5920,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
                    "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?"
                }
            ],
            "example_quality": 0.5030155893472268,
            "example_similarity": 0.5680927849894489,
            "db_id": "voter_1",
            "pred": "SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling'",
            "correct": 1
        },
        {
            "index": 701,
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. */\nSELECT ",
            "response": "T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 271,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                    "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"."
                }
            ],
            "example_quality": 0.5024388683598773,
            "example_similarity": 0.5678173316585082,
            "db_id": "voter_1",
            "pred": "SELECT area_code FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number JOIN AREA_CODE_STATE a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling' OR c.contestant_name = 'Kelly Clauss' GROUP BY area_code HAVING COUNT(DISTINCT c.contestant_name) = 2;",
            "correct": 1
        },
        {
            "index": 702,
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the IDs of customers whose name contains \"Diana\". */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Return the names of the contestants whose names contain the substring 'Al' . */\nSELECT ",
            "response": "contestant_name from contestants where contestant_name like \"%al%\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 926,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
                    "question": "Find the IDs of customers whose name contains \"Diana\"."
                }
            ],
            "example_quality": 0.5020518745741356,
            "example_similarity": 0.5674154754677045,
            "db_id": "voter_1",
            "pred": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE \"%Al%\"",
            "correct": 1
        },
        {
            "index": 703,
            "question": "What are the names of all the countries that became independent after 1950?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of all movies that James Cameron directed after 2000? */\nSELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of all the countries that became independent after 1950? */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2438,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
                    "question": "What are the titles of all movies that James Cameron directed after 2000?"
                }
            ],
            "example_quality": 0.5020331505546687,
            "example_similarity": 0.5676751974087177,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE IndepYear > 1950",
            "correct": 1
        },
        {
            "index": 704,
            "question": "Give the names of the nations that were founded after 1950.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the schools that were either founded after 1850 or public. */\nSELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of the nations that were founded after 1950. */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1006,
                    "db_id": "university_basketball",
                    "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
                    "question": "Find the schools that were either founded after 1850 or public."
                }
            ],
            "example_quality": 0.5020144797284389,
            "example_similarity": 0.5674537336423451,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE IndepYear > 1950",
            "correct": 1
        },
        {
            "index": 705,
            "question": "How many countries have a republic as their form of government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trains have 'Express' in their names? */\nSELECT count(*) FROM train WHERE name LIKE \"%Express%\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have a republic as their form of government? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3161,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
                    "question": "How many trains have 'Express' in their names?"
                }
            ],
            "example_quality": 0.5021001232499491,
            "example_similarity": 0.5674053359114102,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM country WHERE GovernmentForm LIKE \"%Republic%\"",
            "correct": 0
        },
        {
            "index": 706,
            "question": "How many countries have governments that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many universities have a location that contains NY? */\nSELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have governments that are republics? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1011,
                    "db_id": "university_basketball",
                    "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
                    "question": "How many universities have a location that contains NY?"
                }
            ],
            "example_quality": 0.5021855241552512,
            "example_similarity": 0.5676317769756614,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE \"%Republic%\"",
            "correct": 0
        },
        {
            "index": 707,
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total order quantities of photo products? */\nSELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the countries in the Caribbean region? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5141,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
                    "question": "What are the total order quantities of photo products?"
                }
            ],
            "example_quality": 0.5016590948424432,
            "example_similarity": 0.567677559469331,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "correct": 1
        },
        {
            "index": 708,
            "question": "How much surface area do the countires in the Carribean cover together?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total order quantities of photo products? */\nSELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How much surface area do the countires in the Carribean cover together? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5141,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
                    "question": "What are the total order quantities of photo products?"
                }
            ],
            "example_quality": 0.5011341526180895,
            "example_similarity": 0.5671731085601787,
            "db_id": "world_1",
            "pred": "SELECT sum(T1.SurfaceArea) FROM country AS T1 WHERE T1.Region = \"Caribbean\"",
            "correct": 1
        },
        {
            "index": 709,
            "question": "Which continent is Anguilla in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is Astrid Gruber's email and phone number? */\nSELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent is Anguilla in? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 576,
                    "db_id": "store_1",
                    "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
                    "question": "What is Astrid Gruber's email and phone number?"
                }
            ],
            "example_quality": 0.5009814346917694,
            "example_similarity": 0.5668432922340476,
            "db_id": "world_1",
            "pred": "SELECT Continent FROM country WHERE Name = \"Anguilla\";",
            "correct": 1
        },
        {
            "index": 710,
            "question": "What is the continent name which Anguilla belongs to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the role name and role description for employee called Ebba? */\nSELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the continent name which Anguilla belongs to? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4213,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"",
                    "question": "What is the role name and role description for employee called Ebba?"
                }
            ],
            "example_quality": 0.500412128718328,
            "example_similarity": 0.5666611185830138,
            "db_id": "world_1",
            "pred": "SELECT T2.Continent FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Anguilla\"",
            "correct": 0
        },
        {
            "index": 711,
            "question": "Which region is the city Kabul located in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Where is store 1 located? */\nSELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which region is the city Kabul located in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2975,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
                    "question": "Where is store 1 located?"
                }
            ],
            "example_quality": 0.5003932038139972,
            "example_similarity": 0.5665673617354989,
            "db_id": "world_1",
            "pred": "SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'",
            "correct": 1
        },
        {
            "index": 712,
            "question": "What region is Kabul in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is Astrid Gruber's email and phone number? */\nSELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region is Kabul in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 576,
                    "db_id": "store_1",
                    "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
                    "question": "What is Astrid Gruber's email and phone number?"
                }
            ],
            "example_quality": 0.4999172842321495,
            "example_similarity": 0.5664100275961871,
            "db_id": "world_1",
            "pred": "SELECT Region FROM city WHERE Name = \"Kabul\";",
            "correct": 0
        },
        {
            "index": 713,
            "question": "Which language is the most popular in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2556,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "What are the names of cities that are in the county with the most police officers?"
                }
            ],
            "example_quality": 0.4993833989625378,
            "example_similarity": 0.5660363809936679,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 714,
            "question": "What language is predominantly spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara? */\nSELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What language is predominantly spoken in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3503,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
                    "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?"
                }
            ],
            "example_quality": 0.49876223990444685,
            "example_similarity": 0.5654850888537656,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage WHERE CountryCode = \"ABW\" AND IsOfficial = \"T\"",
            "correct": 0
        },
        {
            "index": 715,
            "question": "What are the population and life expectancies in Brazil?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the phones of departments in Room 268? */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population and life expectancies in Brazil? */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4646,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "What are the phones of departments in Room 268?"
                }
            ],
            "example_quality": 0.498895354805195,
            "example_similarity": 0.5658385108528259,
            "db_id": "world_1",
            "pred": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "correct": 1
        },
        {
            "index": 716,
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the member name and hometown who registered a branch in 2016. */\nSELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give me Brazil\u2019s population and life expectancies. */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5431,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
                    "question": "Show the member name and hometown who registered a branch in 2016."
                }
            ],
            "example_quality": 0.49833373307159606,
            "example_similarity": 0.5655719766197912,
            "db_id": "world_1",
            "pred": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "correct": 1
        },
        {
            "index": 717,
            "question": "What are the region and population of Angola?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the birth dates of employees living in Edmonton? */\nSELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the region and population of Angola? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 884,
                    "db_id": "chinook_1",
                    "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
                    "question": "What are the birth dates of employees living in Edmonton?"
                }
            ],
            "example_quality": 0.4986800830487161,
            "example_similarity": 0.5657129733980992,
            "db_id": "world_1",
            "pred": "SELECT Region, Population FROM country WHERE Name = \"Angola\"",
            "correct": 1
        },
        {
            "index": 718,
            "question": "What region does Angola belong to and what is its population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is Nancy Edwards's address? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region does Angola belong to and what is its population? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 593,
                    "db_id": "store_1",
                    "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is Nancy Edwards's address?"
                }
            ],
            "example_quality": 0.4986412099954021,
            "example_similarity": 0.5655678835487126,
            "db_id": "world_1",
            "pred": "SELECT Region, Population FROM country WHERE Name = \"Angola\";",
            "correct": 1
        },
        {
            "index": 719,
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of tracks that belong to Jazz genre? */\nSELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average expected life expectancy for countries in the region of Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 844,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
                    "question": "What is the average unit price of tracks that belong to Jazz genre?"
                }
            ],
            "example_quality": 0.4981855930574098,
            "example_similarity": 0.5657084938173049,
            "db_id": "world_1",
            "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "correct": 1
        },
        {
            "index": 720,
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ? */\nSELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How long is the people\u2019s average life expectancy in Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2220,
                    "db_id": "formula_1",
                    "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
                    "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?"
                }
            ],
            "example_quality": 0.49761905442507703,
            "example_similarity": 0.5655841632372678,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
            "correct": 1
        },
        {
            "index": 721,
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many faculty lines are there in the university that conferred the least number of degrees in year 2001? */\nSELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the name of country that has the shortest life expectancy in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2383,
                    "db_id": "csu_1",
                    "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
                    "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?"
                }
            ],
            "example_quality": 0.4970237104777136,
            "example_similarity": 0.5654354103525189,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' ORDER BY T1.LifeExpectancy LIMIT 1",
            "correct": 1
        },
        {
            "index": 722,
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the name of the lowest earning instructor in the Statistics department. */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the country in Asia with the lowest life expectancy. */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1362,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "Give the name of the lowest earning instructor in the Statistics department."
                }
            ],
            "example_quality": 0.49772035353799376,
            "example_similarity": 0.5657602920556318,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "correct": 1
        },
        {
            "index": 723,
            "question": "What is the total population and maximum GNP in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total and maximum duration of trips with bike id 636? */\nSELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and maximum GNP in Asia? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 122,
                    "db_id": "bike_1",
                    "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
                    "question": "What is the total and maximum duration of trips with bike id 636?"
                }
            ],
            "example_quality": 0.49777670372461,
            "example_similarity": 0.5658998582722445,
            "db_id": "world_1",
            "pred": "SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'",
            "correct": 1
        },
        {
            "index": 724,
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum and minimum grade point of students who live in NYC? */\nSELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Asia, and what is the largest GNP among them? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4702,
                    "db_id": "college_3",
                    "query": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
                    "question": "What is the maximum and minimum grade point of students who live in NYC?"
                }
            ],
            "example_quality": 0.49719534126283593,
            "example_similarity": 0.5656832713258615,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia'",
            "correct": 1
        },
        {
            "index": 725,
            "question": "What is the average life expectancy in African countries that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and maximum number of total passengers for train stations in London or Glasgow? */\nSELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average life expectancy in African countries that are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6605,
                    "db_id": "train_station",
                    "query": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'",
                    "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?"
                }
            ],
            "example_quality": 0.49724231320592166,
            "example_similarity": 0.565661639227481,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "correct": 1
        },
        {
            "index": 726,
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average latitude and longitude in San Jose? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the average life expectancy for countries in Africa which are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 119,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude in San Jose?"
                }
            ],
            "example_quality": 0.4970574411630541,
            "example_similarity": 0.565571196198242,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "correct": 1
        },
        {
            "index": 727,
            "question": "What is the total surface area of the continents Asia and Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total account balances for each customer from Utah or Texas? */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the continents Asia and Europe? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3036,
                    "db_id": "loan_1",
                    "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
                    "question": "What are the total account balances for each customer from Utah or Texas?"
                }
            ],
            "example_quality": 0.49774924660849695,
            "example_similarity": 0.5654810019806379,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "correct": 1
        },
        {
            "index": 728,
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total account balances for each customer from Utah or Texas? */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total surface area covered by countries in Asia or Europe. */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3036,
                    "db_id": "loan_1",
                    "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
                    "question": "What are the total account balances for each customer from Utah or Texas?"
                }
            ],
            "example_quality": 0.49843915148952916,
            "example_similarity": 0.5652826113619542,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "correct": 1
        },
        {
            "index": 729,
            "question": "How many people live in Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many faculty is there in total in the year of 2002? */\nSELECT sum(faculty) FROM faculty WHERE YEAR  =  2002\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2373,
                    "db_id": "csu_1",
                    "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
                    "question": "How many faculty is there in total in the year of 2002?"
                }
            ],
            "example_quality": 0.4983789406569584,
            "example_similarity": 0.5650558862434879,
            "db_id": "world_1",
            "pred": "SELECT sum(Population) FROM city WHERE District = 'Gelderland'",
            "correct": 1
        },
        {
            "index": 730,
            "question": "What is the total population of Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total order quantities of photo products? */\nSELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population of Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5141,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
                    "question": "What are the total order quantities of photo products?"
                }
            ],
            "example_quality": 0.49787431197112697,
            "example_similarity": 0.565278101094213,
            "db_id": "world_1",
            "pred": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
            "correct": 1
        },
        {
            "index": 731,
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and maximum number of total passengers for train stations in London or Glasgow? */\nSELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average GNP and total population in all nations whose government is US territory? */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6605,
                    "db_id": "train_station",
                    "query": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'",
                    "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?"
                }
            ],
            "example_quality": 0.49774042098347837,
            "example_similarity": 0.5652185402588374,
            "db_id": "world_1",
            "pred": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US territory'",
            "correct": 0
        },
        {
            "index": 732,
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean GNP and total population of nations which are considered US territory. */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1660,
                    "db_id": "theme_gallery",
                    "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
                    "question": "What is the average and minimum age of all artists from United States."
                }
            ],
            "example_quality": 0.49797119454315486,
            "example_similarity": 0.564966810533009,
            "db_id": "world_1",
            "pred": "SELECT avg(GNP), sum(Population) FROM country WHERE Code IN ('ASM', 'GUM', 'MNP', 'PRI', 'VIR')",
            "correct": 0
        },
        {
            "index": 733,
            "question": "How many unique languages are spoken in the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct transaction types are used in the transactions? */\nSELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many unique languages are spoken in the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5860,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
                    "question": "How many distinct transaction types are used in the transactions?"
                }
            ],
            "example_quality": 0.49865609059425564,
            "example_similarity": 0.5648781791407402,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
            "correct": 1
        },
        {
            "index": 734,
            "question": "What is the number of distinct languages used around the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct transaction types are used in the transactions? */\nSELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct languages used around the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5860,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
                    "question": "How many distinct transaction types are used in the transactions?"
                }
            ],
            "example_quality": 0.49933912044358225,
            "example_similarity": 0.5644870341797552,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
            "correct": 1
        },
        {
            "index": 735,
            "question": "How many type of governments are in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different cities do have some airport in the country of Greenland? */\nSELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many type of governments are in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6824,
                    "db_id": "flight_4",
                    "query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
                    "question": "How many different cities do have some airport in the country of Greenland?"
                }
            ],
            "example_quality": 0.5000202917082849,
            "example_similarity": 0.5643142627046807,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
            "correct": 1
        },
        {
            "index": 736,
            "question": "How many different forms of governments are there in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different cities do have some airport in the country of Greenland? */\nSELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many different forms of governments are there in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6824,
                    "db_id": "flight_4",
                    "query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
                    "question": "How many different cities do have some airport in the country of Greenland?"
                }
            ],
            "example_quality": 0.5006996119641159,
            "example_similarity": 0.5641869175587424,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
            "correct": 1
        },
        {
            "index": 737,
            "question": "What is the total number of languages used in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many drivers did not race in 2009? */\nSELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of languages used in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2175,
                    "db_id": "formula_1",
                    "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
                    "question": "How many drivers did not race in 2009?"
                }
            ],
            "example_quality": 0.5001136114109774,
            "example_similarity": 0.5637606123788799,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
            "correct": 1
        },
        {
            "index": 738,
            "question": "How many languages are spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many languages are spoken in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                }
            ],
            "example_quality": 0.4995311242616917,
            "example_similarity": 0.5636742158851415,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
            "correct": 1
        },
        {
            "index": 739,
            "question": "How many official languages does Afghanistan have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara? */\nSELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages does Afghanistan have? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3503,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
                    "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?"
                }
            ],
            "example_quality": 0.49896420031049094,
            "example_similarity": 0.5630424161255518,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 740,
            "question": "How many official languages are spoken in Afghanistan?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara. */\nSELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages are spoken in Afghanistan? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3502,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
                    "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara."
                }
            ],
            "example_quality": 0.49839880858618535,
            "example_similarity": 0.5624082371848416,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = \"AF\" AND IsOfficial = \"T\"",
            "correct": 0
        },
        {
            "index": 741,
            "question": "What is name of the country that speaks the largest number of languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is name of the country that speaks the largest number of languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2578,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which room has the largest number of reservations?"
                }
            ],
            "example_quality": 0.49885980884450365,
            "example_similarity": 0.5622396700631347,
            "db_id": "world_1",
            "pred": "SELECT T2.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 742,
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the nation that uses the greatest amount of languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 911,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer uses the most policies? Give me the customer name."
                }
            ],
            "example_quality": 0.49942289086313185,
            "example_similarity": 0.5619536327719445,
            "db_id": "world_1",
            "pred": "SELECT t1.Name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode GROUP BY t1.Name ORDER BY COUNT(DISTINCT t2.Language) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 743,
            "question": "Which continent has the most diverse languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which city has the most customers living in? */\nSELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent has the most diverse languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6086,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which city has the most customers living in?"
                }
            ],
            "example_quality": 0.499397837282977,
            "example_similarity": 0.5621394286901519,
            "db_id": "world_1",
            "pred": "SELECT t2.Continent FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode GROUP BY t2.Continent ORDER BY COUNT(DISTINCT t2.Language) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 744,
            "question": "Which continent speaks the most languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which store has most the customers? */\nSELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent speaks the most languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2999,
                    "db_id": "sakila_1",
                    "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which store has most the customers?"
                }
            ],
            "example_quality": 0.4990814423403923,
            "example_similarity": 0.5623919294580414,
            "db_id": "world_1",
            "pred": "SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY NumLanguages DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 745,
            "question": "How many countries speak both English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many professors who are from either Accounting or Biology department? */\nSELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries speak both English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3290,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
                    "question": "How many professors who are from either Accounting or Biology department?"
                }
            ],
            "example_quality": 0.4987093457581048,
            "example_similarity": 0.5621739537138024,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage AS cl WHERE cl.Language = 'English' AND cl.CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')",
            "correct": 0
        },
        {
            "index": 746,
            "question": "What is the number of nations that use English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of nations that use English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2450,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "How many movie ratings have more than 3 stars?"
                }
            ],
            "example_quality": 0.4980977395157517,
            "example_similarity": 0.561632024468666,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 747,
            "question": "What are the names of nations speak both English and French?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations speak both English and French? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                }
            ],
            "example_quality": 0.4975709171114586,
            "example_similarity": 0.5614156496032462,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
            "correct": 1
        },
        {
            "index": 748,
            "question": "Give the names of nations that speak both English and French.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of nations that speak both English and French. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                }
            ],
            "example_quality": 0.4970455033232197,
            "example_similarity": 0.5611107267205324,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
            "correct": 1
        },
        {
            "index": 749,
            "question": "What are the names of nations where both English and French are official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations where both English and French are official languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                }
            ],
            "example_quality": 0.49648769261520326,
            "example_similarity": 0.5610958926394636,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'",
            "correct": 1
        },
        {
            "index": 750,
            "question": "Give the names of countries with English and French as official languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names. */\nSELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries with English and French as official languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3988,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
                    "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names."
                }
            ],
            "example_quality": 0.49640517456654043,
            "example_similarity": 0.5607720072068534,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "correct": 1
        },
        {
            "index": 751,
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct continents where Chinese is spoken? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                }
            ],
            "example_quality": 0.49652574893028556,
            "example_similarity": 0.5602749739083089,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT T2.Continent) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Chinese'",
            "correct": 1
        },
        {
            "index": 752,
            "question": "How many continents speak Chinese?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many continents speak Chinese? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                }
            ],
            "example_quality": 0.49606901419033816,
            "example_similarity": 0.5603610444217287,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = \"Chinese\"",
            "correct": 1
        },
        {
            "index": 753,
            "question": "What are the regions that use English or Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of cities in counties that have a population more than 20000. */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the regions that use English or Dutch? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2557,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "Show the number of cities in counties that have a population more than 20000."
                }
            ],
            "example_quality": 0.4954828850940878,
            "example_similarity": 0.5599488783600798,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch')",
            "correct": 0
        },
        {
            "index": 754,
            "question": "Which regions speak Dutch or English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which cities have 2 to 4 parks? */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which regions speak Dutch or English? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3708,
                    "db_id": "baseball_1",
                    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "Which cities have 2 to 4 parks?"
                }
            ],
            "example_quality": 0.4948719641388548,
            "example_similarity": 0.5598693705638462,
            "db_id": "world_1",
            "pred": "SELECT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' OR Language = 'English');",
            "correct": 0
        },
        {
            "index": 755,
            "question": "What are the countries where either English or Dutch is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all airports whose elevation is between -50 and 50? */\nSELECT name FROM airports WHERE elevation BETWEEN -50 AND 50\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries where either English or Dutch is the official language ? */\nSELECT ",
            "response": "t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6819,
                    "db_id": "flight_4",
                    "query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
                    "question": "What are the names of all airports whose elevation is between -50 and 50?"
                }
            ],
            "example_quality": 0.49422525913550497,
            "example_similarity": 0.5597238482187286,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 756,
            "question": "Which countries have either English or Dutch as an official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border colorado and border new mexico */\nSELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have either English or Dutch as an official language? */\nSELECT ",
            "response": "* FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7495,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
                    "question": "how many states border colorado and border new mexico"
                }
            ],
            "example_quality": 0.4936566232497955,
            "example_similarity": 0.5592039313119136,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';",
            "correct": 0
        },
        {
            "index": 757,
            "question": "Which language is the most popular on the Asian continent?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most popular payment method? */\nSELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular on the Asian continent? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3879,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most popular payment method?"
                }
            ],
            "example_quality": 0.4932750789472289,
            "example_similarity": 0.559235806347609,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 758,
            "question": "What is the language that is used by the largest number of Asian nations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which movie has the most number of actors from China ? */\nSELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language that is used by the largest number of Asian nations? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8529,
                    "db_id": "imdb",
                    "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;",
                    "question": "which movie has the most number of actors from China ?"
                }
            ],
            "example_quality": 0.4931825171116088,
            "example_similarity": 0.5588121380517617,
            "db_id": "world_1",
            "pred": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.Continent = \"Asia\" GROUP BY cl.Language ORDER BY COUNT(DISTINCT c.Name) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 759,
            "question": "Which languages are spoken by only one country in republic governments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which languages are spoken by only one country in republic governments? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1081,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "How many distinct official languages are there among countries of players whose positions are defenders."
                }
            ],
            "example_quality": 0.4930771209272546,
            "example_similarity": 0.5583623082313348,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = \"Republic\" GROUP BY T1.Language HAVING COUNT(T1.CountryCode) = 1",
            "correct": 0
        },
        {
            "index": 760,
            "question": "What languages are only used by a single country with a republic government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the last names that are used by customers and staff? */\nSELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What languages are only used by a single country with a republic government? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6712,
                    "db_id": "driving_school",
                    "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                    "question": "What are the last names that are used by customers and staff?"
                }
            ],
            "example_quality": 0.49249131319953887,
            "example_similarity": 0.5582855157205041,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT cl.CountryCode) = 1",
            "correct": 1
        },
        {
            "index": 761,
            "question": "Find the city with the largest population that uses English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the name of the student in the History department with the most credits. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the city with the largest population that uses English. */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1334,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "Give the name of the student in the History department with the most credits."
                }
            ],
            "example_quality": 0.49211173166322575,
            "example_similarity": 0.5580360223393097,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 762,
            "question": "What is the most populace city that speaks English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What campus has the most faculties in 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the most populace city that speaks English? */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2352,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
                    "question": "What campus has the most faculties in 2003?"
                }
            ],
            "example_quality": 0.4922855501302147,
            "example_similarity": 0.557909385120411,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 763,
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the name of the student in the History department with the most credits. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the name, population and expected life length of asian country with the largest area? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1334,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "Give the name of the student in the History department with the most credits."
                }
            ],
            "example_quality": 0.49256911032048784,
            "example_similarity": 0.5576910298945993,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 764,
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, population, and life expectancy of the largest Asian country by land? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1037,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
                    "question": "List the name of the phone model launched in year 2002 and with the highest RAM size."
                }
            ],
            "example_quality": 0.4921137094655433,
            "example_similarity": 0.5573973679881055,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country AS c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 765,
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average bike availablility for stations not in Palo Alto? */\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is average life expectancy in the countries where English is not the official language? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 151,
                    "db_id": "bike_1",
                    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
                    "question": "What is the average bike availablility for stations not in Palo Alto?"
                }
            ],
            "example_quality": 0.49168618411746,
            "example_similarity": 0.5574675820314036,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\" AND IsOfficial = \"T\")",
            "correct": 1
        },
        {
            "index": 766,
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? */\nSELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean life expectancy of countries in which English is not the official language. */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2471,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
                    "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?"
                }
            ],
            "example_quality": 0.49128317176665953,
            "example_similarity": 0.5571069846658273,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\" AND IsOfficial = \"T\")",
            "correct": 1
        },
        {
            "index": 767,
            "question": "What is the total number of people living in the nations that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of people who have no friends living in Austin? */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of people living in the nations that do not use English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4482,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who have no friends living in Austin?"
                }
            ],
            "example_quality": 0.4908567406774145,
            "example_similarity": 0.5569732668951358,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
            "correct": 0
        },
        {
            "index": 768,
            "question": "How many people live in countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of people who have no friends living in Austin? */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in countries that do not speak English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4482,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who have no friends living in Austin?"
                }
            ],
            "example_quality": 0.49043142008579793,
            "example_similarity": 0.5564744905625617,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
            "correct": 0
        },
        {
            "index": 769,
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the full names and hire dates for employees in the same department as someone with the first name Clara? */\nSELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language spoken in the country whose head of state is Beatrix? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3501,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
                    "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?"
                }
            ],
            "example_quality": 0.4898749696154696,
            "example_similarity": 0.5562806452008516,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = \"Beatrix\" AND IsOfficial = \"T\")",
            "correct": 0
        },
        {
            "index": 770,
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the course that is a prerequisite for Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language used in the country the name of whose head of state is Beatrix. */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1438,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the title of the course that is a prerequisite for Mobile Computing?"
                }
            ],
            "example_quality": 0.4895837358886963,
            "example_similarity": 0.5561793208169091,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix' AND Code IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T'))",
            "correct": 0
        },
        {
            "index": 771,
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of unique official languages spoken in the countries that are founded before 1930? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                }
            ],
            "example_quality": 0.4890273446107681,
            "example_similarity": 0.5558902858136879,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930 AND Code IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T'))",
            "correct": 0
        },
        {
            "index": 772,
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many parks are there in the state of NY? */\nSELECT count(*) FROM park WHERE state  =  'NY';\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: For the countries founded before 1930, what is the total number of distinct official languages? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3646,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM park WHERE state  =  'NY';",
                    "question": "How many parks are there in the state of NY?"
                }
            ],
            "example_quality": 0.4885420150726408,
            "example_similarity": 0.5555234943459594,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 ) AND IsOfficial = 'T';",
            "correct": 1
        },
        {
            "index": 773,
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries that have greater surface area than any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1492,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
                }
            ],
            "example_quality": 0.48904196071937733,
            "example_similarity": 0.5554516657633644,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')",
            "correct": 0
        },
        {
            "index": 774,
            "question": "Which countries have greater area than that of any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have greater area than that of any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2362,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
                    "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?"
                }
            ],
            "example_quality": 0.4885171197588654,
            "example_similarity": 0.5552723569790018,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 WHERE T1.SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Region = \"Europe\")",
            "correct": 0
        },
        {
            "index": 775,
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the wines that have prices lower than 50 and have appelations in Monterey county? */\nSELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the African countries that have a  population less than any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6552,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
                    "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?"
                }
            ],
            "example_quality": 0.4879977807808084,
            "example_similarity": 0.5553945861958031,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = \"Africa\" AND T1.Population < (SELECT MAX(Population) FROM country WHERE Continent = \"Asia\")",
            "correct": 1
        },
        {
            "index": 776,
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000? */\nSELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which African countries have a smaller population than that of any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3557,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
                    "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?"
                }
            ],
            "example_quality": 0.4877841524836968,
            "example_similarity": 0.5552974282239013,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')",
            "correct": 1
        },
        {
            "index": 777,
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all colleges with a larger enrollment than the largest college in Florida? */\nSELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which Asian countries have a population that is larger than any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5044,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
                    "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?"
                }
            ],
            "example_quality": 0.4879505011124656,
            "example_similarity": 0.5549946001309489,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
            "correct": 1
        },
        {
            "index": 778,
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the Asian countries which have a population larger than that of any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1492,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
                }
            ],
            "example_quality": 0.48811642210979794,
            "example_similarity": 0.554923912984251,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa')",
            "correct": 0
        },
        {
            "index": 779,
            "question": "What are the country codes for countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and flags of ships that do not have a captain with the rank of Midshipman? */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes for countries that do not speak English? */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6266,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?"
                }
            ],
            "example_quality": 0.48762142947868314,
            "example_similarity": 0.5548534073193162,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
            "correct": 0
        },
        {
            "index": 780,
            "question": "Return the country codes for countries that do not speak English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the issue dates of volumes that are by the artist named Gorgoroth. */\nSELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country codes for countries that do not speak English. */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6171,
                    "db_id": "music_4",
                    "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
                    "question": "Return the issue dates of volumes that are by the artist named Gorgoroth."
                }
            ],
            "example_quality": 0.48712374632733685,
            "example_similarity": 0.5547118573669125,
            "db_id": "world_1",
            "pred": "SELECT T1.Code FROM country AS T1 WHERE T1.Code NOT IN (SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = \"English\")",
            "correct": 0
        },
        {
            "index": 781,
            "question": "What are the country codes of countries where people use languages other than English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct years in which the competitions type is not \"Tournament\"? */\nSELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of countries where people use languages other than English? */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3346,
                    "db_id": "sports_competition",
                    "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
                    "question": "What are the distinct years in which the competitions type is not \"Tournament\"?"
                }
            ],
            "example_quality": 0.4875243561271738,
            "example_similarity": 0.55444695881325,
            "db_id": "world_1",
            "pred": "SELECT CountryCode FROM countrylanguage WHERE Language != \"English\"",
            "correct": 1
        },
        {
            "index": 782,
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the official languages of the countries of players from Maryland or Duke college? */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the country codes for countries in which people speak langauges that are not English. */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1079,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "What are the official languages of the countries of players from Maryland or Duke college?"
                }
            ],
            "example_quality": 0.4869877179520335,
            "example_similarity": 0.5540330486750864,
            "db_id": "world_1",
            "pred": "SELECT T1.CountryCode FROM countrylanguage AS T1 WHERE T1.Language <> \"English\"",
            "correct": 1
        },
        {
            "index": 783,
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and flags of ships that do not have a captain with the rank of Midshipman? */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of the countries that do not speak English and whose government forms are not Republic? */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6266,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?"
                }
            ],
            "example_quality": 0.48655118138264514,
            "example_similarity": 0.5541768974847818,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm <> 'Republic'",
            "correct": 1
        },
        {
            "index": 784,
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids for employees who do not work in departments with managers that have ids between 100 and 200? */\nSELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries that do not speak English and do not have Republics for governments. */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3499,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
                    "question": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?"
                }
            ],
            "example_quality": 0.4860150456102004,
            "example_similarity": 0.5540166864274944,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'",
            "correct": 1
        },
        {
            "index": 785,
            "question": "Which cities are in European countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tourist attractions that have parking or shopping as their feature details? */\nSELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which cities are in European countries where English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5960,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
                    "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?"
                }
            ],
            "example_quality": 0.4857719465919285,
            "example_similarity": 0.5536676205849116,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'",
            "correct": 0
        },
        {
            "index": 786,
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the birth dates of employees living in Edmonton? */\nSELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of cities in Europe for which English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 884,
                    "db_id": "chinook_1",
                    "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
                    "question": "What are the birth dates of employees living in Edmonton?"
                }
            ],
            "example_quality": 0.485208388208584,
            "example_similarity": 0.5537864389092685,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \"Europe\" AND countrylanguage.Language = \"English\" AND countrylanguage.IsOfficial = \"F\"",
            "correct": 0
        },
        {
            "index": 787,
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction? */\nSELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which unique cities are in Asian countries where Chinese is the official language ? */\nSELECT ",
            "response": "distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 966,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
                    "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?"
                }
            ],
            "example_quality": 0.48477141276150937,
            "example_similarity": 0.5534737398861211,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 788,
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE. */\nSELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the different names of cities that are in Asia and for which Chinese is the official language. */\nSELECT ",
            "response": "DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4688,
                    "db_id": "college_3",
                    "query": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"",
                    "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE."
                }
            ],
            "example_quality": 0.4844166123382655,
            "example_similarity": 0.5533231166231891,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = \"Chinese\" AND countrylanguage.IsOfficial = \"T\" AND country.Continent = \"Asia\"",
            "correct": 0
        },
        {
            "index": 789,
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the order id and customer id of the oldest order? */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, independence year, and surface area of the country with the smallest population? */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6888,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "what are the order id and customer id of the oldest order?"
                }
            ],
            "example_quality": 0.48481380572922106,
            "example_similarity": 0.5533822761711952,
            "db_id": "world_1",
            "pred": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1",
            "correct": 1
        },
        {
            "index": 790,
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the id and product type of the product with the lowest price. */\nSELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, year of independence, and surface area of the country that has the lowest population. */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4713,
                    "db_id": "department_store",
                    "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
                    "question": "Give the id and product type of the product with the lowest price."
                }
            ],
            "example_quality": 0.4852099935672881,
            "example_similarity": 0.5533722410690222,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country)",
            "correct": 0
        },
        {
            "index": 791,
            "question": "What are the population, name and leader of the country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the teams of the players with the top 5 largest ages. */\nSELECT Team FROM player ORDER BY Age DESC LIMIT 5\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population, name and leader of the country with the largest area? */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4877,
                    "db_id": "school_player",
                    "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
                    "question": "List the teams of the players with the top 5 largest ages."
                }
            ],
            "example_quality": 0.4853963944113553,
            "example_similarity": 0.5533380356940597,
            "db_id": "world_1",
            "pred": "SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 792,
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, population, and head of state for the country that has the largest area. */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3857,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
                    "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount."
                }
            ],
            "example_quality": 0.4856565360490034,
            "example_similarity": 0.553175036184651,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
            "correct": 1
        },
        {
            "index": 793,
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of classes offered for all class rooms that held at least 2 classes. */\nSELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3204,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
                    "question": "Find the number of classes offered for all class rooms that held at least 2 classes."
                }
            ],
            "example_quality": 0.48528525172886017,
            "example_similarity": 0.5530827599725644,
            "db_id": "world_1",
            "pred": "SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;",
            "correct": 1
        },
        {
            "index": 794,
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all cities with more than one airport and how many airports do they have? */\nSELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6857,
                    "db_id": "flight_4",
                    "query": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1",
                    "question": "What are the names of all cities with more than one airport and how many airports do they have?"
                }
            ],
            "example_quality": 0.4849392077289365,
            "example_similarity": 0.5530858743246841,
            "db_id": "world_1",
            "pred": "SELECT country.Name, COUNT(countrylanguage.Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) > 2",
            "correct": 1
        },
        {
            "index": 795,
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students whose age is older than the average age for each gender. */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the number of cities in each district whose population is greater than the average population of cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5735,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "Find the number of students whose age is older than the average age for each gender."
                }
            ],
            "example_quality": 0.4855870829393404,
            "example_similarity": 0.55319062622662,
            "db_id": "world_1",
            "pred": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;",
            "correct": 1
        },
        {
            "index": 796,
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are older than average for each gender? */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many cities in each district have a population that is above the average population across all cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5736,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "How many students are older than average for each gender?"
                }
            ],
            "example_quality": 0.4862333303225824,
            "example_similarity": 0.5528780096435298,
            "db_id": "world_1",
            "pred": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
            "correct": 1
        },
        {
            "index": 797,
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and average salaries of all departments whose average salary is greater than 42000. */\nSELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the government form name and total population for each government form whose average life expectancy is longer than 72. */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1487,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
                    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000."
                }
            ],
            "example_quality": 0.4862245770423085,
            "example_similarity": 0.552836757435696,
            "db_id": "world_1",
            "pred": "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
            "correct": 1
        },
        {
            "index": 798,
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and average salaries for departments with average salary higher than 42000? */\nSELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1488,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
                    "question": "What are the names and average salaries for departments with average salary higher than 42000?"
                }
            ],
            "example_quality": 0.48621584570008036,
            "example_similarity": 0.5526870037714073,
            "db_id": "world_1",
            "pred": "SELECT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm",
            "correct": 1
        },
        {
            "index": 799,
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of customers in all banks of Utah state. */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3013,
                    "db_id": "loan_1",
                    "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
                    "question": "Find the average number of customers in all banks of Utah state."
                }
            ],
            "example_quality": 0.4857250760672779,
            "example_similarity": 0.5524458435664369,
            "db_id": "world_1",
            "pred": "SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;",
            "correct": 1
        },
        {
            "index": 800,
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average account balance of customers with credit score below 50 for the different account types? */\nSELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3058,
                    "db_id": "loan_1",
                    "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
                    "question": "What is the average account balance of customers with credit score below 50 for the different account types?"
                }
            ],
            "example_quality": 0.48543012067913155,
            "example_similarity": 0.5522699921443318,
            "db_id": "world_1",
            "pred": "SELECT Continent, SUM(Population) as TotalPopulation, AVG(LifeExpectancy) as AverageLifeExpectancy FROM country WHERE Continent IN ( SELECT Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72 ) GROUP BY Continent;",
            "correct": 1
        },
        {
            "index": 801,
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names and areas of countries with the top 5 largest area? */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 545,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "What are the first and last names of the 5 customers who purchased something most recently?"
                }
            ],
            "example_quality": 0.48500667483558707,
            "example_similarity": 0.5523295801691204,
            "db_id": "world_1",
            "pred": "SELECT T1.Name, T1.SurfaceArea FROM country AS T1 ORDER BY T1.SurfaceArea DESC LIMIT 5;",
            "correct": 1
        },
        {
            "index": 802,
            "question": "Return the names and surface areas of the 5 largest countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the teams of the players with the top 5 largest ages. */\nSELECT Team FROM player ORDER BY Age DESC LIMIT 5\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names and surface areas of the 5 largest countries. */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4877,
                    "db_id": "school_player",
                    "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
                    "question": "List the teams of the players with the top 5 largest ages."
                }
            ],
            "example_quality": 0.4853770546450829,
            "example_similarity": 0.5523422614906053,
            "db_id": "world_1",
            "pred": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "correct": 1
        },
        {
            "index": 803,
            "question": "What are names of countries with the top 3 largest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the teams of the players with the top 5 largest ages. */\nSELECT Team FROM player ORDER BY Age DESC LIMIT 5\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are names of countries with the top 3 largest population? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4877,
                    "db_id": "school_player",
                    "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
                    "question": "List the teams of the players with the top 5 largest ages."
                }
            ],
            "example_quality": 0.48601793004403054,
            "example_similarity": 0.5523549112272297,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 804,
            "question": "Return the names of the 3 most populated countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which city has the highest temperature in February? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 most populated countries. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6287,
                    "db_id": "city_record",
                    "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
                    "question": "Which city has the highest temperature in February?"
                }
            ],
            "example_quality": 0.485600582145264,
            "example_similarity": 0.5519995775897166,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 805,
            "question": "What are the names of the nations with the 3 lowest populations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and balances of checking accounts belonging to the customer with the lowest savings balance? */\nSELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the nations with the 3 lowest populations? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1804,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
                    "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?"
                }
            ],
            "example_quality": 0.4850731857843728,
            "example_similarity": 0.5520592054436424,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 ORDER BY T1.Population LIMIT 3",
            "correct": 1
        },
        {
            "index": 806,
            "question": "Return the names of the 3 countries with the fewest people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the issue date of the volume that has spent the fewest weeks on top. */\nSELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 countries with the fewest people. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6197,
                    "db_id": "music_4",
                    "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
                    "question": "Return the issue date of the volume that has spent the fewest weeks on top."
                }
            ],
            "example_quality": 0.4857120527995287,
            "example_similarity": 0.5519619659958542,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "correct": 1
        },
        {
            "index": 807,
            "question": "how many countries are in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: how many countries are in Asia? */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                }
            ],
            "example_quality": 0.4853221402577436,
            "example_similarity": 0.5525171556290688,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM country WHERE Continent = 'Asia'",
            "correct": 1
        },
        {
            "index": 808,
            "question": "Count the number of countries in Asia.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries in Asia. */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                }
            ],
            "example_quality": 0.48493319284601244,
            "example_similarity": 0.5530709710305179,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM country WHERE Continent = 'Asia'",
            "correct": 1
        },
        {
            "index": 809,
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the countries that are in the continent of Europe and have a population of 80000? */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                }
            ],
            "example_quality": 0.48521669410860796,
            "example_similarity": 0.5529023624960755,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = \"Europe\" AND Population = 80000",
            "correct": 1
        },
        {
            "index": 810,
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names and locations of institutions that are founded after 1990 and have the type \"Private\". */\nSELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries that are in Europe and have a population equal to 80000. */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1917,
                    "db_id": "protein_institute",
                    "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
                    "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\"."
                }
            ],
            "example_quality": 0.4853410407825479,
            "example_similarity": 0.5528123595794138,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
            "correct": 1
        },
        {
            "index": 811,
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1660,
                    "db_id": "theme_gallery",
                    "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
                    "question": "What is the average and minimum age of all artists from United States."
                }
            ],
            "example_quality": 0.4850151611164522,
            "example_similarity": 0.5525874002832251,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
            "correct": 0
        },
        {
            "index": 812,
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and maximum number of total passengers for train stations in London or Glasgow? */\nSELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6605,
                    "db_id": "train_station",
                    "query": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'",
                    "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?"
                }
            ],
            "example_quality": 0.484685575085949,
            "example_similarity": 0.5524164713462362,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
            "correct": 0
        },
        {
            "index": 813,
            "question": "What are the cities whose population is between 160000 and 900000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all airports whose elevation is between -50 and 50? */\nSELECT name FROM airports WHERE elevation BETWEEN -50 AND 50\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the cities whose population is between 160000 and 900000? */\nSELECT ",
            "response": "name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6819,
                    "db_id": "flight_4",
                    "query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
                    "question": "What are the names of all airports whose elevation is between -50 and 50?"
                }
            ],
            "example_quality": 0.4848945048269816,
            "example_similarity": 0.5527210021317882,
            "db_id": "world_1",
            "pred": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "correct": 1
        },
        {
            "index": 814,
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the organizer and name for churches that opened between 1830 and 1840. */\nSELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of cities that have a population between 160000 and 900000 . */\nSELECT ",
            "response": "name from city where population between 160000 and 900000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1634,
                    "db_id": "wedding",
                    "query": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",
                    "question": "Show the organizer and name for churches that opened between 1830 and 1840."
                }
            ],
            "example_quality": 0.48463432637350556,
            "example_similarity": 0.5527244843841514,
            "db_id": "world_1",
            "pred": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "correct": 1
        },
        {
            "index": 815,
            "question": "Which language is spoken by the largest number of countries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is spoken by the largest number of countries? */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2578,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which room has the largest number of reservations?"
                }
            ],
            "example_quality": 0.48430962167856867,
            "example_similarity": 0.5528642907427803,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM countrylanguage AS T1 JOIN countrylanguage AS T2 ON T1.Language = T2.Language GROUP BY T1.Language ORDER BY count(DISTINCT T1.CountryCode) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 816,
            "question": "Give the language that is spoken in the most countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which flag is most widely used among all ships? */\nSELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the language that is spoken in the most countries. */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6251,
                    "db_id": "ship_1",
                    "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which flag is most widely used among all ships?"
                }
            ],
            "example_quality": 0.48494159518141355,
            "example_similarity": 0.5524751116090847,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 817,
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and revenues of the companies with the highest revenues in each headquarter city? */\nSELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language spoken by the largest percentage of people in each country? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5310,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
                    "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?"
                }
            ],
            "example_quality": 0.48495752858226066,
            "example_similarity": 0.5523310571379544,
            "db_id": "world_1",
            "pred": "SELECT CountryCode, Language FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = countrylanguage.CountryCode)",
            "correct": 0
        },
        {
            "index": 818,
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1081,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "How many distinct official languages are there among countries of players whose positions are defenders."
                }
            ],
            "example_quality": 0.4844063263151357,
            "example_similarity": 0.5519521979512628,
            "db_id": "world_1",
            "pred": "SELECT T1.CountryCode, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = T1.Code)",
            "correct": 0
        },
        {
            "index": 819,
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many appelations are in Napa Country? */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6540,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "How many appelations are in Napa Country?"
                }
            ],
            "example_quality": 0.4842711344765658,
            "example_similarity": 0.5514375246724562,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM countrylanguage WHERE Language = \"Spanish\" AND Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE Language = \"Spanish\" )",
            "correct": 0
        },
        {
            "index": 820,
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1081,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "How many distinct official languages are there among countries of players whose positions are defenders."
                }
            ],
            "example_quality": 0.48378750176097524,
            "example_similarity": 0.5510089423252947,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM countrylanguage WHERE Language = \"Spanish\" AND IsOfficial = \"T\" AND Percentage > 50;",
            "correct": 0
        },
        {
            "index": 821,
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget. */\nSELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1910,
                    "db_id": "school_finance",
                    "query": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted",
                    "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget."
                }
            ],
            "example_quality": 0.48326992728728196,
            "example_similarity": 0.5505326829558363,
            "db_id": "world_1",
            "pred": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 822,
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and active date of the customer that use email as the contact channel. */\nSELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6106,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
                    "question": "Find the name and active date of the customer that use email as the contact channel."
                }
            ],
            "example_quality": 0.4828193595239233,
            "example_similarity": 0.5502860812575403,
            "db_id": "world_1",
            "pred": "SELECT t1.CountryCode FROM countrylanguage AS t1 WHERE t1.Language = 'Spanish' AND t1.Percentage = (SELECT MAX(t2.Percentage) FROM countrylanguage AS t2 WHERE t2.CountryCode = t1.CountryCode)",
            "correct": 0
        },
        {
            "index": 823,
            "question": "How many conductors are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many conductors are there? */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.482772731437557,
            "example_similarity": 0.550832513722598,
            "db_id": "orchestra",
            "pred": "SELECT COUNT(DISTINCT Conductor_ID) FROM conductor",
            "correct": 1
        },
        {
            "index": 824,
            "question": "Count the number of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of conductors. */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                }
            ],
            "example_quality": 0.4834004344333852,
            "example_similarity": 0.5513776198952648,
            "db_id": "orchestra",
            "pred": "SELECT count(*) FROM conductor",
            "correct": 1
        },
        {
            "index": 825,
            "question": "List the names of conductors in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of conductors in ascending order of age. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 651,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC",
                    "question": "List the names of editors in ascending order of age."
                }
            ],
            "example_quality": 0.4840266157249811,
            "example_similarity": 0.551921404598422,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 826,
            "question": "What are the names of conductors, ordered by age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of actors, ordered alphabetically? */\nSELECT Name FROM actor ORDER BY Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, ordered by age? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 238,
                    "db_id": "musical",
                    "query": "SELECT Name FROM actor ORDER BY Name ASC",
                    "question": "What are the names of actors, ordered alphabetically?"
                }
            ],
            "example_quality": 0.48438224667177626,
            "example_similarity": 0.5521612091933392,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 827,
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of companies whose headquarters are not \"USA\"? */\nSELECT name FROM Companies WHERE Headquarters != 'USA'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors whose nationalities are not \"USA\"? */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4548,
                    "db_id": "company_office",
                    "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
                    "question": "What are the names of companies whose headquarters are not \"USA\"?"
                }
            ],
            "example_quality": 0.48500572642187084,
            "example_similarity": 0.5527027313103968,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "correct": 1
        },
        {
            "index": 828,
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the names of all regions other than Denmark. */\nSELECT region_name FROM region WHERE region_name != 'Denmark'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the names of conductors that do not have the nationality \"USA\". */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2698,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                    "question": "Return the names of all regions other than Denmark."
                }
            ],
            "example_quality": 0.48535931585587555,
            "example_similarity": 0.5525048885055399,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "correct": 1
        },
        {
            "index": 829,
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and headquarters of all manufacturers, ordered by revenue descending? */\nSELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies of orchestras in descending order of years in which they were founded? */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5278,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
                    "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?"
                }
            ],
            "example_quality": 0.48565112937990074,
            "example_similarity": 0.5522907692190435,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "correct": 1
        },
        {
            "index": 830,
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and headquarters of all manufacturers, ordered by revenue descending? */\nSELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the record companies of orchestras, sorted descending by the years in which they were founded. */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5278,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
                    "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?"
                }
            ],
            "example_quality": 0.4859422397388078,
            "example_similarity": 0.552010900822394,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "correct": 1
        },
        {
            "index": 831,
            "question": "What is the average attendance of shows?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average access count of documents? */\nSELECT avg(access_count) FROM documents\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the average attendance of shows? */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4508,
                    "db_id": "document_management",
                    "query": "SELECT avg(access_count) FROM documents",
                    "question": "What is the average access count of documents?"
                }
            ],
            "example_quality": 0.4865608411350306,
            "example_similarity": 0.5524162894963609,
            "db_id": "orchestra",
            "pred": "SELECT avg(Attendance) FROM show",
            "correct": 1
        },
        {
            "index": 832,
            "question": "Return the average attendance across all shows.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the average horizontal bar points across all gymnasts. */\nSELECT avg(Horizontal_Bar_Points) FROM gymnast\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the average attendance across all shows. */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1744,
                    "db_id": "gymnast",
                    "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
                    "question": "Return the average horizontal bar points across all gymnasts."
                }
            ],
            "example_quality": 0.48717795550866644,
            "example_similarity": 0.5527138660714854,
            "db_id": "orchestra",
            "pred": "SELECT avg(Attendance) FROM show",
            "correct": 1
        },
        {
            "index": 833,
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London? */\nSELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the maximum and minimum share of performances whose type is not \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5412,
                    "db_id": "shop_membership",
                    "query": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
                    "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?"
                }
            ],
            "example_quality": 0.4871693385152587,
            "example_similarity": 0.5525056985789959,
            "db_id": "orchestra",
            "pred": "SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'",
            "correct": 1
        },
        {
            "index": 834,
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the maximum and minimum shares for performances that do not have the type \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4555,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry."
                }
            ],
            "example_quality": 0.4877842433851445,
            "example_similarity": 0.5525426621698283,
            "db_id": "orchestra",
            "pred": "SELECT max(Share), min(Share) FROM performance WHERE Type != \"Live final\"",
            "correct": 1
        },
        {
            "index": 835,
            "question": "How many different nationalities do conductors have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many different nationalities do conductors have? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                }
            ],
            "example_quality": 0.4883976754289946,
            "example_similarity": 0.5530785392211219,
            "db_id": "orchestra",
            "pred": "SELECT count(DISTINCT Nationality) FROM conductor",
            "correct": 1
        },
        {
            "index": 836,
            "question": "Count the number of different nationalities of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different ranks of captain. */\nSELECT count(DISTINCT rank) FROM captain\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of different nationalities of conductors. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6222,
                    "db_id": "ship_1",
                    "query": "SELECT count(DISTINCT rank) FROM captain",
                    "question": "Count the number of different ranks of captain."
                }
            ],
            "example_quality": 0.48900963993207,
            "example_similarity": 0.5536131342699004,
            "db_id": "orchestra",
            "pred": "SELECT count(DISTINCT Nationality) FROM conductor",
            "correct": 1
        },
        {
            "index": 837,
            "question": "List names of conductors in descending order of years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List official names of cities in descending order of population. */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List names of conductors in descending order of years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 31,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "List official names of cities in descending order of population."
                }
            ],
            "example_quality": 0.48962014215437333,
            "example_similarity": 0.5540468899836363,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "correct": 1
        },
        {
            "index": 838,
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the heights of perpetrators in descending order of the number of people they injured? */\nSELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, sorted descending by the number of years they have worked? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2315,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
                    "question": "What are the heights of perpetrators in descending order of the number of people they injured?"
                }
            ],
            "example_quality": 0.4891684607330806,
            "example_similarity": 0.5540908782902297,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "correct": 1
        },
        {
            "index": 839,
            "question": "List the name of the conductor with the most years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the name of the conductor with the most years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.48977731834841665,
            "example_similarity": 0.5542818137324176,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 840,
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the time of elimination for the wrestler with the most days held? */\nSELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has worked the greatest number of years? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1862,
                    "db_id": "wrestler",
                    "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
                    "question": "What is the time of elimination for the wrestler with the most days held?"
                }
            ],
            "example_quality": 0.4893733813259016,
            "example_similarity": 0.5541888478543915,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(DISTINCT T3.Year_of_Work) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 841,
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of journalists and the dates of the events they reported. */\nSELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors and the orchestras they have conducted. */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2813,
                    "db_id": "news_report",
                    "query": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
                    "question": "Show the names of journalists and the dates of the events they reported."
                }
            ],
            "example_quality": 0.48923611407573003,
            "example_similarity": 0.554273046608429,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "correct": 1
        },
        {
            "index": 842,
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the themes and locations of parties? */\nSELECT Party_Theme ,  LOCATION FROM party\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors as well as the corresonding orchestras that they have conducted? */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2665,
                    "db_id": "party_host",
                    "query": "SELECT Party_Theme ,  LOCATION FROM party",
                    "question": "What are the themes and locations of parties?"
                }
            ],
            "example_quality": 0.48877542193708107,
            "example_similarity": 0.5540523197747272,
            "db_id": "orchestra",
            "pred": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;",
            "correct": 1
        },
        {
            "index": 843,
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which authors have submitted to more than one workshop? */\nSELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors that have conducted more than one orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5840,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                    "question": "Which authors have submitted to more than one workshop?"
                }
            ],
            "example_quality": 0.4889765017619312,
            "example_similarity": 0.5538137537684353,
            "db_id": "orchestra",
            "pred": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;",
            "correct": 1
        },
        {
            "index": 844,
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted at more than one orchestra? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4763,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                    "question": "What are the names of staff who have been assigned multiple jobs?"
                }
            ],
            "example_quality": 0.4895819798404123,
            "example_similarity": 0.5537188135513237,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
            "correct": 1
        },
        {
            "index": 845,
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the activity that has the largest number of student participants. */\nSELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the name of the conductor that has conducted the most number of orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6795,
                    "db_id": "activity_1",
                    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the activity that has the largest number of student participants."
                }
            ],
            "example_quality": 0.4900874055052954,
            "example_similarity": 0.5537486698292762,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 846,
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the customer that has been involved in the most policies. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has conducted the most orchestras? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1540,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the customer that has been involved in the most policies."
                }
            ],
            "example_quality": 0.4905010137730197,
            "example_similarity": 0.5535444188967975,
            "db_id": "orchestra",
            "pred": "SELECT t1.Name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.Conductor_ID = t2.Conductor_ID GROUP BY t1.Name ORDER BY COUNT(t2.Orchestra_ID) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 847,
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the minister who took office after 1961 or before 1959. */\nSELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the name of the conductor that has conducted orchestras founded after 2008. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2048,
                    "db_id": "party_people",
                    "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959",
                    "question": "Show the minister who took office after 1961 or before 1959."
                }
            ],
            "example_quality": 0.49007630092413684,
            "example_similarity": 0.5533879941183821,
            "db_id": "orchestra",
            "pred": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;",
            "correct": 1
        },
        {
            "index": 848,
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points? */\nSELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted orchestras founded after the year 2008? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2187,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
                    "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?"
                }
            ],
            "example_quality": 0.4899245535855743,
            "example_similarity": 0.5532408047722183,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)",
            "correct": 1
        },
        {
            "index": 849,
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show different software platforms and the corresponding number of devices using each. */\nSELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the different record companies and the corresponding number of orchestras. */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5077,
                    "db_id": "device",
                    "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
                    "question": "Please show different software platforms and the corresponding number of devices using each."
                }
            ],
            "example_quality": 0.49052534916438983,
            "example_similarity": 0.5533989428113558,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company",
            "correct": 1
        },
        {
            "index": 850,
            "question": "How many orchestras does each record company manage?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms does each block floor have? */\nSELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many orchestras does each record company manage? */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3934,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
                    "question": "How many rooms does each block floor have?"
                }
            ],
            "example_quality": 0.49004535030159585,
            "example_similarity": 0.5536890617021659,
            "db_id": "orchestra",
            "pred": "SELECT count(*) , T1.Record_Company FROM orchestra AS T1 GROUP BY T1.Record_Company",
            "correct": 1
        },
        {
            "index": 851,
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the industries of companies in descending order of the number of companies. */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the record formats of orchestras in ascending order of count. */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4572,
                    "db_id": "company_office",
                    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
                    "question": "Please show the industries of companies in descending order of the number of companies."
                }
            ],
            "example_quality": 0.4904487439361807,
            "example_similarity": 0.5536912549969408,
            "db_id": "orchestra",
            "pred": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "correct": 1
        },
        {
            "index": 852,
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different software platforms for devices, ordered by frequency descending? */\nSELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the major record formats of orchestras, sorted by their frequency? */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5080,
                    "db_id": "device",
                    "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
                    "question": "What are the different software platforms for devices, ordered by frequency descending?"
                }
            ],
            "example_quality": 0.49085119063735105,
            "example_similarity": 0.5536934431431364,
            "db_id": "orchestra",
            "pred": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC",
            "correct": 0
        },
        {
            "index": 853,
            "question": "List the record company shared by the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the team that has the most number of technicians. */\nSELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the record company shared by the most number of orchestras. */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2248,
                    "db_id": "machine_repair",
                    "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the team that has the most number of technicians."
                }
            ],
            "example_quality": 0.4914480825592299,
            "example_similarity": 0.5536304965509405,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 854,
            "question": "What is the record company used by the greatest number of orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the characteristic name used by most number of the products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the record company used by the greatest number of orchestras? */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5595,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the characteristic name used by most number of the products?"
                }
            ],
            "example_quality": 0.49102007066621667,
            "example_similarity": 0.5539858974415632,
            "db_id": "orchestra",
            "pred": "SELECT t2.Record_Company FROM orchestra AS t1 JOIN conductor AS t2 ON t1.Conductor_ID = t2.Conductor_ID GROUP BY t2.Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 855,
            "question": "List the names of orchestras that have no performance.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of orchestras that have no performance. */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.49161536882918017,
            "example_similarity": 0.5541476773185997,
            "db_id": "orchestra",
            "pred": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "correct": 1
        },
        {
            "index": 856,
            "question": "What are the orchestras that do not have any performances?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all clubs that do not have any players? */\nSELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the orchestras that do not have any performances? */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3373,
                    "db_id": "sports_competition",
                    "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                    "question": "What are the names of all clubs that do not have any players?"
                }
            ],
            "example_quality": 0.4922092761085853,
            "example_similarity": 0.5544181990573798,
            "db_id": "orchestra",
            "pred": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "correct": 1
        },
        {
            "index": 857,
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids. */\nSELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the record companies shared by orchestras founded before 2003 and after 2003. */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6803,
                    "db_id": "activity_1",
                    "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
                    "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids."
                }
            ],
            "example_quality": 0.4917291039712194,
            "example_similarity": 0.5542278678424073,
            "db_id": "orchestra",
            "pred": "SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < 2003 INTERSECT SELECT T2.Record_Company FROM orchestra AS T2 WHERE T2.Year_of_Founded > 2003",
            "correct": 1
        },
        {
            "index": 858,
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the denominations used by both schools founded before 1890 and schools founded  after 1900? */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4896,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?"
                }
            ],
            "example_quality": 0.49232149429293126,
            "example_similarity": 0.5543765745020528,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "correct": 1
        },
        {
            "index": 859,
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of companies whose industry is \"Banking\" or \"Conglomerate\", */\nSELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Find the number of orchestras whose record format is \"CD\" or \"DVD\". */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4580,
                    "db_id": "company_office",
                    "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
                    "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\","
                }
            ],
            "example_quality": 0.49291250535894643,
            "example_similarity": 0.5547013204378285,
            "db_id": "orchestra",
            "pred": "SELECT count(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "correct": 1
        },
        {
            "index": 860,
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the products that have the color description \"white\" or have the characteristic name \"hot\". */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of orchestras that have CD or DVD as their record format. */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5577,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
                    "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\"."
                }
            ],
            "example_quality": 0.4924275987912533,
            "example_similarity": 0.5545214351815054,
            "db_id": "orchestra",
            "pred": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "correct": 1
        },
        {
            "index": 861,
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the years in which orchestras that have given more than one performance are founded. */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 979,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "What are the different schools and their nicknames, ordered by their founding years?"
                }
            ],
            "example_quality": 0.4919395970092846,
            "example_similarity": 0.5540494569154968,
            "db_id": "orchestra",
            "pred": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING COUNT(Orchestra_ID) > 1",
            "correct": 0
        },
        {
            "index": 862,
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the employee ids for those who had two or more jobs. */\nSELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are years of founding for orchestras that have had more than a single performance? */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3487,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
                    "question": "What are the employee ids for those who had two or more jobs."
                }
            ],
            "example_quality": 0.4916471284478523,
            "example_similarity": 0.5538285600555443,
            "db_id": "orchestra",
            "pred": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
            "correct": 1
        },
        {
            "index": 863,
            "question": "How many high schoolers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customer cards are there? */\nSELECT count(*) FROM Customers_cards\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there? */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 699,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards",
                    "question": "How many customer cards are there?"
                }
            ],
            "example_quality": 0.49223618160144694,
            "example_similarity": 0.5543455605653292,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler",
            "correct": 1
        },
        {
            "index": 864,
            "question": "Count the number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of party events. */\nSELECT count(*) FROM party_events\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers. */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2071,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM party_events",
                    "question": "Count the number of party events."
                }
            ],
            "example_quality": 0.4928238712060749,
            "example_similarity": 0.5548613643146749,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler",
            "correct": 1
        },
        {
            "index": 865,
            "question": "Show the names and grades of each high schooler.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the years and official names of the cities of each competition. */\nSELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names and grades of each high schooler. */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 36,
                    "db_id": "farm",
                    "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
                    "question": "Give the years and official names of the cities of each competition."
                }
            ],
            "example_quality": 0.49233634200365295,
            "example_similarity": 0.5549630935384235,
            "db_id": "network_1",
            "pred": "SELECT name, grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 866,
            "question": "What are the names and grades for each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the dates of ceremony and results for each music festival? */\nSELECT Date_of_ceremony ,  RESULT FROM music_festival\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names and grades for each high schooler? */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6155,
                    "db_id": "music_4",
                    "query": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
                    "question": "What are the dates of ceremony and results for each music festival?"
                }
            ],
            "example_quality": 0.49292255869879886,
            "example_similarity": 0.5552993415206583,
            "db_id": "network_1",
            "pred": "SELECT name, grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 867,
            "question": "Show all the grades of the high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the rank, first name, and last name for all the faculty. */\nSELECT rank ,  Fname ,  Lname FROM Faculty\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show all the grades of the high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6722,
                    "db_id": "activity_1",
                    "query": "SELECT rank ,  Fname ,  Lname FROM Faculty",
                    "question": "Show the rank, first name, and last name for all the faculty."
                }
            ],
            "example_quality": 0.49280256600005623,
            "example_similarity": 0.5552355591198271,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 868,
            "question": "What is the grade of each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the order date of each booking? */\nSELECT Order_Date FROM BOOKINGS\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the grade of each high schooler? */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5094,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Order_Date FROM BOOKINGS",
                    "question": "What is the order date of each booking?"
                }
            ],
            "example_quality": 0.49338689484106996,
            "example_similarity": 0.5557479605494126,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 869,
            "question": "What grade is Kyle in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is Astrid Gruber's email and phone number? */\nSELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What grade is Kyle in? */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 576,
                    "db_id": "store_1",
                    "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
                    "question": "What is Astrid Gruber's email and phone number?"
                }
            ],
            "example_quality": 0.49327121043142214,
            "example_similarity": 0.5556315019694311,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler WHERE name = \"Kyle\";",
            "correct": 1
        },
        {
            "index": 870,
            "question": "Return the grade for the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the date of birth for all the guests with gender code \"Male\". */\nSELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade for the high schooler named Kyle. */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1219,
                    "db_id": "apartment_rentals",
                    "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
                    "question": "Return the date of birth for all the guests with gender code \"Male\"."
                }
            ],
            "example_quality": 0.49385365731598374,
            "example_similarity": 0.5557112358752133,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
            "correct": 1
        },
        {
            "index": 871,
            "question": "Show the names of all high schoolers in grade 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show origins of all flights with destination Honolulu. */\nSELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all high schoolers in grade 10. */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 388,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
                    "question": "Show origins of all flights with destination Honolulu."
                }
            ],
            "example_quality": 0.49417963219596284,
            "example_similarity": 0.5558386244295089,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade = 10",
            "correct": 1
        },
        {
            "index": 872,
            "question": "What are the names of all high schoolers in grade 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the types of film market estimations in year 1995? */\nSELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of all high schoolers in grade 10? */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4121,
                    "db_id": "film_rank",
                    "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995",
                    "question": "What are the types of film market estimations in year 1995?"
                }
            ],
            "example_quality": 0.4945048594271346,
            "example_similarity": 0.5561715547296515,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade = 10",
            "correct": 1
        },
        {
            "index": 873,
            "question": "Show the ID of the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the players from college UCLA. */\nSELECT Player FROM match_season WHERE College  =  \"UCLA\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ID of the high schooler named Kyle. */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1061,
                    "db_id": "match_season",
                    "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
                    "question": "Show the players from college UCLA."
                }
            ],
            "example_quality": 0.4950838916614678,
            "example_similarity": 0.5561592786594625,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
            "correct": 1
        },
        {
            "index": 874,
            "question": "What is Kyle's id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is Nancy Edwards's address? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is Kyle's id? */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 593,
                    "db_id": "store_1",
                    "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is Nancy Edwards's address?"
                }
            ],
            "example_quality": 0.4950768035576091,
            "example_similarity": 0.5565036534632192,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE name = \"Kyle\";",
            "correct": 1
        },
        {
            "index": 875,
            "question": "How many high schoolers are there in grade 9 or 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students enrolled in class ACCT-211? */\nSELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there in grade 9 or 10? */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3242,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
                    "question": "How many students enrolled in class ACCT-211?"
                }
            ],
            "example_quality": 0.49467746112372957,
            "example_similarity": 0.5566588580790414,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "correct": 1
        },
        {
            "index": 876,
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers in grades 9 or 10. */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                }
            ],
            "example_quality": 0.49427903043056665,
            "example_similarity": 0.5567844377692099,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)",
            "correct": 1
        },
        {
            "index": 877,
            "question": "Show the number of high schoolers for each grade.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of customers for each gender. */\nSELECT gender ,  count(*) FROM Customers GROUP BY gender\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the number of high schoolers for each grade. */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1576,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
                    "question": "Show the number of customers for each gender."
                }
            ],
            "example_quality": 0.49485567919860474,
            "example_similarity": 0.5571757896075575,
            "db_id": "network_1",
            "pred": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
            "correct": 1
        },
        {
            "index": 878,
            "question": "How many high schoolers are in each grade?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are in each grade? */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1412,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "How many students are in each department?"
                }
            ],
            "example_quality": 0.49527331334705565,
            "example_similarity": 0.557553594959814,
            "db_id": "network_1",
            "pred": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
            "correct": 1
        },
        {
            "index": 879,
            "question": "Which grade has the most high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which month has the most happy hours? */\nSELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grade has the most high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 806,
                    "db_id": "coffee_shop",
                    "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which month has the most happy hours?"
                }
            ],
            "example_quality": 0.49554414385898543,
            "example_similarity": 0.5580569469564468,
            "db_id": "network_1",
            "pred": "SELECT grade, COUNT(*) AS total_highschoolers FROM Highschooler GROUP BY grade ORDER BY total_highschoolers DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 880,
            "question": "Return the grade that has the greatest number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade that has the greatest number of high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6342,
                    "db_id": "e_government",
                    "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the party email that has used party services the greatest number of times."
                }
            ],
            "example_quality": 0.4952310255136911,
            "example_similarity": 0.5583318822439963,
            "db_id": "network_1",
            "pred": "SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 881,
            "question": "Show me all grades that have at least 4 students.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all role codes with at least 3 employees. */\nSELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show me all grades that have at least 4 students. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4209,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3",
                    "question": "Show all role codes with at least 3 employees."
                }
            ],
            "example_quality": 0.49580397554148486,
            "example_similarity": 0.5583966413054499,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
            "correct": 1
        },
        {
            "index": 882,
            "question": "Which grades have 4 or more high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which teams had more than 3 eliminations? */\nSELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grades have 4 or more high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1868,
                    "db_id": "wrestler",
                    "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
                    "question": "Which teams had more than 3 eliminations?"
                }
            ],
            "example_quality": 0.4961866618881876,
            "example_similarity": 0.5583819677273877,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
            "correct": 1
        },
        {
            "index": 883,
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the different statuses and the numbers of roller coasters for each status. */\nSELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the student IDs and numbers of friends corresponding to each. */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6211,
                    "db_id": "roller_coaster",
                    "query": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status",
                    "question": "Show the different statuses and the numbers of roller coasters for each status."
                }
            ],
            "example_quality": 0.49675723192002436,
            "example_similarity": 0.5584574128375492,
            "db_id": "network_1",
            "pred": "SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 884,
            "question": "How many friends does each student have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students does each advisor have? */\nSELECT advisor ,  count(*) FROM Student GROUP BY advisor\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does each student have? */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 501,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
                    "question": "How many students does each advisor have?"
                }
            ],
            "example_quality": 0.4973265110694361,
            "example_similarity": 0.5589568954022126,
            "db_id": "network_1",
            "pred": "SELECT student_id, count(friend_id) FROM Friend GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 885,
            "question": "Show the names of high school students and their corresponding number of friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade. */\nSELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high school students and their corresponding number of friends. */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4082,
                    "db_id": "student_1",
                    "query": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
                    "question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade."
                }
            ],
            "example_quality": 0.49694032919879894,
            "example_similarity": 0.5586677128119618,
            "db_id": "network_1",
            "pred": "SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name",
            "correct": 0
        },
        {
            "index": 886,
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the faculty id and the number of students each faculty has? */\nSELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of the high schoolers and how many friends does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6757,
                    "db_id": "activity_1",
                    "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
                    "question": "What are the faculty id and the number of students each faculty has?"
                }
            ],
            "example_quality": 0.49711553640404127,
            "example_similarity": 0.5587896077937391,
            "db_id": "network_1",
            "pred": "SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name",
            "correct": 0
        },
        {
            "index": 887,
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the salary and name of the employee who has the most number of aircraft certificates? */\nSELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 436,
                    "db_id": "flight_1",
                    "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
                    "question": "what is the salary and name of the employee who has the most number of aircraft certificates?"
                }
            ],
            "example_quality": 0.4973608567854513,
            "example_similarity": 0.5590496800332169,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 888,
            "question": "Return the name of the high school student with the most friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the teacher who teaches the largest number of students. */\nSELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the name of the high school student with the most friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4093,
                    "db_id": "student_1",
                    "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the teacher who teaches the largest number of students."
                }
            ],
            "example_quality": 0.49747700967841346,
            "example_similarity": 0.5587418699044794,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID ORDER BY COUNT(F.friend_id) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 889,
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the swimmer who has at least 2 records. */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have at least 3 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5625,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
                    "question": "Find the name of the swimmer who has at least 2 records."
                }
            ],
            "example_quality": 0.4978466496636141,
            "example_similarity": 0.5588164009844518,
            "db_id": "network_1",
            "pred": "SELECT t1.name FROM Highschooler AS t1 JOIN Friend AS t2 ON t1.ID = t2.student_id GROUP BY t2.student_id HAVING COUNT(*) >= 3",
            "correct": 1
        },
        {
            "index": 890,
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have 3 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 260,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "What are the names of musicals who have at 3 or more actors?"
                }
            ],
            "example_quality": 0.4983087218652178,
            "example_similarity": 0.5591623001593756,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 3",
            "correct": 1
        },
        {
            "index": 891,
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of students who have taken the prerequisite course of the course with title International Finance. */\nSELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all of the high schooler Kyle's friends. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1457,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
                    "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance."
                }
            ],
            "example_quality": 0.49812306010895496,
            "example_similarity": 0.5590448850688998,
            "db_id": "network_1",
            "pred": "SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS F ON T1.ID = F.student_id JOIN Highschooler AS T2 ON F.friend_id = T2.ID WHERE T1.name = 'Kyle'",
            "correct": 1
        },
        {
            "index": 892,
            "question": "Return the names of friends of the high school student Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the names of friends of the high school student Kyle. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1424,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "Give the title of the prerequisite to the course International Finance."
                }
            ],
            "example_quality": 0.4978832226359494,
            "example_similarity": 0.5590907988748764,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.friend_id WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
            "correct": 1
        },
        {
            "index": 893,
            "question": "How many friends does the high school student Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does the high school student Kyle have? */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                }
            ],
            "example_quality": 0.49822153929593155,
            "example_similarity": 0.5590246277675137,
            "db_id": "network_1",
            "pred": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
            "correct": 1
        },
        {
            "index": 894,
            "question": "Count the number of friends Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of friends Kyle has. */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                }
            ],
            "example_quality": 0.4978997325582286,
            "example_similarity": 0.5591823183404807,
            "db_id": "network_1",
            "pred": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
            "correct": 1
        },
        {
            "index": 895,
            "question": "Show ids of all students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the authors who do not have submission to any workshop. */\nSELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show ids of all students who do not have any friends. */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5843,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
                    "question": "List the authors who do not have submission to any workshop."
                }
            ],
            "example_quality": 0.4974923957993181,
            "example_similarity": 0.5592279246887036,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 896,
            "question": "What are the ids of high school students who do not have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all people who do not have friends? */\nSELECT name FROM person EXCEPT SELECT name FROM PersonFriend\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of high school students who do not have friends? */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4478,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                    "question": "What are the names of all people who do not have friends?"
                }
            ],
            "example_quality": 0.49783001589329207,
            "example_similarity": 0.5594966435227564,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 897,
            "question": "Show names of all high school students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the authors who do not have submission to any workshop. */\nSELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show names of all high school students who do not have any friends. */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5843,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
                    "question": "List the authors who do not have submission to any workshop."
                }
            ],
            "example_quality": 0.49735648959137857,
            "example_similarity": 0.559463104081489,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 898,
            "question": "What are the names of students who have no friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have no friends? */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 270,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
                    "question": "What are the names of musicals who have no actors?"
                }
            ],
            "example_quality": 0.4968840179137456,
            "example_similarity": 0.5599536796894161,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 899,
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of pilots and models of aircrafts they have flied with. */\nSELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ids of high schoolers who have friends and are also liked by someone else. */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2093,
                    "db_id": "pilot_record",
                    "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
                    "question": "Show the names of pilots and models of aircrafts they have flied with."
                }
            ],
            "example_quality": 0.4963671101163398,
            "example_similarity": 0.559785867931242,
            "db_id": "network_1",
            "pred": "SELECT DISTINCT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)",
            "correct": 0
        },
        {
            "index": 900,
            "question": "What are the ids of students who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of students who have more than one advisor? */\nSELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of students who both have friends and are liked? */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1392,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
                    "question": "What are the names of students who have more than one advisor?"
                }
            ],
            "example_quality": 0.4958632471527555,
            "example_similarity": 0.5598174784047825,
            "db_id": "network_1",
            "pred": "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes",
            "correct": 0
        },
        {
            "index": 901,
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of pilots and models of aircrafts they have flied with. */\nSELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show name of all students who have some friends and also are liked by someone else. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2093,
                    "db_id": "pilot_record",
                    "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
                    "question": "Show the names of pilots and models of aircrafts they have flied with."
                }
            ],
            "example_quality": 0.4957346530937624,
            "example_similarity": 0.5595821938415768,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id JOIN Likes AS L ON H.ID = L.student_id;",
            "correct": 0
        },
        {
            "index": 902,
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of scientists who are assigned to any project? */\nSELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who both have friends and are liked? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6505,
                    "db_id": "scientist_1",
                    "query": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
                    "question": "What are the names of scientists who are assigned to any project?"
                }
            ],
            "example_quality": 0.4954690361259735,
            "example_similarity": 0.5597933000568301,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT F.student_id FROM Friend AS F) AND T1.ID IN (SELECT L.student_id FROM Likes AS L)",
            "correct": 0
        },
        {
            "index": 903,
            "question": "Count the number of likes for each student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of voting records for each election cycle. */\nSELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of likes for each student id. */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5508,
                    "db_id": "voter_2",
                    "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
                    "question": "Count the number of voting records for each election cycle."
                }
            ],
            "example_quality": 0.4960277636607177,
            "example_similarity": 0.5601801191144536,
            "db_id": "network_1",
            "pred": "SELECT student_id, count(*) FROM Likes GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 904,
            "question": "How many likes correspond to each student id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many transactions correspond to each invoice number? */\nSELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes correspond to each student id? */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1601,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
                    "question": "How many transactions correspond to each invoice number?"
                }
            ],
            "example_quality": 0.49658525507259743,
            "example_similarity": 0.5606666455313625,
            "db_id": "network_1",
            "pred": "SELECT student_id, count(*) FROM Likes GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 905,
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all party names and the number of members in each party. */\nSELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have likes, and numbers of likes for each. */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2058,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "Show all party names and the number of members in each party."
                }
            ],
            "example_quality": 0.4970310172216885,
            "example_similarity": 0.5606868452251632,
            "db_id": "network_1",
            "pred": "SELECT T1.name, count(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id, T1.name",
            "correct": 1
        },
        {
            "index": 906,
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms does each block floor have? */\nSELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have likes, and how many likes does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3934,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
                    "question": "How many rooms does each block floor have?"
                }
            ],
            "example_quality": 0.4969959533592967,
            "example_similarity": 0.5605908158270408,
            "db_id": "network_1",
            "pred": "SELECT T1.name, COUNT(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name",
            "correct": 0
        },
        {
            "index": 907,
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the salary and name of the employee who has the most number of aircraft certificates? */\nSELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 436,
                    "db_id": "flight_1",
                    "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
                    "question": "what is the salary and name of the employee who has the most number of aircraft certificates?"
                }
            ],
            "example_quality": 0.49723599609508,
            "example_similarity": 0.5608431673908595,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 908,
            "question": "Give the name of the student with the most likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of the building that has the most company offices. */\nSELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Give the name of the student with the most likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4566,
                    "db_id": "company_office",
                    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the name of the building that has the most company offices."
                }
            ],
            "example_quality": 0.4973057510296697,
            "example_similarity": 0.5608862916558475,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 909,
            "question": "Show the names of students who have at least 2 likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the swimmer who has at least 2 records. */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have at least 2 likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5625,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
                    "question": "Find the name of the swimmer who has at least 2 records."
                }
            ],
            "example_quality": 0.4976674465252605,
            "example_similarity": 0.5610026617053644,
            "db_id": "network_1",
            "pred": "SELECT t1.name FROM Highschooler AS t1 JOIN Likes AS t2 ON t1.ID = t2.student_id GROUP BY t2.student_id HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 910,
            "question": "What are the names of students who have 2 or more likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have 2 or more likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 260,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "What are the names of musicals who have at 3 or more actors?"
                }
            ],
            "example_quality": 0.4981195602203876,
            "example_similarity": 0.5614065834271952,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 911,
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of users who are followed by Mary or Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have a grade higher than 5 and have at least 2 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 290,
                    "db_id": "twitter_1",
                    "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"",
                    "question": "Find the id of users who are followed by Mary or Susan."
                }
            ],
            "example_quality": 0.4979738577562429,
            "example_similarity": 0.5612198630807614,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id WHERE H.grade > 5 GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2;",
            "correct": 1
        },
        {
            "index": 912,
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of mountains that have a height of over 5000 or a prominence of over 1000? */\nSELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1150,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
                    "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?"
                }
            ],
            "example_quality": 0.4975341090930487,
            "example_similarity": 0.5613062448098396,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 )",
            "correct": 1
        },
        {
            "index": 913,
            "question": "How many likes does Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are over 18 and do not have allergy to food type or animal type? */\nSELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes does Kyle have? */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 535,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
                    "question": "How many students are over 18 and do not have allergy to food type or animal type?"
                }
            ],
            "example_quality": 0.49726333890155777,
            "example_similarity": 0.5609652741145386,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
            "correct": 1
        },
        {
            "index": 914,
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the number of likes that the high schooler named Kyle has. */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                }
            ],
            "example_quality": 0.49694962224607414,
            "example_similarity": 0.5608621027715978,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
            "correct": 1
        },
        {
            "index": 915,
            "question": "Find the average grade of all students who have some friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the average grade of all students who have some friends. */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3083,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who have some loan."
                }
            ],
            "example_quality": 0.4965882612904239,
            "example_similarity": 0.5611078428622456,
            "db_id": "network_1",
            "pred": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
            "correct": 0
        },
        {
            "index": 916,
            "question": "What is the average grade of students who have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the average grade of students who have friends? */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3084,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have taken a loan?"
                }
            ],
            "example_quality": 0.4962276893324934,
            "example_similarity": 0.5612230817528617,
            "db_id": "network_1",
            "pred": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 917,
            "question": "Find the minimum grade of students who have no friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of scientists who are not assigned to any project. */\nSELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the minimum grade of students who have no friends. */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6510,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "Find the number of scientists who are not assigned to any project."
                }
            ],
            "example_quality": 0.4958411269668091,
            "example_similarity": 0.561156317214418,
            "db_id": "network_1",
            "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 918,
            "question": "What is the lowest grade of students who do not have any friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many enzymes do not have any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the lowest grade of students who do not have any friends? */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 962,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
                    "question": "How many enzymes do not have any interactions?"
                }
            ],
            "example_quality": 0.4954439688764313,
            "example_similarity": 0.5610216153438141,
            "db_id": "network_1",
            "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);",
            "correct": 1
        },
        {
            "index": 919,
            "question": "Which states have both owners and professionals living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different cities where people live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which states have both owners and professionals living there? */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 93,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "What are the different cities where people live?"
                }
            ],
            "example_quality": 0.49498102658168,
            "example_similarity": 0.5606151718015466,
            "db_id": "dog_kennels",
            "pred": "SELECT DISTINCT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state",
            "correct": 0
        },
        {
            "index": 920,
            "question": "Find the states where both owners and professionals live.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of different cities which banks are located at. */\nSELECT count(DISTINCT city) FROM bank\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the states where both owners and professionals live. */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3027,
                    "db_id": "loan_1",
                    "query": "SELECT count(DISTINCT city) FROM bank",
                    "question": "Find the number of different cities which banks are located at."
                }
            ],
            "example_quality": 0.4945734385093086,
            "example_similarity": 0.5604134161800232,
            "db_id": "dog_kennels",
            "pred": "SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state = p.state",
            "correct": 0
        },
        {
            "index": 921,
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of the dogs who have gone through any treatments? */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3084,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have taken a loan?"
                }
            ],
            "example_quality": 0.49468790817433644,
            "example_similarity": 0.5603763937840338,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 922,
            "question": "Find the average age of the dogs who went through treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who had some tweets. */\nSELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the average age of the dogs who went through treatments. */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 300,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who had some tweets."
                }
            ],
            "example_quality": 0.494802129532065,
            "example_similarity": 0.5604464844632268,
            "db_id": "dog_kennels",
            "pred": "SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 923,
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of customers who are not living in the state of California. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2849,
                    "db_id": "customer_deliveries",
                    "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names of customers who are not living in the state of California."
                }
            ],
            "example_quality": 0.4945130214102281,
            "example_similarity": 0.56003886153999,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
            "correct": 1
        },
        {
            "index": 924,
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the ids of the nurses who are on call in block floor 1 and block code 1. */\nSELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3966,
                    "db_id": "hospital_1",
                    "query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
                    "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1."
                }
            ],
            "example_quality": 0.4940748283583874,
            "example_similarity": 0.5599564287544944,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
            "correct": 1
        },
        {
            "index": 925,
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which students have professors as their advisors? Find their student ids. */\nSELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6753,
                    "db_id": "activity_1",
                    "query": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
                    "question": "Which students have professors as their advisors? Find their student ids."
                }
            ],
            "example_quality": 0.49356657256982506,
            "example_similarity": 0.5598658709679386,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY D.name HAVING SUM(T.cost_of_treatment) <= 1000",
            "correct": 0
        },
        {
            "index": 926,
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top? */\nSELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6193,
                    "db_id": "music_4",
                    "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
                    "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?"
                }
            ],
            "example_quality": 0.4930534915424932,
            "example_similarity": 0.5596122361180813,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name FROM Dogs AS D JOIN Owners AS O ON D.owner_id = O.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE T.cost_of_treatment <= 1000;",
            "correct": 0
        },
        {
            "index": 927,
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the last names that are used by customers and staff? */\nSELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which first names are used for professionals or owners but are not used as dog names? */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6712,
                    "db_id": "driving_school",
                    "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                    "question": "What are the last names that are used by customers and staff?"
                }
            ],
            "example_quality": 0.49293685081400285,
            "example_similarity": 0.5594008274099025,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs",
            "correct": 1
        },
        {
            "index": 928,
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the carriers of devices that have no devices in stock. */\nSELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names that are used for professionals or owners but are not used as dog names. */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5087,
                    "db_id": "device",
                    "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
                    "question": "List the carriers of devices that have no devices in stock."
                }
            ],
            "example_quality": 0.4925096793574473,
            "example_similarity": 0.5591123207711706,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs)",
            "correct": 1
        },
        {
            "index": 929,
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the project details of the projects which did not hire any staff for a researcher role. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professional did not operate any treatment on dogs? List the professional's id, role and email. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4339,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
                    "question": "List the project details of the projects which did not hire any staff for a researcher role."
                }
            ],
            "example_quality": 0.49208312491411715,
            "example_similarity": 0.5590702192418152,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 930,
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of instructors who didn't teach any courses? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the id, role and email of the professionals who did not perform any treatment on dogs. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1441,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
                    "question": "Find the name of instructors who didn't teach any courses?"
                }
            ],
            "example_quality": 0.4916208860238201,
            "example_similarity": 0.5588898258316908,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 931,
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students who live in the dorm with the most amenities? */\nSELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner owns the most dogs? List the owner id, first name and last name. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5758,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the first names of all students who live in the dorm with the most amenities?"
                }
            ],
            "example_quality": 0.4913180299010757,
            "example_similarity": 0.5586475524777721,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 932,
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the policy types of the customer that has the most policies listed? */\nSELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the owner id, first name and last name of the owner who has the most dogs. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 914,
                    "db_id": "insurance_fnol",
                    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are all the policy types of the customer that has the most policies listed?"
                }
            ],
            "example_quality": 0.49097003675417367,
            "example_similarity": 0.5584773297819804,
            "db_id": "dog_kennels",
            "pred": "SELECT t1.owner_id, t1.first_name, t1.last_name FROM Owners AS t1 JOIN Dogs AS t2 ON t1.owner_id = t2.owner_id GROUP BY t1.owner_id ORDER BY COUNT(t2.dog_id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 933,
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which tourist attractions are visited at least twice? Give me their names and ids. */\nSELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two treatments? List the professional's id, role, and first name. */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5955,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
                    "question": "Which tourist attractions are visited at least twice? Give me their names and ids."
                }
            ],
            "example_quality": 0.49116227644718063,
            "example_similarity": 0.5582757146057622,
            "db_id": "dog_kennels",
            "pred": "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 934,
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the id, role, and first name of the professionals who have performed two or more treatments? */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 507,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
                    "question": "What are the students ids of students who have more than one allergy?"
                }
            ],
            "example_quality": 0.4908249168108007,
            "example_similarity": 0.5581687099148923,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
            "correct": 1
        },
        {
            "index": 935,
            "question": "What is the name of the breed with the most dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department with the most credits? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the name of the breed with the most dogs? */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1374,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
                    "question": "What is the name of the department with the most credits?"
                }
            ],
            "example_quality": 0.4905346837592113,
            "example_similarity": 0.558641256749208,
            "db_id": "dog_kennels",
            "pred": "SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 936,
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer have the most policies? Give me the customer details. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which breed do the most dogs have? Give me the breed name. */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1541,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer have the most policies? Give me the customer details."
                }
            ],
            "example_quality": 0.4909080441398105,
            "example_similarity": 0.5590364812917531,
            "db_id": "dog_kennels",
            "pred": "SELECT t1.breed_name FROM Breeds AS t1 JOIN Dogs AS t2 ON t1.breed_code = t2.breed_code GROUP BY t1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 937,
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2961,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id."
                }
            ],
            "example_quality": 0.4908055508108157,
            "example_similarity": 0.5589887216684809,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY COUNT(T3.treatment_id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 938,
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2961,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id."
                }
            ],
            "example_quality": 0.4907032760177038,
            "example_similarity": 0.5588416682675326,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 939,
            "question": "What is the description of the treatment type that costs the least money in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Tell me the payment method used by the customer who ordered the least amount of goods in total. */\nSELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the description of the treatment type that costs the least money in total? */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6113,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
                    "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total."
                }
            ],
            "example_quality": 0.4906476035420785,
            "example_similarity": 0.5586725078114435,
            "db_id": "dog_kennels",
            "pred": "SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) LIMIT 1",
            "correct": 1
        },
        {
            "index": 940,
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Tell me the employee id of the head of the department with the least employees. */\nSELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the description of the treatment type whose total cost is the lowest. */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3902,
                    "db_id": "hospital_1",
                    "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
                    "question": "Tell me the employee id of the head of the department with the least employees."
                }
            ],
            "example_quality": 0.4903465872698979,
            "example_similarity": 0.5585133784511026,
            "db_id": "dog_kennels",
            "pred": "SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 941,
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2961,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id."
                }
            ],
            "example_quality": 0.4902443633154706,
            "example_similarity": 0.5582917914389335,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T2.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 942,
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of the customer who made the most orders. */\nSELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6901,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id of the customer who made the most orders."
                }
            ],
            "example_quality": 0.4902212489045575,
            "example_similarity": 0.5581237534437754,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T2.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T2.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 943,
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct names of customers who have purchased at least three different products? */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two types of treatments? List the professional id and cell phone. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4789,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
                    "question": "What are the distinct names of customers who have purchased at least three different products?"
                }
            ],
            "example_quality": 0.4900173203974123,
            "example_similarity": 0.5578460997246371,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2",
            "correct": 1
        },
        {
            "index": 944,
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the salary and manager number for those employees who is working under a manager. */\nSELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id and cell phone of the professionals who operate two or more types of treatments. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3434,
                    "db_id": "hr_1",
                    "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
                    "question": "Find the salary and manager number for those employees who is working under a manager."
                }
            ],
            "example_quality": 0.4895623617936729,
            "example_similarity": 0.557581106300874,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
            "correct": 1
        },
        {
            "index": 945,
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance? */\nSELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the first name and last name of the professionals who have done treatment with cost below average? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1796,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
                    "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?"
                }
            ],
            "example_quality": 0.4891614024031028,
            "example_similarity": 0.5576259940190741,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM Treatments))",
            "correct": 0
        },
        {
            "index": 946,
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the name and building of the departments with greater than average budget. */\nSELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1328,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
                    "question": "Give the name and building of the departments with greater than average budget."
                }
            ],
            "example_quality": 0.4888635651990904,
            "example_similarity": 0.557443107539789,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Treatments))",
            "correct": 0
        },
        {
            "index": 947,
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the local authorities and services provided by all stations. */\nSELECT local_authority ,  services FROM station\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the date of each treatment, together with the first name of the professional who operated it. */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3158,
                    "db_id": "station_weather",
                    "query": "SELECT local_authority ,  services FROM station",
                    "question": "list the local authorities and services provided by all stations."
                }
            ],
            "example_quality": 0.4884543463692428,
            "example_similarity": 0.5571758474748968,
            "db_id": "dog_kennels",
            "pred": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
            "correct": 1
        },
        {
            "index": 948,
            "question": "What are the date and the operating professional's first name of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name, origin and owner of each program? */\nSELECT name ,  origin ,  OWNER FROM program\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the date and the operating professional's first name of each treatment? */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3740,
                    "db_id": "program_share",
                    "query": "SELECT name ,  origin ,  OWNER FROM program",
                    "question": "What are the name, origin and owner of each program?"
                }
            ],
            "example_quality": 0.48804205275492923,
            "example_similarity": 0.557313320209628,
            "db_id": "dog_kennels",
            "pred": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
            "correct": 1
        },
        {
            "index": 949,
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each submission, find its author and acceptance result. */\nSELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the cost of each treatment and the corresponding treatment type description. */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5834,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
                    "question": "For each submission, find its author and acceptance result."
                }
            ],
            "example_quality": 0.4883473591037415,
            "example_similarity": 0.5571599496992726,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "correct": 1
        },
        {
            "index": 950,
            "question": "What are the cost and treatment type description of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the apartment number and the room count of each apartment? */\nSELECT apt_number ,  room_count FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the cost and treatment type description of each treatment? */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1212,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number ,  room_count FROM Apartments",
                    "question": "What are the apartment number and the room count of each apartment?"
                }
            ],
            "example_quality": 0.48793997591872,
            "example_similarity": 0.5575451254607228,
            "db_id": "dog_kennels",
            "pred": "SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "correct": 1
        },
        {
            "index": 951,
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each owner's first name, last name, and the size of his for her dog. */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2056,
                    "db_id": "party_people",
                    "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
                    "question": "List member names and their party names."
                }
            ],
            "example_quality": 0.48809987079157097,
            "example_similarity": 0.5573268866326883,
            "db_id": "dog_kennels",
            "pred": "SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code",
            "correct": 0
        },
        {
            "index": 952,
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the authors of submissions and their colleges? */\nSELECT Author ,  College FROM submission\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name, last name, and the size of their dog? */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5819,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author ,  College FROM submission",
                    "question": "What are the authors of submissions and their colleges?"
                }
            ],
            "example_quality": 0.48767719685766625,
            "example_similarity": 0.5573250259908006,
            "db_id": "dog_kennels",
            "pred": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code",
            "correct": 0
        },
        {
            "index": 953,
            "question": "List pairs of the owner's first name and the dogs's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of a building along with the name of a company whose office is in the building. */\nSELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List pairs of the owner's first name and the dogs's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4562,
                    "db_id": "company_office",
                    "query": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
                    "question": "List the name of a building along with the name of a company whose office is in the building."
                }
            ],
            "example_quality": 0.48751632061743544,
            "example_similarity": 0.5571774306504814,
            "db_id": "dog_kennels",
            "pred": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id;",
            "correct": 1
        },
        {
            "index": 954,
            "question": "What are each owner's first name and their dogs's name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the department names, cities, and state provinces for each department? */\nSELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name and their dogs's name? */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3523,
                    "db_id": "hr_1",
                    "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
                    "question": "What are the department names, cities, and state provinces for each department?"
                }
            ],
            "example_quality": 0.48774417271117515,
            "example_similarity": 0.5571757305717656,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "correct": 1
        },
        {
            "index": 955,
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the policy types of the customer that has the most policies listed? */\nSELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the names of the dogs of the rarest breed and the treatment dates of them. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 914,
                    "db_id": "insurance_fnol",
                    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are all the policy types of the customer that has the most policies listed?"
                }
            ],
            "example_quality": 0.4874671412332731,
            "example_similarity": 0.5569273790214287,
            "db_id": "dog_kennels",
            "pred": "SELECT d.name, t.date_of_treatment FROM Dogs AS d JOIN Breeds AS b ON d.breed_code = b.breed_code JOIN Treatments AS t ON d.dog_id = t.dog_id WHERE b.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 956,
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the policy types of the customer that has the most policies listed? */\nSELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are of the rarest breed? Show their names and treatment dates. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 914,
                    "db_id": "insurance_fnol",
                    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are all the policy types of the customer that has the most policies listed?"
                }
            ],
            "example_quality": 0.48719068931913234,
            "example_similarity": 0.5567086538205239,
            "db_id": "dog_kennels",
            "pred": "SELECT d.name, t.date_of_treatment FROM Dogs AS d JOIN Breeds AS b ON d.breed_code = b.breed_code JOIN Treatments AS t ON d.dog_id = t.dog_id WHERE b.breed_name = (SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY COUNT(*) ASC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 957,
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which channels are not owned by CCTV? Give me the channel names. */\nSELECT name FROM channel WHERE OWNER != 'CCTV'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3730,
                    "db_id": "program_share",
                    "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
                    "question": "Which channels are not owned by CCTV? Give me the channel names."
                }
            ],
            "example_quality": 0.486791523855699,
            "example_similarity": 0.5565690177382422,
            "db_id": "dog_kennels",
            "pred": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'",
            "correct": 1
        },
        {
            "index": 958,
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names of owners living in Virginia and the names of dogs they own. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                }
            ],
            "example_quality": 0.486745663332736,
            "example_similarity": 0.5565099686591836,
            "db_id": "dog_kennels",
            "pred": "SELECT t1.first_name, t2.name FROM Owners AS t1 JOIN Dogs AS t2 ON t1.owner_id = t2.owner_id WHERE t1.state = 'Virginia'",
            "correct": 1
        },
        {
            "index": 959,
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all instructors who have taught a course, as well as the corresponding course id? */\nSELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of the dogs who have gone through a treatment? */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1470,
                    "db_id": "college_2",
                    "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
                    "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?"
                }
            ],
            "example_quality": 0.48686985758704643,
            "example_similarity": 0.5564317324890294,
            "db_id": "dog_kennels",
            "pred": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;",
            "correct": 1
        },
        {
            "index": 960,
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find names of all students who took some course and the course description. */\nSELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the arriving date and the departing date of the dogs that received a treatment. */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3318,
                    "db_id": "college_1",
                    "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
                    "question": "Find names of all students who took some course and the course description."
                }
            ],
            "example_quality": 0.48655189067458243,
            "example_similarity": 0.556230903979808,
            "db_id": "dog_kennels",
            "pred": "SELECT T5.date_arrived, T5.date_departed FROM Treatments AS T1 JOIN Dogs AS T5 ON T1.dog_id = T5.dog_id;",
            "correct": 1
        },
        {
            "index": 961,
            "question": "List the last name of the owner owning the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the youngest organization. */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the last name of the owner owning the youngest dog. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6321,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "Find the name of the youngest organization."
                }
            ],
            "example_quality": 0.48607796686650384,
            "example_similarity": 0.5560980637348462,
            "db_id": "dog_kennels",
            "pred": "SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.age DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 962,
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the youngest organization. */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Who owns the youngest dog? Give me his or her last name. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6321,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "Find the name of the youngest organization."
                }
            ],
            "example_quality": 0.48560502834700764,
            "example_similarity": 0.5557509994505295,
            "db_id": "dog_kennels",
            "pred": "SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 963,
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who belong to the institution \"University of Oxford\"? Show the first names and last names. */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2875,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
                    "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names."
                }
            ],
            "example_quality": 0.48515615733729034,
            "example_similarity": 0.5555969562604536,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\"",
            "correct": 1
        },
        {
            "index": 964,
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first and last names of all customers who lived in Lockmanfurt? */\nSELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6684,
                    "db_id": "driving_school",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
                    "question": "What are the first and last names of all customers who lived in Lockmanfurt?"
                }
            ],
            "example_quality": 0.4847596963254628,
            "example_similarity": 0.5554960603860478,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\";",
            "correct": 1
        },
        {
            "index": 965,
            "question": "What are the arriving date and the departing date of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the dates of the assessment notes? */\nSELECT date_of_notes FROM Assessment_Notes\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of all the dogs? */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3088,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT date_of_notes FROM Assessment_Notes",
                    "question": "What are the dates of the assessment notes?"
                }
            ],
            "example_quality": 0.48487911632927055,
            "example_similarity": 0.5555865900051888,
            "db_id": "dog_kennels",
            "pred": "SELECT date_arrived, date_departed FROM Dogs",
            "correct": 1
        },
        {
            "index": 966,
            "question": "List the arrival date and the departure date for all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the start dates and end dates of all the apartment bookings. */\nSELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the arrival date and the departure date for all the dogs. */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1197,
                    "db_id": "apartment_rentals",
                    "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
                    "question": "Show the start dates and end dates of all the apartment bookings."
                }
            ],
            "example_quality": 0.48541236776164187,
            "example_similarity": 0.5554715360242772,
            "db_id": "dog_kennels",
            "pred": "SELECT date_arrived, date_departed FROM Dogs",
            "correct": 1
        },
        {
            "index": 967,
            "question": "How many dogs went through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different teams have had eliminated wrestlers? */\nSELECT COUNT (DISTINCT team) FROM elimination\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs went through any treatments? */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1882,
                    "db_id": "wrestler",
                    "query": "SELECT COUNT (DISTINCT team) FROM elimination",
                    "question": "How many different teams have had eliminated wrestlers?"
                }
            ],
            "example_quality": 0.4859445162954975,
            "example_similarity": 0.5553279942772681,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(DISTINCT dog_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 968,
            "question": "Count the number of dogs that went through a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the total number of counties. */\nSELECT count(*) FROM county\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs that went through a treatment. */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2736,
                    "db_id": "election",
                    "query": "SELECT count(*) FROM county",
                    "question": "Count the total number of counties."
                }
            ],
            "example_quality": 0.48590164432044475,
            "example_similarity": 0.5552708372583867,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(DISTINCT dog_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 969,
            "question": "How many professionals have performed any treatment to dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different instructors have taught some course? */\nSELECT COUNT (DISTINCT id) FROM teaches\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals have performed any treatment to dogs? */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1351,
                    "db_id": "college_2",
                    "query": "SELECT COUNT (DISTINCT id) FROM teaches",
                    "question": "How many different instructors have taught some course?"
                }
            ],
            "example_quality": 0.48643218957914397,
            "example_similarity": 0.555299797522654,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 970,
            "question": "Find the number of professionals who have ever treated dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of artists who have had volumes. */\nSELECT COUNT(DISTINCT Artist_ID) FROM volume\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have ever treated dogs. */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6199,
                    "db_id": "music_4",
                    "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
                    "question": "Count the number of artists who have had volumes."
                }
            ],
            "example_quality": 0.4869616409300933,
            "example_similarity": 0.5553617406338519,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 971,
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customers have the substring \"Diana\" in their names? Return the customer details. */\nSELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1531,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
                    "question": "Which customers have the substring \"Diana\" in their names? Return the customer details."
                }
            ],
            "example_quality": 0.48685835053435345,
            "example_similarity": 0.5551116255559592,
            "db_id": "dog_kennels",
            "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE \"%West%\"",
            "correct": 1
        },
        {
            "index": 972,
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email of the user whose name contains the word \u2018Swift\u2019. */\nSELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 282,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
                    "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019."
                }
            ],
            "example_quality": 0.4869042046710759,
            "example_similarity": 0.5550181832604136,
            "db_id": "dog_kennels",
            "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
            "correct": 1
        },
        {
            "index": 973,
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customers have the substring \"Diana\" in their names? Return the customer details. */\nSELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1531,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
                    "question": "Which customers have the substring \"Diana\" in their names? Return the customer details."
                }
            ],
            "example_quality": 0.4868890814896179,
            "example_similarity": 0.5548124489607393,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE \"%North%\"",
            "correct": 1
        },
        {
            "index": 974,
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the camera lens names containing substring \"Digital\". */\nSELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3727,
                    "db_id": "mountain_photos",
                    "query": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
                    "question": "List the camera lens names containing substring \"Digital\"."
                }
            ],
            "example_quality": 0.4868739893619206,
            "example_similarity": 0.5544906490237621,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE \"%North%\"",
            "correct": 1
        },
        {
            "index": 975,
            "question": "How many dogs have an age below the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts have a savings balance above the average savings balance? */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have an age below the average? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1785,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "How many accounts have a savings balance above the average savings balance?"
                }
            ],
            "example_quality": 0.48688745193693406,
            "example_similarity": 0.5544689492127975,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
            "correct": 1
        },
        {
            "index": 976,
            "question": "Count the number of dogs of an age below the average.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of accounts with a savings balance that is higher than the average savings balance. */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs of an age below the average. */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1786,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "Find the number of accounts with a savings balance that is higher than the average savings balance."
                }
            ],
            "example_quality": 0.48690088692470357,
            "example_similarity": 0.5542734240226578,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
            "correct": 1
        },
        {
            "index": 977,
            "question": "How much does the most recent treatment cost?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and date of the most recent race? */\nSELECT name ,  date FROM races ORDER BY date DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most recent treatment cost? */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2156,
                    "db_id": "formula_1",
                    "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
                    "question": "What is the name and date of the most recent race?"
                }
            ],
            "example_quality": 0.48705662118009063,
            "example_similarity": 0.5541155187780081,
            "db_id": "dog_kennels",
            "pred": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 978,
            "question": "Show me the cost of the most recently performed treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Show me the cost of the most recently performed treatment. */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1636,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
                    "question": "Show the name and opening year for three churches that opened most recently."
                }
            ],
            "example_quality": 0.4873451428038644,
            "example_similarity": 0.554030112557677,
            "db_id": "dog_kennels",
            "pred": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 979,
            "question": "How many dogs have not gone through any treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms have not had any reservation yet? */\nSELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have not gone through any treatment? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2638,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
                    "question": "How many rooms have not had any reservation yet?"
                }
            ],
            "example_quality": 0.48732614878670005,
            "example_similarity": 0.5541451652176453,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 980,
            "question": "Tell me the number of dogs that have not received any treatment .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of items that did not receive any review. */\nSELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the number of dogs that have not received any treatment . */\nSELECT ",
            "response": "count(*) from dogs where dog_id not in ( select dog_id from treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1698,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                    "question": "Find the number of items that did not receive any review."
                }
            ],
            "example_quality": 0.48701440596326273,
            "example_similarity": 0.55415369055926,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 981,
            "question": "How many owners temporarily do not have any dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many scientists do not have any projects assigned to them? */\nSELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many owners temporarily do not have any dogs? */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6511,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "How many scientists do not have any projects assigned to them?"
                }
            ],
            "example_quality": 0.4870238953857383,
            "example_similarity": 0.5542945203265877,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NOT NULL)",
            "correct": 1
        },
        {
            "index": 982,
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of scientists who are not assigned to any project. */\nSELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of owners who do not own any dogs at this moment. */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6510,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "Find the number of scientists who are not assigned to any project."
                }
            ],
            "example_quality": 0.4870333654814878,
            "example_similarity": 0.5542958044765153,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)",
            "correct": 1
        },
        {
            "index": 983,
            "question": "How many professionals did not operate any treatment on dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many tourists did not make any visit? */\nSELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals did not operate any treatment on dogs? */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5968,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                    "question": "How many tourists did not make any visit?"
                }
            ],
            "example_quality": 0.48755520335994,
            "example_similarity": 0.5544101186801674,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 984,
            "question": "Find the number of professionals who have not treated any dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of scientists who are not assigned to any project. */\nSELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have not treated any dogs. */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6510,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "Find the number of scientists who are not assigned to any project."
                }
            ],
            "example_quality": 0.4875641142603992,
            "example_similarity": 0.5545242005378774,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 985,
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the different first names and cities of the students who have allergy to milk or cat. */\nSELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 532,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
                    "question": "Find the different first names and cities of the students who have allergy to milk or cat."
                }
            ],
            "example_quality": 0.487134623920066,
            "example_similarity": 0.5544197220634489,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name, D.age, D.weight FROM Dogs AS D WHERE D.abandoned_yn = \"1\"",
            "correct": 1
        },
        {
            "index": 986,
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the different first names and cities of the students who have allergy to milk or cat. */\nSELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 532,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
                    "question": "Find the different first names and cities of the students who have allergy to milk or cat."
                }
            ],
            "example_quality": 0.4867060047568938,
            "example_similarity": 0.5542137703690148,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name, D.age, D.weight FROM Dogs AS D WHERE D.abandoned_yn = \"1\"",
            "correct": 1
        },
        {
            "index": 987,
            "question": "What is the average age of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of all the dogs? */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.4872260594633205,
            "example_similarity": 0.5545733216747107,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 988,
            "question": "Compute the average age of all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all the products. */\nSELECT avg(price) FROM products\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Compute the average age of all the dogs. */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5331,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products",
                    "question": "Compute the average price of all the products."
                }
            ],
            "example_quality": 0.4877450614274264,
            "example_similarity": 0.5550241583936634,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 989,
            "question": "What is the age of the oldest dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the oldest age among the students? */\nSELECT max(Age) FROM STUDENT\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the age of the oldest dog? */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5452,
                    "db_id": "voter_2",
                    "query": "SELECT max(Age) FROM STUDENT",
                    "question": "What is the oldest age among the students?"
                }
            ],
            "example_quality": 0.48826301384256554,
            "example_similarity": 0.5552718589412936,
            "db_id": "dog_kennels",
            "pred": "SELECT max(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 990,
            "question": "Tell me the age of the oldest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the age of the oldest dog. */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 245,
                    "db_id": "musical",
                    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
                    "question": "What is the duration of the oldest actor?"
                }
            ],
            "example_quality": 0.48789378582123694,
            "example_similarity": 0.5552160287807468,
            "db_id": "dog_kennels",
            "pred": "SELECT MAX(age) AS Oldest_Dog_Age FROM Dogs",
            "correct": 1
        },
        {
            "index": 991,
            "question": "How much does each charge type costs? List both charge type and amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are total transaction amounts for each transaction type? */\nSELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does each charge type costs? List both charge type and amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1589,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
                    "question": "What are total transaction amounts for each transaction type?"
                }
            ],
            "example_quality": 0.48771194780092525,
            "example_similarity": 0.5549744278169765,
            "db_id": "dog_kennels",
            "pred": "SELECT charge_type, charge_amount FROM Charges",
            "correct": 1
        },
        {
            "index": 992,
            "question": "List each charge type and its amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all document ids and receipt dates of documents. */\nSELECT document_id ,  receipt_date FROM Documents;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each charge type and its amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2109,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT document_id ,  receipt_date FROM Documents;",
                    "question": "List all document ids and receipt dates of documents."
                }
            ],
            "example_quality": 0.488228367208384,
            "example_similarity": 0.5548026949105233,
            "db_id": "dog_kennels",
            "pred": "SELECT charge_type, charge_amount FROM Charges;",
            "correct": 1
        },
        {
            "index": 993,
            "question": "How much does the most expensive charge type costs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the carrier of the most expensive phone? */\nSELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most expensive charge type costs? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1984,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
                    "question": "What is the carrier of the most expensive phone?"
                }
            ],
            "example_quality": 0.48786028957043726,
            "example_similarity": 0.5546755737963851,
            "db_id": "dog_kennels",
            "pred": "SELECT MAX(charge_amount) FROM Charges",
            "correct": 1
        },
        {
            "index": 994,
            "question": "What is the charge amount of the most expensive charge type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the carrier of the most expensive phone? */\nSELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the charge amount of the most expensive charge type? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1984,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
                    "question": "What is the carrier of the most expensive phone?"
                }
            ],
            "example_quality": 0.4874929525313596,
            "example_similarity": 0.554955913594712,
            "db_id": "dog_kennels",
            "pred": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 995,
            "question": "List the email, cell phone and home phone of all the professionals.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids, full names, and phones of each customer? */\nSELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the email, cell phone and home phone of all the professionals. */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 695,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
                    "question": "What are the ids, full names, and phones of each customer?"
                }
            ],
            "example_quality": 0.4877266279559512,
            "example_similarity": 0.5546166526808961,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address, cell_number, home_phone FROM Professionals",
            "correct": 1
        },
        {
            "index": 996,
            "question": "What are the email, cell phone and home phone of each professional?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids, full names, and phones of each customer? */\nSELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the email, cell phone and home phone of each professional? */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 695,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
                    "question": "What are the ids, full names, and phones of each customer?"
                }
            ],
            "example_quality": 0.48795983415278255,
            "example_similarity": 0.5545353952088533,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address, cell_number, home_phone FROM Professionals",
            "correct": 1
        },
        {
            "index": 997,
            "question": "What are all the possible breed type and size type combinations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and type codes of products? */\nSELECT Product_Name ,  Product_Type_Code FROM Products\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are all the possible breed type and size type combinations? */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4586,
                    "db_id": "solvency_ii",
                    "query": "SELECT Product_Name ,  Product_Type_Code FROM Products",
                    "question": "What are the names and type codes of products?"
                }
            ],
            "example_quality": 0.48819257253377274,
            "example_similarity": 0.5544472620809273,
            "db_id": "dog_kennels",
            "pred": "SELECT Breed.breed_name, Size.size_description FROM Breeds, Sizes",
            "correct": 0
        },
        {
            "index": 998,
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of addresses of people? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the distinct breed type and size type combinations for dogs. */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 92,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "Find distinct cities of addresses of people?"
                }
            ],
            "example_quality": 0.4877794797015004,
            "example_similarity": 0.5542257050380941,
            "db_id": "dog_kennels",
            "pred": "SELECT DISTINCT breed_code, size_code FROM Dogs",
            "correct": 1
        },
        {
            "index": 999,
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the first name of all the professionals along with the description of the treatment they have done. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2056,
                    "db_id": "party_people",
                    "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
                    "question": "List member names and their party names."
                }
            ],
            "example_quality": 0.48769546235830175,
            "example_similarity": 0.5539569248385707,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "correct": 0
        },
        {
            "index": 1000,
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of representatives and the dates of elections they participated in. */\nSELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each professional's first name and description of the treatment they have performed? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1182,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
                    "question": "What are the names of representatives and the dates of elections they participated in."
                }
            ],
            "example_quality": 0.48749742206835733,
            "example_similarity": 0.5538791583899226,
            "db_id": "dog_kennels",
            "pred": "SELECT T2.first_name, T3.treatment_type_description FROM Professionals AS T2 JOIN Treatments AS T1 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code",
            "correct": 1
        },
        {
            "index": 1001,
            "question": "How many singers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are there? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                }
            ],
            "example_quality": 0.48745441210070106,
            "example_similarity": 0.5543248335563663,
            "db_id": "singer",
            "pred": "SELECT COUNT(*) FROM singer",
            "correct": 1
        },
        {
            "index": 1002,
            "question": "What is the count of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total count of enzymes? */\nSELECT count(*) FROM enzyme\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the count of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 935,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme",
                    "question": "What is the total count of enzymes?"
                }
            ],
            "example_quality": 0.48796593464351473,
            "example_similarity": 0.5546448686526174,
            "db_id": "singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 1003,
            "question": "List the name of singers in ascending order of net worth.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of journalists in ascending order of years working. */\nSELECT Name FROM journalist ORDER BY Years_working ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers in ascending order of net worth. */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2804,
                    "db_id": "news_report",
                    "query": "SELECT Name FROM journalist ORDER BY Years_working ASC",
                    "question": "List the names of journalists in ascending order of years working."
                }
            ],
            "example_quality": 0.48847643720119815,
            "example_similarity": 0.5550888917147783,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "correct": 1
        },
        {
            "index": 1004,
            "question": "What are the names of singers ordered by ascending net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the names of the ships ordered by ascending tonnage? */\nSELECT Name FROM ship ORDER BY Tonnage ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of singers ordered by ascending net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4002,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
                    "question": "what are the names of the ships ordered by ascending tonnage?"
                }
            ],
            "example_quality": 0.4889859228215157,
            "example_similarity": 0.5553787970478848,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "correct": 1
        },
        {
            "index": 1005,
            "question": "What are the birth year and citizenship of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the team and starting year of technicians? */\nSELECT Team ,  Starting_Year FROM technician\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth year and citizenship of singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2238,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  Starting_Year FROM technician",
                    "question": "What are the team and starting year of technicians?"
                }
            ],
            "example_quality": 0.48949439454010124,
            "example_similarity": 0.5558212062050512,
            "db_id": "singer",
            "pred": "SELECT Birth_Year, Citizenship FROM singer",
            "correct": 1
        },
        {
            "index": 1006,
            "question": "What are the birth years and citizenships of the singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth years and citizenships of the singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.49000185538051866,
            "example_similarity": 0.556172368931578,
            "db_id": "singer",
            "pred": "SELECT Birth_Year, Citizenship FROM singer",
            "correct": 1
        },
        {
            "index": 1007,
            "question": "List the name of singers whose citizenship is not \"France\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of countries whose language is not \"German\". */\nSELECT Name FROM country WHERE Languages != \"German\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers whose citizenship is not \"France\". */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6207,
                    "db_id": "roller_coaster",
                    "query": "SELECT Name FROM country WHERE Languages != \"German\"",
                    "question": "List the names of countries whose language is not \"German\"."
                }
            ],
            "example_quality": 0.4905083083543215,
            "example_similarity": 0.5566131113656082,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
            "correct": 1
        },
        {
            "index": 1008,
            "question": "What are the names of the singers who are not French citizens?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students who live in CHI? */\nSELECT StuID FROM Student WHERE city_code  =  \"CHI\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who are not French citizens? */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5991,
                    "db_id": "game_1",
                    "query": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\"",
                    "question": "What are the ids of all students who live in CHI?"
                }
            ],
            "example_quality": 0.4907932979073209,
            "example_similarity": 0.5565277692266484,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Citizenship <> \"French\"",
            "correct": 0
        },
        {
            "index": 1009,
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of companies in the banking or retailing industry? */\nSELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name of singers whose birth year is either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4100,
                    "db_id": "company_employee",
                    "query": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
                    "question": "Show the names of companies in the banking or retailing industry?"
                }
            ],
            "example_quality": 0.4910147968333649,
            "example_similarity": 0.5565956307041244,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "correct": 1
        },
        {
            "index": 1010,
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers whose birth years are either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                }
            ],
            "example_quality": 0.4912358571476742,
            "example_similarity": 0.5565656506633022,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "correct": 1
        },
        {
            "index": 1011,
            "question": "What is the name of the singer with the largest net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the school color of the school with the largest enrollment? */\nSELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer with the largest net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4892,
                    "db_id": "school_player",
                    "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
                    "question": "What is the school color of the school with the largest enrollment?"
                }
            ],
            "example_quality": 0.4917390857756191,
            "example_similarity": 0.557004260306563,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 1012,
            "question": "What is the name of the singer who is worth the most?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the savings balance of the account belonging to the customer with the highest checking balance? */\nSELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer who is worth the most? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1812,
                    "db_id": "small_bank_1",
                    "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
                    "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?"
                }
            ],
            "example_quality": 0.491332228971493,
            "example_similarity": 0.5568581008686029,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 1013,
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different types of ships and the number of ships of each type. */\nSELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenship of singers and the number of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4011,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
                    "question": "Show different types of ships and the number of ships of each type."
                }
            ],
            "example_quality": 0.49183436892314997,
            "example_similarity": 0.5572955558529379,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1014,
            "question": "For each citizenship, how many singers are from that country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the state names and the number of customers living in each state. */\nSELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, how many singers are from that country? */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2858,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
                    "question": "List the state names and the number of customers living in each state."
                }
            ],
            "example_quality": 0.49149177530926563,
            "example_similarity": 0.5568745886209416,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1015,
            "question": "Please show the most common citizenship of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the most common age of editors. */\nSELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Please show the most common citizenship of singers. */\nSELECT ",
            "response": "Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 657,
                    "db_id": "journal_committee",
                    "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the most common age of editors."
                }
            ],
            "example_quality": 0.4919927686340841,
            "example_similarity": 0.5573111653809211,
            "db_id": "singer",
            "pred": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 1016,
            "question": "What is the most common singer citizenship ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common participant type? */\nSELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the most common singer citizenship ? */\nSELECT ",
            "response": "citizenship from singer group by citizenship order by count(*) desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2147,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common participant type?"
                }
            ],
            "example_quality": 0.49174286948985296,
            "example_similarity": 0.5577468827378296,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 1017,
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenships and the maximum net worth of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                }
            ],
            "example_quality": 0.49136828992746906,
            "example_similarity": 0.5576611810195958,
            "db_id": "singer",
            "pred": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1018,
            "question": "For each citizenship, what is the maximum net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, what is the maximum net worth? */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                }
            ],
            "example_quality": 0.49099444627778144,
            "example_similarity": 0.55767470497874,
            "db_id": "singer",
            "pred": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1019,
            "question": "Show titles of songs and names of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show titles of songs and names of singers. */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                }
            ],
            "example_quality": 0.4912758823243958,
            "example_similarity": 0.5579125119414695,
            "db_id": "singer",
            "pred": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "correct": 1
        },
        {
            "index": 1020,
            "question": "What are the song titles and singer names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the calendar dates and day Numbers? */\nSELECT calendar_date ,  day_Number FROM Ref_calendar\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the song titles and singer names? */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4164,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar",
                    "question": "What are all the calendar dates and day Numbers?"
                }
            ],
            "example_quality": 0.4908935857077379,
            "example_similarity": 0.558247891831723,
            "db_id": "singer",
            "pred": "SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
            "correct": 1
        },
        {
            "index": 1021,
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge. */\nSELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show distinct names of singers that have songs with sales more than 300000. */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5765,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                    "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge."
                }
            ],
            "example_quality": 0.4905876874147542,
            "example_similarity": 0.5579809637160351,
            "db_id": "singer",
            "pred": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;",
            "correct": 1
        },
        {
            "index": 1022,
            "question": "what are the different names of the singers that have sales more than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different ids and names of the stations that have had more than 12 bikes available? */\nSELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: what are the different names of the singers that have sales more than 300000? */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 205,
                    "db_id": "bike_1",
                    "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
                    "question": "What are the different ids and names of the stations that have had more than 12 bikes available?"
                }
            ],
            "example_quality": 0.49074811575832633,
            "example_similarity": 0.5582074732272821,
            "db_id": "singer",
            "pred": "SELECT DISTINCT Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "correct": 1
        },
        {
            "index": 1023,
            "question": "Show the names of singers that have more than one song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers that have more than one song. */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6216,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                    "question": "Show the names of countries that have more than one roller coaster."
                }
            ],
            "example_quality": 0.4912459181867151,
            "example_similarity": 0.5585641393561673,
            "db_id": "singer",
            "pred": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 1024,
            "question": "What are the names of the singers that have more than one songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of ships that have more than one captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers that have more than one songs? */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6260,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1",
                    "question": "What are the names of ships that have more than one captain?"
                }
            ],
            "example_quality": 0.491653969935645,
            "example_similarity": 0.5589254745995417,
            "db_id": "singer",
            "pred": "SELECT t1.Name FROM singer AS t1 JOIN song AS t2 ON t1.Singer_ID = t2.Singer_ID GROUP BY t2.Singer_ID HAVING count(*) > 1",
            "correct": 1
        },
        {
            "index": 1025,
            "question": "Show the names of singers and the total sales of their songs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product name and total order quantity for each product. */\nSELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers and the total sales of their songs. */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5662,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
                    "question": "Show the product name and total order quantity for each product."
                }
            ],
            "example_quality": 0.4920523563064395,
            "example_similarity": 0.5589289619413957,
            "db_id": "singer",
            "pred": "SELECT s.Name, SUM(sales) FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;",
            "correct": 1
        },
        {
            "index": 1026,
            "question": "For each singer name, what is the total sales for their songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total rating of channel for each channel owner? */\nSELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each singer name, what is the total sales for their songs? */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3766,
                    "db_id": "program_share",
                    "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
                    "question": "What is the total rating of channel for each channel owner?"
                }
            ],
            "example_quality": 0.49170401979045764,
            "example_similarity": 0.5590989467088343,
            "db_id": "singer",
            "pred": "SELECT s.Name, SUM(sales) FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;",
            "correct": 1
        },
        {
            "index": 1027,
            "question": "List the name of singers that do not have any song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers that do not have any song. */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.4921989525852089,
            "example_similarity": 0.5595282564004518,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "correct": 1
        },
        {
            "index": 1028,
            "question": "What is the sname of every sing that does not have any song?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the dorms that don't have any amenities? */\nSELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the sname of every sing that does not have any song? */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5694,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
                    "question": "What are the names of all the dorms that don't have any amenities?"
                }
            ],
            "example_quality": 0.49269292247569024,
            "example_similarity": 0.5593545444593545,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "correct": 1
        },
        {
            "index": 1029,
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the denomination shared by schools founded before 1890 and schools founded after 1900 */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the citizenship shared by singers with birth year before 1945 and after 1955. */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4895,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900"
                }
            ],
            "example_quality": 0.49318593226920265,
            "example_similarity": 0.559600555592047,
            "db_id": "singer",
            "pred": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "correct": 1
        },
        {
            "index": 1030,
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the denominations used by both schools founded before 1890 and schools founded  after 1900? */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4896,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?"
                }
            ],
            "example_quality": 0.4936779847621452,
            "example_similarity": 0.5596750828549321,
            "db_id": "singer",
            "pred": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "correct": 1
        },
        {
            "index": 1031,
            "question": "How many available features are there in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many available hotels are there in total? */\nSELECT count(*) FROM HOTELS\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: How many available features are there in total? */\nSELECT ",
            "response": "count(*) FROM Other_Available_Features",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5886,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM HOTELS",
                    "question": "How many available hotels are there in total?"
                }
            ],
            "example_quality": 0.49416908274006743,
            "example_similarity": 0.5601021681285937,
            "db_id": "real_estate_properties",
            "pred": "SELECT count(*) FROM Other_Available_Features;",
            "correct": 1
        },
        {
            "index": 1032,
            "question": "What is the feature type name of feature AirCon?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the role of the employee named Koby? */\nSELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What is the feature type name of feature AirCon? */\nSELECT ",
            "response": "T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2108,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
                    "question": "What is the role of the employee named Koby?"
                }
            ],
            "example_quality": 0.49446543052811004,
            "example_similarity": 0.5603522453088777,
            "db_id": "real_estate_properties",
            "pred": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = \"AirCon\";",
            "correct": 1
        },
        {
            "index": 1033,
            "question": "Show the property type descriptions of properties belonging to that code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show member names without any registered branch. */\nSELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: Show the property type descriptions of properties belonging to that code. */\nSELECT ",
            "response": "T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5425,
                    "db_id": "shop_membership",
                    "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
                    "question": "Show member names without any registered branch."
                }
            ],
            "example_quality": 0.49403144061100035,
            "example_similarity": 0.560132478695155,
            "db_id": "real_estate_properties",
            "pred": "SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = 'desired_code'",
            "correct": 0
        },
        {
            "index": 1034,
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all video games that are collectible cards? */\nSELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What are the names of properties that are either houses or apartments with more than 1 room? */\nSELECT ",
            "response": "property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5979,
                    "db_id": "game_1",
                    "query": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"",
                    "question": "What are the names of all video games that are collectible cards?"
                }
            ],
            "example_quality": 0.49374741865072486,
            "example_similarity": 0.5602015758602162,
            "db_id": "real_estate_properties",
            "pred": "SELECT property_name FROM Properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1",
            "correct": 0
        }
    ]
}