{
    "accuracy": 0.8056092843326886,
    "args": {
        "data_type": "spider",
        "split": "test",
        "tokenizer": "gpt-3.5-turbo",
        "max_seq_length": 2048,
        "prompt_repr": "SQL",
        "k-shot": 5,
        "example_type": "QA",
        "selector_type": "MANUALSQL",
        "embedding_model": null
    },
    "questions": [
        {
            "index": 1,
            "question": "How many singers do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers do we have? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 0.29999999999999993,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 2,
            "question": "What is the total number of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the total number of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 0.27999999999999997,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 3,
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: List the name, born state and age of the heads of departments ordered by age. */\nSELECT name ,  born_state ,  age FROM head ORDER BY age\n\n/* Answer the following: Show the name, street address, and number of floors for all buildings ordered by the number of floors. */\nSELECT name ,  street_address ,  floors FROM building ORDER BY floors\n\n/* Answer the following: Show the ministers and the time they took and left office, listed by the time they left office. */\nSELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5299,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
                }
            ],
            "example_quality": 0.9833333333333332,
            "example_similarity": 0.32344171797935234,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 4,
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: List the name, born state and age of the heads of departments ordered by age. */\nSELECT name ,  born_state ,  age FROM head ORDER BY age\n\n/* Answer the following: Show the name, street address, and number of floors for all buildings ordered by the number of floors. */\nSELECT name ,  street_address ,  floors FROM building ORDER BY floors\n\n/* Answer the following: Show the ministers and the time they took and left office, listed by the time they left office. */\nSELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names, countries, and ages for every singer in descending order of age? */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5299,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
                }
            ],
            "example_quality": 0.9750000000000002,
            "example_similarity": 0.3444854953887212,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 5,
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later. */\nSELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011\n\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Return the average and minimum ages across artists from the United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009. */\nSELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009\n\n/* Answer the following: What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009? */\nSELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age of all singers from France? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1941,
                    "db_id": "cinema",
                    "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
                    "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later."
                }
            ],
            "example_quality": 0.9148170426065164,
            "example_similarity": 0.37509315821573885,
            "db_id": "concert_singer",
            "pred": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "correct": 1
        },
        {
            "index": 6,
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later. */\nSELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011\n\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Return the average and minimum ages across artists from the United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009. */\nSELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009\n\n/* Answer the following: What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009? */\nSELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age for all French singers? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1941,
                    "db_id": "cinema",
                    "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
                    "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later."
                }
            ],
            "example_quality": 0.8746950710108606,
            "example_similarity": 0.3867948035636208,
            "db_id": "concert_singer",
            "pred": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "correct": 1
        },
        {
            "index": 7,
            "question": "Show the name and the release year of the song by the youngest singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and the release year of the song by the youngest singer. */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.892595775152166,
            "example_similarity": 0.3913398888662481,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Song_release_year FROM singer ORDER BY Age DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 8,
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and release years for all the songs of the youngest singer? */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.9060213032581453,
            "example_similarity": 0.39658001145361926,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
            "correct": 0
        },
        {
            "index": 9,
            "question": "What are all distinct countries where singers above age 20 are from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct publishers of publications with price higher than 5000000? */\nSELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n\n/* Answer the following: Find the buildings which have rooms with capacity more than 50. */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Answer the following: What are the distinct buildings with capacities of greater than 50? */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Answer the following: List the distinct carriers of phones with memories bigger than 32. */\nSELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32\n\n/* Answer the following: List the distinct positions of pilots older than 30. */\nSELECT DISTINCT POSITION FROM pilot WHERE Age  >  30\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all distinct countries where singers above age 20 are from? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 220,
                    "db_id": "book_2",
                    "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
                    "question": "What are the distinct publishers of publications with price higher than 5000000?"
                }
            ],
            "example_quality": 0.916463380673907,
            "example_similarity": 0.38550080661652814,
            "db_id": "concert_singer",
            "pred": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
            "correct": 1
        },
        {
            "index": 10,
            "question": "What are  the different countries with singers above age 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct publishers of publications with price higher than 5000000? */\nSELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n\n/* Answer the following: Find the buildings which have rooms with capacity more than 50. */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Answer the following: What are the distinct buildings with capacities of greater than 50? */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Answer the following: List the distinct carriers of phones with memories bigger than 32. */\nSELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32\n\n/* Answer the following: List the distinct positions of pilots older than 30. */\nSELECT DISTINCT POSITION FROM pilot WHERE Age  >  30\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are  the different countries with singers above age 20? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 220,
                    "db_id": "book_2",
                    "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
                    "question": "What are the distinct publishers of publications with price higher than 5000000?"
                }
            ],
            "example_quality": 0.9248170426065162,
            "example_similarity": 0.38844092203330666,
            "db_id": "concert_singer",
            "pred": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
            "correct": 1
        },
        {
            "index": 11,
            "question": "Show all countries and the number of singers in each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show all countries and the number of singers in each country. */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.9316518569150147,
            "example_similarity": 0.39015359319705006,
            "db_id": "concert_singer",
            "pred": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
            "correct": 1
        },
        {
            "index": 12,
            "question": "How many singers are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are from each country? */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.9373475355054303,
            "example_similarity": 0.383469253802949,
            "db_id": "concert_singer",
            "pred": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
            "correct": 1
        },
        {
            "index": 13,
            "question": "List all song names by singers above the average age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: What are the names of all aircrafts that can cover more distances than average? */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: Show names for all employees with salary more than the average. */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: What are the names of all employees who have a salary higher than average? */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: Show ids for all transactions whose amounts are greater than the average. */\nSELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all song names by singers above the average age. */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 360,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "Show names for all aircrafts with distances more than the average."
                }
            ],
            "example_quality": 0.9421669558511664,
            "example_similarity": 0.3752342778047476,
            "db_id": "concert_singer",
            "pred": "SELECT Song_Name FROM singer WHERE Age > (SELECT avg(Age) FROM singer)",
            "correct": 1
        },
        {
            "index": 14,
            "question": "What are all the song names by singers who are older than average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: What are the names of all aircrafts that can cover more distances than average? */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: Show names for all employees with salary more than the average. */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: What are the names of all employees who have a salary higher than average? */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: Show ids for all transactions whose amounts are greater than the average. */\nSELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all the song names by singers who are older than average? */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 360,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "Show names for all aircrafts with distances more than the average."
                }
            ],
            "example_quality": 0.9462978875760829,
            "example_similarity": 0.37419737962935723,
            "db_id": "concert_singer",
            "pred": "SELECT Song_Name FROM singer WHERE Age > (SELECT avg(Age) FROM singer)",
            "correct": 1
        },
        {
            "index": 15,
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the room number of the rooms which can sit 50 to 100 students and their buildings. */\nSELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\n\n/* Answer the following: What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students? */\nSELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\n\n/* Answer the following: Show the organizer and name for churches that opened between 1830 and 1840. */\nSELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840\n\n/* Answer the following: Return the names and ids of all products whose price is between 600 and 700. */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Answer the following: What are the names and ids of products costing between 600 and 700? */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show location and name for all stadiums with a capacity between 5000 and 10000. */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1329,
                    "db_id": "college_2",
                    "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
                    "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings."
                }
            ],
            "example_quality": 0.9498780284043441,
            "example_similarity": 0.37616267216585125,
            "db_id": "concert_singer",
            "pred": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
            "correct": 1
        },
        {
            "index": 16,
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the room number of the rooms which can sit 50 to 100 students and their buildings. */\nSELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\n\n/* Answer the following: What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students? */\nSELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\n\n/* Answer the following: Show the organizer and name for churches that opened between 1830 and 1840. */\nSELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840\n\n/* Answer the following: Return the names and ids of all products whose price is between 600 and 700. */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Answer the following: What are the names and ids of products costing between 600 and 700? */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the locations and names of all stations with capacity between 5000 and 10000? */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1329,
                    "db_id": "college_2",
                    "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
                    "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings."
                }
            ],
            "example_quality": 0.9530106516290726,
            "example_similarity": 0.3816001200406004,
            "db_id": "concert_singer",
            "pred": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
            "correct": 1
        },
        {
            "index": 17,
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each classroom report the grade that is taught in it. Report just the classroom number and the grade number. */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: What are the grade number and classroom number of each class in the list? */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: Report the first name and last name of all the teachers. */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: What are the first name and last name of all the teachers? */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: Report the first name and last name of all the students. */\nSELECT DISTINCT firstname ,  lastname FROM list\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the maximum capacity and the average of all stadiums ? */\nSELECT ",
            "response": "max(capacity), average from stadium",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4037,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT classroom ,  grade FROM list",
                    "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number."
                }
            ],
            "example_quality": 0.912833554474421,
            "example_similarity": 0.38716425863765186,
            "db_id": "concert_singer",
            "pred": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium",
            "correct": 0
        },
        {
            "index": 18,
            "question": "What is the average and maximum capacities for all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and largest salary of all employees? */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: Find the average and maximum rating of all reviews. */\nSELECT avg(rating) ,  max(rating) FROM review\n\n/* Answer the following: what are the average and maximum attendances of all events? */\nSELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event\n\n/* Answer the following: What are the maximum and average height of the mountains? */\nSELECT max(height) ,  avg(height) FROM mountain\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average and maximum capacities for all stadiums ? */\nSELECT ",
            "response": "avg(capacity) , max(capacity) from stadium",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 372,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is average and maximum salary of all employees."
                }
            ],
            "example_quality": 0.8898983570036202,
            "example_similarity": 0.3923747098773591,
            "db_id": "concert_singer",
            "pred": "SELECT avg(Capacity), max(Capacity) FROM stadium",
            "correct": 1
        },
        {
            "index": 19,
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: What is the id and name of the aircraft that can cover the maximum distance? */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the employee with maximum salary. */\nSELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.8956931803192191,
            "example_similarity": 0.39521591254529226,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 20,
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: What is the id and name of the aircraft that can cover the maximum distance? */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the employee with maximum salary. */\nSELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with the highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.9009085213032582,
            "example_similarity": 0.39964684624133573,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 21,
            "question": "How many concerts are there in year 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of audience in year 2008 or 2010. */\nSELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010\n\n/* Answer the following: Show all director names who have a movie in the year 1999 or 2000. */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: Which directors had a movie in either 1999 or 2000? */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Answer the following: Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason. */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts are there in year 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4618,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
                    "question": "Show the number of audience in year 2008 or 2010."
                }
            ],
            "example_quality": 0.893514010192471,
            "example_similarity": 0.39591082861986626,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';",
            "correct": 1
        },
        {
            "index": 22,
            "question": "How many concerts occurred in 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of audience in year 2008 or 2010. */\nSELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010\n\n/* Answer the following: Show all director names who have a movie in the year 1999 or 2000. */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: Which directors had a movie in either 1999 or 2000? */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Answer the following: Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason. */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts occurred in 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4618,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
                    "question": "Show the number of audience in year 2008 or 2010."
                }
            ],
            "example_quality": 0.8867917273644824,
            "example_similarity": 0.39093733699213606,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';",
            "correct": 1
        },
        {
            "index": 23,
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and the number of concerts in each stadium. */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8917138261747227,
            "example_similarity": 0.39906304874206383,
            "db_id": "concert_singer",
            "pred": "SELECT T2.Name, COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID",
            "correct": 1
        },
        {
            "index": 24,
            "question": "For each stadium, how many concerts play there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: For each stadium, how many concerts play there? */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8962257500841093,
            "example_similarity": 0.3926272805059445,
            "db_id": "concert_singer",
            "pred": "SELECT T1.Name, COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID;",
            "correct": 1
        },
        {
            "index": 25,
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and open year for the branch with most number of memberships registered in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and opening year for the branch that registered the most members in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the name and id of the team that won the most times in 2008 postseason. */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? */\nSELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and capacity with most number of concerts in year 2014 or after. */\nSELECT ",
            "response": "T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5429,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and open year for the branch with most number of memberships registered in 2016?"
                }
            ],
            "example_quality": 0.8920804748964541,
            "example_similarity": 0.3963892072918551,
            "db_id": "concert_singer",
            "pred": "SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= 2014 GROUP BY T1.Stadium_ID ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 26,
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and open year for the branch with most number of memberships registered in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and opening year for the branch that registered the most members in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the name and id of the team that won the most times in 2008 postseason. */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"? */\nSELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity of the stadium with the most concerts after 2013 ? */\nSELECT ",
            "response": "t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5429,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and open year for the branch with most number of memberships registered in 2016?"
                }
            ],
            "example_quality": 0.8707478203785697,
            "example_similarity": 0.4050349279676358,
            "db_id": "concert_singer",
            "pred": "SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2013 GROUP BY T1.Stadium_ID ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 27,
            "question": "Which year has most number of concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year has the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In what year was the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Which year has most number of concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                }
            ],
            "example_quality": 0.8706962619311011,
            "example_similarity": 0.4042881452603825,
            "db_id": "concert_singer",
            "pred": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 28,
            "question": "What is the year that had the most concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year has the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In what year was the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the year that had the most concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                }
            ],
            "example_quality": 0.8706483862298803,
            "example_similarity": 0.40155350307925286,
            "db_id": "concert_singer",
            "pred": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 29,
            "question": "Show the stadium names without any concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium names without any concert. */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8751087867047119,
            "example_similarity": 0.3993905491395489,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
            "correct": 1
        },
        {
            "index": 30,
            "question": "What are the names of the stadiums without any concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the stadiums without any concerts? */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8792718271478882,
            "example_similarity": 0.3977873814418067,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
            "correct": 1
        },
        {
            "index": 31,
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Answer the following: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Answer the following: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show countries where a singer above age 40 and a singer below 30 are from. */\nSELECT ",
            "response": "country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                }
            ],
            "example_quality": 0.883166284336666,
            "example_similarity": 0.39464167716562315,
            "db_id": "concert_singer",
            "pred": "SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30",
            "correct": 1
        },
        {
            "index": 32,
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all church names except for those that had a wedding in year 2015. */\nSELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015\n\n/* Answer the following: Show all artist names who didn't have an exhibition in 2004. */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: What are the names of artists who did not have an exhibition in 2004? */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: Show the names of buildings except for those having an institution founded in 2003. */\nSELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003\n\n/* Answer the following: What are the names for tracks without a race in class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show names for all stadiums except for stadiums having a concert in year 2014. */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1643,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
                    "question": "Show all church names except for those that had a wedding in year 2015."
                }
            ],
            "example_quality": 0.8852965046178118,
            "example_similarity": 0.396522783902067,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium EXCEPT SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014'",
            "correct": 1
        },
        {
            "index": 33,
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all church names except for those that had a wedding in year 2015. */\nSELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015\n\n/* Answer the following: Show all artist names who didn't have an exhibition in 2004. */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: What are the names of artists who did not have an exhibition in 2004? */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: Show the names of buildings except for those having an institution founded in 2003. */\nSELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003\n\n/* Answer the following: What are the names for tracks without a race in class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of all stadiums that did not have a concert in 2014? */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1643,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
                    "question": "Show all church names except for those that had a wedding in year 2015."
                }
            ],
            "example_quality": 0.8872976206394945,
            "example_similarity": 0.397547901152845,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium EXCEPT SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014'",
            "correct": 1
        },
        {
            "index": 34,
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the album names, ids and the number of tracks for each album. */\nSELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n\n/* Answer the following: What are the names and ids of the different albums, and how many tracks are on each? */\nSELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Answer the following: Show the account name, id and the number of transactions for each account. */\nSELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n\n/* Answer the following: Return the names and ids of each account, as well as the number of transactions. */\nSELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and theme for all concerts and the number of singers in each concert. */\nSELECT ",
            "response": "T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 834,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
                    "question": "Show the album names, ids and the number of tracks for each album."
                }
            ],
            "example_quality": 0.8841545959915297,
            "example_similarity": 0.40167978748991634,
            "db_id": "concert_singer",
            "pred": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme",
            "correct": 1
        },
        {
            "index": 35,
            "question": "What are the names , themes , and number of singers for every concert ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the album names, ids and the number of tracks for each album. */\nSELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n\n/* Answer the following: What are the names and ids of the different albums, and how many tracks are on each? */\nSELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Answer the following: Show the account name, id and the number of transactions for each account. */\nSELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n\n/* Answer the following: Return the names and ids of each account, as well as the number of transactions. */\nSELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names , themes , and number of singers for every concert ? */\nSELECT ",
            "response": "t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 834,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
                    "question": "Show the album names, ids and the number of tracks for each album."
                }
            ],
            "example_quality": 0.87087333167256,
            "example_similarity": 0.40232673588638906,
            "db_id": "concert_singer",
            "pred": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme",
            "correct": 1
        },
        {
            "index": 36,
            "question": "List singer names and number of concerts for each singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Find the name of each user and number of tweets tweeted by each of them. */\nSELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List singer names and number of concerts for each singer. */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8716824057927667,
            "example_similarity": 0.40346527566099977,
            "db_id": "concert_singer",
            "pred": "SELECT T2.Name, COUNT(*) FROM singer AS T2 JOIN singer_in_concert AS T1 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID",
            "correct": 1
        },
        {
            "index": 37,
            "question": "What are the names of the singers and number of concerts for each person?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Find the name of each user and number of tweets tweeted by each of them. */\nSELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers and number of concerts for each person? */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8724477461767458,
            "example_similarity": 0.4026781988686331,
            "db_id": "concert_singer",
            "pred": "SELECT T2.Name, COUNT(*) FROM singer AS T1 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID GROUP BY T1.Singer_ID",
            "correct": 0
        },
        {
            "index": 38,
            "question": "List all singer names in concerts in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors that are on the committee of journals with sales bigger than 3000. */\nSELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000\n\n/* Answer the following: Show the names of players coached by the rank 1 coach. */\nSELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1\n\n/* Answer the following: Show the fleet series of the aircrafts flied by pilots younger than 34 */\nSELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34\n\n/* Answer the following: Show the host names for parties with number of hosts greater than 20. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all singer names in concerts in year 2014. */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 662,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
                    "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000."
                }
            ],
            "example_quality": 0.8720449859390121,
            "example_similarity": 0.4002106287381568,
            "db_id": "concert_singer",
            "pred": "SELECT T2.Name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T1.concert_ID = T3.concert_ID WHERE T3.Year = '2014'",
            "correct": 1
        },
        {
            "index": 39,
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors that are on the committee of journals with sales bigger than 3000. */\nSELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000\n\n/* Answer the following: Show the names of players coached by the rank 1 coach. */\nSELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1\n\n/* Answer the following: Show the fleet series of the aircrafts flied by pilots younger than 34 */\nSELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34\n\n/* Answer the following: Show the host names for parties with number of hosts greater than 20. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who performed in a concert in 2014? */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 662,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
                    "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000."
                }
            ],
            "example_quality": 0.8716628800724441,
            "example_similarity": 0.3973459249112087,
            "db_id": "concert_singer",
            "pred": "SELECT T2.Name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T1.concert_ID = T3.concert_ID WHERE T3.Year = '2014'",
            "correct": 1
        },
        {
            "index": 40,
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019. */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Answer the following: What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it? */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: what is the name and nation of the singer who have a song having 'Hey' in its name? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                }
            ],
            "example_quality": 0.874871308070633,
            "example_similarity": 0.3962493550235044,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
            "correct": 1
        },
        {
            "index": 41,
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019. */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Answer the following: What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it? */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                }
            ],
            "example_quality": 0.8779232273859834,
            "example_similarity": 0.39408169093254064,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
            "correct": 1
        },
        {
            "index": 42,
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome. */\nSELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'\n\n/* Answer the following: What is the id and name of the department store that has both marketing and managing department? */\nSELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"\n\n/* Answer the following: What are the ids and names of department stores with both marketing and managing departments? */\nSELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"\n\n/* Answer the following: What are the names of reviewers who had rated 3 star and 4 star? */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4\n\n/* Answer the following: What are the names of all reviewers that have given 3 or 4 stars for reviews? */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4631,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
                    "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome."
                }
            ],
            "example_quality": 0.8751891500355652,
            "example_similarity": 0.39295656497727116,
            "db_id": "concert_singer",
            "pred": "SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'",
            "correct": 1
        },
        {
            "index": 43,
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome. */\nSELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'\n\n/* Answer the following: What is the id and name of the department store that has both marketing and managing department? */\nSELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"\n\n/* Answer the following: What are the ids and names of department stores with both marketing and managing departments? */\nSELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"\n\n/* Answer the following: What are the names of reviewers who had rated 3 star and 4 star? */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4\n\n/* Answer the following: What are the names of all reviewers that have given 3 or 4 stars for reviews? */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4631,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
                    "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome."
                }
            ],
            "example_quality": 0.8725822390735388,
            "example_similarity": 0.39584957120043285,
            "db_id": "concert_singer",
            "pred": "SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'",
            "correct": 1
        },
        {
            "index": 44,
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: Find the number of people whose age is greater than all engineers. */\nSELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\n\n/* Answer the following: How many people are older than every engineer? */\nSELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\n\n/* Answer the following: What are all the customer phone numbers under the most popular policy type? */\nSELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the number of concerts happened in the stadium with the highest capacity . */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                }
            ],
            "example_quality": 0.8567777739438314,
            "example_similarity": 0.395103937653763,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
            "correct": 1
        },
        {
            "index": 45,
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: Find the number of people whose age is greater than all engineers. */\nSELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\n\n/* Answer the following: How many people are older than every engineer? */\nSELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\n\n/* Answer the following: What are all the customer phone numbers under the most popular policy type? */\nSELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the number of concerts that occurred in the stadium with the largest capacity ? */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                }
            ],
            "example_quality": 0.8416757294865556,
            "example_similarity": 0.39505710401403477,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
            "correct": 1
        },
        {
            "index": 46,
            "question": "Find the number of pets whose weight is heavier than 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets whose weight is heavier than 10. */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8451175614542392,
            "example_similarity": 0.39186816725442297,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Pets WHERE weight > 10",
            "correct": 1
        },
        {
            "index": 47,
            "question": "How many pets have a greater weight than 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets have a greater weight than 10? */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8484129324871277,
            "example_similarity": 0.39288822893255987,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Pets WHERE weight > 10",
            "correct": 1
        },
        {
            "index": 48,
            "question": "Find the weight of the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the trip that has the shortest duration? */\nSELECT id FROM trip ORDER BY duration LIMIT 1\n\n/* Answer the following: What is the id of the shortest trip? */\nSELECT id FROM trip ORDER BY duration LIMIT 1\n\n/* Answer the following: Show the name of aircrafts with top three lowest distances. */\nSELECT name FROM Aircraft ORDER BY distance LIMIT 3\n\n/* Answer the following: What are the aircrafts with top 3 shortest lengthes? List their names. */\nSELECT name FROM Aircraft ORDER BY distance LIMIT 3\n\n/* Answer the following: Which department has the lowest budget? */\nSELECT dept_name FROM department ORDER BY budget LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the weight of the youngest dog. */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 120,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                    "question": "What is the id of the trip that has the shortest duration?"
                }
            ],
            "example_quality": 0.8515709963936459,
            "example_similarity": 0.39119693977159714,
            "db_id": "pets_1",
            "pred": "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1",
            "correct": 1
        },
        {
            "index": 49,
            "question": "How much does the youngest dog weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the trip that has the shortest duration? */\nSELECT id FROM trip ORDER BY duration LIMIT 1\n\n/* Answer the following: What is the id of the shortest trip? */\nSELECT id FROM trip ORDER BY duration LIMIT 1\n\n/* Answer the following: Show the name of aircrafts with top three lowest distances. */\nSELECT name FROM Aircraft ORDER BY distance LIMIT 3\n\n/* Answer the following: What are the aircrafts with top 3 shortest lengthes? List their names. */\nSELECT name FROM Aircraft ORDER BY distance LIMIT 3\n\n/* Answer the following: Which department has the lowest budget? */\nSELECT dept_name FROM department ORDER BY budget LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How much does the youngest dog weigh? */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 120,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                    "question": "What is the id of the trip that has the shortest duration?"
                }
            ],
            "example_quality": 0.8546001597325511,
            "example_similarity": 0.38691330498694415,
            "db_id": "pets_1",
            "pred": "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1",
            "correct": 1
        },
        {
            "index": 50,
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: What are the total enrollments of universities of each affiliation type? */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: Find the total credits of courses provided by different department. */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the maximum weight for each type of pet. List the maximum weight and pet type. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                }
            ],
            "example_quality": 0.8535081565379,
            "example_similarity": 0.3853642916634146,
            "db_id": "pets_1",
            "pred": "SELECT max(weight) , PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 51,
            "question": "List the maximum weight and type for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: What are the total enrollments of universities of each affiliation type? */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: Find the total credits of courses provided by different department. */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: List the maximum weight and type for each type of pet. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                }
            ],
            "example_quality": 0.8524589769979413,
            "example_similarity": 0.38414863914201225,
            "db_id": "pets_1",
            "pred": "SELECT MAX(weight), PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 52,
            "question": "Find number of pets owned by students who are older than 20.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many students are attending English courses? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many courses do the student whose id is 171 attend? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n\n/* Answer the following: How many courses does the student with id 171 actually attend? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n\n/* Answer the following: How many tracks belong to rock genre? */\nSELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find number of pets owned by students who are older than 20. */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                }
            ],
            "example_quality": 0.8514501505172115,
            "example_similarity": 0.3800348524095747,
            "db_id": "pets_1",
            "pred": "SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
            "correct": 1
        },
        {
            "index": 53,
            "question": "How many pets are owned by students that have an age greater than 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many students are attending English courses? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many courses do the student whose id is 171 attend? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n\n/* Answer the following: How many courses does the student with id 171 actually attend? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n\n/* Answer the following: How many tracks belong to rock genre? */\nSELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets are owned by students that have an age greater than 20? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                }
            ],
            "example_quality": 0.850479392960283,
            "example_similarity": 0.3794186089599569,
            "db_id": "pets_1",
            "pred": "SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
            "correct": 1
        },
        {
            "index": 54,
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Annual Meeting events happened in the United Kingdom region? */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: Count the number of Annual Meeting events that took place in the region of the United Kingdom. */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: How many papers have \"Atsushi Ohori\" published? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Answer the following: How many papers are \"Atsushi Ohori\" the author of? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Answer the following: How many clubs does \"Linda Smith\" belong to? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of dog pets that are raised by female students (with sex F). */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2082,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
                    "question": "How many Annual Meeting events happened in the United Kingdom region?"
                }
            ],
            "example_quality": 0.852531447212512,
            "example_similarity": 0.37674177481657606,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Student AS s JOIN Has_Pet AS hp ON s.StuID = hp.StuID JOIN Pets AS p ON hp.PetID = p.PetID WHERE s.Sex = \"F\" AND p.PetType = \"Dog\"",
            "correct": 0
        },
        {
            "index": 55,
            "question": "How many dog pets are raised by female students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Annual Meeting events happened in the United Kingdom region? */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: Count the number of Annual Meeting events that took place in the region of the United Kingdom. */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: How many papers have \"Atsushi Ohori\" published? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Answer the following: How many papers are \"Atsushi Ohori\" the author of? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Answer the following: How many clubs does \"Linda Smith\" belong to? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many dog pets are raised by female students? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2082,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
                    "question": "How many Annual Meeting events happened in the United Kingdom region?"
                }
            ],
            "example_quality": 0.8545088813101145,
            "example_similarity": 0.3764018810753223,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID JOIN Pets AS t3 ON t2.PetID = t3.PetID WHERE t1.Sex = \"F\" AND t3.PetType = \"Dog\"",
            "correct": 0
        },
        {
            "index": 56,
            "question": "Find the number of distinct type of pets.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of distinct type of pets. */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8571069370010052,
            "example_similarity": 0.3731787955366396,
            "db_id": "pets_1",
            "pred": "SELECT count(DISTINCT PetType) FROM Pets",
            "correct": 1
        },
        {
            "index": 57,
            "question": "How many different types of pet are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many different types of pet are there? */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8596138328430928,
            "example_similarity": 0.3733238851232813,
            "db_id": "pets_1",
            "pred": "SELECT count(DISTINCT PetType) FROM Pets",
            "correct": 1
        },
        {
            "index": 58,
            "question": "Find the first name of students who have cat or dog pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first names of the faculty members who are playing Canoeing or Kayaking. */\nSELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n\n/* Answer the following: Which faculty members are playing either Canoeing or Kayaking? Tell me their first names. */\nSELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n\n/* Answer the following: Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\". */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\n\n/* Answer the following: Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names. */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\n\n/* Answer the following: List the clubs having \"Davis Steven\" as a member. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have cat or dog pet. */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6796,
                    "db_id": "activity_1",
                    "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
                    "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking."
                }
            ],
            "example_quality": 0.860593602722467,
            "example_similarity": 0.37413161372313464,
            "db_id": "pets_1",
            "pred": "SELECT DISTINCT Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' OR P.PetType = 'dog'",
            "correct": 1
        },
        {
            "index": 59,
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first names of the faculty members who are playing Canoeing or Kayaking. */\nSELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n\n/* Answer the following: Which faculty members are playing either Canoeing or Kayaking? Tell me their first names. */\nSELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n\n/* Answer the following: Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\". */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\n\n/* Answer the following: Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names. */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\n\n/* Answer the following: List the clubs having \"Davis Steven\" as a member. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the first names of every student who has a cat or dog as a pet? */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6796,
                    "db_id": "activity_1",
                    "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
                    "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking."
                }
            ],
            "example_quality": 0.8615401600635574,
            "example_similarity": 0.3736522184676083,
            "db_id": "pets_1",
            "pred": "SELECT DISTINCT Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' OR P.PetType = 'dog'",
            "correct": 1
        },
        {
            "index": 60,
            "question": "Find the first name of students who have both cat and dog pets .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks? */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: Find the titles of albums that contain tracks of both the Reggae and Rock genres. */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\". */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"\n\n/* Answer the following: Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names. */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"\n\n/* Answer the following: For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date. */\nSELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have both cat and dog pets . */\nSELECT ",
            "response": "t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 890,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
                    "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?"
                }
            ],
            "example_quality": 0.856376987626658,
            "example_similarity": 0.3746514888131724,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) )",
            "correct": 1
        },
        {
            "index": 61,
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks? */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: Find the titles of albums that contain tracks of both the Reggae and Rock genres. */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\". */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"\n\n/* Answer the following: Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names. */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"\n\n/* Answer the following: For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date. */\nSELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the students' first names who have both cats and dogs as pets? */\nSELECT ",
            "response": "T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 890,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
                    "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?"
                }
            ],
            "example_quality": 0.8587314632393358,
            "example_similarity": 0.3750858671949233,
            "db_id": "pets_1",
            "pred": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog'",
            "correct": 1
        },
        {
            "index": 62,
            "question": "Find the major and age of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first and last name of the students who do not have any food type allergy. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What is the full name of each student who is not allergic to any type of food. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\". */\nSELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"\n\n/* Answer the following: What are the first and last name of the author who published the paper titled \"Nameless, Painless\"? */\nSELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the major and age of students who do not have a cat pet. */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 528,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "List the first and last name of the students who do not have any food type allergy."
                }
            ],
            "example_quality": 0.8539675516688454,
            "example_similarity": 0.37573171135513755,
            "db_id": "pets_1",
            "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 1
        },
        {
            "index": 63,
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first and last name of the students who do not have any food type allergy. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What is the full name of each student who is not allergic to any type of food. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\". */\nSELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"\n\n/* Answer the following: What are the first and last name of the author who published the paper titled \"Nameless, Painless\"? */\nSELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What major is every student who does not own a cat as a pet, and also how old are they? */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 528,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "List the first and last name of the students who do not have any food type allergy."
                }
            ],
            "example_quality": 0.8493548753863075,
            "example_similarity": 0.372973568478518,
            "db_id": "pets_1",
            "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 1
        },
        {
            "index": 64,
            "question": "Find the id of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all employees who do not have certificate of Boeing 737-800. */\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\n\n/* Answer the following: What are the names of all employees who are not certified to fly Boeing 737-800s? */\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\n\n/* Answer the following: Find the names of customers who are not living in the state of California. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: Find the name of dorms that do not have amenity TV Lounge. */\nSELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\n\n/* Answer the following: What are the names of the dorm that does not have a TV Lounge? */\nSELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of students who do not have a cat pet. */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 430,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
                    "question": "Show names for all employees who do not have certificate of Boeing 737-800."
                }
            ],
            "example_quality": 0.84895135251722,
            "example_similarity": 0.373848239726975,
            "db_id": "pets_1",
            "pred": "SELECT StuID FROM Student EXCEPT SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType <> 'Cat'",
            "correct": 0
        },
        {
            "index": 65,
            "question": "What are the ids of the students who do not own cats as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all employees who do not have certificate of Boeing 737-800. */\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\n\n/* Answer the following: What are the names of all employees who are not certified to fly Boeing 737-800s? */\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\n\n/* Answer the following: Find the names of customers who are not living in the state of California. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: Find the name of dorms that do not have amenity TV Lounge. */\nSELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\n\n/* Answer the following: What are the names of the dorm that does not have a TV Lounge? */\nSELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the ids of the students who do not own cats as pets? */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 430,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
                    "question": "Show names for all employees who do not have certificate of Boeing 737-800."
                }
            ],
            "example_quality": 0.8485602457364121,
            "example_similarity": 0.37421474076892025,
            "db_id": "pets_1",
            "pred": "SELECT StuID FROM Student EXCEPT SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType <> 'Cat'",
            "correct": 0
        },
        {
            "index": 66,
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured. */\nSELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'\n\n/* Answer the following: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix? */\nSELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n\n/* Answer the following: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix? */\nSELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n\n/* Answer the following: Find the name of tracks which are in Movies playlist but not in music playlist. */\nSELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n\n/* Answer the following: What are the names of all tracks that are on the Movies playlist but not in the music playlist? */\nSELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a dog but do not have a cat as a pet. */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1289,
                    "db_id": "game_injury",
                    "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
                    "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured."
                }
            ],
            "example_quality": 0.8444939395792634,
            "example_similarity": 0.3738775124535983,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 0
        },
        {
            "index": 67,
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured. */\nSELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'\n\n/* Answer the following: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix? */\nSELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n\n/* Answer the following: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix? */\nSELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n\n/* Answer the following: Find the name of tracks which are in Movies playlist but not in music playlist. */\nSELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n\n/* Answer the following: What are the names of all tracks that are on the Movies playlist but not in the music playlist? */\nSELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name of every student who has a dog but does not have a cat? */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1289,
                    "db_id": "game_injury",
                    "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
                    "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured."
                }
            ],
            "example_quality": 0.8405490156954628,
            "example_similarity": 0.3733246796446949,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 0
        },
        {
            "index": 68,
            "question": "Find the type and weight of the youngest pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the type and weight of the youngest pet. */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.842893883111706,
            "example_similarity": 0.3729345762204736,
            "db_id": "pets_1",
            "pred": "SELECT PetType, weight FROM Pets ORDER BY pet_age DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 69,
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What type of pet is the youngest animal, and how much does it weigh? */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.8451707833564637,
            "example_similarity": 0.369941561295779,
            "db_id": "pets_1",
            "pred": "SELECT PetType, weight FROM Pets ORDER BY pet_age LIMIT 1",
            "correct": 1
        },
        {
            "index": 70,
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email of the users who have more than 1000 followers. */\nSELECT name ,  email FROM user_profiles WHERE followers  >  1000\n\n/* Answer the following: Find the name and capacity of products with price greater than 700 (in USD). */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Show origin and destination for flights with price higher than 300. */\nSELECT origin ,  destination FROM Flight WHERE price  >  300\n\n/* Answer the following: What is the origin and destination for all flights whose price is higher than 300? */\nSELECT origin ,  destination FROM Flight WHERE price  >  300\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id and weight of all pets whose age is older than 1. */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 285,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
                    "question": "Find the name and email of the users who have more than 1000 followers."
                }
            ],
            "example_quality": 0.8473826293085142,
            "example_similarity": 0.37040383945299693,
            "db_id": "pets_1",
            "pred": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
            "correct": 1
        },
        {
            "index": 71,
            "question": "What is the id and weight of every pet who is older than 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email of the users who have more than 1000 followers. */\nSELECT name ,  email FROM user_profiles WHERE followers  >  1000\n\n/* Answer the following: Find the name and capacity of products with price greater than 700 (in USD). */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Show origin and destination for flights with price higher than 300. */\nSELECT origin ,  destination FROM Flight WHERE price  >  300\n\n/* Answer the following: What is the origin and destination for all flights whose price is higher than 300? */\nSELECT origin ,  destination FROM Flight WHERE price  >  300\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id and weight of every pet who is older than 1? */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 285,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
                    "question": "Find the name and email of the users who have more than 1000 followers."
                }
            ],
            "example_quality": 0.8495321697407888,
            "example_similarity": 0.3695031790446019,
            "db_id": "pets_1",
            "pred": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
            "correct": 1
        },
        {
            "index": 72,
            "question": "Find the average and maximum age for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Answer the following: What are the greatest and average capacity for rooms in each building? */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Answer the following: Find the average and oldest age for students with different sex. */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: What is the average and oldest age for each gender of student? */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: Find the average and minimum weight for each gender. */\nSELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average and maximum age for each type of pet. */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                }
            ],
            "example_quality": 0.851159037753648,
            "example_similarity": 0.37140148404568124,
            "db_id": "pets_1",
            "pred": "SELECT avg(pet_age), max(pet_age), PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 73,
            "question": "What is the average and maximum age for each pet type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Answer the following: What are the greatest and average capacity for rooms in each building? */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Answer the following: Find the average and oldest age for students with different sex. */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: What is the average and oldest age for each gender of student? */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: Find the average and minimum weight for each gender. */\nSELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average and maximum age for each pet type? */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                }
            ],
            "example_quality": 0.8527413340401279,
            "example_similarity": 0.3738183011361878,
            "db_id": "pets_1",
            "pred": "SELECT avg(pet_age), max(pet_age), PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 74,
            "question": "Find the average weight for each pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What is the average high temperature for each day of week? */\nSELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week\n\n/* Answer the following: What is the average rating of songs for each language? */\nSELECT avg(rating) ,  languages FROM song GROUP BY languages\n\n/* Answer the following: What is the average song rating for each language? */\nSELECT avg(rating) ,  languages FROM song GROUP BY languages\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average weight for each pet type. */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                }
            ],
            "example_quality": 0.8547313160125585,
            "example_similarity": 0.37529823400371687,
            "db_id": "pets_1",
            "pred": "SELECT avg(weight), PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 75,
            "question": "What is the average weight for each type of pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What is the average high temperature for each day of week? */\nSELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week\n\n/* Answer the following: What is the average rating of songs for each language? */\nSELECT avg(rating) ,  languages FROM song GROUP BY languages\n\n/* Answer the following: What is the average song rating for each language? */\nSELECT avg(rating) ,  languages FROM song GROUP BY languages\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average weight for each type of pet? */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                }
            ],
            "example_quality": 0.8566682317990577,
            "example_similarity": 0.3783085432646197,
            "db_id": "pets_1",
            "pred": "SELECT avg(weight), PetType FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 76,
            "question": "Find the first name and age of students who have a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: Find the name and credit score of the customers who have some loans. */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the different names and credit scores of customers who have taken a loan? */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the distinct names and nationalities of the architects who have ever built a mill? */\nSELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a pet. */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 688,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show distinct first and last names for all customers with an account."
                }
            ],
            "example_quality": 0.8582617784566725,
            "example_similarity": 0.3794042589402069,
            "db_id": "pets_1",
            "pred": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID;",
            "correct": 1
        },
        {
            "index": 77,
            "question": "What are the different first names and ages of the students who do have pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: Find the name and credit score of the customers who have some loans. */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the different names and credit scores of customers who have taken a loan? */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the distinct names and nationalities of the architects who have ever built a mill? */\nSELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the different first names and ages of the students who do have pets? */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 688,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show distinct first and last names for all customers with an account."
                }
            ],
            "example_quality": 0.8598139342920114,
            "example_similarity": 0.38023020018912623,
            "db_id": "pets_1",
            "pred": "SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
            "correct": 0
        },
        {
            "index": 78,
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What is the name of the language that the film 'AIRPORT POLLOCK' is in? */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What are the monthly rentals of student addresses in Texas state? */\nSELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                }
            ],
            "example_quality": 0.8616111915446779,
            "example_similarity": 0.37965718370415025,
            "db_id": "pets_1",
            "pred": "SELECT T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'",
            "correct": 1
        },
        {
            "index": 79,
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What is the name of the language that the film 'AIRPORT POLLOCK' is in? */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What are the monthly rentals of student addresses in Texas state? */\nSELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id of the pet owned by the student whose last name is 'Smith'? */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                }
            ],
            "example_quality": 0.8633629486137328,
            "example_similarity": 0.3801595230413381,
            "db_id": "pets_1",
            "pred": "SELECT T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'",
            "correct": 1
        },
        {
            "index": 80,
            "question": "Find the number of pets for each student who has any pet and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets does each maintenance contract contain? List the number and the contract id. */\nSELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id\n\n/* Answer the following: How many assets does each third party company supply? List the count and the company id. */\nSELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n\n/* Answer the following: List the id of students who registered some courses and the number of their registered courses? */\nSELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\n\n/* Answer the following: For every student who is registered for some course, how many courses are they registered for? */\nSELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\n\n/* Answer the following: How many residents does each property have? List property id and resident count. */\nSELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets for each student who has any pet and student id. */\nSELECT ",
            "response": "count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3128,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
                    "question": "How many assets does each maintenance contract contain? List the number and the contract id."
                }
            ],
            "example_quality": 0.8638209117560612,
            "example_similarity": 0.3793456287034714,
            "db_id": "pets_1",
            "pred": "SELECT T1.StuID, count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
            "correct": 1
        },
        {
            "index": 81,
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets does each maintenance contract contain? List the number and the contract id. */\nSELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id\n\n/* Answer the following: How many assets does each third party company supply? List the count and the company id. */\nSELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n\n/* Answer the following: Find number of tracks in each genre? */\nSELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\n\n/* Answer the following: How many tracks are in each genre? */\nSELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\n\n/* Answer the following: Find the number of checking accounts for each account name. */\nSELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: For students who have pets , how many pets does each student have ? list their ids instead of names . */\nSELECT ",
            "response": "count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3128,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
                    "question": "How many assets does each maintenance contract contain? List the number and the contract id."
                }
            ],
            "example_quality": 0.8585978404597164,
            "example_similarity": 0.3790184890122788,
            "db_id": "pets_1",
            "pred": "SELECT count(*) , StuID FROM Has_Pet GROUP BY StuID",
            "correct": 1
        },
        {
            "index": 82,
            "question": "Find the first name and gender of student who have more than one pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and details of events that have more than one participants? */\nSELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1\n\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the customers that had more than 1 policy? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Answer the following: Find the the customer details and id for the customers who had more than one policy. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and gender of student who have more than one pet. */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2140,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
                    "question": "What are the ids and details of events that have more than one participants?"
                }
            ],
            "example_quality": 0.8595092489093947,
            "example_similarity": 0.37973287748390105,
            "db_id": "pets_1",
            "pred": "SELECT T1.Fname, T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 83,
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and details of events that have more than one participants? */\nSELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1\n\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the customers that had more than 1 policy? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Answer the following: Find the the customer details and id for the customers who had more than one policy. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name and gender of the all the students who have more than one pet? */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2140,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
                    "question": "What are the ids and details of events that have more than one participants?"
                }
            ],
            "example_quality": 0.8603986957096831,
            "example_similarity": 0.38039795396234916,
            "db_id": "pets_1",
            "pred": "SELECT T1.Fname, T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 84,
            "question": "Find the last name of the student who has a cat that is age 3.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"? */\nSELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"\n\n/* Answer the following: Who was the director of the movie Joy from 2015 ? */\nSELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";\n\n/* Answer the following: Who is the director of the tv series \" House of Cards \" from 2013 ? */\nSELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";\n\n/* Answer the following: List the clubs having \"Davis Steven\" as a member. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Answer the following: What are the names of the clubs that have \"Davis Steven\" as a member? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the last name of the student who has a cat that is age 3. */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5866,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"",
                    "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?"
                }
            ],
            "example_quality": 0.8604458743575162,
            "example_similarity": 0.3799702758291943,
            "db_id": "pets_1",
            "pred": "SELECT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = \"cat\" AND P.pet_age = 3;",
            "correct": 1
        },
        {
            "index": 85,
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"? */\nSELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"\n\n/* Answer the following: Who was the director of the movie Joy from 2015 ? */\nSELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";\n\n/* Answer the following: Who is the director of the tv series \" House of Cards \" from 2013 ? */\nSELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";\n\n/* Answer the following: List the clubs having \"Davis Steven\" as a member. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Answer the following: What are the names of the clubs that have \"Davis Steven\" as a member? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the last name of the student who has a cat that is 3 years old? */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5866,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"",
                    "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?"
                }
            ],
            "example_quality": 0.8604919429195178,
            "example_similarity": 0.3798277683824643,
            "db_id": "pets_1",
            "pred": "SELECT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = \"cat\" AND P.pet_age = 3;",
            "correct": 1
        },
        {
            "index": 86,
            "question": "Find the average age of students who do not have any pet .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who had some tweets. */\nSELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who do not have any loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average age of students who do not have any pet . */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 300,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who had some tweets."
                }
            ],
            "example_quality": 0.853648197357214,
            "example_similarity": 0.38274643774235806,
            "db_id": "pets_1",
            "pred": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
            "correct": 1
        },
        {
            "index": 87,
            "question": "What is the average age for all students who do not own any pets ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who had some tweets. */\nSELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who do not have any loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average age for all students who do not own any pets ? */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 300,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who had some tweets."
                }
            ],
            "example_quality": 0.8469617792791012,
            "example_similarity": 0.38299529888358314,
            "db_id": "pets_1",
            "pred": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
            "correct": 1
        },
        {
            "index": 88,
            "question": "How many continents are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many continents are there? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8487008499691118,
            "example_similarity": 0.38587448453676554,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM continents",
            "correct": 1
        },
        {
            "index": 89,
            "question": "What is the number of continents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of continents? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.850400840418897,
            "example_similarity": 0.38476205984386574,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM continents",
            "correct": 1
        },
        {
            "index": 90,
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Answer the following: Find the subject ID, subject name, and the corresponding number of available courses for each subject. */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Answer the following: What are the subject ID, subject name, and the number of available courses for each subject? */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries does each continent have? List the continent id, continent name and the number of countries. */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                }
            ],
            "example_quality": 0.8510529522930304,
            "example_similarity": 0.38776739609998395,
            "db_id": "car_1",
            "pred": "SELECT T1.ContId, T1.Continent, COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "correct": 1
        },
        {
            "index": 91,
            "question": "For each continent, list its id, name, and how many countries it has?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Answer the following: Find the subject ID, subject name, and the corresponding number of available courses for each subject. */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Answer the following: What are the subject ID, subject name, and the number of available courses for each subject? */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For each continent, list its id, name, and how many countries it has? */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                }
            ],
            "example_quality": 0.8516907320380619,
            "example_similarity": 0.38773066546619184,
            "db_id": "car_1",
            "pred": "SELECT T1.ContId, T1.Continent, COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "correct": 1
        },
        {
            "index": 92,
            "question": "How many countries are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries are listed? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8533027892985178,
            "example_similarity": 0.38856984372128833,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM countries",
            "correct": 1
        },
        {
            "index": 93,
            "question": "How many countries exist?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries exist? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8548801786608993,
            "example_similarity": 0.388508416830276,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM countries",
            "correct": 1
        },
        {
            "index": 94,
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of each county along with the corresponding number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: For each county, find the name of the county and the number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: How many patients do each physician take care of? List their names and number of patients they take care of. */\nSELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n\n/* Answer the following: Return the name of each physician and the number of patients he or she treats. */\nSELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many models does each car maker produce? List maker full name, id and the number. */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2775,
                    "db_id": "election",
                    "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
                    "question": "Show the name of each county along with the corresponding number of delegates from that county."
                }
            ],
            "example_quality": 0.8546834344461364,
            "example_similarity": 0.3879476505610233,
            "db_id": "car_1",
            "pred": "SELECT T1.FullName, T1.Id, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName",
            "correct": 1
        },
        {
            "index": 95,
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of each county along with the corresponding number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: For each county, find the name of the county and the number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: How many patients do each physician take care of? List their names and number of patients they take care of. */\nSELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n\n/* Answer the following: Return the name of each physician and the number of patients he or she treats. */\nSELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the full name of each car maker, along with its id and how many models it produces? */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2775,
                    "db_id": "election",
                    "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
                    "question": "Show the name of each county along with the corresponding number of delegates from that county."
                }
            ],
            "example_quality": 0.854490832214842,
            "example_similarity": 0.3867973655733819,
            "db_id": "car_1",
            "pred": "SELECT T1.Id, T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "correct": 1
        },
        {
            "index": 96,
            "question": "Which model of the car has the minimum horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total point count of the youngest gymnast? */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Return the total points of the gymnast with the lowest age. */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Which company started the earliest the maintenance contract? Show the company name. */\nSELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1\n\n/* Answer the following: What is the primary conference of the school that has the lowest acc percent score in the competition? */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Answer the following: Return the primary conference of the school with the lowest acc percentage score. */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model of the car has the minimum horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1755,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "What is the total point count of the youngest gymnast?"
                }
            ],
            "example_quality": 0.855411314617366,
            "example_similarity": 0.38693708139067606,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id ORDER BY T2.Horsepower ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 97,
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total point count of the youngest gymnast? */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Return the total points of the gymnast with the lowest age. */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Which company started the earliest the maintenance contract? Show the company name. */\nSELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1\n\n/* Answer the following: What is the primary conference of the school that has the lowest acc percent score in the competition? */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Answer the following: Return the primary conference of the school with the lowest acc percentage score. */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model of the car with the smallest amount of horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1755,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "What is the total point count of the youngest gymnast?"
                }
            ],
            "example_quality": 0.8563128180012812,
            "example_similarity": 0.3874326999051504,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.MakeId JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Horsepower ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 98,
            "question": "Find the model of the car whose weight is below the average weight.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of accounts whose checking balance is below the average checking balance. */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: What are the names of customers with checking balances lower than the average checking balance? */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: Find the names of furnitures whose prices are lower than the highest price. */\nSELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)\n\n/* Answer the following: Find the titles of items whose rating is higher than the average review rating of all items. */\nSELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\n\n/* Answer the following: Find the name and id of accounts whose checking balance is below the maximum checking balance. */\nSELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the model of the car whose weight is below the average weight. */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1809,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "Find the name of accounts whose checking balance is below the average checking balance."
                }
            ],
            "example_quality": 0.8555949307382145,
            "example_similarity": 0.38952679657256795,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 99,
            "question": "What is the model for the car with a weight smaller than the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of accounts whose checking balance is below the average checking balance. */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: What are the names of customers with checking balances lower than the average checking balance? */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: Find the names of furnitures whose prices are lower than the highest price. */\nSELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)\n\n/* Answer the following: Find the titles of items whose rating is higher than the average review rating of all items. */\nSELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\n\n/* Answer the following: Find the name and id of accounts whose checking balance is below the maximum checking balance. */\nSELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model for the car with a weight smaller than the average? */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1809,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "Find the name of accounts whose checking balance is below the average checking balance."
                }
            ],
            "example_quality": 0.8548915462481389,
            "example_similarity": 0.38880870185620675,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.MakeId JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight < (SELECT avg(Weight) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 100,
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of all the distinct customers who bought a keyboard. */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Answer the following: What are the distinct names of customers who have purchased a keyboard? */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Answer the following: semantic parsing dataset */\nSELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";\n\n/* Answer the following: data sets for semantic parsing */\nSELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";\n\n/* Answer the following: list datasets for semantic parsing */\nSELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the name of the makers that produced some cars in the year of 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4778,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
                    "question": "List the names of all the distinct customers who bought a keyboard."
                }
            ],
            "example_quality": 0.8546794291224559,
            "example_similarity": 0.3859650592820891,
            "db_id": "car_1",
            "pred": "SELECT T2.Maker FROM car_makers AS T2 JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.ModelId = T4.MakeId JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Year = 1970;",
            "correct": 0
        },
        {
            "index": 101,
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of all the distinct customers who bought a keyboard. */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Answer the following: What are the distinct names of customers who have purchased a keyboard? */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Answer the following: semantic parsing dataset */\nSELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";\n\n/* Answer the following: data sets for semantic parsing */\nSELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";\n\n/* Answer the following: list datasets for semantic parsing */\nSELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the different car makers who produced a car in 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4778,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
                    "question": "List the names of all the distinct customers who bought a keyboard."
                }
            ],
            "example_quality": 0.8544715123358952,
            "example_similarity": 0.383737068110365,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT T2.Maker FROM car_makers AS T2 JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.ModelId = T4.MakeId JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T5.Year = 1970;",
            "correct": 0
        },
        {
            "index": 102,
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and id of accounts whose checking balance is below the maximum checking balance. */\nSELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n\n/* Answer the following: What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance? */\nSELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n\n/* Answer the following: Which customer is associated with the latest policy? */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)\n\n/* Answer the following: Find the customer who started a policy most recently. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)\n\n/* Answer the following: Retrieve the title of the paper that has the largest number of authors. */\nSELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the make and production time of the cars that were produced in the earliest year? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1787,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
                    "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance."
                }
            ],
            "example_quality": 0.8524371381203468,
            "example_similarity": 0.3825051669629156,
            "db_id": "car_1",
            "pred": "SELECT t2.Make, t1.Year FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId WHERE t1.Year = (SELECT min(Year) FROM cars_data)",
            "correct": 1
        },
        {
            "index": 103,
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and id of accounts whose checking balance is below the maximum checking balance. */\nSELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n\n/* Answer the following: What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance? */\nSELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n\n/* Answer the following: Which customer is associated with the latest policy? */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)\n\n/* Answer the following: Find the customer who started a policy most recently. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)\n\n/* Answer the following: Retrieve the title of the paper that has the largest number of authors. */\nSELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maker of the carr produced in the earliest year and what year was it? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1787,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
                    "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance."
                }
            ],
            "example_quality": 0.8504422663167507,
            "example_similarity": 0.38117657350961487,
            "db_id": "car_1",
            "pred": "SELECT t2.Maker, t1.Year FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId WHERE t1.Year = (SELECT min(Year) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 104,
            "question": "Which distinct car models are the produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What distinct accelerator names are compatible with the browswers that have market share higher than 15? */\nSELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;\n\n/* Answer the following: List the clubs that have at least a member with advisor \"1121\". */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n\n/* Answer the following: Which clubs have one or more members whose advisor is \"1121\"? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n\n/* Answer the following: Show distinct types of artworks that are nominated in festivals in 2007. */\nSELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007\n\n/* Answer the following: Show the names of editors that are on the committee of journals with sales bigger than 3000. */\nSELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinct car models are the produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1839,
                    "db_id": "browser_web",
                    "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;",
                    "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?"
                }
            ],
            "example_quality": 0.8494646584331295,
            "example_similarity": 0.38000911254767367,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Year > 1980;",
            "correct": 0
        },
        {
            "index": 105,
            "question": "What are the different models for the cards produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What distinct accelerator names are compatible with the browswers that have market share higher than 15? */\nSELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;\n\n/* Answer the following: List the clubs that have at least a member with advisor \"1121\". */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n\n/* Answer the following: Which clubs have one or more members whose advisor is \"1121\"? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n\n/* Answer the following: Show distinct types of artworks that are nominated in festivals in 2007. */\nSELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007\n\n/* Answer the following: Show the names of editors that are on the committee of journals with sales bigger than 3000. */\nSELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models for the cards produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1839,
                    "db_id": "browser_web",
                    "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;",
                    "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?"
                }
            ],
            "example_quality": 0.8485056716520534,
            "example_similarity": 0.3780141076361524,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;",
            "correct": 0
        },
        {
            "index": 106,
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many registed students do each course have? List course name and the number of their registered students? */\nSELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\n\n/* Answer the following: For each course id, how many students are registered and what are the course names? */\nSELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\n\n/* Answer the following: Find the number of stores in each city. */\nSELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n\n/* Answer the following: How many stores are headquarted in each city? */\nSELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n\n/* Answer the following: List the name and phone number of all suppliers in the alphabetical order of their addresses. */\nSELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in each continents? List the continent name and the count. */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 82,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
                    "question": "How many registed students do each course have? List course name and the number of their registered students?"
                }
            ],
            "example_quality": 0.8474625863628757,
            "example_similarity": 0.3784250047412805,
            "db_id": "car_1",
            "pred": "SELECT T1.Continent, COUNT(DISTINCT T2.Maker) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "correct": 0
        },
        {
            "index": 107,
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many registed students do each course have? List course name and the number of their registered students? */\nSELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\n\n/* Answer the following: For each course id, how many students are registered and what are the course names? */\nSELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\n\n/* Answer the following: Find the number of stores in each city. */\nSELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n\n/* Answer the following: How many stores are headquarted in each city? */\nSELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n\n/* Answer the following: List the name and phone number of all suppliers in the alphabetical order of their addresses. */\nSELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of each continent and how many car makers are there in each one? */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 82,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
                    "question": "How many registed students do each course have? List course name and the number of their registered students?"
                }
            ],
            "example_quality": 0.846438997994991,
            "example_similarity": 0.3782874615269989,
            "db_id": "car_1",
            "pred": "SELECT T1.Continent, COUNT(T2.Id) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "correct": 0
        },
        {
            "index": 108,
            "question": "Which of the countries has the most car makers? List the country name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Give the building that the instructor who teaches the greatest number of courses lives in. */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which of the countries has the most car makers? List the country name. */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2577,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
                }
            ],
            "example_quality": 0.8477065381370128,
            "example_similarity": 0.3783649114399451,
            "db_id": "car_1",
            "pred": "SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 109,
            "question": "What is the name of the country with the most car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Give the building that the instructor who teaches the greatest number of courses lives in. */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the country with the most car makers? */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2577,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
                }
            ],
            "example_quality": 0.8489508206617495,
            "example_similarity": 0.3778602093898276,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 110,
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of products for each manufacturer, showing the name of each company. */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: Find number of tracks in each genre? */\nSELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\n\n/* Answer the following: How many tracks are in each genre? */\nSELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\n\n/* Answer the following: Find the number of scientists involved for each project name. */\nSELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced by each maker ? Only list the count and the maker full name . */\nSELECT ",
            "response": "count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5321,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Find the number of products for each manufacturer, showing the name of each company."
                }
            ],
            "example_quality": 0.845133629829005,
            "example_similarity": 0.37698079245826055,
            "db_id": "car_1",
            "pred": "SELECT count(*), T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName",
            "correct": 1
        },
        {
            "index": 111,
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of trains for each station, as well as the station network name and services. */\nSELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id\n\n/* Answer the following: Find the average prices of all products from each manufacture, and list each company's name. */\nSELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: What are the average prices of products for each manufacturer? */\nSELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: Select the average price of each manufacturer's products, showing the manufacturer's name. */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: What are the average prices of products, grouped by manufacturer name? */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models that are produced by each maker and what is the id and full name of each maker? */\nSELECT ",
            "response": "Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3165,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
                    "question": "Find the number of trains for each station, as well as the station network name and services."
                }
            ],
            "example_quality": 0.8443033737639829,
            "example_similarity": 0.3764229431911548,
            "db_id": "car_1",
            "pred": "SELECT count(*) , t1.Id , t1.FullName FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker GROUP BY t1.Id, t1.FullName",
            "correct": 1
        },
        {
            "index": 112,
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the accelerate of the car make amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8456935222125188,
            "example_similarity": 0.3769047050673182,
            "db_id": "car_1",
            "pred": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = \"amc\" AND T3.Model = \"hornet sportabout (sw)\";",
            "correct": 0
        },
        {
            "index": 113,
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How much does the car accelerate that makes amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8470590662637354,
            "example_similarity": 0.3760144974927166,
            "db_id": "car_1",
            "pred": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = \"amc hornet sportabout (sw)\";",
            "correct": 0
        },
        {
            "index": 114,
            "question": "How many car makers are there in france?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in france? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.84821598119494,
            "example_similarity": 0.3755342995307152,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = \"France\";",
            "correct": 0
        },
        {
            "index": 115,
            "question": "What is the number of makers of care in France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of makers of care in France? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8493527758664714,
            "example_similarity": 0.3750498670252612,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = \"France\";",
            "correct": 0
        },
        {
            "index": 116,
            "question": "How many car models are produced in the usa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Hom many musicians performed in the song \"Flash\"? */\nSELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n\n/* Answer the following: How many musicians play in the song \"Flash\"? */\nSELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n\n/* Answer the following: Find the name of the instructors who taught C Programming course before. */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the names of instructors who have taught C Programming courses? */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the last names of the author of the paper titled \"Binders Unbound\"? */\nSELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced in the usa? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5185,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
                    "question": "Hom many musicians performed in the song \"Flash\"?"
                }
            ],
            "example_quality": 0.8491925728914952,
            "example_similarity": 0.3745092333060337,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = \"USA\"",
            "correct": 0
        },
        {
            "index": 117,
            "question": "What is the count of the car models produced in the United States?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Hom many musicians performed in the song \"Flash\"? */\nSELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n\n/* Answer the following: How many musicians play in the song \"Flash\"? */\nSELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n\n/* Answer the following: Find the name of the instructors who taught C Programming course before. */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the names of instructors who have taught C Programming courses? */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the last names of the author of the paper titled \"Binders Unbound\"? */\nSELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the count of the car models produced in the United States? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5185,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
                    "question": "Hom many musicians performed in the song \"Flash\"?"
                }
            ],
            "example_quality": 0.8490351084289116,
            "example_similarity": 0.37343097572375294,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = \"United States\"",
            "correct": 0
        },
        {
            "index": 118,
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all products with manufacturer code equal to 2. */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average price of products with manufacturer codes equal to 2? */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average capacity of the stadiums that were opened in year 2005? */\nSELECT avg(capacity) FROM stadium WHERE opening_year  =  2005\n\n/* Answer the following: What is the average number of working horses of farms with more than 5000 total number of horses? */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Answer the following: Give the average number of working horses on farms with more than 5000 total horses. */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon(mpg) of the cars with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5333,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "Compute the average price of all products with manufacturer code equal to 2."
                }
            ],
            "example_quality": 0.8495611762482523,
            "example_similarity": 0.37396399391383306,
            "db_id": "car_1",
            "pred": "SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4",
            "correct": 1
        },
        {
            "index": 119,
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all products with manufacturer code equal to 2. */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average price of products with manufacturer codes equal to 2? */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average capacity of the stadiums that were opened in year 2005? */\nSELECT avg(capacity) FROM stadium WHERE opening_year  =  2005\n\n/* Answer the following: What is the average number of working horses of farms with more than 5000 total number of horses? */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Answer the following: Give the average number of working horses on farms with more than 5000 total horses. */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon of all the cards with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5333,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "Compute the average price of all products with manufacturer code equal to 2."
                }
            ],
            "example_quality": 0.8500784025916377,
            "example_similarity": 0.3738411926990164,
            "db_id": "car_1",
            "pred": "SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4",
            "correct": 1
        },
        {
            "index": 120,
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. */\nSELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\n\n/* Answer the following: Show the average price range of hotels that have 5 star ratings and allow pets. */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Answer the following: What is the average price range of five star hotels that allow pets? */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Answer the following: What are the first and last name for those employees who works either in department 70 or 90? */\nSELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90\n\n/* Answer the following: What are the full names of employees who with in department 70 or 90? */\nSELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the smallest weight of the car produced with 8 cylinders on 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5855,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50",
                    "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50."
                }
            ],
            "example_quality": 0.8452631465535289,
            "example_similarity": 0.37370514863608695,
            "db_id": "car_1",
            "pred": "SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
            "correct": 1
        },
        {
            "index": 121,
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. */\nSELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\n\n/* Answer the following: Show the average price range of hotels that have 5 star ratings and allow pets. */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Answer the following: What is the average price range of five star hotels that allow pets? */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Answer the following: What are the first and last name for those employees who works either in department 70 or 90? */\nSELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90\n\n/* Answer the following: What are the full names of employees who with in department 70 or 90? */\nSELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the minimum weight of the car with 8 cylinders produced in 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5855,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50",
                    "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50."
                }
            ],
            "example_quality": 0.8405274815243143,
            "example_similarity": 0.37384617141612897,
            "db_id": "car_1",
            "pred": "SELECT min(weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
            "correct": 1
        },
        {
            "index": 122,
            "question": "What are all the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are all the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8418346333150988,
            "example_similarity": 0.37507644373189347,
            "db_id": "car_1",
            "pred": "SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
            "correct": 0
        },
        {
            "index": 123,
            "question": "What are the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8431205306052199,
            "example_similarity": 0.3760649821297371,
            "db_id": "car_1",
            "pred": "SELECT Maker, Model FROM car_makers",
            "correct": 0
        },
        {
            "index": 124,
            "question": "What are the countries having at least one car maker? List name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: What are the first names and support rep ids for employees serving 10 or more customers? */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: Show the names of counties that have at least two delegates. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Which counties have two or more delegates? Give me the county names. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: What are the ids and names of the medicine that can interact with two or more enzymes? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the countries having at least one car maker? List name and id. */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 870,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
                    "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
                }
            ],
            "example_quality": 0.8436507647553181,
            "example_similarity": 0.3757532888848429,
            "db_id": "car_1",
            "pred": "SELECT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(DISTINCT T2.Id) >= 1",
            "correct": 1
        },
        {
            "index": 125,
            "question": "What are the names and ids of all countries with at least one car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: What are the first names and support rep ids for employees serving 10 or more customers? */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: Show the names of counties that have at least two delegates. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Which counties have two or more delegates? Give me the county names. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: What are the ids and names of the medicine that can interact with two or more enzymes? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all countries with at least one car maker? */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 870,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
                    "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
                }
            ],
            "example_quality": 0.8441725151590146,
            "example_similarity": 0.37564581329840185,
            "db_id": "car_1",
            "pred": "SELECT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(DISTINCT T2.Id) >= 1",
            "correct": 1
        },
        {
            "index": 126,
            "question": "What is the number of the cars with horsepower more than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of the cars with horsepower more than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8454092412291812,
            "example_similarity": 0.3754986865510911,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
            "correct": 1
        },
        {
            "index": 127,
            "question": "What is the number of cars with a horsepower greater than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a horsepower greater than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8466264912982427,
            "example_similarity": 0.3750791868319662,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
            "correct": 1
        },
        {
            "index": 128,
            "question": "What is the average weight of cars each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prices of wines for different years? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average prices of wines for each each? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average number of attendance at home games for each year? */\nSELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\n\n/* Answer the following: For each year, return the year and the average number of attendance at home games. */\nSELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\n\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight of cars each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6556,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the average prices of wines for different years?"
                }
            ],
            "example_quality": 0.8468238477091011,
            "example_similarity": 0.37633586557495124,
            "db_id": "car_1",
            "pred": "SELECT avg(Weight), Year FROM cars_data GROUP BY Year;",
            "correct": 1
        },
        {
            "index": 129,
            "question": "What is the average weight and year for each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prices of wines for different years? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average prices of wines for each each? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average number of attendance at home games for each year? */\nSELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\n\n/* Answer the following: For each year, return the year and the average number of attendance at home games. */\nSELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\n\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight and year for each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6556,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the average prices of wines for different years?"
                }
            ],
            "example_quality": 0.8470181443306437,
            "example_similarity": 0.37765171612150655,
            "db_id": "car_1",
            "pred": "SELECT avg(Weight), Year FROM cars_data GROUP BY Year;",
            "correct": 1
        },
        {
            "index": 130,
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are characteristic names used at least twice across all products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n\n/* Answer the following: Give the names of characteristics that are in two or more products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n\n/* Answer the following: Which club has the most members majoring in \"600\"? */\nSELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the club which has the largest number of members majoring in \"600\". */\nSELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the club that has the most female students. */\nSELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which countries in europe have at least 3 car manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5599,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
                    "question": "What are characteristic names used at least twice across all products?"
                }
            ],
            "example_quality": 0.8454993266446259,
            "example_similarity": 0.3768498791561011,
            "db_id": "car_1",
            "pred": "SELECT t2.CountryName FROM countries AS t2 JOIN car_makers AS t3 ON t2.CountryId = t3.Country WHERE t2.Continent = (SELECT ContId FROM continents WHERE Continent = \"Europe\") GROUP BY t2.CountryName HAVING COUNT(DISTINCT t3.Maker) >= 3",
            "correct": 0
        },
        {
            "index": 131,
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are characteristic names used at least twice across all products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n\n/* Answer the following: Give the names of characteristics that are in two or more products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n\n/* Answer the following: Which club has the most members majoring in \"600\"? */\nSELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the club which has the largest number of members majoring in \"600\". */\nSELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the club that has the most female students. */\nSELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of all European countries with at least 3 manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5599,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
                    "question": "What are characteristic names used at least twice across all products?"
                }
            ],
            "example_quality": 0.8440036970148832,
            "example_similarity": 0.3759640355344317,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = \"Europe\") GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3",
            "correct": 0
        },
        {
            "index": 132,
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Answer the following: Which park had most attendances in 2008? */\nSELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;\n\n/* Answer the following: Which park did the most people attend in 2008? */\nSELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;\n\n/* Answer the following: Which campus has the most faculties in year 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Answer the following: What campus has the most faculties in 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum horsepower and the make of the car models with 3 cylinders? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1037,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
                    "question": "List the name of the phone model launched in year 2002 and with the highest RAM size."
                }
            ],
            "example_quality": 0.8430113606500951,
            "example_similarity": 0.3755390644428587,
            "db_id": "car_1",
            "pred": "SELECT MAX(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Cylinders = 3;",
            "correct": 0
        },
        {
            "index": 133,
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Answer the following: Which park had most attendances in 2008? */\nSELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;\n\n/* Answer the following: Which park did the most people attend in 2008? */\nSELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;\n\n/* Answer the following: Which campus has the most faculties in year 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Answer the following: What campus has the most faculties in 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1037,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
                    "question": "List the name of the phone model launched in year 2002 and with the highest RAM size."
                }
            ],
            "example_quality": 0.8420339466366571,
            "example_similarity": 0.37464961822167425,
            "db_id": "car_1",
            "pred": "SELECT T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Cylinders = 3 ORDER BY T1.Horsepower DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 134,
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which trip started from the station with the largest dock count? Give me the trip id. */\nSELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\n\n/* Answer the following: What is the id of the trip that started from the station with the highest dock count? */\nSELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\n\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: What is the total point count of the youngest gymnast? */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Return the total points of the gymnast with the lowest age. */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 164,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
                    "question": "Which trip started from the station with the largest dock count? Give me the trip id."
                }
            ],
            "example_quality": 0.8425020657271438,
            "example_similarity": 0.3731722226685123,
            "db_id": "car_1",
            "pred": "SELECT M.Model FROM model_list AS M JOIN cars_data AS C ON M.ModelId = C.Id ORDER BY C.MPG DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 135,
            "question": "What is the car model with the highest mpg ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total point count of the youngest gymnast? */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Return the total points of the gymnast with the lowest age. */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Which company started the earliest the maintenance contract? Show the company name. */\nSELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1\n\n/* Answer the following: What is the primary conference of the school that has the lowest acc percent score in the competition? */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Answer the following: Return the primary conference of the school with the lowest acc percentage score. */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the car model with the highest mpg ? */\nSELECT ",
            "response": "t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1755,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "What is the total point count of the youngest gymnast?"
                }
            ],
            "example_quality": 0.8393300927535037,
            "example_similarity": 0.37342724866801025,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id ORDER BY T2.MPG DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 136,
            "question": "What is the average horsepower of the cars before 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average enrollment size of the universities that are founded before 1850? */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Return the average enrollment of universities founded before 1850. */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Find the average fee on a CSU campus in 1996 */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Answer the following: What is the average fee for a CSU campus in the year of 1996? */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Answer the following: What is the average fee on a CSU campus in 2005? */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower of the cars before 1980? */\nSELECT ",
            "response": "avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 996,
                    "db_id": "university_basketball",
                    "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
                    "question": "What are the average enrollment size of the universities that are founded before 1850?"
                }
            ],
            "example_quality": 0.8388775022022117,
            "example_similarity": 0.3744988620356474,
            "db_id": "car_1",
            "pred": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980",
            "correct": 1
        },
        {
            "index": 137,
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average enrollment size of the universities that are founded before 1850? */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Return the average enrollment of universities founded before 1850. */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: What is the average number of working horses of farms with more than 5000 total number of horses? */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Answer the following: Give the average number of working horses on farms with more than 5000 total horses. */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Answer the following: Find the average fee on a CSU campus in 1996 */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower for all cars produced before 1980 ? */\nSELECT ",
            "response": "avg(horsepower) from cars_data where year < 1980;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 996,
                    "db_id": "university_basketball",
                    "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
                    "question": "What are the average enrollment size of the universities that are founded before 1850?"
                }
            ],
            "example_quality": 0.8347382129291654,
            "example_similarity": 0.3741819180353027,
            "db_id": "car_1",
            "pred": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980",
            "correct": 1
        },
        {
            "index": 138,
            "question": "What is the average edispl of the cars of model volvo?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'? */\nSELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'\n\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl of the cars of model volvo? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3724,
                    "db_id": "mountain_photos",
                    "query": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
                    "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?"
                }
            ],
            "example_quality": 0.8348315159882851,
            "example_similarity": 0.3742446737274243,
            "db_id": "car_1",
            "pred": "SELECT AVG(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo')",
            "correct": 1
        },
        {
            "index": 139,
            "question": "What is the average edispl for all volvos?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'? */\nSELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'\n\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl for all volvos? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3724,
                    "db_id": "mountain_photos",
                    "query": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
                    "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?"
                }
            ],
            "example_quality": 0.8349234765573459,
            "example_similarity": 0.37325815403958984,
            "db_id": "car_1",
            "pred": "SELECT AVG(T4.Edispl) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'Volvo'",
            "correct": 0
        },
        {
            "index": 140,
            "question": "What is the maximum accelerate for different number of cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: What are the total enrollments of universities of each affiliation type? */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: Find the total credits of courses provided by different department. */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for different number of cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                }
            ],
            "example_quality": 0.8346740231533649,
            "example_similarity": 0.3728084109225004,
            "db_id": "car_1",
            "pred": "SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders",
            "correct": 1
        },
        {
            "index": 141,
            "question": "What is the maximum accelerate for all the different cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: What are the total enrollments of universities of each affiliation type? */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: Find the total credits of courses provided by different department. */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for all the different cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                }
            ],
            "example_quality": 0.8344281080955398,
            "example_similarity": 0.3721564530644768,
            "db_id": "car_1",
            "pred": "SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders",
            "correct": 1
        },
        {
            "index": 142,
            "question": "Which model has the most version(make) of cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model has the most version(make) of cars? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8355941073343036,
            "example_similarity": 0.3713244406850591,
            "db_id": "car_1",
            "pred": "SELECT Model, COUNT(Make) AS NumVersions FROM car_names GROUP BY Model ORDER BY NumVersions DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 143,
            "question": "What model has the most different versions?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What model has the most different versions? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8367437988914064,
            "example_similarity": 0.3704117503068362,
            "db_id": "car_1",
            "pred": "SELECT Model, COUNT(DISTINCT MakeId) AS NumVersions FROM car_names GROUP BY Model ORDER BY NumVersions DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 144,
            "question": "How many cars have more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8378775225102159,
            "example_similarity": 0.37148491321896304,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
            "correct": 1
        },
        {
            "index": 145,
            "question": "What is the number of cars with more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8389956085618695,
            "example_similarity": 0.3715419476240791,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
            "correct": 1
        },
        {
            "index": 146,
            "question": "how many cars were produced in 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many students are age 18? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Answer the following: How many students are 18 years old? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Answer the following: How many exhibition are there in year 2005 or after? */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Answer the following: Count the number of exhibitions that happened in or after 2005. */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: how many cars were produced in 1980? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                }
            ],
            "example_quality": 0.8388807223540637,
            "example_similarity": 0.37192591928387814,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Year = 1980",
            "correct": 1
        },
        {
            "index": 147,
            "question": "In 1980, how many cars were made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many students are age 18? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Answer the following: How many students are 18 years old? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Answer the following: How many exhibition are there in year 2005 or after? */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Answer the following: Count the number of exhibitions that happened in or after 2005. */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In 1980, how many cars were made? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                }
            ],
            "example_quality": 0.8387673992239151,
            "example_similarity": 0.37260418991209465,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Year = 1980",
            "correct": 1
        },
        {
            "index": 148,
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Answer the following: How many classes are professor whose last name is Graztevski has? */\nSELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'\n\n/* Answer the following: How many classes does the professor whose last name is Graztevski teach? */\nSELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'\n\n/* Answer the following: Find the number of routes that have destination John F Kennedy International Airport. */\nSELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'\n\n/* Answer the following: What is the number of routes that end at John F Kennedy International Airport? */\nSELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models were produced by the maker with full name American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                }
            ],
            "example_quality": 0.8398568086886186,
            "example_similarity": 0.37228496465373345,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'",
            "correct": 1
        },
        {
            "index": 149,
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Answer the following: How many classes are professor whose last name is Graztevski has? */\nSELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'\n\n/* Answer the following: How many classes does the professor whose last name is Graztevski teach? */\nSELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'\n\n/* Answer the following: Find the number of routes that have destination John F Kennedy International Airport. */\nSELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'\n\n/* Answer the following: What is the number of routes that end at John F Kennedy International Airport? */\nSELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models created by the car maker American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                }
            ],
            "example_quality": 0.8409315952074867,
            "example_similarity": 0.37226069003813067,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'American Motor Company'",
            "correct": 0
        },
        {
            "index": 150,
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: What are the first names and support rep ids for employees serving 10 or more customers? */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: Which parts have more than 2 faults? Show the part name and id. */\nSELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2\n\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which makers designed more than 3 car models? List full name and the id. */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 870,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
                    "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
                }
            ],
            "example_quality": 0.8414364956838812,
            "example_similarity": 0.37249842637550484,
            "db_id": "car_1",
            "pred": "SELECT T1.FullName, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) > 3",
            "correct": 1
        },
        {
            "index": 151,
            "question": "What are the names and ids of all makers with more than 3 models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: What are the first names and support rep ids for employees serving 10 or more customers? */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: Which parts have more than 2 faults? Show the part name and id. */\nSELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2\n\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all makers with more than 3 models? */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 870,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
                    "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
                }
            ],
            "example_quality": 0.8419347087367475,
            "example_similarity": 0.3727073900952164,
            "db_id": "car_1",
            "pred": "SELECT T1.Maker, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) > 3",
            "correct": 0
        },
        {
            "index": 152,
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Christof Dallermassl in 2000 */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: Keyphrases used by Christof Dallermassl in 2000 */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: keyphrases Christof Dallermassl used in papers written last year */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: What are keyphrases by Christof Dallermassl in 2000 ? */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: What papers does Richard Ladner have in chi ? */\nSELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 7798,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
                    "question": "keyphrases used by Christof Dallermassl in 2000"
                }
            ],
            "example_quality": 0.8409723236392231,
            "example_similarity": 0.37095307359492735,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT t3.Model FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker JOIN car_names AS t3 ON t2.ModelId = t3.MakeId JOIN cars_data AS t4 ON t3.MakeId = t4.Id WHERE t1.FullName = \"General Motors\" OR t4.Weight > 3500;",
            "correct": 0
        },
        {
            "index": 153,
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Christof Dallermassl in 2000 */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: Keyphrases used by Christof Dallermassl in 2000 */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: keyphrases Christof Dallermassl used in papers written last year */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: What are keyphrases by Christof Dallermassl in 2000 ? */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;\n\n/* Answer the following: What papers does Richard Ladner have in chi ? */\nSELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models created by either the car maker General Motors or weighed more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 7798,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
                    "question": "keyphrases used by Christof Dallermassl in 2000"
                }
            ],
            "example_quality": 0.8400225187390521,
            "example_similarity": 0.3693443057557638,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT m.Model FROM model_list AS m JOIN car_makers AS cm ON m.Maker = cm.Id JOIN cars_data AS cd ON m.ModelId = cd.Id WHERE cm.Maker = (SELECT Id FROM car_makers WHERE Maker = \"General Motors\") OR cd.Weight > 3500;",
            "correct": 0
        },
        {
            "index": 154,
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct names of all races held between 2014 and 2017? */\nSELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\n\n/* Answer the following: What are the unique names of all race held between 2014 and 2017? */\nSELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\n\n/* Answer the following: Find the distinct winery of wines having price between 50 and 100. */\nSELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100\n\n/* Answer the following: What are the distinct wineries which produce wines costing between 50 and 100? */\nSELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100\n\n/* Answer the following: What is the average number of employees of the departments whose rank is between 10 and 15? */\nSELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In which years cars were produced weighing no less than 3000 and no more than 4000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2160,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
                    "question": "Find the distinct names of all races held between 2014 and 2017?"
                }
            ],
            "example_quality": 0.8360074332044166,
            "example_similarity": 0.3684895547033118,
            "db_id": "car_1",
            "pred": "SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000",
            "correct": 1
        },
        {
            "index": 155,
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct names of all races held between 2014 and 2017? */\nSELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\n\n/* Answer the following: What are the unique names of all race held between 2014 and 2017? */\nSELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017\n\n/* Answer the following: Find the distinct winery of wines having price between 50 and 100. */\nSELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100\n\n/* Answer the following: What are the distinct wineries which produce wines costing between 50 and 100? */\nSELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100\n\n/* Answer the following: What is the average number of employees of the departments whose rank is between 10 and 15? */\nSELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2160,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
                    "question": "Find the distinct names of all races held between 2014 and 2017?"
                }
            ],
            "example_quality": 0.832044155225067,
            "example_similarity": 0.3678218955349086,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000",
            "correct": 0
        },
        {
            "index": 156,
            "question": "What is the horsepower of the car with the largest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which three cities have the largest regional population? */\nSELECT city FROM city ORDER BY regional_population DESC LIMIT 3\n\n/* Answer the following: What are the three largest cities in terms of regional population? */\nSELECT city FROM city ORDER BY regional_population DESC LIMIT 3\n\n/* Answer the following: find the total market rate of the furnitures that have the top 2 market shares. */\nSELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2\n\n/* Answer the following: Find the total population of the top 3 districts with the largest area. */\nSELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3\n\n/* Answer the following: What is the total number of residents for the districts with the 3 largest areas? */\nSELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the largest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6283,
                    "db_id": "city_record",
                    "query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
                    "question": "Which three cities have the largest regional population?"
                }
            ],
            "example_quality": 0.8296972956783298,
            "example_similarity": 0.3685535550783626,
            "db_id": "car_1",
            "pred": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 157,
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which three cities have the largest regional population? */\nSELECT city FROM city ORDER BY regional_population DESC LIMIT 3\n\n/* Answer the following: What are the three largest cities in terms of regional population? */\nSELECT city FROM city ORDER BY regional_population DESC LIMIT 3\n\n/* Answer the following: find the total market rate of the furnitures that have the top 2 market shares. */\nSELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2\n\n/* Answer the following: Find the total population of the top 3 districts with the largest area. */\nSELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3\n\n/* Answer the following: What is the total number of residents for the districts with the 3 largest areas? */\nSELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the greatest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6283,
                    "db_id": "city_record",
                    "query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
                    "question": "Which three cities have the largest regional population?"
                }
            ],
            "example_quality": 0.8273803324315512,
            "example_similarity": 0.3688272242042529,
            "db_id": "car_1",
            "pred": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 158,
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length. */\nSELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet\n\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: Which team had the least number of attendances in home games in 1980? */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Answer the following: Find the team that attended the least number of home games in 1980. */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For model volvo, how many cylinders does the car with the least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6962,
                    "db_id": "architecture",
                    "query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
                    "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length."
                }
            ],
            "example_quality": 0.8269780860036641,
            "example_similarity": 0.36816041019495815,
            "db_id": "car_1",
            "pred": "SELECT MIN(Cylinders) FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo' AND cd.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = cd.Id)",
            "correct": 0
        },
        {
            "index": 159,
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length. */\nSELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet\n\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: Which team had the least number of attendances in home games in 1980? */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Answer the following: Find the team that attended the least number of home games in 1980. */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For a volvo model, how many cylinders does the version with least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6962,
                    "db_id": "architecture",
                    "query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
                    "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length."
                }
            ],
            "example_quality": 0.8265808992792725,
            "example_similarity": 0.367137807205772,
            "db_id": "car_1",
            "pred": "SELECT t1.Cylinders FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model JOIN car_makers AS t4 ON t3.Maker = t4.Id WHERE t4.Maker = \"Volvo\" ORDER BY t1.Accelerate ASC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 160,
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: which states have points higher than the highest point in colorado */\nSELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: which states have points that are higher than the highest point in colorado */\nSELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: what states high point are higher than that of colorado */\nSELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have a larger accelerate than the car with the largest horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                }
            ],
            "example_quality": 0.8240134461950092,
            "example_similarity": 0.36679955555985877,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 161,
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: which states have points higher than the highest point in colorado */\nSELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: which states have points that are higher than the highest point in colorado */\nSELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: what states high point are higher than that of colorado */\nSELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a greater accelerate than the one with the most horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                }
            ],
            "example_quality": 0.8214778869378793,
            "example_similarity": 0.36629520792035397,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 162,
            "question": "How many countries has more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: Show the names of editors that are on at least two journal committees. */\nSELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries has more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3063,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "Find the name of customers who have more than one loan."
                }
            ],
            "example_quality": 0.8188944901487907,
            "example_similarity": 0.3656628684217736,
            "db_id": "car_1",
            "pred": "SELECT COUNT(T1.CountryName) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName HAVING COUNT(DISTINCT T2.Id) > 2",
            "correct": 1
        },
        {
            "index": 163,
            "question": "What is the number of countries with more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: Show the names of editors that are on at least two journal committees. */\nSELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of countries with more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3063,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "Find the name of customers who have more than one loan."
                }
            ],
            "example_quality": 0.8163427914798136,
            "example_similarity": 0.36567087179677105,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM ( SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName HAVING COUNT(DISTINCT T2.Id) > 2 ) as subquery",
            "correct": 0
        },
        {
            "index": 164,
            "question": "How many cars has over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars has over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8174626525073757,
            "example_similarity": 0.3660811067464104,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 6",
            "correct": 1
        },
        {
            "index": 165,
            "question": "What is the number of carsw ith over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many storms had death records? */\nSELECT count(*) FROM storm WHERE Number_Deaths  >  0\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of carsw ith over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                }
            ],
            "example_quality": 0.8185689394618765,
            "example_similarity": 0.36535678869007454,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 6",
            "correct": 1
        },
        {
            "index": 166,
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which campus has the most faculties in year 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Answer the following: What campus has the most faculties in 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For the cars with 4 cylinders, which model has the largest horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2351,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
                    "question": "Which campus has the most faculties in year 2003?"
                }
            ],
            "example_quality": 0.8182467131101745,
            "example_similarity": 0.36510144169600817,
            "db_id": "car_1",
            "pred": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 167,
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which campus has the most faculties in year 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Answer the following: What campus has the most faculties in 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For all of the 4 cylinder cars, which model has the most horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2351,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
                    "question": "Which campus has the most faculties in year 2003?"
                }
            ],
            "example_quality": 0.8179283457566967,
            "example_similarity": 0.3649551523624672,
            "db_id": "car_1",
            "pred": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 168,
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the theme and artist name for the exhibition with a ticket price higher than the average? */\nSELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n\n/* Answer the following: Return the names of artists and the themes of their exhibitions that had a ticket price higher than average. */\nSELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n\n/* Answer the following: List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32. */\nSELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;\n\n/* Answer the following: give me some restaurants good for french food ? */\nSELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;\n\n/* Answer the following: where are some restaurants good for french food ? */\nSELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. */\nSELECT ",
            "response": "T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1674,
                    "db_id": "theme_gallery",
                    "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
                    "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?"
                }
            ],
            "example_quality": 0.816349161841649,
            "example_similarity": 0.36417007992441003,
            "db_id": "car_1",
            "pred": "SELECT T4.MakeId, T4.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T1.Cylinders <= 3;",
            "correct": 0
        },
        {
            "index": 169,
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32. */\nSELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;\n\n/* Answer the following: What is the theme and artist name for the exhibition with a ticket price higher than the average? */\nSELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n\n/* Answer the following: Return the names of artists and the themes of their exhibitions that had a ticket price higher than average. */\nSELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n\n/* Answer the following: give me some restaurants good for french food ? */\nSELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;\n\n/* Answer the following: where are some restaurants good for french food ? */\nSELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? */\nSELECT ",
            "response": "t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1030,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;",
                    "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32."
                }
            ],
            "example_quality": 0.8133791144224091,
            "example_similarity": 0.3635788560594919,
            "db_id": "car_1",
            "pred": "SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders < 4 AND T2.Horsepower < (SELECT MIN(Horsepower) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 170,
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms whose capacity is less than 50 does the Lamberton building have? */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Answer the following: Count the number of rooms in Lamberton with capacity lower than 50. */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Answer the following: How many female students (sex is F) whose age is below 25? */\nSELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n\n/* Answer the following: How many girl students who are younger than 25? */\nSELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n\n/* Answer the following: How many drivers are from Hartford city or younger than 40? */\nSELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1357,
                    "db_id": "college_2",
                    "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
                    "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?"
                }
            ],
            "example_quality": 0.8100514609174292,
            "example_similarity": 0.3627967682686945,
            "db_id": "car_1",
            "pred": "SELECT MAX(MPG) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cylinders = 8 OR year < 1980",
            "correct": 0
        },
        {
            "index": 171,
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms whose capacity is less than 50 does the Lamberton building have? */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Answer the following: Count the number of rooms in Lamberton with capacity lower than 50. */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Answer the following: How many female students (sex is F) whose age is below 25? */\nSELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n\n/* Answer the following: How many girl students who are younger than 25? */\nSELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n\n/* Answer the following: How many drivers are from Hartford city or younger than 40? */\nSELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1357,
                    "db_id": "college_2",
                    "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
                    "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?"
                }
            ],
            "example_quality": 0.8067627273364844,
            "example_similarity": 0.36208139088973856,
            "db_id": "car_1",
            "pred": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
            "correct": 1
        },
        {
            "index": 172,
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Answer the following: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research? */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Answer the following: return me all the papers after 2000 in \" University of Michigan \" . */\nSELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;\n\n/* Answer the following: List the names of all the distinct customers who bought a keyboard. */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Answer the following: What are the distinct names of customers who have purchased a keyboard? */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4335,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                    "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described"
                }
            ],
            "example_quality": 0.8061964778525045,
            "example_similarity": 0.361055875506806,
            "db_id": "car_1",
            "pred": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.Maker <> 'Ford Motor Company'",
            "correct": 0
        },
        {
            "index": 173,
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Answer the following: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research? */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Answer the following: return me all the papers after 2000 in \" University of Michigan \" . */\nSELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;\n\n/* Answer the following: List the names of all the distinct customers who bought a keyboard. */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Answer the following: What are the distinct names of customers who have purchased a keyboard? */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4335,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                    "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described"
                }
            ],
            "example_quality": 0.8056367746053338,
            "example_similarity": 0.36021613432665683,
            "db_id": "car_1",
            "pred": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.Maker <> 'Ford Motor Company'",
            "correct": 0
        },
        {
            "index": 174,
            "question": "What are the name of the countries where there is not a single car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all member names who are not in charge of any event. */\nSELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\n\n/* Answer the following: What are the names of members who are not in charge of any events? */\nSELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\n\n/* Answer the following: Find the names of artists that do not have any albums. */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: What are the names of artists who have not released any albums? */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: Find the names of users who do not have a first notification of loss record. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the name of the countries where there is not a single car maker? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2074,
                    "db_id": "party_people",
                    "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
                    "question": "Show all member names who are not in charge of any event."
                }
            ],
            "example_quality": 0.8064089770501307,
            "example_similarity": 0.35999813691661997,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries EXCEPT SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId",
            "correct": 1
        },
        {
            "index": 175,
            "question": "What are the names of the countries with no car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all member names who are not in charge of any event. */\nSELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\n\n/* Answer the following: What are the names of members who are not in charge of any events? */\nSELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\n\n/* Answer the following: Find the names of artists that do not have any albums. */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: What are the names of artists who have not released any albums? */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: Find the names of users who do not have a first notification of loss record. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of the countries with no car makers? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2074,
                    "db_id": "party_people",
                    "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
                    "question": "Show all member names who are not in charge of any event."
                }
            ],
            "example_quality": 0.80717235432413,
            "example_similarity": 0.35985817731633885,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries EXCEPT SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId",
            "correct": 1
        },
        {
            "index": 176,
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name. */\nSELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2\n\n/* Answer the following: Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail. */\nSELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2\n\n/* Answer the following: Which customer had at least 2 policies but did not file any claims? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: Give me the the customer details and id for the customers who had two or more policies but did not file any claims. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results? */\nSELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . */\nSELECT ",
            "response": "t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3130,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",
                    "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name."
                }
            ],
            "example_quality": 0.8045333115408828,
            "example_similarity": 0.3603685226632216,
            "db_id": "car_1",
            "pred": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(DISTINCT T1.Id) > 3",
            "correct": 0
        },
        {
            "index": 177,
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail. */\nSELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2\n\n/* Answer the following: Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name. */\nSELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2\n\n/* Answer the following: Which customer had at least 2 policies but did not file any claims? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: Give me the the customer details and id for the customers who had two or more policies but did not file any claims. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results? */\nSELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? */\nSELECT ",
            "response": "T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3127,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
                    "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail."
                }
            ],
            "example_quality": 0.8035668769385519,
            "example_similarity": 0.36049852299959956,
            "db_id": "car_1",
            "pred": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(*) > 3",
            "correct": 0
        },
        {
            "index": 178,
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer had at least 2 policies but did not file any claims? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: Give me the the customer details and id for the customers who had two or more policies but did not file any claims. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes? */\nSELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2\n\n/* Answer the following: What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes? */\nSELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2\n\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? */\nSELECT ",
            "response": "T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3853,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
                    "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id."
                }
            ],
            "example_quality": 0.8024326089412198,
            "example_similarity": 0.36073568538563233,
            "db_id": "car_1",
            "pred": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T1.CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3 ) OR T3.Model = 'fiat'",
            "correct": 0
        },
        {
            "index": 179,
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer had at least 2 policies but did not file any claims? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: Give me the the customer details and id for the customers who had two or more policies but did not file any claims. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail. */\nSELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2\n\n/* Answer the following: Find the name and age of the person who is a friend of both Dan and Alice. */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Answer the following: What are the names and ages of every person who is a friend of both Dan and Alice? */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? */\nSELECT ",
            "response": "t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3853,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
                    "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id."
                }
            ],
            "example_quality": 0.7997771685845307,
            "example_similarity": 0.36052159195855016,
            "db_id": "car_1",
            "pred": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker JOIN car_names AS T4 ON T3.ModelId = T4.MakeId WHERE T1.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3 OR EXISTS (SELECT * FROM model_list WHERE Model = 'Fiat'))",
            "correct": 0
        },
        {
            "index": 180,
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which country does Airline \"JetBlue Airways\" belong to? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.80088951764795,
            "example_similarity": 0.360163879759615,
            "db_id": "flight_2",
            "pred": "SELECT Country FROM airlines WHERE Airline = \"JetBlue Airways\"",
            "correct": 1
        },
        {
            "index": 181,
            "question": "What country is Jetblue Airways affiliated with?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What country is Jetblue Airways affiliated with? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8019895755614972,
            "example_similarity": 0.359619140354709,
            "db_id": "flight_2",
            "pred": "SELECT Country FROM airlines WHERE Airline = \"Jetblue Airways\"",
            "correct": 0
        },
        {
            "index": 182,
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of Airline \"JetBlue Airways\"? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8030775449265439,
            "example_similarity": 0.3603596822159668,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\"",
            "correct": 1
        },
        {
            "index": 183,
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which abbreviation corresponds to Jetblue Airways? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8041536239160163,
            "example_similarity": 0.35955122646998755,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation FROM airlines WHERE Airline = \"Jetblue Airways\"",
            "correct": 0
        },
        {
            "index": 184,
            "question": "List all airline names and their abbreviations in \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List all airline names and their abbreviations in \"USA\". */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8052180063947336,
            "example_similarity": 0.3589791557271626,
            "db_id": "flight_2",
            "pred": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\"",
            "correct": 1
        },
        {
            "index": 185,
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the airline names and abbreviations for airlines in the USA? */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8062708820358432,
            "example_similarity": 0.3596042035507778,
            "db_id": "flight_2",
            "pred": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
            "correct": 1
        },
        {
            "index": 186,
            "question": "List the airport code and name in the city of Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List the airport code and name in the city of Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8073124364334999,
            "example_similarity": 0.3599193496857936,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
            "correct": 1
        },
        {
            "index": 187,
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airport code and airport name corresonding to the city Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8083428512119304,
            "example_similarity": 0.3601963316438664,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
            "correct": 1
        },
        {
            "index": 188,
            "question": "How many airlines do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines do we have? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.809362304131016,
            "example_similarity": 0.3598761383904415,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM airlines",
            "correct": 1
        },
        {
            "index": 189,
            "question": "What is the total number of airlines?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the total number of airlines? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8103709691885239,
            "example_similarity": 0.3593476932137726,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM airlines",
            "correct": 1
        },
        {
            "index": 190,
            "question": "How many airports do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airports do we have? */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8113690167191105,
            "example_similarity": 0.35903533693370004,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM airports",
            "correct": 1
        },
        {
            "index": 191,
            "question": "Return the number of  airports.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of  airports. */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8123566134902147,
            "example_similarity": 0.35893703538043326,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM airports",
            "correct": 1
        },
        {
            "index": 192,
            "question": "How many flights do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights do we have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8133339227949532,
            "example_similarity": 0.35863007165449357,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights",
            "correct": 1
        },
        {
            "index": 193,
            "question": "Return the number of flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8143011045421296,
            "example_similarity": 0.35853488859027205,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights",
            "correct": 1
        },
        {
            "index": 194,
            "question": "Which airline has abbreviation 'UAL'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has abbreviation 'UAL'? */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8152583153434588,
            "example_similarity": 0.3577169404077266,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
            "correct": 1
        },
        {
            "index": 195,
            "question": "Give the airline with abbreviation 'UAL'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airline with abbreviation 'UAL'. */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8162057085981077,
            "example_similarity": 0.3571640071645239,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
            "correct": 1
        },
        {
            "index": 196,
            "question": "How many airlines are from USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines are from USA? */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.817143434574648,
            "example_similarity": 0.3581865160951934,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airlines WHERE Country = \"USA\"",
            "correct": 1
        },
        {
            "index": 197,
            "question": "Return the number of airlines in the USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of airlines in the USA. */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8180716404905127,
            "example_similarity": 0.3571478608285754,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airlines WHERE Country = \"USA\"",
            "correct": 1
        },
        {
            "index": 198,
            "question": "Which city and country is the Alton airport at?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city and country is the Alton airport at? */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8189904705890455,
            "example_similarity": 0.35707328048288034,
            "db_id": "flight_2",
            "pred": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
            "correct": 1
        },
        {
            "index": 199,
            "question": "Give the city and country for the Alton airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the city and country for the Alton airport. */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8199000662142262,
            "example_similarity": 0.3573881509545129,
            "db_id": "flight_2",
            "pred": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
            "correct": 1
        },
        {
            "index": 200,
            "question": "What is the airport name for airport 'AKO'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport name for airport 'AKO'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8208005658831551,
            "example_similarity": 0.35710074334633224,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
            "correct": 1
        },
        {
            "index": 201,
            "question": "Return the name of the airport with code 'AKO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the name of the airport with code 'AKO'. */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8216921053563732,
            "example_similarity": 0.35681707812378066,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
            "correct": 1
        },
        {
            "index": 202,
            "question": "What are airport names at City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airport names at City 'Aberdeen'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8225748177060941,
            "example_similarity": 0.35640435849157526,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 203,
            "question": "What are the names of airports in Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the names of airports in Aberdeen? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8234488333824188,
            "example_similarity": 0.356224060772743,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 204,
            "question": "How many flights depart from 'APG'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from 'APG'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8243142802776029,
            "example_similarity": 0.3566003334306398,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 205,
            "question": "Count the number of flights departing from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights departing from 'APG'. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8251712837884438,
            "example_similarity": 0.3554498519699388,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 206,
            "question": "How many flights have destination ATO?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights have destination ATO? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8260199668768494,
            "example_similarity": 0.35719254416641694,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = \"ATO\"",
            "correct": 1
        },
        {
            "index": 207,
            "question": "Count the number of flights into ATO.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights into ATO. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8268604501286522,
            "example_similarity": 0.35617975790254913,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = \"ATO\"",
            "correct": 1
        },
        {
            "index": 208,
            "question": "How many flights depart from City Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City Aberdeen? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8275916372358271,
            "example_similarity": 0.3559139760337225,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen';",
            "correct": 1
        },
        {
            "index": 209,
            "question": "Return the number of flights departing from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights departing from Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8283158273371918,
            "example_similarity": 0.35551312377682304,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen';",
            "correct": 1
        },
        {
            "index": 210,
            "question": "How many flights arriving in Aberdeen city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights arriving in Aberdeen city? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.829033120389972,
            "example_similarity": 0.35538970870929515,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen';",
            "correct": 1
        },
        {
            "index": 211,
            "question": "Return the number of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights arriving in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8297436144564702,
            "example_similarity": 0.3551794524643489,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen';",
            "correct": 1
        },
        {
            "index": 212,
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: What is the number of routes operated by the airline American Airlines whose destinations are in Italy? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: How many Annual Meeting events happened in the United Kingdom region? */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: Count the number of Annual Meeting events that took place in the region of the United Kingdom. */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: How many papers have \"Atsushi Ohori\" published? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6872,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                    "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'."
                }
            ],
            "example_quality": 0.8292941341123953,
            "example_similarity": 0.3548762622162559,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'",
            "correct": 1
        },
        {
            "index": 213,
            "question": "How many flights fly from Aberdeen to Ashley?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: What is the number of routes operated by the airline American Airlines whose destinations are in Italy? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: How many Annual Meeting events happened in the United Kingdom region? */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: Count the number of Annual Meeting events that took place in the region of the United Kingdom. */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: How many papers have \"Atsushi Ohori\" published? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights fly from Aberdeen to Ashley? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6872,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                    "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'."
                }
            ],
            "example_quality": 0.8288488742410348,
            "example_similarity": 0.3544041319862527,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
            "correct": 1
        },
        {
            "index": 214,
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: Find the number of albums by the artist \"Metallica\". */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: How many transaction does account with name 337 have? */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights does airline 'JetBlue Airways' have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.8296486458567308,
            "example_similarity": 0.3548750574733955,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights AS F JOIN airlines AS A ON F.Airline = A.uid WHERE A.Airline = 'JetBlue Airways'",
            "correct": 1
        },
        {
            "index": 215,
            "question": "Give the number of Jetblue Airways flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: Find the number of albums by the artist \"Metallica\". */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: How many transaction does account with name 337 have? */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the number of Jetblue Airways flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.830440977736467,
            "example_similarity": 0.35445797099771215,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights AS F JOIN airlines AS A ON F.Airline = A.uid WHERE A.Airline = \"Jetblue Airways\"",
            "correct": 0
        },
        {
            "index": 216,
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts does the customer with first name Art and last name Turcotte have? */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Return the number of accounts that the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many cards does customer Art Turcotte have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Count the number of cards the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many students does LORIA ONDERSMA teaches? */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights go to Airport 'ASY'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 676,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many accounts does the customer with first name Art and last name Turcotte have?"
                }
            ],
            "example_quality": 0.8308233967203764,
            "example_similarity": 0.35403617821576505,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'",
            "correct": 1
        },
        {
            "index": 217,
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts does the customer with first name Art and last name Turcotte have? */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Return the number of accounts that the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many cards does customer Art Turcotte have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Count the number of cards the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many students does LORIA ONDERSMA teaches? */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights arriving in ASY Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 676,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many accounts does the customer with first name Art and last name Turcotte have?"
                }
            ],
            "example_quality": 0.8312022911053556,
            "example_similarity": 0.35363987697848864,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS src ON f.SourceAirport = src.AirportCode JOIN airports AS dest ON f.DestAirport = dest.AirportCode WHERE a.Airline = \"United Airlines\" AND dest.AirportCode = \"ASY\"",
            "correct": 1
        },
        {
            "index": 218,
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts does the customer with first name Art and last name Turcotte have? */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Return the number of accounts that the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many cards does customer Art Turcotte have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Count the number of cards the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many students does LORIA ONDERSMA teaches? */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights depart from Airport 'AHD'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 676,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many accounts does the customer with first name Art and last name Turcotte have?"
                }
            ],
            "example_quality": 0.8315777093950598,
            "example_similarity": 0.3532257065799503,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS s ON f.SourceAirport = s.AirportCode WHERE a.Airline = 'United Airlines' AND s.AirportCode = 'AHD'",
            "correct": 1
        },
        {
            "index": 219,
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts does the customer with first name Art and last name Turcotte have? */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Return the number of accounts that the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many cards does customer Art Turcotte have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Count the number of cards the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many students does LORIA ONDERSMA teaches? */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of United Airlines flights leaving from AHD Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 676,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many accounts does the customer with first name Art and last name Turcotte have?"
                }
            ],
            "example_quality": 0.8319496992072324,
            "example_similarity": 0.3528333734958713,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS s ON f.SourceAirport = s.AirportCode WHERE a.Airline = \"United Airlines\" AND s.AirportCode = \"AHD\"",
            "correct": 1
        },
        {
            "index": 220,
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many clubs does \"Linda Smith\" belong to? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Answer the following: How many clubs does \"Linda Smith\" have membership for? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Answer the following: Find the number of clubs where \"Tracy Kim\" is a member. */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Answer the following: For how many clubs is \"Tracy Kim\" a member? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Answer the following: Find the number of female students (with F sex) living in Smith Hall */\nSELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many United Airlines flights go to City 'Aberdeen'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4267,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
                    "question": "How many clubs does \"Linda Smith\" belong to?"
                }
            ],
            "example_quality": 0.8321453823926541,
            "example_similarity": 0.35267657538753244,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS s ON f.SourceAirport = s.AirportCode JOIN airports AS d ON f.DestAirport = d.AirportCode WHERE a.Airline = 'United Airlines' AND d.City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 221,
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many clubs does \"Linda Smith\" belong to? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Answer the following: How many clubs does \"Linda Smith\" have membership for? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Answer the following: Find the number of clubs where \"Tracy Kim\" is a member. */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Answer the following: For how many clubs is \"Tracy Kim\" a member? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Answer the following: Find the number of female students (with F sex) living in Smith Hall */\nSELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights that arrive in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4267,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
                    "question": "How many clubs does \"Linda Smith\" belong to?"
                }
            ],
            "example_quality": 0.83233929468952,
            "example_similarity": 0.35231003361553503,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS src ON f.SourceAirport = src.AirportCode JOIN airports AS dest ON f.DestAirport = dest.AirportCode WHERE a.Airline = 'United Airlines' AND dest.City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 222,
            "question": "Which city has most number of arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of arriving flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.8330194480167442,
            "example_similarity": 0.3522168827747246,
            "db_id": "flight_2",
            "pred": "SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 223,
            "question": "Which city has the most frequent destination airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has the most frequent destination airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.833693501314128,
            "example_similarity": 0.3521763478582345,
            "db_id": "flight_2",
            "pred": "SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 224,
            "question": "Which city has most number of departing flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of departing flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.8343615362784996,
            "example_similarity": 0.35208462553277636,
            "db_id": "flight_2",
            "pred": "SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 225,
            "question": "Which city is the most frequent source airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city is the most frequent source airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.8350236331542988,
            "example_similarity": 0.35200465345970144,
            "db_id": "flight_2",
            "pred": "SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 226,
            "question": "What is the code of airport that has the highest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of the party that has the most delegates. */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which party has the largest number of delegates? */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has the highest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8342756807711285,
            "example_similarity": 0.3522722731753542,
            "db_id": "flight_2",
            "pred": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 227,
            "question": "What is the airport code of the airport with the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of the party that has the most delegates. */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which party has the largest number of delegates? */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport code of the airport with the most flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8335343182767968,
            "example_similarity": 0.35275029978570727,
            "db_id": "flight_2",
            "pred": "SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 228,
            "question": "What is the code of airport that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which school has the smallest amount of professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Answer the following: Which school has the fewest professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of the party that has the most delegates. */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has fewest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3214,
                    "db_id": "college_1",
                    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
                    "question": "Which school has the smallest amount of professors?"
                }
            ],
            "example_quality": 0.8327079935261629,
            "example_similarity": 0.3527138789231846,
            "db_id": "flight_2",
            "pred": "SELECT T1.SourceAirport FROM flights AS T1 GROUP BY T1.SourceAirport ORDER BY COUNT(*) LIMIT 1",
            "correct": 0
        },
        {
            "index": 229,
            "question": "Give the code of the airport with the least flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which school has the smallest amount of professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Answer the following: Which school has the fewest professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of the party that has the most delegates. */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the code of the airport with the least flights. */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3214,
                    "db_id": "college_1",
                    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
                    "question": "Which school has the smallest amount of professors?"
                }
            ],
            "example_quality": 0.8318888855855783,
            "example_similarity": 0.35251567229646114,
            "db_id": "flight_2",
            "pred": "SELECT T1.SourceAirport FROM flights AS T1 GROUP BY T1.SourceAirport ORDER BY COUNT(*) LIMIT 1",
            "correct": 0
        },
        {
            "index": 230,
            "question": "Which airline has most number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of the party that has the most delegates. */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which party has the largest number of delegates? */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has most number of flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8322574846337568,
            "example_similarity": 0.35280545922850554,
            "db_id": "flight_2",
            "pred": "SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airlines.Airline ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 231,
            "question": "What airline serves the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of the party that has the most delegates. */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which party has the largest number of delegates? */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What airline serves the most flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8326228923481852,
            "example_similarity": 0.35277888436893046,
            "db_id": "flight_2",
            "pred": "SELECT t1.Airline FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.Airline GROUP BY t1.Airline ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 232,
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the full name of employee who supported the most number of customers. */\nSELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the full name of the employee who has the most customers? */\nSELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name and hours of project that has the most number of scientists. */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and hours for the project which has the most scientists assigned to it? */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first and last name of the faculty who has the most students? */\nSELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the abbreviation and country of the airline that has fewest number of flights? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 594,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the full name of employee who supported the most number of customers."
                }
            ],
            "example_quality": 0.8328469979183024,
            "example_similarity": 0.3533676380910435,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 233,
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the full name of employee who supported the most number of customers. */\nSELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the full name of the employee who has the most customers? */\nSELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name and hours of project that has the most number of scientists. */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and hours for the project which has the most scientists assigned to it? */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first and last name of the faculty who has the most students? */\nSELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of the airilne has the fewest flights and what country is it in? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 594,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the full name of employee who supported the most number of customers."
                }
            ],
            "example_quality": 0.8330691798354573,
            "example_similarity": 0.3536131328839094,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 )",
            "correct": 0
        },
        {
            "index": 234,
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of tracks whose genre is Rock? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: What is the name of all tracks in the Rock genre? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\". */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: What are the names of actors who have been in the musical titled The Phantom of the Opera? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have some flight departing from airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 622,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of tracks whose genre is Rock?"
                }
            ],
            "example_quality": 0.8335126538757465,
            "example_similarity": 0.3532082693521577,
            "db_id": "flight_2",
            "pred": "SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';",
            "correct": 1
        },
        {
            "index": 235,
            "question": "Which airlines have a flight with source airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of tracks whose genre is Rock? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: What is the name of all tracks in the Rock genre? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\". */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: What are the names of actors who have been in the musical titled The Phantom of the Opera? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with source airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 622,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of tracks whose genre is Rock?"
                }
            ],
            "example_quality": 0.8339523536688843,
            "example_similarity": 0.3529633621643354,
            "db_id": "flight_2",
            "pred": "SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"AHD\";",
            "correct": 1
        },
        {
            "index": 236,
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of tracks whose genre is Rock? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: What is the name of all tracks in the Rock genre? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\". */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: What are the names of actors who have been in the musical titled The Phantom of the Opera? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have flights arriving at airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 622,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of tracks whose genre is Rock?"
                }
            ],
            "example_quality": 0.8343883271925889,
            "example_similarity": 0.3526169771670095,
            "db_id": "flight_2",
            "pred": "SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';",
            "correct": 1
        },
        {
            "index": 237,
            "question": "Which airlines have a flight with destination airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of tracks whose genre is Rock? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: What is the name of all tracks in the Rock genre? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: Show names of actors that have appeared in musical with name \"The Phantom of the Opera\". */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: What are the names of actors who have been in the musical titled The Phantom of the Opera? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with destination airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 622,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of tracks whose genre is Rock?"
                }
            ],
            "example_quality": 0.8348206216148277,
            "example_similarity": 0.35237663161024546,
            "db_id": "flight_2",
            "pred": "SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline JOIN airports AS D ON F.DestAirport = D.AirportCode WHERE D.AirportCode = \"AHD\";",
            "correct": 1
        },
        {
            "index": 238,
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of product that is produced by both companies Creative Labs and Sony. */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: What are the names of products produced by both Creative Labs and Sony? */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: Find the id of users who are followed by Mary and Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"\n\n/* Answer the following: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. */\nSELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from both airports 'APG' and 'CVO'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5295,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
                    "question": "Find the name of product that is produced by both companies Creative Labs and Sony."
                }
            ],
            "example_quality": 0.8352560876519987,
            "example_similarity": 0.3522696292439259,
            "db_id": "flight_2",
            "pred": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "correct": 1
        },
        {
            "index": 239,
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of product that is produced by both companies Creative Labs and Sony. */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: What are the names of products produced by both Creative Labs and Sony? */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: Find the id of users who are followed by Mary and Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"\n\n/* Answer the following: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. */\nSELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departing flights from both APG and CVO airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5295,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
                    "question": "Find the name of product that is produced by both companies Creative Labs and Sony."
                }
            ],
            "example_quality": 0.8356879096219131,
            "example_similarity": 0.35214080905334777,
            "db_id": "flight_2",
            "pred": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode WHERE T3.AirportName = 'APG' INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode WHERE T3.AirportName = 'CVO'",
            "correct": 1
        },
        {
            "index": 240,
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of product that is produced by both companies Creative Labs and Sony. */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: What are the names of products produced by both Creative Labs and Sony? */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: Find the names of states that have some college students playing in the mid position but not in the goalie position. */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'\n\n/* Answer the following: What are the names of all the states with college students playing in the mid position but no goalies? */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'\n\n/* Answer the following: Find the id of users who are followed by Mary and Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from airport 'CVO' but not from 'APG'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5295,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
                    "question": "Find the name of product that is produced by both companies Creative Labs and Sony."
                }
            ],
            "example_quality": 0.8359487561310263,
            "example_similarity": 0.35168573601738917,
            "db_id": "flight_2",
            "pred": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 241,
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of product that is produced by both companies Creative Labs and Sony. */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: What are the names of products produced by both Creative Labs and Sony? */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: Find the names of states that have some college students playing in the mid position but not in the goalie position. */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'\n\n/* Answer the following: What are the names of all the states with college students playing in the mid position but no goalies? */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'\n\n/* Answer the following: Find the id of users who are followed by Mary and Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departures from CVO but not from APG airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5295,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
                    "question": "Find the name of product that is produced by both companies Creative Labs and Sony."
                }
            ],
            "example_quality": 0.8362074379388189,
            "example_similarity": 0.3511270952747997,
            "db_id": "flight_2",
            "pred": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 242,
            "question": "Find all airlines that have at least 10 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: What is the project id and detail for the project with at least two documents? */\nSELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2\n\n/* Answer the following: Return the ids and details corresponding to projects for which there are more than two documents. */\nSELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have at least 10 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3063,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "Find the name of customers who have more than one loan."
                }
            ],
            "example_quality": 0.8363893789148991,
            "example_similarity": 0.3506236921521668,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) >= 10",
            "correct": 0
        },
        {
            "index": 243,
            "question": "Which airlines have at least 10 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: What is the project id and detail for the project with at least two documents? */\nSELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2\n\n/* Answer the following: Return the ids and details corresponding to projects for which there are more than two documents. */\nSELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have at least 10 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3063,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "Find the name of customers who have more than one loan."
                }
            ],
            "example_quality": 0.8365698224343859,
            "example_similarity": 0.3500795518481405,
            "db_id": "flight_2",
            "pred": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) >= 10",
            "correct": 1
        },
        {
            "index": 244,
            "question": "Find all airlines that have fewer than 200 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors that are on at least two journal committees. */\nSELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2\n\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of the courses that have exactly 1 student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n\n/* Answer the following: Find the names of the courses that have just one student enrollment. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have fewer than 200 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 664,
                    "db_id": "journal_committee",
                    "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
                    "question": "Show the names of editors that are on at least two journal committees."
                }
            ],
            "example_quality": 0.8365268598691702,
            "example_similarity": 0.3498290070917304,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) < 200",
            "correct": 0
        },
        {
            "index": 245,
            "question": "Which airlines have less than 200 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors that are on at least two journal committees. */\nSELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2\n\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of the courses that have exactly 1 student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n\n/* Answer the following: Find the names of the courses that have just one student enrollment. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have less than 200 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 664,
                    "db_id": "journal_committee",
                    "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
                    "question": "Show the names of editors that are on at least two journal committees."
                }
            ],
            "example_quality": 0.8364842480187723,
            "example_similarity": 0.34933701671857675,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) < 200",
            "correct": 0
        },
        {
            "index": 246,
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What are the flight numbers for the aircraft Airbus A340-300? */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What is the booking status code of the apartment with apartment number \"Suite 634\"? */\nSELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of Airline \"United Airlines\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                }
            ],
            "example_quality": 0.8367210471817257,
            "example_similarity": 0.3495506023618643,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"United Airlines\"",
            "correct": 1
        },
        {
            "index": 247,
            "question": "Which flight numbers correspond to United Airlines flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What are the flight numbers for the aircraft Airbus A340-300? */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What is the booking status code of the apartment with apartment number \"Suite 634\"? */\nSELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which flight numbers correspond to United Airlines flights? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                }
            ],
            "example_quality": 0.8369559289425499,
            "example_similarity": 0.34928529469174796,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"United Airlines\"",
            "correct": 1
        },
        {
            "index": 248,
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8376133647129428,
            "example_similarity": 0.3495885827571168,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
            "correct": 1
        },
        {
            "index": 249,
            "question": "Give the flight numbers of flights leaving from APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8382655198747382,
            "example_similarity": 0.34957602319249836,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 250,
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8389124577952393,
            "example_similarity": 0.34987572203934125,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE DestAirport = \"APG\"",
            "correct": 1
        },
        {
            "index": 251,
            "question": "Give the flight numbers of flights landing at APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights landing at APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8395542408319115,
            "example_similarity": 0.3498621185697309,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 252,
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from City \"Aberdeen \"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8401909303524199,
            "example_similarity": 0.34991386017265363,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
            "correct": 1
        },
        {
            "index": 253,
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.840822586754189,
            "example_similarity": 0.3498439327499247,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
            "correct": 1
        },
        {
            "index": 254,
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at City \"Aberdeen\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8414492694835032,
            "example_similarity": 0.3498409703323924,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
            "correct": 1
        },
        {
            "index": 255,
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights arriving in Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8420710370541561,
            "example_similarity": 0.3497122510128915,
            "db_id": "flight_2",
            "pred": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\";",
            "correct": 1
        },
        {
            "index": 256,
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Answer the following: What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'? */\nSELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'\n\n/* Answer the following: Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\". */\nSELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n\n/* Answer the following: What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course. */\nSELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n\n/* Answer the following: Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\". */\nSELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the number of flights landing in the city of Aberdeen or Abilene. */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.8421384745592693,
            "example_similarity": 0.3495987168317766,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\" OR T2.City = \"Abilene\"",
            "correct": 1
        },
        {
            "index": 257,
            "question": "How many flights land in Aberdeen or Abilene?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Answer the following: What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'? */\nSELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'\n\n/* Answer the following: Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\". */\nSELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n\n/* Answer the following: What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course. */\nSELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n\n/* Answer the following: Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\". */\nSELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights land in Aberdeen or Abilene? */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.8422053872588956,
            "example_similarity": 0.3489792921436589,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen' OR DestAirport = 'Abilene'",
            "correct": 1
        },
        {
            "index": 258,
            "question": "Find the name of airports which do not have any flight in and out.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all documents in type CV without expense budgets. */\nSELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses\n\n/* Answer the following: What are the ids of documents with the type code CV that do not have expenses. */\nSELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses\n\n/* Answer the following: Find the names of all the customers and staff members. */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: What are the names of the customers and staff members? */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: Return all reviewer names and movie names together in a single list. */\nSELECT name FROM Reviewer UNION SELECT title FROM Movie\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the name of airports which do not have any flight in and out. */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6460,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
                    "question": "Show ids for all documents in type CV without expense budgets."
                }
            ],
            "example_quality": 0.8401894130199594,
            "example_similarity": 0.3486585615321612,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
            "correct": 1
        },
        {
            "index": 259,
            "question": "Which airports do not have departing or arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all documents in type CV without expense budgets. */\nSELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses\n\n/* Answer the following: What are the ids of documents with the type code CV that do not have expenses. */\nSELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses\n\n/* Answer the following: Find the names of all the customers and staff members. */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: What are the names of the customers and staff members? */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: Return all reviewer names and movie names together in a single list. */\nSELECT name FROM Reviewer UNION SELECT title FROM Movie\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airports do not have departing or arriving flights? */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6460,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
                    "question": "Show ids for all documents in type CV without expense budgets."
                }
            ],
            "example_quality": 0.8381890061496641,
            "example_similarity": 0.34784863708383024,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
            "correct": 1
        },
        {
            "index": 260,
            "question": "How many employees are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many employees are there? */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8388113561260115,
            "example_similarity": 0.34895831015798334,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) FROM employee",
            "correct": 1
        },
        {
            "index": 261,
            "question": "Count the number of employees",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.839428937137023,
            "example_similarity": 0.34872694279558275,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) FROM employee",
            "correct": 1
        },
        {
            "index": 262,
            "question": "Sort employee names by their age in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the locations of all the gas stations ordered by opening year? */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: List all department names ordered by their starting date. */\nSELECT dname FROM department ORDER BY mgr_start_date\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort employee names by their age in ascending order. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                }
            ],
            "example_quality": 0.8400418037891718,
            "example_similarity": 0.3486899988118119,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 263,
            "question": "List the names of employees and sort in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the locations of all the gas stations ordered by opening year? */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: List all department names ordered by their starting date. */\nSELECT dname FROM department ORDER BY mgr_start_date\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: List the names of employees and sort in ascending order of age. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                }
            ],
            "example_quality": 0.8406500098584144,
            "example_similarity": 0.34837908616891955,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 264,
            "question": "What is the number of employees from each city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the number of employees from each city? */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8412536083059204,
            "example_similarity": 0.3483953839647216,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) , City FROM employee GROUP BY City",
            "correct": 1
        },
        {
            "index": 265,
            "question": "Count the number of employees for each city.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees for each city. */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8418526512934453,
            "example_similarity": 0.34878570893780375,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) , City FROM employee GROUP BY City",
            "correct": 1
        },
        {
            "index": 266,
            "question": "Which cities do more than one employee under age 30 come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all the locations with at least two cinemas with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Answer the following: Which locations have 2 or more cinemas with capacity over 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Answer the following: Find the locations that have more than one movie theater with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: In which locations are there more than one movie theater with capacity above 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: Show home city where at least two drivers older than 40 are from. */\nSELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which cities do more than one employee under age 30 come from? */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1944,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Show all the locations with at least two cinemas with capacity above 300."
                }
            ],
            "example_quality": 0.8419772653863271,
            "example_similarity": 0.3486182765664652,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 267,
            "question": "Find the cities that have more than one employee under age 30.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all the locations with at least two cinemas with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Answer the following: Which locations have 2 or more cinemas with capacity over 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Answer the following: Find the locations that have more than one movie theater with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: In which locations are there more than one movie theater with capacity above 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: Show home city where at least two drivers older than 40 are from. */\nSELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the cities that have more than one employee under age 30. */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1944,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Show all the locations with at least two cinemas with capacity above 300."
                }
            ],
            "example_quality": 0.8421009460403109,
            "example_similarity": 0.34866615129196116,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1",
            "correct": 1
        },
        {
            "index": 268,
            "question": "Find the number of shops in each location.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of shops in each location. */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8426901216147875,
            "example_similarity": 0.34945975513546873,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*), Location FROM shop GROUP BY Location",
            "correct": 1
        },
        {
            "index": 269,
            "question": "How many shops are there in each location?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many shops are there in each location? */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8432749167017212,
            "example_similarity": 0.3495970989035828,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) , Location FROM shop GROUP BY Location",
            "correct": 1
        },
        {
            "index": 270,
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the manager name and district of the shop whose number of products is the largest. */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.843285579403396,
            "example_similarity": 0.3499461772669257,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 271,
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the manager name and district of the shop that sells the largest number of products? */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.8432961634135451,
            "example_similarity": 0.3504715682074655,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 272,
            "question": "find the minimum and maximum number of products of all stores.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: What are the durations of the longest and the shortest tracks in milliseconds? */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Answer the following: Find the maximum and minimum durations of tracks in milliseconds. */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the minimum and maximum number of products of all stores. */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                }
            ],
            "example_quality": 0.8438722804598188,
            "example_similarity": 0.35061163420198427,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT min(Number_products), max(Number_products) FROM shop",
            "correct": 1
        },
        {
            "index": 273,
            "question": "What are the minimum and maximum number of products across all the shops?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: What are the durations of the longest and the shortest tracks in milliseconds? */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Answer the following: Find the maximum and minimum durations of tracks in milliseconds. */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the minimum and maximum number of products across all the shops? */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                }
            ],
            "example_quality": 0.8444441768683909,
            "example_similarity": 0.35142638949782706,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT min(Number_products), max(Number_products) FROM shop",
            "correct": 1
        },
        {
            "index": 274,
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the dates, places, and names of events in descending order of the attendance. */\nSELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC\n\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: Show card number, name, and hometown for all members in a descending order of level. */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Answer the following: What are the card numbers, names, and hometowns of every member ordered by descending level? */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Return the name, location and district of all shops in descending order of number of products. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2812,
                    "db_id": "news_report",
                    "query": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
                    "question": "Show the dates, places, and names of events in descending order of the attendance."
                }
            ],
            "example_quality": 0.844450416537316,
            "example_similarity": 0.35188684783266766,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
            "correct": 1
        },
        {
            "index": 275,
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the dates, places, and names of events in descending order of the attendance. */\nSELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC\n\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: Show card number, name, and hometown for all members in a descending order of level. */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Answer the following: What are the card numbers, names, and hometowns of every member ordered by descending level? */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort all the shops by number products in descending order, and return the name, location and district of each shop. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2812,
                    "db_id": "news_report",
                    "query": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
                    "question": "Show the dates, places, and names of events in descending order of the attendance."
                }
            ],
            "example_quality": 0.8444566108268305,
            "example_similarity": 0.35241300654911745,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
            "correct": 1
        },
        {
            "index": 276,
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: What are the names of all aircrafts that can cover more distances than average? */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: Show names for all employees with salary more than the average. */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: What are the names of all employees who have a salary higher than average? */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: Show ids for all transactions whose amounts are greater than the average. */\nSELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of stores whose number products is more than the average number of products. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 360,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "Show names for all aircrafts with distances more than the average."
                }
            ],
            "example_quality": 0.8439053466292975,
            "example_similarity": 0.3523138565944019,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM Shop WHERE Number_products > (SELECT avg(Number_products) FROM Shop)",
            "correct": 1
        },
        {
            "index": 277,
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: What are the names of all aircrafts that can cover more distances than average? */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: Show names for all employees with salary more than the average. */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: What are the names of all employees who have a salary higher than average? */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Answer the following: Show ids for all transactions whose amounts are greater than the average. */\nSELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops' number products is above the average? Give me the shop names. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 360,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "Show names for all aircrafts with distances more than the average."
                }
            ],
            "example_quality": 0.8433580626786779,
            "example_similarity": 0.3518978892748947,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM Shop WHERE Number_products > (SELECT avg(Number_products) FROM Shop)",
            "correct": 1
        },
        {
            "index": 278,
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the most common genre in all tracks? */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the genre that is most frequent across all tracks. */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the user who gives the most reviews. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the program that is broadcast most frequently. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which program is broadcast most frequently? Give me the program name. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the name of employee who was awarded the most times in the evaluation. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 836,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the most common genre in all tracks?"
                }
            ],
            "example_quality": 0.8439215228848697,
            "example_similarity": 0.3522444289923804,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 279,
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the most common genre in all tracks? */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the genre that is most frequent across all tracks. */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the user who gives the most reviews. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the program that is broadcast most frequently. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which program is broadcast most frequently? Give me the program name. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the most awards in evaluations? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 836,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the most common genre in all tracks?"
                }
            ],
            "example_quality": 0.8444809439497984,
            "example_similarity": 0.3525601804404422,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 280,
            "question": "Find the name of the employee who got the highest one time bonus.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: Which company was started by the entrepreneur with the greatest height? */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: What is the phone number of the customer who has filed the most recent complaint? */\nSELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1\n\n/* Answer the following: Return the phone number of the customer who filed the complaint that was raised most recently. */\nSELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the employee who got the highest one time bonus. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                }
            ],
            "example_quality": 0.8450363691499777,
            "example_similarity": 0.3528147196846948,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 281,
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: Which company was started by the entrepreneur with the greatest height? */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: What is the phone number of the customer who has filed the most recent complaint? */\nSELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1\n\n/* Answer the following: Return the phone number of the customer who filed the complaint that was raised most recently. */\nSELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the biggest bonus? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                }
            ],
            "example_quality": 0.8455878411458853,
            "example_similarity": 0.3527262032494054,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 282,
            "question": "Find the names of employees who never won any award in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of employees who never won any award in the evaluation. */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8461354019928858,
            "example_similarity": 0.3525000371684538,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "correct": 1
        },
        {
            "index": 283,
            "question": "What are the names of the employees who never received any evaluation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the names of the employees who never received any evaluation? */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8466790931519216,
            "example_similarity": 0.35242714426336824,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "correct": 1
        },
        {
            "index": 284,
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of aircraft which fewest people have its certificate. */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the names of the aircraft that the least people are certified to fly? */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of track with most number of races. */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the track that has had the greatest number of races? */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the claim processing stage that most of the claims are on? */\nSELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the name of the shop that is hiring the largest number of employees? */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 432,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the name of aircraft which fewest people have its certificate."
                }
            ],
            "example_quality": 0.8472189554999782,
            "example_similarity": 0.3526410194661851,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 285,
            "question": "Which shop has the most employees? Give me the shop name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of aircraft which fewest people have its certificate. */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the names of the aircraft that the least people are certified to fly? */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of track with most number of races. */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the track that has had the greatest number of races? */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the claim processing stage that most of the claims are on? */\nSELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shop has the most employees? Give me the shop name. */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 432,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the name of aircraft which fewest people have its certificate."
                }
            ],
            "example_quality": 0.8477550293403292,
            "example_similarity": 0.3524422690713,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 286,
            "question": "Find the name of the shops that do not hire any employee.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the shops that do not hire any employee. */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8482873544125658,
            "example_similarity": 0.35275081755183013,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
            "correct": 1
        },
        {
            "index": 287,
            "question": "Which shops run with no employees? Find the shop names",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops run with no employees? Find the shop names */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8488159699024173,
            "example_similarity": 0.3524014006971358,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
            "correct": 1
        },
        {
            "index": 288,
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of products for each manufacturer, showing the name of each company. */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: Show all allergy type with number of students affected. */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: How many students are affected by each allergy type? */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: Show the card type codes and the number of transactions. */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of employees hired in each shop; show the shop name as well. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5321,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Find the number of products for each manufacturer, showing the name of each company."
                }
            ],
            "example_quality": 0.8489242477847007,
            "example_similarity": 0.35217691411299823,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) , T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name",
            "correct": 1
        },
        {
            "index": 289,
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of products for each manufacturer, showing the name of each company. */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: Show all allergy type with number of students affected. */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: How many students are affected by each allergy type? */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: Show the card type codes and the number of transactions. */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: For each shop, return the number of employees working there and the name of the shop. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5321,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Find the number of products for each manufacturer, showing the name of each company."
                }
            ],
            "example_quality": 0.8490317763390789,
            "example_similarity": 0.35202377016648434,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) as num_employees, T2.Name as shop_name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name",
            "correct": 1
        },
        {
            "index": 290,
            "question": "What is total bonus given in all evaluations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total checking balance in all accounts? */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: Find the total balance across checking accounts. */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: What is the total amount of all payments? */\nSELECT sum(amount) FROM payment\n\n/* Answer the following: Return the sum of all payment amounts. */\nSELECT sum(amount) FROM payment\n\n/* Answer the following: How many customers are there? */\nSELECT sum(no_of_customers) FROM bank\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is total bonus given in all evaluations? */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1781,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "What is the total checking balance in all accounts?"
                }
            ],
            "example_quality": 0.8495523564206683,
            "example_similarity": 0.35215200126663715,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT sum(bonus) FROM evaluation",
            "correct": 1
        },
        {
            "index": 291,
            "question": "Find the total amount of bonus given in all the evaluations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total checking balance in all accounts? */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: Find the total balance across checking accounts. */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: What is the total amount of all payments? */\nSELECT sum(amount) FROM payment\n\n/* Answer the following: Return the sum of all payment amounts. */\nSELECT sum(amount) FROM payment\n\n/* Answer the following: How many customers are there? */\nSELECT sum(no_of_customers) FROM bank\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the total amount of bonus given in all the evaluations. */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1781,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "What is the total checking balance in all accounts?"
                }
            ],
            "example_quality": 0.8500693586322812,
            "example_similarity": 0.35210403314307803,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT sum(bonus) FROM evaluation",
            "correct": 1
        },
        {
            "index": 292,
            "question": "Give me all the information about hiring.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all information regarding the basketball match. */\nSELECT * FROM basketball_match\n\n/* Answer the following: What is all the information about the basketball match? */\nSELECT * FROM basketball_match\n\n/* Answer the following: Find the details for all chip models. */\nSELECT * FROM chip_model\n\n/* Answer the following: Show all information about each body builder. */\nSELECT * FROM body_builder\n\n/* Answer the following: List all information in the item table. */\nSELECT * FROM item\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Give me all the information about hiring. */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1020,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "List all information regarding the basketball match."
                }
            ],
            "example_quality": 0.8505828197328555,
            "example_similarity": 0.35232394061970107,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT * FROM hiring",
            "correct": 1
        },
        {
            "index": 293,
            "question": "What is all the information about hiring?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all information regarding the basketball match. */\nSELECT * FROM basketball_match\n\n/* Answer the following: What is all the information about the basketball match? */\nSELECT * FROM basketball_match\n\n/* Answer the following: Find the details for all chip models. */\nSELECT * FROM chip_model\n\n/* Answer the following: Show all information about each body builder. */\nSELECT * FROM body_builder\n\n/* Answer the following: List all information in the item table. */\nSELECT * FROM item\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is all the information about hiring? */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1020,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "List all information regarding the basketball match."
                }
            ],
            "example_quality": 0.8510927759795011,
            "example_similarity": 0.35250766043381077,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT * FROM hiring",
            "correct": 1
        },
        {
            "index": 294,
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Answer the following: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Answer the following: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which district has both stores with less than 3000 products and stores with more than 10000 products? */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                }
            ],
            "example_quality": 0.8515992631360334,
            "example_similarity": 0.35237793307210374,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000",
            "correct": 1
        },
        {
            "index": 295,
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Answer the following: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Answer the following: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                }
            ],
            "example_quality": 0.8521023164813349,
            "example_similarity": 0.35241181557656914,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000",
            "correct": 1
        },
        {
            "index": 296,
            "question": "How many different store locations are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many different store locations are there? */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8526019708175466,
            "example_similarity": 0.35253123577064616,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(DISTINCT Location) FROM shop",
            "correct": 1
        },
        {
            "index": 297,
            "question": "Count the number of distinct store locations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of distinct store locations. */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8530982604780936,
            "example_similarity": 0.3520978293330666,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(DISTINCT Location) FROM shop",
            "correct": 1
        },
        {
            "index": 298,
            "question": "How many documents do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents do we have? */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8535912193355497,
            "example_similarity": 0.35192300440241875,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Documents",
            "correct": 1
        },
        {
            "index": 299,
            "question": "Count the number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents. */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8540808808093439,
            "example_similarity": 0.35226622329921814,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Documents",
            "correct": 1
        },
        {
            "index": 300,
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: Show ids, customer ids, names for all accounts. */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List document IDs, document names, and document descriptions for all documents. */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                }
            ],
            "example_quality": 0.8545672778733127,
            "example_similarity": 0.3529466063847235,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
            "correct": 1
        },
        {
            "index": 301,
            "question": "What are the ids, names, and descriptions for all documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: Show ids, customer ids, names for all accounts. */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, names, and descriptions for all documents? */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                }
            ],
            "example_quality": 0.8550504430631023,
            "example_similarity": 0.35290222209524796,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
            "correct": 1
        },
        {
            "index": 302,
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019. */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Answer the following: What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it? */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document name and template id for document with description with the letter 'w' in it? */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                }
            ],
            "example_quality": 0.8555304084834232,
            "example_similarity": 0.3527790529101813,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'",
            "correct": 1
        },
        {
            "index": 303,
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019. */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Answer the following: What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it? */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the names and template ids for documents that contain the letter w in their description. */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                }
            ],
            "example_quality": 0.8560072058151611,
            "example_similarity": 0.35277468986180827,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'",
            "correct": 1
        },
        {
            "index": 304,
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Answer the following: What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Answer the following: What are the full name (first and last name) and salary for all employees who does not have any value for commission? */\nSELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id, template id and description for document named \"Robbin CV\"? */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                }
            ],
            "example_quality": 0.856480866322348,
            "example_similarity": 0.35294910739202473,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = \"Robbin CV\"",
            "correct": 1
        },
        {
            "index": 305,
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Answer the following: What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Answer the following: What are the full name (first and last name) and salary for all employees who does not have any value for commission? */\nSELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the document id, template id, and description for the document with the name Robbin CV. */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                }
            ],
            "example_quality": 0.8569514208589961,
            "example_similarity": 0.3529205232262121,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
            "correct": 1
        },
        {
            "index": 306,
            "question": "How many different templates do all document use?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many different templates do all document use? */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8574188998757968,
            "example_similarity": 0.3528942104555223,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(DISTINCT Template_ID) FROM Documents",
            "correct": 1
        },
        {
            "index": 307,
            "question": "Count the number of different templates used for documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of different templates used for documents. */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8578833334266899,
            "example_similarity": 0.35270562996543925,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(DISTINCT Template_ID) FROM Documents",
            "correct": 1
        },
        {
            "index": 308,
            "question": "How many documents are using the template with type code 'PPT'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: Find the number of albums by the artist \"Metallica\". */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: How many transaction does account with name 337 have? */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents are using the template with type code 'PPT'? */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.8583447511753044,
            "example_similarity": 0.35261914908476105,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'PPT'",
            "correct": 1
        },
        {
            "index": 309,
            "question": "Count the number of documents that use the PPT template type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: Find the number of albums by the artist \"Metallica\". */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: How many transaction does account with name 337 have? */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents that use the PPT template type. */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.8588031824012743,
            "example_similarity": 0.3523000177541937,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T1.Template_ID = T3.Template_ID WHERE T2.Template_Type_Description = \"PPT\"",
            "correct": 0
        },
        {
            "index": 310,
            "question": "Show all template ids and number of documents using each template.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template ids and number of documents using each template. */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8592586560064315,
            "example_similarity": 0.35212281905515636,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID",
            "correct": 1
        },
        {
            "index": 311,
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are all different template ids used for documents, and how many times were each of them used? */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8597112005208803,
            "example_similarity": 0.35179676657232445,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID",
            "correct": 1
        },
        {
            "index": 312,
            "question": "What is the id and type code for the template used by the most documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and first name of the student that has the most number of assessment notes? */\nSELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the ids and first names of the 3 teachers that have the most number of assessment notes? */\nSELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Find the id and last name of the student that has the most behavior incidents? */\nSELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the code and description of the most frequent behavior incident type? */\nSELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the id and type code for the template used by the most documents? */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3105,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and first name of the student that has the most number of assessment notes?"
                }
            ],
            "example_quality": 0.8601608441089545,
            "example_similarity": 0.3518024427944391,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 313,
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and first name of the student that has the most number of assessment notes? */\nSELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the ids and first names of the 3 teachers that have the most number of assessment notes? */\nSELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Find the id and last name of the student that has the most behavior incidents? */\nSELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the code and description of the most frequent behavior incident type? */\nSELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and type code of the template that is used for the greatest number of documents. */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3105,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and first name of the student that has the most number of assessment notes?"
                }
            ],
            "example_quality": 0.8606076145750601,
            "example_similarity": 0.35173589419436974,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID, T2.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 314,
            "question": "Show ids for all templates that are used by more than one document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates that are used by more than one document. */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.861051539369407,
            "example_similarity": 0.35160003742008467,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 315,
            "question": "What are the template ids of any templates used in more than a single document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids of any templates used in more than a single document? */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.8614926455936311,
            "example_similarity": 0.35127358388812924,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 316,
            "question": "Show ids for all templates not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all employees who don't have a certificate. */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Answer the following: Which students are unaffected by allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Answer the following: Find the id of the courses that do not have any prerequisite? */\nSELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates not used by any document. */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 422,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "Show ids for all employees who don't have a certificate."
                }
            ],
            "example_quality": 0.8619309600063095,
            "example_similarity": 0.35096328714874114,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
            "correct": 1
        },
        {
            "index": 317,
            "question": "What are the ids for templates that are not used in any documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all employees who don't have a certificate. */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Answer the following: Which students are unaffected by allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Answer the following: Find the id of the courses that do not have any prerequisite? */\nSELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids for templates that are not used in any documents? */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 422,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "Show ids for all employees who don't have a certificate."
                }
            ],
            "example_quality": 0.8623665090283716,
            "example_similarity": 0.3508581442435679,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
            "correct": 1
        },
        {
            "index": 318,
            "question": "How many templates do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates do we have? */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8627993187484082,
            "example_similarity": 0.35069821297236176,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates",
            "correct": 1
        },
        {
            "index": 319,
            "question": "Count the number of templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates. */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8632294149278803,
            "example_similarity": 0.35102375291459714,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates",
            "correct": 1
        },
        {
            "index": 320,
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: Show ids, customer ids, names for all accounts. */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show template ids, version numbers, and template type codes for all templates. */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                }
            ],
            "example_quality": 0.8636568230062306,
            "example_similarity": 0.35147450105516015,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 321,
            "question": "What are the ids, version numbers, and type codes for each template?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: Show ids, customer ids, names for all accounts. */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, version numbers, and type codes for each template? */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                }
            ],
            "example_quality": 0.8640815681058998,
            "example_similarity": 0.35156529709028944,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 322,
            "question": "Show all distinct template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergy types. */\nSELECT DISTINCT allergytype FROM Allergy_type\n\n/* Answer the following: What are the different allergy types? */\nSELECT DISTINCT allergytype FROM Allergy_type\n\n/* Answer the following: Show all majors. */\nSELECT DISTINCT Major FROM Student\n\n/* Answer the following: What are the different majors? */\nSELECT DISTINCT Major FROM Student\n\n/* Answer the following: Show all cities where students live. */\nSELECT DISTINCT city_code FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all distinct template type codes for all templates. */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 444,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT allergytype FROM Allergy_type",
                    "question": "Show all allergy types."
                }
            ],
            "example_quality": 0.8645036750372478,
            "example_similarity": 0.3511840731515345,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 323,
            "question": "What are the different template type codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergy types. */\nSELECT DISTINCT allergytype FROM Allergy_type\n\n/* Answer the following: What are the different allergy types? */\nSELECT DISTINCT allergytype FROM Allergy_type\n\n/* Answer the following: Show all majors. */\nSELECT DISTINCT Major FROM Student\n\n/* Answer the following: What are the different majors? */\nSELECT DISTINCT Major FROM Student\n\n/* Answer the following: Show all cities where students live. */\nSELECT DISTINCT city_code FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes? */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 444,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT allergytype FROM Allergy_type",
                    "question": "Show all allergy types."
                }
            ],
            "example_quality": 0.8649231683033863,
            "example_similarity": 0.35136714006225633,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
            "correct": 0
        },
        {
            "index": 324,
            "question": "What are the ids of templates with template type code PP or PPT?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Answer the following: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Give me the names of members whose address is in Harford or Waterbury. */\nSELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\n\n/* Answer the following: What are the life spans of representatives from New York state or Indiana state? */\nSELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of templates with template type code PP or PPT? */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.8653400721049191,
            "example_similarity": 0.3516999232501768,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
            "correct": 1
        },
        {
            "index": 325,
            "question": "Return the ids of templates that have the code PP or PPT.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Answer the following: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Give me the names of members whose address is in Harford or Waterbury. */\nSELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\n\n/* Answer the following: What are the life spans of representatives from New York state or Indiana state? */\nSELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids of templates that have the code PP or PPT. */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.8657544103445963,
            "example_similarity": 0.35150154383699395,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
            "correct": 1
        },
        {
            "index": 326,
            "question": "How many templates have template type code CV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates have template type code CV? */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8661662066318828,
            "example_similarity": 0.3522724847541452,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
            "correct": 1
        },
        {
            "index": 327,
            "question": "Count the number of templates of the type CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates of the type CV. */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8665754842874428,
            "example_similarity": 0.35168727949234546,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
            "correct": 1
        },
        {
            "index": 328,
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the component amounts and names of all furnitures that have more than 10 components. */\nSELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10\n\n/* Answer the following: Find the name and email of the users who have more than 1000 followers. */\nSELECT name ,  email FROM user_profiles WHERE followers  >  1000\n\n/* Answer the following: Find the name and capacity of products with price greater than 700 (in USD). */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Show origin and destination for flights with price higher than 300. */\nSELECT origin ,  destination FROM Flight WHERE price  >  300\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the version number and template type code for the template with version number later than 5? */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3393,
                    "db_id": "manufacturer",
                    "query": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",
                    "question": "Find the component amounts and names of all furnitures that have more than 10 components."
                }
            ],
            "example_quality": 0.8665388073674978,
            "example_similarity": 0.35161891408605456,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
            "correct": 1
        },
        {
            "index": 329,
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the component amounts and names of all furnitures that have more than 10 components. */\nSELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10\n\n/* Answer the following: Find the name and email of the users who have more than 1000 followers. */\nSELECT name ,  email FROM user_profiles WHERE followers  >  1000\n\n/* Answer the following: Find the name and capacity of products with price greater than 700 (in USD). */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Show origin and destination for flights with price higher than 300. */\nSELECT origin ,  destination FROM Flight WHERE price  >  300\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the version numbers and template type codes of templates with a version number greater than 5. */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3393,
                    "db_id": "manufacturer",
                    "query": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",
                    "question": "Find the component amounts and names of all furnitures that have more than 10 components."
                }
            ],
            "example_quality": 0.8665023534075523,
            "example_similarity": 0.3517838290452415,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
            "correct": 1
        },
        {
            "index": 330,
            "question": "Show all template type codes and number of templates for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and number of templates for each. */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8669068917305597,
            "example_similarity": 0.3516946028399121,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
            "correct": 1
        },
        {
            "index": 331,
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many templates correspond to each? */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8673089857132469,
            "example_similarity": 0.3514162066214999,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
            "correct": 1
        },
        {
            "index": 332,
            "question": "Which template type code has most number of templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code has most number of templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8677086574430262,
            "example_similarity": 0.3510720097857209,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 333,
            "question": "Return the type code of the template type that the most templates belong to.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type that the most templates belong to. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8681059287419961,
            "example_similarity": 0.35071486518318973,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 334,
            "question": "Show all template type codes with less than three templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Report all majors that have less than 3 students. */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: What are the majors only less than three students are studying? */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: Show the document type code with fewer than 3 documents. */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes with less than three templates. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5505,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "Report all majors that have less than 3 students."
                }
            ],
            "example_quality": 0.8684010207717107,
            "example_similarity": 0.35077861041319747,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
            "correct": 1
        },
        {
            "index": 335,
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Report all majors that have less than 3 students. */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: What are the majors only less than three students are studying? */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: Show the document type code with fewer than 3 documents. */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that have fewer than 3 templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5505,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "Report all majors that have less than 3 students."
                }
            ],
            "example_quality": 0.8686943510579642,
            "example_similarity": 0.35093558993497553,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
            "correct": 1
        },
        {
            "index": 336,
            "question": "What the smallest version number and its template type code?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum snatch score? */\nSELECT min(snatch) FROM body_builder\n\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What the smallest version number and its template type code? */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1174,
                    "db_id": "body_builder",
                    "query": "SELECT min(snatch) FROM body_builder",
                    "question": "What is the minimum snatch score?"
                }
            ],
            "example_quality": 0.8679105385052123,
            "example_similarity": 0.35086725838896726,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT min(Version_Number), Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 337,
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum snatch score? */\nSELECT min(snatch) FROM body_builder\n\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the lowest version number, along with its corresponding template type code. */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1174,
                    "db_id": "body_builder",
                    "query": "SELECT min(snatch) FROM body_builder",
                    "question": "What is the minimum snatch score?"
                }
            ],
            "example_quality": 0.8671313776590049,
            "example_similarity": 0.3503558212692352,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT min(Version_Number), Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 338,
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What are the flight numbers for the aircraft Airbus A340-300? */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What is the booking status code of the apartment with apartment number \"Suite 634\"? */\nSELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code of the template used by document with the name \"Data base\"? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                }
            ],
            "example_quality": 0.8675244800919665,
            "example_similarity": 0.35042586411468213,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = \"Data base\"",
            "correct": 1
        },
        {
            "index": 339,
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What are the flight numbers for the aircraft Airbus A340-300? */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What is the booking status code of the apartment with apartment number \"Suite 634\"? */\nSELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type code of the template that is used by a document named Data base. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                }
            ],
            "example_quality": 0.8679152633365329,
            "example_similarity": 0.35022602722767804,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Template_Type_Code FROM Templates AS T2 JOIN Documents AS T1 ON T2.Template_ID = T1.Template_ID WHERE T1.Document_Name = \"Data base\"",
            "correct": 1
        },
        {
            "index": 340,
            "question": "Show all document names using templates with template type code BK.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What is the name of the language that the film 'AIRPORT POLLOCK' is in? */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What are the monthly rentals of student addresses in Texas state? */\nSELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document names using templates with template type code BK. */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                }
            ],
            "example_quality": 0.8683037478561315,
            "example_similarity": 0.350095442052506,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'BK'",
            "correct": 0
        },
        {
            "index": 341,
            "question": "What are the names of documents that use templates with the code BK?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What is the name of the language that the film 'AIRPORT POLLOCK' is in? */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What are the monthly rentals of student addresses in Texas state? */\nSELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the names of documents that use templates with the code BK? */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                }
            ],
            "example_quality": 0.8686899538741487,
            "example_similarity": 0.35006559967674844,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'BK'",
            "correct": 0
        },
        {
            "index": 342,
            "question": "Show all template type codes and the number of documents using each type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: List the name and the number of enrolled student for each course. */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: Show the names of products and the number of events they are in. */\nSELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name\n\n/* Answer the following: Show all cities along with the number of drama workshop groups in each city. */\nSELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and the number of documents using each type. */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.8690739013774407,
            "example_similarity": 0.3502944428991544,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_Type_Code, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code",
            "correct": 1
        },
        {
            "index": 343,
            "question": "What are the different template type codes, and how many documents use each type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: List the name and the number of enrolled student for each course. */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: Show the names of products and the number of events they are in. */\nSELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name\n\n/* Answer the following: Show all cities along with the number of drama workshop groups in each city. */\nSELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many documents use each type? */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.8694556101197807,
            "example_similarity": 0.3500933901015864,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_Type_Code, COUNT(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code",
            "correct": 1
        },
        {
            "index": 344,
            "question": "Which template type code is used by most number of documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code is used by most number of documents? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8698350996252463,
            "example_similarity": 0.3500921229124129,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t1.Template_Type_Code FROM Ref_Template_Types AS t1 JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code JOIN Documents AS t3 ON t2.Template_ID = t3.Template_ID GROUP BY t1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 345,
            "question": "Return the code of the template type that is most commonly used in documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the code of the template type that is most commonly used in documents. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8702123891915499,
            "example_similarity": 0.3500894827113018,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t1.Template_Type_Code FROM Ref_Template_Types AS t1 JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code JOIN Documents AS t3 ON t2.Template_ID = t3.Template_ID GROUP BY t1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 346,
            "question": "Show all template type codes that are not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of artists that do not have any albums. */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: What are the names of artists who have not released any albums? */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: Find the names of users who do not have a first notification of loss record. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Answer the following: Which customers do not have a first notification of loss record? Give me the customer names. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Answer the following: Find the names of customers who have no policies associated. */\nSELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes that are not used by any document. */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 878,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
                    "question": "Find the names of artists that do not have any albums."
                }
            ],
            "example_quality": 0.8701250701476437,
            "example_similarity": 0.34996460135240604,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))",
            "correct": 1
        },
        {
            "index": 347,
            "question": "What are the codes of template types that are not used for any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of artists that do not have any albums. */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: What are the names of artists who have not released any albums? */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: Find the names of users who do not have a first notification of loss record. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Answer the following: Which customers do not have a first notification of loss record? Give me the customer names. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Answer the following: Find the names of customers who have no policies associated. */\nSELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that are not used for any document? */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 878,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
                    "question": "Find the names of artists that do not have any albums."
                }
            ],
            "example_quality": 0.8700382543835294,
            "example_similarity": 0.3498901492396757,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT T1.Template_Type_Code FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_ID IS NOT NULL",
            "correct": 1
        },
        {
            "index": 348,
            "question": "Show all template type codes and descriptions.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and descriptions. */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8704117076755308,
            "example_similarity": 0.3498490408096318,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
            "correct": 1
        },
        {
            "index": 349,
            "question": "What are the type codes and descriptions for all template types?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the type codes and descriptions for all template types? */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8707830208340536,
            "example_similarity": 0.3500548482118273,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
            "correct": 1
        },
        {
            "index": 350,
            "question": "What is the template type descriptions for template type code \"AD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type descriptions for template type code \"AD\". */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8711522122030991,
            "example_similarity": 0.3500826968100368,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
            "correct": 1
        },
        {
            "index": 351,
            "question": "Return the template type description of the template type with the code AD.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type description of the template type with the code AD. */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8715192999176202,
            "example_similarity": 0.3502338034688034,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
            "correct": 1
        },
        {
            "index": 352,
            "question": "What is the template type code for template type description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code for template type description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8718843019064907,
            "example_similarity": 0.3502609854407248,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
            "correct": 1
        },
        {
            "index": 353,
            "question": "Return the type code of the template type with the description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type with the description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8722472358954242,
            "example_similarity": 0.3503738236668331,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
            "correct": 1
        },
        {
            "index": 354,
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of address of students? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: What are the different cities where students live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'? */\nSELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'\n\n/* Answer the following: What are the papers published under the institution \"Indiana University\"? */\nSELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n\n/* Answer the following: List the titles of the papers whose authors are from the institution \"Indiana University\". */\nSELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the distinct template type descriptions for the templates ever used by any document? */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 94,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
                    "question": "Find distinct cities of address of students?"
                }
            ],
            "example_quality": 0.8721457306051649,
            "example_similarity": 0.3504286701358088,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
            "correct": 1
        },
        {
            "index": 355,
            "question": "Return the different descriptions for templates that have been used in a document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of address of students? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: What are the different cities where students live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'? */\nSELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'\n\n/* Answer the following: What are the papers published under the institution \"Indiana University\"? */\nSELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n\n/* Answer the following: List the titles of the papers whose authors are from the institution \"Indiana University\". */\nSELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different descriptions for templates that have been used in a document. */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 94,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
                    "question": "Find distinct cities of address of students?"
                }
            ],
            "example_quality": 0.8720447971756957,
            "example_similarity": 0.34986751233657615,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
            "correct": 1
        },
        {
            "index": 356,
            "question": "What are the template ids with template type description \"Presentation\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What is the name of the language that the film 'AIRPORT POLLOCK' is in? */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What are the monthly rentals of student addresses in Texas state? */\nSELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids with template type description \"Presentation\". */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                }
            ],
            "example_quality": 0.8724042219027301,
            "example_similarity": 0.3501257233071166,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T2.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = \"Presentation\"",
            "correct": 0
        },
        {
            "index": 357,
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What is the name of the language that the film 'AIRPORT POLLOCK' is in? */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What are the monthly rentals of student addresses in Texas state? */\nSELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids corresponding to templates with the description 'Presentation'. */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                }
            ],
            "example_quality": 0.8727616330458597,
            "example_similarity": 0.3497561325364575,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')",
            "correct": 1
        },
        {
            "index": 358,
            "question": "How many paragraphs in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs in total? */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8731170474786926,
            "example_similarity": 0.34971872332927084,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs",
            "correct": 1
        },
        {
            "index": 359,
            "question": "Count the number of paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs. */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.87347048188683,
            "example_similarity": 0.35001071979505405,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs",
            "correct": 1
        },
        {
            "index": 360,
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: Find the number of albums by the artist \"Metallica\". */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: How many transaction does account with name 337 have? */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs for the document with name 'Summer Show'? */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.8738219527704776,
            "example_similarity": 0.3500771388195885,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'",
            "correct": 1
        },
        {
            "index": 361,
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: Find the number of albums by the artist \"Metallica\". */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Answer the following: How many transaction does account with name 337 have? */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs in the document named 'Summer Show'. */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.8741714764470137,
            "example_similarity": 0.34978496989613383,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'",
            "correct": 1
        },
        {
            "index": 362,
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Find the IDs of customers whose name contains \"Diana\". */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: What are the IDs of customers who have \"Diana\" in part of their names? */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: Find the department name of the instructor whose name contains 'Soisalon'. */\nSELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show paragraph details for paragraph with text 'Korea ' . */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                }
            ],
            "example_quality": 0.8726774484273627,
            "example_similarity": 0.34935733749005354,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
            "correct": 0
        },
        {
            "index": 363,
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Find the IDs of customers whose name contains \"Diana\". */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: What are the IDs of customers who have \"Diana\" in part of their names? */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: Find the department name of the instructor whose name contains 'Soisalon'. */\nSELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the details for the paragraph that includes the text 'Korea ' ? */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                }
            ],
            "example_quality": 0.8711916519670486,
            "example_similarity": 0.3489051559910262,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
            "correct": 0
        },
        {
            "index": 364,
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the city and name of bank branches that provide business loans. */\nSELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\n\n/* Answer the following: What are the names and cities of bank branches that offer loans for business? */\nSELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\n\n/* Answer the following: Find the last name and hire date of the professor who is in office DRE 102. */\nSELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\n\n/* Answer the following: What is the last name of the professor whose office is located in DRE 102, and when were they hired? */\nSELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\n\n/* Answer the following: What is the first name and job id for all employees in the Finance department? */\nSELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph ids and texts for the document with name 'Welcome to NY'. */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3077,
                    "db_id": "loan_1",
                    "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
                    "question": "Find the city and name of bank branches that provide business loans."
                }
            ],
            "example_quality": 0.8715455210550512,
            "example_similarity": 0.34884649611834634,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'",
            "correct": 1
        },
        {
            "index": 365,
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the city and name of bank branches that provide business loans. */\nSELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\n\n/* Answer the following: What are the names and cities of bank branches that offer loans for business? */\nSELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\n\n/* Answer the following: Find the last name and hire date of the professor who is in office DRE 102. */\nSELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\n\n/* Answer the following: What is the last name of the professor whose office is located in DRE 102, and when were they hired? */\nSELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'\n\n/* Answer the following: What is the first name and job id for all employees in the Finance department? */\nSELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3077,
                    "db_id": "loan_1",
                    "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
                    "question": "Find the city and name of bank branches that provide business loans."
                }
            ],
            "example_quality": 0.8718974511343525,
            "example_similarity": 0.3488621197298898,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'",
            "correct": 1
        },
        {
            "index": 366,
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What are the flight numbers for the aircraft Airbus A340-300? */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What is the booking status code of the apartment with apartment number \"Suite 634\"? */\nSELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph texts for the document \"Customer reviews\". */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                }
            ],
            "example_quality": 0.8722474580984663,
            "example_similarity": 0.3488297746200371,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = \"Customer reviews\"",
            "correct": 1
        },
        {
            "index": 367,
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What are the flight numbers for the aircraft Airbus A340-300? */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What is the booking status code of the apartment with apartment number \"Suite 634\"? */\nSELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the paragraph texts for the document with the name 'Customer reviews'? */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                }
            ],
            "example_quality": 0.8725955576676803,
            "example_similarity": 0.34883615738348067,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'",
            "correct": 1
        },
        {
            "index": 368,
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all locations and the number of gas stations in each location ordered by the count. */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: For each location, how many gas stations are there in order? */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. */\nSELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n\n/* Answer the following: Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments. */\nSELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n\n/* Answer the following: Show each gender code and the corresponding count of guests sorted by the count in descending order. */\nSELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids and the number of paragraphs in each document. Order by document id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2018,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
                    "question": "Show all locations and the number of gas stations in each location ordered by the count."
                }
            ],
            "example_quality": 0.8721806303911439,
            "example_similarity": 0.34912242276608485,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, COUNT(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;",
            "correct": 1
        },
        {
            "index": 369,
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all locations and the number of gas stations in each location ordered by the count. */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: For each location, how many gas stations are there in order? */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. */\nSELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n\n/* Answer the following: Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments. */\nSELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n\n/* Answer the following: Show each gender code and the corresponding count of guests sorted by the count in descending order. */\nSELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2018,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
                    "question": "Show all locations and the number of gas stations in each location ordered by the count."
                }
            ],
            "example_quality": 0.8717679520429357,
            "example_similarity": 0.3491063650692025,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, COUNT(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;",
            "correct": 1
        },
        {
            "index": 370,
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the subject ID, subject name, and the corresponding number of available courses for each subject. */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Answer the following: What are the subject ID, subject name, and the number of available courses for each subject? */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids, names and the number of paragraphs in each document. */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3815,
                    "db_id": "e_learning",
                    "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id",
                    "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject."
                }
            ],
            "example_quality": 0.8719671049981023,
            "example_similarity": 0.34944944903071823,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name, COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name",
            "correct": 1
        },
        {
            "index": 371,
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the subject ID, subject name, and the corresponding number of available courses for each subject. */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Answer the following: What are the subject ID, subject name, and the number of available courses for each subject? */\nSELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id\n\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and names of each document, as well as the number of paragraphs in each? */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3815,
                    "db_id": "e_learning",
                    "query": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id",
                    "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject."
                }
            ],
            "example_quality": 0.8721651843524322,
            "example_similarity": 0.34939062173164026,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name, COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name",
            "correct": 1
        },
        {
            "index": 372,
            "question": "List all document ids with at least two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List all document ids with at least two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.8725088263299794,
            "example_similarity": 0.3492977307184777,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 373,
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that have 2 or more paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.8728506257231966,
            "example_similarity": 0.34956100757982234,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 374,
            "question": "What is the document id and name with greatest number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and first name of the student that has the most number of assessment notes? */\nSELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the ids and first names of the 3 teachers that have the most number of assessment notes? */\nSELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Find the id and last name of the student that has the most behavior incidents? */\nSELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the code and description of the most frequent behavior incident type? */\nSELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id and name with greatest number of paragraphs? */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3105,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and first name of the student that has the most number of assessment notes?"
                }
            ],
            "example_quality": 0.8731905973121721,
            "example_similarity": 0.3495641745132367,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 375,
            "question": "Return the id and name of the document with the most paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and first name of the student that has the most number of assessment notes? */\nSELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the ids and first names of the 3 teachers that have the most number of assessment notes? */\nSELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Find the id and last name of the student that has the most behavior incidents? */\nSELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the code and description of the most frequent behavior incident type? */\nSELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and name of the document with the most paragraphs. */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3105,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and first name of the student that has the most number of assessment notes?"
                }
            ],
            "example_quality": 0.8735287557193396,
            "example_similarity": 0.34970726122277496,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T2.Document_Name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 376,
            "question": "What is the document id with least number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type has least number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which allergy type is the least common? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: List three countries which are the origins of the least players. */\nSELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n\n/* Answer the following: What are the three countries that the least players are from? */\nSELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n\n/* Answer the following: In which year did the least people enter hall of fame? */\nSELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with least number of paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 458,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type has least number of allergies?"
                }
            ],
            "example_quality": 0.8738651154115754,
            "example_similarity": 0.34991728571576824,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Documents GROUP BY Document_ID ORDER BY count(*) ASC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 377,
            "question": "Return the id of the document with the fewest paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type has least number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which allergy type is the least common? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: List three countries which are the origins of the least players. */\nSELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n\n/* Answer the following: What are the three countries that the least players are from? */\nSELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n\n/* Answer the following: In which year did the least people enter hall of fame? */\nSELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id of the document with the fewest paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 458,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type has least number of allergies?"
                }
            ],
            "example_quality": 0.8741996907022609,
            "example_similarity": 0.34956070834277964,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Documents GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 378,
            "question": "What is the document id with 1 to 2 paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which cities have 2 to 4 parks? */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Find all the cities that have 2 to 4 parks. */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Which major has between 2 and 30 number of students? List major and the number of students. */\nSELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;\n\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with 1 to 2 paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3708,
                    "db_id": "baseball_1",
                    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "Which cities have 2 to 4 parks?"
                }
            ],
            "example_quality": 0.8739630828029479,
            "example_similarity": 0.3495335328409103,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;",
            "correct": 1
        },
        {
            "index": 379,
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which cities have 2 to 4 parks? */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Find all the cities that have 2 to 4 parks. */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Which major has between 2 and 30 number of students? List major and the number of students. */\nSELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;\n\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Give the ids of documents that have between one and two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3708,
                    "db_id": "baseball_1",
                    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "Which cities have 2 to 4 parks?"
                }
            ],
            "example_quality": 0.8737277234941324,
            "example_similarity": 0.3493087302036872,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;",
            "correct": 0
        },
        {
            "index": 380,
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: What is the membership card held by both members living in Hartford and ones living in Waterbury address? */\nSELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'\n\n/* Answer the following: Which college have both players with position midfielder and players with position defender? */\nSELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Answer the following: Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position. */\nSELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show the document id with paragraph text 'Brazil' and 'Ireland'. */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 271,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                    "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"."
                }
            ],
            "example_quality": 0.8740600189586215,
            "example_similarity": 0.3493299246962107,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'",
            "correct": 1
        },
        {
            "index": 381,
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: What is the membership card held by both members living in Hartford and ones living in Waterbury address? */\nSELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'\n\n/* Answer the following: Which college have both players with position midfielder and players with position defender? */\nSELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Answer the following: Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position. */\nSELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 271,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                    "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"."
                }
            ],
            "example_quality": 0.8743905700899638,
            "example_similarity": 0.34914292184029233,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'",
            "correct": 1
        },
        {
            "index": 382,
            "question": "How many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: How many teachers are there? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8747193905871105,
            "example_similarity": 0.3498948085275262,
            "db_id": "course_teach",
            "pred": "SELECT count(*) FROM teacher",
            "correct": 1
        },
        {
            "index": 383,
            "question": "What is the total count of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the total count of teachers? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.875046494005943,
            "example_similarity": 0.3496600962337207,
            "db_id": "course_teach",
            "pred": "SELECT count(*) FROM teacher",
            "correct": 1
        },
        {
            "index": 384,
            "question": "List the names of teachers in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of the books in ascending order of issues. */\nSELECT Title FROM book ORDER BY Issues ASC\n\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Answer the following: Return all players sorted by college in ascending alphabetical order. */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are all the players who played in match season, sorted by college in ascending alphabetical order? */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are the birthdays of people in ascending order of height? */\nSELECT Birth_Date FROM People ORDER BY Height ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers in ascending order of age. */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 216,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book ORDER BY Issues ASC",
                    "question": "List the titles of the books in ascending order of issues."
                }
            ],
            "example_quality": 0.8753718937611359,
            "example_similarity": 0.3503793917258657,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 385,
            "question": "What are the names of the teachers ordered by ascending age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of the books in ascending order of issues. */\nSELECT Title FROM book ORDER BY Issues ASC\n\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Answer the following: Return all players sorted by college in ascending alphabetical order. */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are all the players who played in match season, sorted by college in ascending alphabetical order? */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are the birthdays of people in ascending order of height? */\nSELECT Birth_Date FROM People ORDER BY Height ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers ordered by ascending age? */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 216,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book ORDER BY Issues ASC",
                    "question": "List the titles of the books in ascending order of issues."
                }
            ],
            "example_quality": 0.8756956031279901,
            "example_similarity": 0.35044818453033527,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 386,
            "question": "What are the age and hometown of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the age and hometown of teachers? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8760176352442388,
            "example_similarity": 0.35082491841980973,
            "db_id": "course_teach",
            "pred": "SELECT Age, Hometown FROM teacher",
            "correct": 1
        },
        {
            "index": 387,
            "question": "What is the age and hometown of every teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the age and hometown of every teacher? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8763380031118247,
            "example_similarity": 0.35089973831996585,
            "db_id": "course_teach",
            "pred": "SELECT Age, Hometown FROM teacher",
            "correct": 1
        },
        {
            "index": 388,
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the name of teachers whose hometown is not `` Little Lever Urban District '' . */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8752509089144888,
            "example_similarity": 0.35091983427712303,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
            "correct": 0
        },
        {
            "index": 389,
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8741694038904039,
            "example_similarity": 0.35125638227017963,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
            "correct": 0
        },
        {
            "index": 390,
            "question": "Show the name of teachers aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors of age either 24 or 25. */\nSELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\n\n/* Answer the following: Show the names of people aged either 35 or 36. */\nSELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\n\n/* Answer the following: Show the name of technicians aged either 36 or 37 */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: What are the names of the technicians aged either 36 or 37? */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: Find the official names of cities with population bigger than 1500 or smaller than 500. */\nSELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of teachers aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 654,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                    "question": "Show the names of editors of age either 24 or 25."
                }
            ],
            "example_quality": 0.8743455262980109,
            "example_similarity": 0.3521536570420479,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "correct": 1
        },
        {
            "index": 391,
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors of age either 24 or 25. */\nSELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\n\n/* Answer the following: Show the names of people aged either 35 or 36. */\nSELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\n\n/* Answer the following: Show the name of technicians aged either 36 or 37 */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: What are the names of the technicians aged either 36 or 37? */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: Find the official names of cities with population bigger than 1500 or smaller than 500. */\nSELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who are aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 654,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                    "question": "Show the names of editors of age either 24 or 25."
                }
            ],
            "example_quality": 0.8745207478237376,
            "example_similarity": 0.3525127112686644,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "correct": 1
        },
        {
            "index": 392,
            "question": "What is the hometown of the youngest teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Show the name of employees with three lowest salaries. */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Answer the following: What is the name of the 3 employees who get paid the least? */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the hometown of the youngest teacher? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                }
            ],
            "example_quality": 0.8748408479568403,
            "example_similarity": 0.3524503205653146,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 393,
            "question": "Where is the youngest teacher from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Show the name of employees with three lowest salaries. */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Answer the following: What is the name of the 3 employees who get paid the least? */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Where is the youngest teacher from? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                }
            ],
            "example_quality": 0.875159319081632,
            "example_similarity": 0.35194939922874674,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 394,
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show different hometown of teachers and the number of teachers from each hometown. */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8754761736017294,
            "example_similarity": 0.35207699522619207,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
            "correct": 1
        },
        {
            "index": 395,
            "question": "For each hometown, how many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: For each hometown, how many teachers are there? */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8757914237951426,
            "example_similarity": 0.35201684808412165,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
            "correct": 1
        },
        {
            "index": 396,
            "question": "List the most common hometown of teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the most common hometown of teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.876105081815862,
            "example_similarity": 0.3522136210686035,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 397,
            "question": "What is the most commmon hometowns for teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the most commmon hometowns for teachers? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.876417159695419,
            "example_similarity": 0.3520655848025446,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 398,
            "question": "Show the hometowns shared by at least two teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the hometowns shared by at least two teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.8767276693444255,
            "example_similarity": 0.3519168198730336,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 399,
            "question": "What are the towns from which at least two teachers come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the towns from which at least two teachers come from? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.8770366225540887,
            "example_similarity": 0.3516051881379526,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 400,
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of players and names of their coaches. */\nSELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID\n\n/* Answer the following: Show the names of phones and the districts of markets they are on. */\nSELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID\n\n/* Answer the following: Show the names of pilots and models of aircrafts they have flied with. */\nSELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID\n\n/* Answer the following: Show names of technicians and series of machines they are assigned to repair. */\nSELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID\n\n/* Answer the following: What are the names of technicians and the machine series that they repair? */\nSELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1729,
                    "db_id": "riding_club",
                    "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
                    "question": "Show the names of players and names of their coaches."
                }
            ],
            "example_quality": 0.8773440309977034,
            "example_similarity": 0.35198081913045604,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, T1.Course FROM course_arrange AS T3 JOIN course AS T1 ON T3.Course_ID = T1.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID",
            "correct": 1
        },
        {
            "index": 401,
            "question": "What is the name of each teacher and what course they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of players and names of their coaches. */\nSELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID\n\n/* Answer the following: Show the names of phones and the districts of markets they are on. */\nSELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID\n\n/* Answer the following: Show the names of pilots and models of aircrafts they have flied with. */\nSELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID\n\n/* Answer the following: Show names of technicians and series of machines they are assigned to repair. */\nSELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID\n\n/* Answer the following: What are the names of technicians and the machine series that they repair? */\nSELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the name of each teacher and what course they teach? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1729,
                    "db_id": "riding_club",
                    "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
                    "question": "Show the names of players and names of their coaches."
                }
            ],
            "example_quality": 0.877649906232123,
            "example_similarity": 0.3519753169283607,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, T1.Course FROM course_arrange AS T3 JOIN course AS T1 ON T3.Course_ID = T1.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID",
            "correct": 1
        },
        {
            "index": 402,
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market. */\nSELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking\n\n/* Answer the following: Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot. */\nSELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank\n\n/* Answer the following: Show the locations of parties and the names of the party hosts in ascending order of the age of the host. */\nSELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age\n\n/* Answer the following: For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host. */\nSELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age\n\n/* Answer the following: Show the names of players and names of their coaches in descending order of the votes of players. */\nSELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1989,
                    "db_id": "phone_market",
                    "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
                    "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market."
                }
            ],
            "example_quality": 0.8777606464844928,
            "example_similarity": 0.35231193752811496,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, T1.Course FROM course_arrange AS T3 JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID JOIN course AS T1 ON T3.Course_ID = T1.Course_ID ORDER BY T2.Name ASC;",
            "correct": 1
        },
        {
            "index": 403,
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market. */\nSELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking\n\n/* Answer the following: Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot. */\nSELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank\n\n/* Answer the following: Show the locations of parties and the names of the party hosts in ascending order of the age of the host. */\nSELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age\n\n/* Answer the following: For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host. */\nSELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age\n\n/* Answer the following: Show the names of players and names of their coaches in descending order of the votes of players. */\nSELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1989,
                    "db_id": "phone_market",
                    "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
                    "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market."
                }
            ],
            "example_quality": 0.8778708371574462,
            "example_similarity": 0.3526071170366764,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, T1.Course FROM course_arrange AS T3 JOIN course AS T1 ON T3.Course_ID = T1.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID ORDER BY T2.Name ASC;",
            "correct": 1
        },
        {
            "index": 404,
            "question": "Show the name of the teacher for the math course.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all storm names affecting region \"Denmark\". */\nSELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n\n/* Answer the following: What are the names of the storms that affected Denmark? */\nSELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n\n/* Answer the following: Show the names of festivals that have nominated artworks of type \"Program Talent Show\". */\nSELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"\n\n/* Answer the following: Find all users who have written tips about businesses in Dallas */\nSELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";\n\n/* Answer the following: return me the papers by \" H. V. Jagadish \" . */\nSELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of the teacher for the math course. */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2727,
                    "db_id": "storm_record",
                    "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
                    "question": "Show all storm names affecting region \"Denmark\"."
                }
            ],
            "example_quality": 0.8781731370654724,
            "example_similarity": 0.3524560572107649,
            "db_id": "course_teach",
            "pred": "SELECT t2.Name FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.Teacher_ID = t2.Teacher_ID JOIN course AS t3 ON t1.Course_ID = t3.Course_ID WHERE t3.Course = \"Math\";",
            "correct": 1
        },
        {
            "index": 405,
            "question": "What are the names of the people who teach math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all storm names affecting region \"Denmark\". */\nSELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n\n/* Answer the following: What are the names of the storms that affected Denmark? */\nSELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n\n/* Answer the following: Show the names of festivals that have nominated artworks of type \"Program Talent Show\". */\nSELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"\n\n/* Answer the following: Find all users who have written tips about businesses in Dallas */\nSELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";\n\n/* Answer the following: return me the papers by \" H. V. Jagadish \" . */\nSELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the people who teach math courses? */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2727,
                    "db_id": "storm_record",
                    "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
                    "question": "Show all storm names affecting region \"Denmark\"."
                }
            ],
            "example_quality": 0.8784739441344465,
            "example_similarity": 0.3522105193284058,
            "db_id": "course_teach",
            "pred": "SELECT t2.Name FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.Teacher_ID = t2.Teacher_ID JOIN course AS t3 ON t1.Course_ID = t3.Course_ID WHERE t3.Course = \"Math\";",
            "correct": 1
        },
        {
            "index": 406,
            "question": "Show names of teachers and the number of courses they teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergy type with number of students affected. */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: How many students are affected by each allergy type? */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: Show the card type codes and the number of transactions. */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Answer the following: What are the different card types, and how many transactions have been made with each? */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Answer the following: Show the names of pilots and the number of records they have. */\nSELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the number of courses they teach. */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 518,
                    "db_id": "allergy_1",
                    "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
                    "question": "Show all allergy type with number of students affected."
                }
            ],
            "example_quality": 0.8787732693951991,
            "example_similarity": 0.3523983843282698,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "correct": 1
        },
        {
            "index": 407,
            "question": "What are the names of the teachers and how many courses do they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergy type with number of students affected. */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: How many students are affected by each allergy type? */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: Show the card type codes and the number of transactions. */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Answer the following: What are the different card types, and how many transactions have been made with each? */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Answer the following: Show the names of pilots and the number of records they have. */\nSELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and how many courses do they teach? */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 518,
                    "db_id": "allergy_1",
                    "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
                    "question": "Show all allergy type with number of students affected."
                }
            ],
            "example_quality": 0.8790711237701495,
            "example_similarity": 0.3523854472266649,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, COUNT(*) FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "correct": 1
        },
        {
            "index": 408,
            "question": "Show names of teachers that teach at least two courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: What are the names for all aircrafts with at least 2 flights? */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers that teach at least two courses. */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                }
            ],
            "example_quality": 0.8791447016753474,
            "example_similarity": 0.3525202708454948,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 409,
            "question": "What are the names of the teachers who teach at least two courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: What are the names for all aircrafts with at least 2 flights? */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who teach at least two courses? */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                }
            ],
            "example_quality": 0.8792179197863879,
            "example_similarity": 0.35267471460907557,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 410,
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers who have not been arranged to teach courses. */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8795125102259332,
            "example_similarity": 0.3528132465837301,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
            "correct": 1
        },
        {
            "index": 411,
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose courses have not been arranged? */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8798056671353592,
            "example_similarity": 0.35284762906027684,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
            "correct": 1
        },
        {
            "index": 412,
            "question": "How many visitors below age 30 are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many churches opened before 1850 are there? */\nSELECT count(*) FROM Church WHERE Open_Date  <  1850\n\n/* Answer the following: How many clubs have total medals less than 10? */\nSELECT count(*) FROM club_rank WHERE Total  <  10\n\n/* Answer the following: What is the total number of clubs that have less than 10 medals in total? */\nSELECT count(*) FROM club_rank WHERE Total  <  10\n\n/* Answer the following: How many markets have number of cities smaller than 300? */\nSELECT count(*) FROM market WHERE Number_cities  <  300\n\n/* Answer the following: Count the number of markets that have a number of cities lower than 300. */\nSELECT count(*) FROM market WHERE Number_cities  <  300\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many visitors below age 30 are there? */\nSELECT ",
            "response": "count(*) FROM visitor WHERE age < 30",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1630,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850",
                    "question": "How many churches opened before 1850 are there?"
                }
            ],
            "example_quality": 0.8800974009529918,
            "example_similarity": 0.35274562634610745,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM visitor WHERE Age < 30",
            "correct": 1
        },
        {
            "index": 413,
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the colleges whose enrollment is greater 18000 sorted by the college's name. */\nSELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\n\n/* Answer the following: What is the name of every college in alphabetical order that has more than 18000 students enrolled? */\nSELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\n\n/* Answer the following: list the names of the companies with more than 200 sales in the descending order of sales and profits. */\nSELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC\n\n/* Answer the following: Show names and seatings, ordered by seating for all tracks opened after 2000. */\nSELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\n\n/* Answer the following: What are the names and seatings for all tracks opened after 2000, ordered by seating? */\nSELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. */\nSELECT ",
            "response": "name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4979,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
                    "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name."
                }
            ],
            "example_quality": 0.8797848785318602,
            "example_similarity": 0.35256373671168856,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "correct": 1
        },
        {
            "index": 414,
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of working horses of farms with more than 5000 total number of horses? */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Answer the following: Give the average number of working horses on farms with more than 5000 total horses. */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Answer the following: What are the average enrollment size of the universities that are founded before 1850? */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Return the average enrollment of universities founded before 1850. */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Compute the average price of all products with manufacturer code equal to 2. */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the average age of the visitors whose membership level is not higher than 4? */\nSELECT ",
            "response": "avg(age) FROM visitor WHERE Level_of_membership <= 4",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 25,
                    "db_id": "farm",
                    "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
                    "question": "What is the average number of working horses of farms with more than 5000 total number of horses?"
                }
            ],
            "example_quality": 0.8795384845686861,
            "example_similarity": 0.3524710053608808,
            "db_id": "museum_visit",
            "pred": "SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4",
            "correct": 1
        },
        {
            "index": 415,
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names and seatings, ordered by seating for all tracks opened after 2000. */\nSELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\n\n/* Answer the following: What are the names and seatings for all tracks opened after 2000, ordered by seating? */\nSELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\n\n/* Answer the following: list the names of the companies with more than 200 sales in the descending order of sales and profits. */\nSELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC\n\n/* Answer the following: List the grape, winery and year of the wines whose price is bigger than 100 ordered by year. */\nSELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR\n\n/* Answer the following: What are the grapes, wineries and years for wines with price higher than 100, sorted by year? */\nSELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. */\nSELECT ",
            "response": "name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 752,
                    "db_id": "race_track",
                    "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
                    "question": "Show names and seatings, ordered by seating for all tracks opened after 2000."
                }
            ],
            "example_quality": 0.8793495591932953,
            "example_similarity": 0.35239738832300044,
            "db_id": "museum_visit",
            "pred": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 416,
            "question": "Find the id and name of the museum that has the most staff members?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the id and name of the museum that has the most staff members? */\nSELECT ",
            "response": "museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.8792697618061813,
            "example_similarity": 0.35245671652914207,
            "db_id": "museum_visit",
            "pred": "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 417,
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many churches opened before 1850 are there? */\nSELECT count(*) FROM Church WHERE Open_Date  <  1850\n\n/* Answer the following: How many clubs have total medals less than 10? */\nSELECT count(*) FROM club_rank WHERE Total  <  10\n\n/* Answer the following: What is the total number of clubs that have less than 10 medals in total? */\nSELECT count(*) FROM club_rank WHERE Total  <  10\n\n/* Answer the following: How many markets have number of cities smaller than 300? */\nSELECT count(*) FROM market WHERE Number_cities  <  300\n\n/* Answer the following: Count the number of markets that have a number of cities lower than 300. */\nSELECT count(*) FROM market WHERE Number_cities  <  300\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the average number of staff working for the museums that were open before 2009. */\nSELECT ",
            "response": "avg(num_of_staff) FROM museum WHERE open_year < 2009",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1630,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850",
                    "question": "How many churches opened before 1850 are there?"
                }
            ],
            "example_quality": 0.8788829007897364,
            "example_similarity": 0.35212300290831916,
            "db_id": "museum_visit",
            "pred": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009",
            "correct": 1
        },
        {
            "index": 418,
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the opening year and staff number of the museum named Plaza Museum? */\nSELECT ",
            "response": "Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8791726546155983,
            "example_similarity": 0.3522604980200121,
            "db_id": "museum_visit",
            "pred": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'",
            "correct": 1
        },
        {
            "index": 419,
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8? */\nSELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n\n/* Answer the following: What is the id of every song that has a resolution higher than that of a song with a rating below 8? */\nSELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n\n/* Answer the following: What are the names of wines that are more expensive then all wines made in the year 2006? */\nSELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\n\n/* Answer the following: Give the names of wines with prices above any wine produced in 2006. */\nSELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\n\n/* Answer the following: Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103. */\nSELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. */\nSELECT ",
            "response": "name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3616,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
                    "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?"
                }
            ],
            "example_quality": 0.8786236096332641,
            "example_similarity": 0.352128096085292,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > 2010)",
            "correct": 1
        },
        {
            "index": 420,
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title, credit, and department name of courses that have more than one prerequisites? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: What is the title, credit value, and department name for courses with more than one prerequisite? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: What are the ids, scores, and dates of the games which caused at least two injury accidents? */\nSELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the id, name and age for visitors who visited some museums more than once. */\nSELECT ",
            "response": "t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1345,
                    "db_id": "college_2",
                    "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
                    "question": "Find the title, credit, and department name of courses that have more than one prerequisites?"
                }
            ],
            "example_quality": 0.8785283732737191,
            "example_similarity": 0.35200966427573405,
            "db_id": "museum_visit",
            "pred": "SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.visitor_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 421,
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and city of the student address with the highest average monthly rental. */\nSELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\n\n/* Answer the following: Which fault log included the most number of faulty parts? List the fault log id, description and record time. */\nSELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the name, phone number and email address of the customer who made the largest number of orders? */\nSELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the name, phone number and email address for the customer with the most orders. */\nSELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id, name and IATA code of the airport that had most number of flights? */\nSELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? */\nSELECT ",
            "response": "t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3110,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
                    "question": "Find the id and city of the student address with the highest average monthly rental."
                }
            ],
            "example_quality": 0.878105072797586,
            "example_similarity": 0.3519271078677587,
            "db_id": "museum_visit",
            "pred": "SELECT T2.ID, T2.Name, T2.Level_of_membership FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T1.visitor_ID ORDER BY SUM(T1.Total_spent) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 422,
            "question": "What are the id and name of the museum visited most times?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and builder of the railway that are associated with the most trains. */\nSELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Show the id and details of the investor that has the largest number of transactions. */\nSELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Show the id and details for the investors who have the top 3 number of transactions. */\nSELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3\n\n/* Answer the following: Find the id and city of the student address with the highest average monthly rental. */\nSELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\n\n/* Answer the following: What is the invoice number and invoice date for the invoice with most number of transactions? */\nSELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id and name of the museum visited most times? */\nSELECT ",
            "response": "t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5644,
                    "db_id": "railway",
                    "query": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the id and builder of the railway that are associated with the most trains."
                }
            ],
            "example_quality": 0.8782754308004261,
            "example_similarity": 0.3520832456937803,
            "db_id": "museum_visit",
            "pred": "SELECT T1.Museum_ID, T2.Name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 423,
            "question": "What is the name of the museum that had no visitor yet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official names of cities that have not held any competition. */\nSELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\n\n/* Answer the following: What are the official names of cities that have not hosted a farm competition? */\nSELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\n\n/* Answer the following: What are the names of teams that do no have match season record? */\nSELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)\n\n/* Answer the following: Return the names of teams that have no match season record. */\nSELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)\n\n/* Answer the following: List the names of people that have not been on the affirmative side of debates. */\nSELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the museum that had no visitor yet? */\nSELECT ",
            "response": "name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 49,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
                    "question": "List the official names of cities that have not held any competition."
                }
            ],
            "example_quality": 0.8785631957394321,
            "example_similarity": 0.35199280787507586,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
            "correct": 1
        },
        {
            "index": 424,
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: What is the name and sex of the candidate with the highest support rate? */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: Show the name and population of the country that has the highest roller coaster. */\nSELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: What are the forename and surname of the driver who has the smallest laptime? */\nSELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\n\n/* Answer the following: What is the forename and surname of the driver with the shortest laptime? */\nSELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and age of the visitor who bought the most tickets at once. */\nSELECT ",
            "response": "t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2415,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
                    "question": "Find the name and gender of the candidate who got the highest support rate."
                }
            ],
            "example_quality": 0.8786034999332379,
            "example_similarity": 0.3519965310370956,
            "db_id": "museum_visit",
            "pred": "SELECT t2.Name, t2.Age FROM visit AS t1 JOIN visitor AS t2 ON t1.visitor_ID = t2.ID ORDER BY t1.Num_of_Ticket DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 425,
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Find the maximum and total number of followers of all users. */\nSELECT max(followers) ,  sum(followers) FROM user_profiles\n\n/* Answer the following: What are the average and minimum price (in Euro) of all products? */\nSELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the average and maximum number of tickets bought in all visits? */\nSELECT ",
            "response": "avg(num_of_ticket) , max(num_of_ticket) FROM visit",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                }
            ],
            "example_quality": 0.8777126681686891,
            "example_similarity": 0.35221947855466995,
            "db_id": "museum_visit",
            "pred": "SELECT avg(Num_of_Ticket) , max(Num_of_Ticket) FROM visit",
            "correct": 1
        },
        {
            "index": 426,
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who were the governors of the parties associated with delegates from district 1? */\nSELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1\n\n/* Answer the following: Find the parties associated with the delegates from district 1. Who served as governors of the parties? */\nSELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1\n\n/* Answer the following: How many distinct delegates are from counties with population larger than 50000? */\nSELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000\n\n/* Answer the following: Count the number of distinct delegates who are from counties with population above 50000. */\nSELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000\n\n/* Answer the following: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'? */\nSELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the total ticket expense of the visitors whose membership level is 1? */\nSELECT ",
            "response": "sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2769,
                    "db_id": "election",
                    "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
                    "question": "Who were the governors of the parties associated with delegates from district 1?"
                }
            ],
            "example_quality": 0.8775207367285907,
            "example_similarity": 0.351929812052949,
            "db_id": "museum_visit",
            "pred": "SELECT SUM(Total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)",
            "correct": 1
        },
        {
            "index": 427,
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of tracks which are in both Movies and music playlists. */\nSELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n\n/* Answer the following: What are the names of all the tracks that are in both the Movies and music playlists? */\nSELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'\n\n/* Answer the following: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks? */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: Find the titles of albums that contain tracks of both the Reggae and Rock genres. */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\". */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? */\nSELECT ",
            "response": "t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 646,
                    "db_id": "store_1",
                    "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
                    "question": "Find the name of tracks which are in both Movies and music playlists."
                }
            ],
            "example_quality": 0.8771932992140804,
            "example_similarity": 0.3520689578060558,
            "db_id": "museum_visit",
            "pred": "SELECT V.Name FROM visitor AS V JOIN visit AS V1 ON V.ID = V1.visitor_ID JOIN museum AS M ON V1.Museum_ID = M.Museum_ID WHERE M.Open_Year < 2009 INTERSECT SELECT V.Name FROM visitor AS V JOIN visit AS V1 ON V.ID = V1.visitor_ID JOIN museum AS M ON V1.Museum_ID = M.Museum_ID WHERE M.Open_Year > 2011",
            "correct": 1
        },
        {
            "index": 428,
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of patients who are not using the medication of Procrastin-X. */\nSELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )\n\n/* Answer the following: How many patients are not using Procrastin-X as medication? */\nSELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )\n\n/* Answer the following: Find the name of students who didn't take any course from Biology department. */\nSELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')\n\n/* Answer the following: What are the names of students who haven't taken any Biology courses? */\nSELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')\n\n/* Answer the following: Find the average price of wines that are not produced from Sonoma county. */\nSELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the number of visitors who did not visit any museum opened after 2010. */\nSELECT ",
            "response": "count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3993,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
                    "question": "Find the number of patients who are not using the medication of Procrastin-X."
                }
            ],
            "example_quality": 0.8766293301848777,
            "example_similarity": 0.3521563897534659,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT T1.visitor_ID FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Open_Year > '2010')",
            "correct": 1
        },
        {
            "index": 429,
            "question": "How many museums were opened after 2013 or before 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the official names of cities with population bigger than 1500 or smaller than 500. */\nSELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n\n/* Answer the following: What are the official names of cities that have population over 1500 or less than 500? */\nSELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n\n/* Answer the following: Find the names of the products with length smaller than 3 or height greater than 5. */\nSELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5\n\n/* Answer the following: Which catalog contents have length below 3 or above 5? Find the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5\n\n/* Answer the following: Show the minister who took office after 1961 or before 1959. */\nSELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many museums were opened after 2013 or before 2008? */\nSELECT ",
            "response": "count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 53,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
                    "question": "Find the official names of cities with population bigger than 1500 or smaller than 500."
                }
            ],
            "example_quality": 0.8760942007987343,
            "example_similarity": 0.352001068834262,
            "db_id": "museum_visit",
            "pred": "SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008",
            "correct": 1
        },
        {
            "index": 430,
            "question": "Find the total number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of players. */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8763823538201326,
            "example_similarity": 0.35188013611604285,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM players",
            "correct": 1
        },
        {
            "index": 431,
            "question": "How many players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there? */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8766691697045407,
            "example_similarity": 0.35254019064097925,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM players",
            "correct": 1
        },
        {
            "index": 432,
            "question": "Find the total number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.876954657737632,
            "example_similarity": 0.3524185698293104,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM matches",
            "correct": 1
        },
        {
            "index": 433,
            "question": "Count the number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Count the number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8772388271193003,
            "example_similarity": 0.35265442868546776,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM matches",
            "correct": 1
        },
        {
            "index": 434,
            "question": "List the first name and birth date of all players from the country with code USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first name and birth date of all players from the country with code USA. */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8775216869646475,
            "example_similarity": 0.352823491907091,
            "db_id": "wta_1",
            "pred": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
            "correct": 1
        },
        {
            "index": 435,
            "question": "What are the first names and birth dates of players from the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and birth dates of players from the USA? */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8778032463049587,
            "example_similarity": 0.3531656036958239,
            "db_id": "wta_1",
            "pred": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
            "correct": 1
        },
        {
            "index": 436,
            "question": "Find the average age of losers and winners of all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average and minimum price (in Euro) of all products? */\nSELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents\n\n/* Answer the following: Give me the average and minimum price (in Euro) of the products. */\nSELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents\n\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and largest salary of all employees? */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and total transaction amount? */\nSELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average age of losers and winners of all matches. */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 322,
                    "db_id": "product_catalog",
                    "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
                    "question": "What are the average and minimum price (in Euro) of all products?"
                }
            ],
            "example_quality": 0.8774282060939054,
            "example_similarity": 0.3532347957362769,
            "db_id": "wta_1",
            "pred": "SELECT avg(loser_age) as avg_loser_age, avg(winner_age) as avg_winner_age FROM matches",
            "correct": 1
        },
        {
            "index": 437,
            "question": "What are the average ages of losers and winners across matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average and minimum price (in Euro) of all products? */\nSELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents\n\n/* Answer the following: Give me the average and minimum price (in Euro) of the products. */\nSELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents\n\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and largest salary of all employees? */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and total transaction amount? */\nSELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the average ages of losers and winners across matches? */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 322,
                    "db_id": "product_catalog",
                    "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
                    "question": "What are the average and minimum price (in Euro) of all products?"
                }
            ],
            "example_quality": 0.877054882314024,
            "example_similarity": 0.3534306189126459,
            "db_id": "wta_1",
            "pred": "SELECT avg(loser_age) as average_loser_age, avg(winner_age) as average_winner_age FROM matches",
            "correct": 1
        },
        {
            "index": 438,
            "question": "Find the average rank of winners in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average rank of winners in all matches. */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8773355789297453,
            "example_similarity": 0.35372209900896157,
            "db_id": "wta_1",
            "pred": "SELECT AVG(winner_rank) FROM matches",
            "correct": 1
        },
        {
            "index": 439,
            "question": "What is the average rank for winners in all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the average rank for winners in all matches? */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8776149967453951,
            "example_similarity": 0.354101688740035,
            "db_id": "wta_1",
            "pred": "SELECT AVG(winner_rank) FROM matches",
            "correct": 1
        },
        {
            "index": 440,
            "question": "Find the highest rank of losers in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum snatch score? */\nSELECT min(snatch) FROM body_builder\n\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Answer the following: Find the names of all the catalog entries. */\nSELECT distinct(catalog_entry_name) FROM catalog_contents\n\n/* Answer the following: What are all the catalog entry names? */\nSELECT distinct(catalog_entry_name) FROM catalog_contents\n\n/* Answer the following: What are the distinct billing countries of the invoices? */\nSELECT distinct(BillingCountry) FROM INVOICE\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the highest rank of losers in all matches. */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1174,
                    "db_id": "body_builder",
                    "query": "SELECT min(snatch) FROM body_builder",
                    "question": "What is the minimum snatch score?"
                }
            ],
            "example_quality": 0.8773476899346101,
            "example_similarity": 0.354312646440451,
            "db_id": "wta_1",
            "pred": "SELECT max(loser_rank) FROM matches",
            "correct": 0
        },
        {
            "index": 441,
            "question": "What is the best rank of losers across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum snatch score? */\nSELECT min(snatch) FROM body_builder\n\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Answer the following: Find the names of all the catalog entries. */\nSELECT distinct(catalog_entry_name) FROM catalog_contents\n\n/* Answer the following: What are all the catalog entry names? */\nSELECT distinct(catalog_entry_name) FROM catalog_contents\n\n/* Answer the following: What are the distinct billing countries of the invoices? */\nSELECT distinct(BillingCountry) FROM INVOICE\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the best rank of losers across all matches? */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1174,
                    "db_id": "body_builder",
                    "query": "SELECT min(snatch) FROM body_builder",
                    "question": "What is the minimum snatch score?"
                }
            ],
            "example_quality": 0.877081595399611,
            "example_similarity": 0.35448809391266084,
            "db_id": "wta_1",
            "pred": "SELECT max(loser_rank) FROM matches",
            "correct": 0
        },
        {
            "index": 442,
            "question": "find the number of distinct country codes of all players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of distinct country codes of all players. */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8773596913376209,
            "example_similarity": 0.3541645504885428,
            "db_id": "wta_1",
            "pred": "SELECT count(DISTINCT country_code) FROM players",
            "correct": 1
        },
        {
            "index": 443,
            "question": "How many distinct countries do players come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many distinct countries do players come from? */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8776365317634953,
            "example_similarity": 0.354008975329979,
            "db_id": "wta_1",
            "pred": "SELECT count(DISTINCT country_code) FROM players",
            "correct": 1
        },
        {
            "index": 444,
            "question": "Find the number of distinct name of losers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of distinct name of losers. */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8779121251604244,
            "example_similarity": 0.35365289450921117,
            "db_id": "wta_1",
            "pred": "SELECT count(DISTINCT loser_name) FROM matches",
            "correct": 1
        },
        {
            "index": 445,
            "question": "How many different loser names are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different loser names are there? */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8781864799353448,
            "example_similarity": 0.3539210710451263,
            "db_id": "wta_1",
            "pred": "SELECT count(DISTINCT loser_name) FROM matches",
            "correct": 1
        },
        {
            "index": 446,
            "question": "Find the name of tourney that has more than 10 matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of tourney that has more than 10 matches. */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.8784596044197946,
            "example_similarity": 0.353959446254814,
            "db_id": "wta_1",
            "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
            "correct": 1
        },
        {
            "index": 447,
            "question": "What are the names of tournaments that have more than 10 matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of tournaments that have more than 10 matches? */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.8787315068707571,
            "example_similarity": 0.35394538509879925,
            "db_id": "wta_1",
            "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
            "correct": 1
        },
        {
            "index": 448,
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers with a book published in 1989 and a book in 1990. */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: What are the publishers who have published a book in both 1989 and 1990? */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: Show all director names who have a movie in both year 1999 and 2000. */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Answer the following: Which directors had a movie both in the year 1999 and 2000? */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Answer the following: Show all the locations where some cinemas were opened in both year 2010 and year 2011. */\nSELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the names of all winners who played in both 2013 and 2016. */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6979,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "Show publishers with a book published in 1989 and a book in 1990."
                }
            ],
            "example_quality": 0.8789082105090861,
            "example_similarity": 0.3540209919857414,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016",
            "correct": 1
        },
        {
            "index": 449,
            "question": "What are the names of players who won in both 2013 and 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers with a book published in 1989 and a book in 1990. */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: What are the publishers who have published a book in both 1989 and 1990? */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: Show all director names who have a movie in both year 1999 and 2000. */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Answer the following: Which directors had a movie both in the year 1999 and 2000? */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Answer the following: Show all the locations where some cinemas were opened in both year 2010 and year 2011. */\nSELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of players who won in both 2013 and 2016? */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6979,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "Show publishers with a book published in 1989 and a book in 1990."
                }
            ],
            "example_quality": 0.8790841270488033,
            "example_similarity": 0.35408872879408354,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016",
            "correct": 1
        },
        {
            "index": 450,
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of audience in year 2008 or 2010. */\nSELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010\n\n/* Answer the following: Show all director names who have a movie in the year 1999 or 2000. */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: Which directors had a movie in either 1999 or 2000? */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Answer the following: Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason. */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the number of all matches who played in years of 2013 or 2016. */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4618,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
                    "question": "Show the number of audience in year 2008 or 2010."
                }
            ],
            "example_quality": 0.878787548517532,
            "example_similarity": 0.3541940834334263,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
            "correct": 1
        },
        {
            "index": 451,
            "question": "How many matches were played in 2013 or 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of audience in year 2008 or 2010. */\nSELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010\n\n/* Answer the following: Show all director names who have a movie in the year 1999 or 2000. */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: Which directors had a movie in either 1999 or 2000? */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Answer the following: Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason. */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in 2013 or 2016? */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4618,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
                    "question": "Show the number of audience in year 2008 or 2010."
                }
            ],
            "example_quality": 0.8784922851903906,
            "example_similarity": 0.3540097759947079,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
            "correct": 1
        },
        {
            "index": 452,
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: What are the names and addressed of customers who have both New and Pending orders? */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff. */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff? */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: Find the name and age of the person who is a friend of both Dan and Alice. */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4736,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
                    "question": "Find the name and address of the customers who have both New and Pending orders."
                }
            ],
            "example_quality": 0.878433005815762,
            "example_similarity": 0.3542033683918902,
            "db_id": "wta_1",
            "pred": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "correct": 1
        },
        {
            "index": 453,
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: What are the names and addressed of customers who have both New and Pending orders? */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff. */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff? */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: Find the name and age of the person who is a friend of both Dan and Alice. */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4736,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
                    "question": "Find the name and address of the customers who have both New and Pending orders."
                }
            ],
            "example_quality": 0.8783739881602269,
            "example_similarity": 0.3543340704691248,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "correct": 1
        },
        {
            "index": 454,
            "question": "Find the first name and country code of the oldest player.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the oldest player. */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.8786418868647198,
            "example_similarity": 0.35462595678853653,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
            "correct": 1
        },
        {
            "index": 455,
            "question": "What is the first name and country code of the oldest player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the oldest player? */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.8789086079924895,
            "example_similarity": 0.35488053137467973,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
            "correct": 1
        },
        {
            "index": 456,
            "question": "List the first and last name of all players in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all schools and their nicknames in the order of founded year. */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: What are the names of students and their respective departments, ordered by number of credits from least to greatest? */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: List all manufacturer names and ids ordered by their opening year. */\nSELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 978,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "List all schools and their nicknames in the order of founded year."
                }
            ],
            "example_quality": 0.8791741592907516,
            "example_similarity": 0.35495505836478974,
            "db_id": "wta_1",
            "pred": "SELECT first_name, last_name FROM players ORDER BY birth_date",
            "correct": 1
        },
        {
            "index": 457,
            "question": "What are the full names of all players, sorted by birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all schools and their nicknames in the order of founded year. */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: What are the names of students and their respective departments, ordered by number of credits from least to greatest? */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: List all manufacturer names and ids ordered by their opening year. */\nSELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all players, sorted by birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 978,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "List all schools and their nicknames in the order of founded year."
                }
            ],
            "example_quality": 0.8794385484389119,
            "example_similarity": 0.3548425596015038,
            "db_id": "wta_1",
            "pred": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date",
            "correct": 0
        },
        {
            "index": 458,
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names and decor of rooms that have a king bed. Sort the list by their price. */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: What are the names and decor of rooms with a king bed? Sort them by their price */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: List the order id, customer id for orders in Cancelled status, ordered by their order dates. */\nSELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n\n/* Answer the following: What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates? */\nSELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n\n/* Answer the following: List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages. */\nSELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players who are left / L hand in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2591,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
                    "question": "List the names and decor of rooms that have a king bed. Sort the list by their price."
                }
            ],
            "example_quality": 0.8796394000174921,
            "example_similarity": 0.3548381749260975,
            "db_id": "wta_1",
            "pred": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
            "correct": 1
        },
        {
            "index": 459,
            "question": "What are the full names of all left handed players, in order of birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names and decor of rooms that have a king bed. Sort the list by their price. */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: What are the names and decor of rooms with a king bed? Sort them by their price */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: List the order id, customer id for orders in Cancelled status, ordered by their order dates. */\nSELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n\n/* Answer the following: What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates? */\nSELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n\n/* Answer the following: List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages. */\nSELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all left handed players, in order of birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2591,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
                    "question": "List the names and decor of rooms that have a king bed. Sort the list by their price."
                }
            ],
            "example_quality": 0.879839376425795,
            "example_similarity": 0.3546004408291515,
            "db_id": "wta_1",
            "pred": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'Left' ORDER BY birth_date;",
            "correct": 0
        },
        {
            "index": 460,
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: What is the name and sex of the candidate with the highest support rate? */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: Show the name and population of the country that has the highest roller coaster. */\nSELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: What are the forename and surname of the driver who has the smallest laptime? */\nSELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\n\n/* Answer the following: What is the forename and surname of the driver with the shortest laptime? */\nSELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the player who did the most number of tours. */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2415,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
                    "question": "Find the name and gender of the candidate who got the highest support rate."
                }
            ],
            "example_quality": 0.8800610694809958,
            "example_similarity": 0.3547924157462436,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players WHERE player_id = ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY SUM(tours) DESC LIMIT 1 )",
            "correct": 0
        },
        {
            "index": 461,
            "question": "What is the first name and country code of the player with the most tours?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: What is the name and sex of the candidate with the highest support rate? */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: Show the name and population of the country that has the highest roller coaster. */\nSELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: What are the forename and surname of the driver who has the smallest laptime? */\nSELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\n\n/* Answer the following: What is the forename and surname of the driver with the shortest laptime? */\nSELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the player with the most tours? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2415,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
                    "question": "Find the name and gender of the candidate who got the highest support rate."
                }
            ],
            "example_quality": 0.8802818007442001,
            "example_similarity": 0.35525996709599283,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 462,
            "question": "Find the year that has the most number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year has the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In what year was the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the year that has the most number of matches. */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                }
            ],
            "example_quality": 0.8802581512670415,
            "example_similarity": 0.35511501330688167,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 463,
            "question": "Which year had the most matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year has the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In what year was the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Which year had the most matches? */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                }
            ],
            "example_quality": 0.8802346039474517,
            "example_similarity": 0.35537202743389174,
            "db_id": "wta_1",
            "pred": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 464,
            "question": "Find the name and rank points of the winner who won the most times.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the username and passwords of users with the most popular role. */\nSELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the usernames and passwords of users that have the most common role? */\nSELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank points of the winner who won the most times. */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4522,
                    "db_id": "document_management",
                    "query": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "List all the username and passwords of users with the most popular role."
                }
            ],
            "example_quality": 0.8801627381822393,
            "example_similarity": 0.35521611363469574,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 465,
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the username and passwords of users with the most popular role. */\nSELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the usernames and passwords of users that have the most common role? */\nSELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner who has won the most matches, and how many rank points does this player have? */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4522,
                    "db_id": "document_management",
                    "query": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "List all the username and passwords of users with the most popular role."
                }
            ],
            "example_quality": 0.8800911815170922,
            "example_similarity": 0.35496603387967435,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, MAX(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 466,
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Give the name of the student in the History department with the most credits. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Find the name of the most expensive hardware product. */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: What is the name of the hardware product with the greatest price? */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1333,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "What is the name of the student who has the highest total credits in the History department."
                }
            ],
            "example_quality": 0.8803178405389748,
            "example_similarity": 0.3552100627563759,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 467,
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Give the name of the student in the History department with the most credits. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Find the name of the most expensive hardware product. */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: What is the name of the hardware product with the greatest price? */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner with the most rank points who participated in the Australian Open tournament? */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1333,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "What is the name of the student who has the highest total credits in the History department."
                }
            ],
            "example_quality": 0.8805435288584079,
            "example_similarity": 0.3555466251845904,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 468,
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: What is the id and name of the aircraft that can cover the maximum distance? */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the employee with maximum salary. */\nSELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the names of loser and winner who played in the match with greatest number of minutes. */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.8807987777283683,
            "example_similarity": 0.35561018669123323,
            "db_id": "wta_1",
            "pred": "SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 469,
            "question": "What are the names of the winner and loser who played in the longest match?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: What is the id and name of the aircraft that can cover the maximum distance? */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the employee with maximum salary. */\nSELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of the winner and loser who played in the longest match? */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.8810529381170072,
            "example_similarity": 0.35576769273129566,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 470,
            "question": "Find the average ranking for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount of loans offered by each bank branch. */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: What are the names of the different bank branches, and what are their total loan amounts? */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: Find the total saving balance for each account name. */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of customers with accounts, and what are the total savings balances for each? */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: Find the total credits of all classes offered by each department. */\nSELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average ranking for each player and their first name. */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3061,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "Find the total amount of loans offered by each bank branch."
                }
            ],
            "example_quality": 0.8810214425039924,
            "example_similarity": 0.3558860320309335,
            "db_id": "wta_1",
            "pred": "SELECT AVG(ranking) , first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
            "correct": 1
        },
        {
            "index": 471,
            "question": "What are the first names of all players, and their average rankings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount of loans offered by each bank branch. */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: What are the names of the different bank branches, and what are their total loan amounts? */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: Find the total saving balance for each account name. */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of customers with accounts, and what are the total savings balances for each? */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: Find the total credits of all classes offered by each department. */\nSELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their average rankings? */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3061,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "Find the total amount of loans offered by each bank branch."
                }
            ],
            "example_quality": 0.8809900806303109,
            "example_similarity": 0.3559109428920547,
            "db_id": "wta_1",
            "pred": "SELECT avg(rankings.ranking), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
            "correct": 1
        },
        {
            "index": 472,
            "question": "Find the total ranking points for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount of loans offered by each bank branch. */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: What are the names of the different bank branches, and what are their total loan amounts? */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: Find the total saving balance for each account name. */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of customers with accounts, and what are the total savings balances for each? */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: Find the total credits of all classes offered by each department. */\nSELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total ranking points for each player and their first name. */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3061,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "Find the total amount of loans offered by each bank branch."
                }
            ],
            "example_quality": 0.8810435974086366,
            "example_similarity": 0.35614561312598203,
            "db_id": "wta_1",
            "pred": "SELECT sum(ranking_points) , first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
            "correct": 1
        },
        {
            "index": 473,
            "question": "What are the first names of all players, and their total ranking points?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount of loans offered by each bank branch. */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: What are the names of the different bank branches, and what are their total loan amounts? */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: Find the total saving balance for each account name. */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of customers with accounts, and what are the total savings balances for each? */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: Find the total credits of all classes offered by each department. */\nSELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their total ranking points? */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3061,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "Find the total amount of loans offered by each bank branch."
                }
            ],
            "example_quality": 0.8810968879003731,
            "example_similarity": 0.3562726493904805,
            "db_id": "wta_1",
            "pred": "SELECT sum(rankings.ranking_points) , players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
            "correct": 1
        },
        {
            "index": 474,
            "question": "find the number of players for each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of players for each country. */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8813477383478406,
            "example_similarity": 0.35653227951695066,
            "db_id": "wta_1",
            "pred": "SELECT count(*) , country_code FROM players GROUP BY country_code",
            "correct": 1
        },
        {
            "index": 475,
            "question": "How many players are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are from each country? */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8815975325828977,
            "example_similarity": 0.3565051458565985,
            "db_id": "wta_1",
            "pred": "SELECT count(*) , country_code FROM players GROUP BY country_code",
            "correct": 1
        },
        {
            "index": 476,
            "question": "find the code of the country where has the greatest number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the code of the country where has the greatest number of players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8818462772623455,
            "example_similarity": 0.3562082259314524,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 477,
            "question": "What is the code of the country with the most players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the code of the country with the most players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8820939789871624,
            "example_similarity": 0.35603549299817006,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 478,
            "question": "Find the codes of countries that have more than 50 players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the codes of countries that have more than 50 players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.8823406443030888,
            "example_similarity": 0.356205920837086,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
            "correct": 1
        },
        {
            "index": 479,
            "question": "What are the codes of countries with more than 50 players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the codes of countries with more than 50 players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.8825862797012034,
            "example_similarity": 0.35606437163443905,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
            "correct": 1
        },
        {
            "index": 480,
            "question": "Find the total number of tours for each ranking date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: What are the total enrollments of universities of each affiliation type? */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: Find the total credits of courses provided by different department. */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Answer the following: How many total credits are offered by each department? */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Answer the following: What is the total credit does each department offer? */\nSELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of tours for each ranking date. */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1002,
                    "db_id": "university_basketball",
                    "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
                    "question": "Find the total student enrollment for different affiliation type schools."
                }
            ],
            "example_quality": 0.8828308916184926,
            "example_similarity": 0.35613348064077954,
            "db_id": "wta_1",
            "pred": "SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date",
            "correct": 1
        },
        {
            "index": 481,
            "question": "How many total tours were there for each ranking date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: What are the total enrollments of universities of each affiliation type? */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: Find the total credits of courses provided by different department. */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Answer the following: How many total credits are offered by each department? */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Answer the following: What is the total credit does each department offer? */\nSELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many total tours were there for each ranking date? */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1002,
                    "db_id": "university_basketball",
                    "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
                    "question": "Find the total student enrollment for different affiliation type schools."
                }
            ],
            "example_quality": 0.8830744864384126,
            "example_similarity": 0.35603351401908084,
            "db_id": "wta_1",
            "pred": "SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date",
            "correct": 1
        },
        {
            "index": 482,
            "question": "Find the number of matches happened in each year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prices of wines for different years? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average prices of wines for each each? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of matches happened in each year. */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6556,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the average prices of wines for different years?"
                }
            ],
            "example_quality": 0.8826473667512017,
            "example_similarity": 0.3562568290888379,
            "db_id": "wta_1",
            "pred": "SELECT count(*), year FROM matches GROUP BY year",
            "correct": 1
        },
        {
            "index": 483,
            "question": "How many matches were played in each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prices of wines for different years? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average prices of wines for each each? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in each year? */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6556,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the average prices of wines for different years?"
                }
            ],
            "example_quality": 0.8822220156755322,
            "example_similarity": 0.35620652671870306,
            "db_id": "wta_1",
            "pred": "SELECT count(*), year FROM matches GROUP BY year",
            "correct": 1
        },
        {
            "index": 484,
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank of the 3 youngest winners across all matches. */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.8820911621077911,
            "example_similarity": 0.3563103636740637,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age DESC LIMIT 3",
            "correct": 0
        },
        {
            "index": 485,
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names and ranks of the three youngest winners across all matches? */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.8819608481423914,
            "example_similarity": 0.3563706247076058,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age DESC LIMIT 3",
            "correct": 0
        },
        {
            "index": 486,
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Target are there in \" Los Angeles \" ? */\nSELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";\n\n/* Answer the following: What is the average price for flights from Los Angeles to Honolulu. */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average price for flights from LA to Honolulu? */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: List total amount of  invoice from Chicago, IL. */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: What are the total amount of money in the invoices billed from Chicago, Illinois? */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different winners both participated in the WTA Championships and were left handed? */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8220,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";",
                    "question": "How many Target are there in \" Los Angeles \" ?"
                }
            ],
            "example_quality": 0.8818509933696117,
            "example_similarity": 0.3560291712461174,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = \"WTA Championships\" AND winner_hand = \"L\";",
            "correct": 1
        },
        {
            "index": 487,
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Target are there in \" Los Angeles \" ? */\nSELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";\n\n/* Answer the following: What is the average price for flights from Los Angeles to Honolulu. */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average price for flights from LA to Honolulu? */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: List total amount of  invoice from Chicago, IL. */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: What are the total amount of money in the invoices billed from Chicago, Illinois? */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of left handed winners who participated in the WTA Championships. */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8220,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";",
                    "question": "How many Target are there in \" Los Angeles \" ?"
                }
            ],
            "example_quality": 0.881741589745796,
            "example_similarity": 0.3557162831312717,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = \"L\" AND tourney_name = \"WTA Championships\";",
            "correct": 1
        },
        {
            "index": 488,
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the latitude, longitude, city of the station from which the shortest trip started? */\nSELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: What is the latitude, longitude, and city of the station from which the trip with smallest duration started? */\nSELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: Find out 5 customers who most recently purchased something. List customers' first and last name. */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 140,
                    "db_id": "bike_1",
                    "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
                    "question": "What is the latitude, longitude, city of the station from which the shortest trip started?"
                }
            ],
            "example_quality": 0.8816552136123621,
            "example_similarity": 0.35582833932029395,
            "db_id": "wta_1",
            "pred": "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
            "correct": 0
        },
        {
            "index": 489,
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the latitude, longitude, city of the station from which the shortest trip started? */\nSELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: What is the latitude, longitude, and city of the station from which the trip with smallest duration started? */\nSELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: Find out 5 customers who most recently purchased something. List customers' first and last name. */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 140,
                    "db_id": "bike_1",
                    "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
                    "question": "What is the latitude, longitude, city of the station from which the shortest trip started?"
                }
            ],
            "example_quality": 0.8815691907555475,
            "example_similarity": 0.35600873133571903,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 490,
            "question": "Find the number of players for each hand type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of players for each hand type. */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.881810886284618,
            "example_similarity": 0.3561886799161818,
            "db_id": "wta_1",
            "pred": "SELECT hand, count(*) FROM players GROUP BY hand",
            "correct": 1
        },
        {
            "index": 491,
            "question": "How many players are there for each hand type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there for each hand type? */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8820515973105149,
            "example_similarity": 0.35606274001948296,
            "db_id": "wta_1",
            "pred": "SELECT hand, count(*) FROM players GROUP BY hand",
            "correct": 1
        },
        {
            "index": 492,
            "question": "How many ships ended up being 'Captured'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many ships ended up being 'Captured'? */\nSELECT ",
            "response": "count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8822913298363065,
            "example_similarity": 0.3559388148875156,
            "db_id": "battle_death",
            "pred": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "correct": 1
        },
        {
            "index": 493,
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the height and weight of people in descending order of height. */\nSELECT Height ,  Weight FROM people ORDER BY Height DESC\n\n/* Answer the following: Show all region code and region name sorted by the codes. */\nSELECT region_code ,  region_name FROM region ORDER BY region_code\n\n/* Answer the following: What are the codes and names for all regions, sorted by codes? */\nSELECT region_code ,  region_name FROM region ORDER BY region_code\n\n/* Answer the following: List the names of all genres in alphabetical oder, together with its ratings. */\nSELECT g_name ,  rating FROM genre ORDER BY g_name\n\n/* Answer the following: What are the names of all genres in alphabetical order, combined with its ratings? */\nSELECT g_name ,  rating FROM genre ORDER BY g_name\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and tonnage ordered by in descending alphaetical order for the names. */\nSELECT ",
            "response": "name , tonnage FROM ship ORDER BY name DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1167,
                    "db_id": "body_builder",
                    "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
                    "question": "List the height and weight of people in descending order of height."
                }
            ],
            "example_quality": 0.8823678180110807,
            "example_similarity": 0.35586945940623493,
            "db_id": "battle_death",
            "pred": "SELECT name, tonnage FROM ship ORDER BY name DESC",
            "correct": 1
        },
        {
            "index": 494,
            "question": "List the name, date and result of each battle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: What are the characters and duration of actors? */\nSELECT Character ,  Duration FROM actor\n\n/* Answer the following: Return the characters and durations for each actor. */\nSELECT Character ,  Duration FROM actor\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name, date and result of each battle. */\nSELECT ",
            "response": "name , date FROM battle",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8820275708375476,
            "example_similarity": 0.3559423835539239,
            "db_id": "battle_death",
            "pred": "SELECT name, date, result FROM battle",
            "correct": 0
        },
        {
            "index": 495,
            "question": "What is maximum and minimum death toll caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: What are the durations of the longest and the shortest tracks in milliseconds? */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Answer the following: Find the maximum and minimum durations of tracks in milliseconds. */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is maximum and minimum death toll caused each time? */\nSELECT ",
            "response": "max(killed) , min(killed) FROM death",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                }
            ],
            "example_quality": 0.8822658989772697,
            "example_similarity": 0.355878619314355,
            "db_id": "battle_death",
            "pred": "SELECT max(killed) , min(killed) FROM death",
            "correct": 1
        },
        {
            "index": 496,
            "question": "What is the average number of injuries caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the average number of injuries caused each time? */\nSELECT ",
            "response": "avg(injured) FROM death",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8825032661164286,
            "example_similarity": 0.35597107511145887,
            "db_id": "battle_death",
            "pred": "SELECT AVG(injured) FROM death",
            "correct": 1
        },
        {
            "index": 497,
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the players and years played for players from team \"Columbus Crew\". */\nSELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Answer the following: What are the players who played for Columbus Crew, and how many years did each play for? */\nSELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Answer the following: Where does the customer with the first name Linda live? And what is her email? */\nSELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\n\n/* Answer the following: Return the address and email of the customer with the first name Linda. */\nSELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\n\n/* Answer the following: Find the city and name of bank branches that provide business loans. */\nSELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the death and injury situations caused by the ship with tonnage 't'? */\nSELECT ",
            "response": "T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1089,
                    "db_id": "match_season",
                    "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
                    "question": "Show the players and years played for players from team \"Columbus Crew\"."
                }
            ],
            "example_quality": 0.8823738467040853,
            "example_similarity": 0.3559812069273619,
            "db_id": "battle_death",
            "pred": "SELECT T1.note, T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "correct": 0
        },
        {
            "index": 498,
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Answer the following: What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection? */\nSELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'\n\n/* Answer the following: Show the names and total passengers for all train stations not in London. */\nSELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the name and results of the battles when the bulgarian commander is not 'Boril' */\nSELECT ",
            "response": "name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                }
            ],
            "example_quality": 0.8826100437990569,
            "example_similarity": 0.3561357046945922,
            "db_id": "battle_death",
            "pred": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'",
            "correct": 1
        },
        {
            "index": 499,
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision. */\nSELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Answer the following: How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges? */\nSELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Answer the following: What are the id and name of the stations that have ever had more than 12 bikes available? */\nSELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n\n/* Answer the following: What are the different ids and names of the stations that have had more than 12 bikes available? */\nSELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n\n/* Answer the following: Find the first and last names of all the female (sex is F) students who have president votes. */\nSELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the different ids and names of the battles that lost any 'Brig' type shipes? */\nSELECT ",
            "response": "DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5023,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                    "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision."
                }
            ],
            "example_quality": 0.8825633073135867,
            "example_similarity": 0.3562297776315691,
            "db_id": "battle_death",
            "pred": "SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'",
            "correct": 1
        },
        {
            "index": 500,
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids and names of festivals that have at least two nominations for artworks. */\nSELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2\n\n/* Answer the following: Find the id and color description of the products with at least 2 characteristics. */\nSELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the product ids and color descriptions for products with two or more characteristics? */\nSELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n\n/* Answer the following: Find the id, forename and number of races of all drivers who have at least participated in two races? */\nSELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: What is the id, forename, and number of races for all drivers that have participated in at least 2 races? */\nSELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the ids and names of the battles that led to more than 10 people killed in total. */\nSELECT ",
            "response": "T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4612,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
                    "question": "Show the ids and names of festivals that have at least two nominations for artworks."
                }
            ],
            "example_quality": 0.8821713943044016,
            "example_similarity": 0.3562350103839983,
            "db_id": "battle_death",
            "pred": "SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id, T1.name HAVING SUM(T3.killed) > 10",
            "correct": 1
        },
        {
            "index": 501,
            "question": "What is the ship id and name that caused most total injuries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first and last name of the faculty participating in the most activities? */\nSELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the first and last name of the faculty who is involved in the largest number of activities. */\nSELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: what is the salary and name of the employee who has the most number of aircraft certificates? */\nSELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the salaray and name of the employee that is certified to fly the most planes? */\nSELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the full name of employee who supported the most number of customers. */\nSELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the ship id and name that caused most total injuries? */\nSELECT ",
            "response": "T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6784,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the first and last name of the faculty participating in the most activities?"
                }
            ],
            "example_quality": 0.8817871303884522,
            "example_similarity": 0.356313308351483,
            "db_id": "battle_death",
            "pred": "SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY SUM(T2.injured) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 502,
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What is the company where Eduardo Martins is a customer? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? */\nSELECT ",
            "response": "name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                }
            ],
            "example_quality": 0.8820226141924593,
            "example_similarity": 0.3561095369541487,
            "db_id": "battle_death",
            "pred": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = \"Kaloyan\" AND latin_commander = \"Baldwin I\";",
            "correct": 1
        },
        {
            "index": 503,
            "question": "How many different results are there for the battles?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many different results are there for the battles? */\nSELECT ",
            "response": "count(DISTINCT RESULT) FROM battle",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8822571616791542,
            "example_similarity": 0.3562321212217526,
            "db_id": "battle_death",
            "pred": "SELECT count(DISTINCT result) FROM battle",
            "correct": 1
        },
        {
            "index": 504,
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many airports haven't the pilot 'Thompson' driven an aircraft? */\nSELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );\n\n/* Answer the following: List the project details of the projects which did not hire any staff for a researcher role. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Answer the following: What are the details for all projects that did not hire any staff in a research role? */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Answer the following: How many architects haven't built a mill before year 1850? */\nSELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );\n\n/* Answer the following: what is the highest point in the state with capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many battles did not lose any ship with tonnage '225'? */\nSELECT ",
            "response": "count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6379,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
                    "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?"
                }
            ],
            "example_quality": 0.8821772753659691,
            "example_similarity": 0.3561892729484529,
            "db_id": "battle_death",
            "pred": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
            "correct": 1
        },
        {
            "index": 505,
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and age of the person who is a friend of both Dan and Alice. */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Answer the following: What are the names and ages of every person who is a friend of both Dan and Alice? */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Answer the following: Find the name of product that is produced by both companies Creative Labs and Sony. */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: What are the names of products produced by both Creative Labs and Sony? */\nSELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'\n\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' */\nSELECT ",
            "response": "T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4441,
                    "db_id": "network_2",
                    "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
                    "question": "Find the name and age of the person who is a friend of both Dan and Alice."
                }
            ],
            "example_quality": 0.8821347616489562,
            "example_similarity": 0.35598578911097845,
            "db_id": "battle_death",
            "pred": "SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle JOIN ship s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta'",
            "correct": 1
        },
        {
            "index": 506,
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Answer the following: Give the names, details, and data types of characteristics that are not found in any product. */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Answer the following: Show the customer ids and firstname without a credit card. */\nSELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"\n\n/* Answer the following: What are the ids and first names of customers who do not hold a credit card? */\nSELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"\n\n/* Answer the following: List the date, theme and sales of the journal which did not have any of the listed editors serving on committee. */\nSELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. */\nSELECT ",
            "response": "name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.8816534956437618,
            "example_similarity": 0.3557850939671738,
            "db_id": "battle_death",
            "pred": "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')",
            "correct": 1
        },
        {
            "index": 507,
            "question": "What are the notes of the death events which has substring 'East'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all artists that have \"a\" in their names. */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: What are the names of artist who have the letter 'a' in their names? */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: Find the names of all the tracks that contain the word \"you\". */\nSELECT Name FROM TRACK WHERE Name LIKE '%you%'\n\n/* Answer the following: What are the names of tracks that contain the the word you in them? */\nSELECT Name FROM TRACK WHERE Name LIKE '%you%'\n\n/* Answer the following: Which enzyme names have the substring \"ALA\"? */\nSELECT name FROM enzyme WHERE name LIKE \"%ALA%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the notes of the death events which has substring 'East'? */\nSELECT ",
            "response": "note FROM death WHERE note LIKE '%East%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 818,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "Find the names of all artists that have \"a\" in their names."
                }
            ],
            "example_quality": 0.8818869207016637,
            "example_similarity": 0.3557643481314731,
            "db_id": "battle_death",
            "pred": "SELECT note FROM death WHERE note LIKE \"%East%\"",
            "correct": 1
        },
        {
            "index": 508,
            "question": "what are all the addresses including line 1 and line 2?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: what are all the addresses including line 1 and line 2? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8821194267632746,
            "example_similarity": 0.3558877497708844,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT line_1, line_2 FROM Addresses",
            "correct": 1
        },
        {
            "index": 509,
            "question": "What is the first and second line for all addresses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first and second line for all addresses? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8823510192450756,
            "example_similarity": 0.356027092476272,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT line_1, line_2 FROM Addresses",
            "correct": 1
        },
        {
            "index": 510,
            "question": "How many courses in total are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses in total are listed? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8825817035210657,
            "example_similarity": 0.3560429267343628,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Courses",
            "correct": 1
        },
        {
            "index": 511,
            "question": "How many courses are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses are there? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8828114849231771,
            "example_similarity": 0.3565914995516412,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Courses",
            "correct": 1
        },
        {
            "index": 512,
            "question": "How is the math course described?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How is the math course described? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8830403687416863,
            "example_similarity": 0.3563350274388016,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_description FROM Courses WHERE course_name = \"Math\"",
            "correct": 0
        },
        {
            "index": 513,
            "question": "What are the descriptions for all the math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the descriptions for all the math courses? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8832683602256207,
            "example_similarity": 0.35616955609567363,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_description FROM Courses WHERE course_name LIKE '%Math%'",
            "correct": 1
        },
        {
            "index": 514,
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code of the address in the city Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8834954645831584,
            "example_similarity": 0.35628701095421017,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\"",
            "correct": 1
        },
        {
            "index": 515,
            "question": "What is the zip code for Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code for Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.883721686982026,
            "example_similarity": 0.35621407596244686,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\"",
            "correct": 1
        },
        {
            "index": 516,
            "question": "Which department offers the most number of degrees? List department name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the movie that is rated by most of times? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the movie that has been reviewed the most? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the title and id of the film that has the greatest number of copies in inventory? */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: what is the full name and id of the college with the largest number of baseball players? */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which department offers the most number of degrees? List department name and id. */\nSELECT ",
            "response": "T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2509,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the movie that is rated by most of times?"
                }
            ],
            "example_quality": 0.8838575871116078,
            "example_similarity": 0.356219812080821,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 517,
            "question": "What is the name and id of the department with the most number of degrees ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the movie that is rated by most of times? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the movie that has been reviewed the most? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What are the name and code of the location with the smallest number of documents? */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name and id of the department with the most number of degrees ? */\nSELECT ",
            "response": "t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2509,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the movie that is rated by most of times?"
                }
            ],
            "example_quality": 0.8829616051648442,
            "example_similarity": 0.35641259721085955,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.department_name, T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 518,
            "question": "How many departments offer any degree?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many departments offer any degree? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8831875480120164,
            "example_similarity": 0.35629106609982464,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 519,
            "question": "How many different departments offer degrees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different departments offer degrees? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8834126201738431,
            "example_similarity": 0.3563330387399216,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 520,
            "question": "How many different degree names are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degree names are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8836368266735088,
            "example_similarity": 0.35627265195425845,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 521,
            "question": "How many different degrees are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degrees are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8838601724956326,
            "example_similarity": 0.35627554087138613,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT degree_program_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 522,
            "question": "How many degrees does the engineering department offer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many students are attending English courses? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many tracks belong to rock genre? */\nSELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Answer the following: Count the number of tracks that are part of the rock genre. */\nSELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Answer the following: How many tracks are in the AAC audio file media type? */\nSELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department offer? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                }
            ],
            "example_quality": 0.8840826625866369,
            "example_similarity": 0.35622493606732086,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = \"Engineering\"",
            "correct": 1
        },
        {
            "index": 523,
            "question": "How many degrees does the engineering department have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many students are attending English courses? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many tracks belong to rock genre? */\nSELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Answer the following: Count the number of tracks that are part of the rock genre. */\nSELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Answer the following: How many tracks are in the AAC audio file media type? */\nSELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department have? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                }
            ],
            "example_quality": 0.8843043018551138,
            "example_similarity": 0.35617452478067074,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = \"Engineering\")",
            "correct": 1
        },
        {
            "index": 524,
            "question": "What are the names and descriptions of all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions of all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8845250951721844,
            "example_similarity": 0.3562445822054874,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name, section_description FROM Sections",
            "correct": 1
        },
        {
            "index": 525,
            "question": "What are the names and descriptions for all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions for all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8847450473718563,
            "example_similarity": 0.3563445314750349,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name, section_description FROM Sections",
            "correct": 1
        },
        {
            "index": 526,
            "question": "What are the names and id of courses having at most 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which parts have more than 2 faults? Show the part name and id. */\nSELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2\n\n/* Answer the following: Show the names and ids of tourist attractions that are visited at most once. */\nSELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n\n/* Answer the following: What are the names and ids of the tourist attractions that are visited at most once? */\nSELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: What are the first names and support rep ids for employees serving 10 or more customers? */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and id of courses having at most 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3133,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
                    "question": "Which parts have more than 2 faults? Show the part name and id."
                }
            ],
            "example_quality": 0.8847474332133547,
            "example_similarity": 0.3564114333436394,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) <= 2",
            "correct": 1
        },
        {
            "index": 527,
            "question": "What are the names and ids of every course with less than 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which parts have more than 2 faults? Show the part name and id. */\nSELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2\n\n/* Answer the following: Show the names and ids of tourist attractions that are visited at most once. */\nSELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n\n/* Answer the following: What are the names and ids of the tourist attractions that are visited at most once? */\nSELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1\n\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Answer the following: What are the first names and support rep ids for employees serving 10 or more customers? */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and ids of every course with less than 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3133,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
                    "question": "Which parts have more than 2 faults? Show the part name and id."
                }
            ],
            "example_quality": 0.8847498100004261,
            "example_similarity": 0.35641590272708407,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name, T1.course_id FROM Courses AS T1 LEFT JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) < 2",
            "correct": 0
        },
        {
            "index": 528,
            "question": "List the section_name in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: What are the names of enzymes in descending order? */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: List the total points of gymnasts in descending order. */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List the section_name in reversed lexicographical order. */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.8849680868754252,
            "example_similarity": 0.35632675768280425,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "correct": 1
        },
        {
            "index": 529,
            "question": "What are the names of the sections in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: What are the names of enzymes in descending order? */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: List the total points of gymnasts in descending order. */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of the sections in reverse alphabetical order? */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.8851855385070406,
            "example_similarity": 0.3562956812383449,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "correct": 1
        },
        {
            "index": 530,
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the title and id of the film that has the greatest number of copies in inventory? */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: what is the full name and id of the college with the largest number of baseball players? */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the full name and id of the college that has the most baseball players. */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which project made the most number of outcomes? List the project details and the project id. */\nSELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the semester which most student registered in? Show both the name and the id. */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2967,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which film has the most copies in the inventory? List both title and id."
                }
            ],
            "example_quality": 0.8854021695664613,
            "example_similarity": 0.3563759431583376,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 531,
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the title and id of the film that has the greatest number of copies in inventory? */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: what is the full name and id of the college with the largest number of baseball players? */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the full name and id of the college that has the most baseball players. */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which project made the most number of outcomes? List the project details and the project id. */\nSELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: For each semester, what is the name and id of the one with the most students registered? */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2967,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which film has the most copies in the inventory? List both title and id."
                }
            ],
            "example_quality": 0.8856179846896883,
            "example_similarity": 0.3563618662388324,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC;",
            "correct": 0
        },
        {
            "index": 532,
            "question": "What is the description of the department whose name has the substring the computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Find the IDs of customers whose name contains \"Diana\". */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: What are the IDs of customers who have \"Diana\" in part of their names? */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: Find the department name of the instructor whose name contains 'Soisalon'. */\nSELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description of the department whose name has the substring the computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                }
            ],
            "example_quality": 0.8858329884778656,
            "example_similarity": 0.35612146915255677,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
            "correct": 1
        },
        {
            "index": 533,
            "question": "What is the department description for the one whose name has the word computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Find the IDs of customers whose name contains \"Diana\". */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: What are the IDs of customers who have \"Diana\" in part of their names? */\nSELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"\n\n/* Answer the following: Find the department name of the instructor whose name contains 'Soisalon'. */\nSELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the department description for the one whose name has the word computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                }
            ],
            "example_quality": 0.886047185497607,
            "example_similarity": 0.3558386617029511,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
            "correct": 1
        },
        {
            "index": 534,
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: Find the title, credit, and department name of courses that have more than one prerequisites? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: What is the title, credit value, and department name for courses with more than one prerequisite? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in. */\nSELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3895,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
                    "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement."
                }
            ],
            "example_quality": 0.8858000546013328,
            "example_similarity": 0.35585821935708173,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T2.semester_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2;",
            "correct": 0
        },
        {
            "index": 535,
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: Find the title, credit, and department name of courses that have more than one prerequisites? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: What is the title, credit value, and department name for courses with more than one prerequisite? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in. */\nSELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3895,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
                    "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement."
                }
            ],
            "example_quality": 0.8855538475588765,
            "example_similarity": 0.35588220465752185,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T2.semester_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2;",
            "correct": 0
        },
        {
            "index": 536,
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who belong to the institution \"University of Oxford\"? Show the first names and last names. */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\n\n/* Answer the following: Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\". */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\n\n/* Answer the following: Which authors belong to the institution \"Google\"? Show the first names and last names. */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n\n/* Answer the following: Find the first names and last names of the authors whose institution affiliation is \"Google\". */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n\n/* Answer the following: List the names and phone numbers of all the distinct suppliers who supply red jeans. */\nSELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2875,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
                    "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names."
                }
            ],
            "example_quality": 0.8853502066512725,
            "example_similarity": 0.35586295894447245,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT t1.first_name, t1.middle_name, t1.last_name FROM Students AS t1 JOIN Student_Enrolment AS t2 ON t1.student_id = t2.student_id JOIN Degree_Programs AS t3 ON t2.degree_program_id = t3.degree_program_id WHERE t3.degree_summary_name = \"Bachelor\"",
            "correct": 1
        },
        {
            "index": 537,
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who belong to the institution \"University of Oxford\"? Show the first names and last names. */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\n\n/* Answer the following: Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\". */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"\n\n/* Answer the following: Which authors belong to the institution \"Google\"? Show the first names and last names. */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n\n/* Answer the following: Find the first names and last names of the authors whose institution affiliation is \"Google\". */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n\n/* Answer the following: List the names and phone numbers of all the distinct suppliers who supply red jeans. */\nSELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names for everybody enrolled in a Bachelors program? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2875,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
                    "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names."
                }
            ],
            "example_quality": 0.885147324182803,
            "example_similarity": 0.3555856076007329,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT t1.first_name, t1.middle_name, t1.last_name FROM Students AS t1 JOIN Student_Enrolment AS t2 ON t1.student_id = t2.student_id JOIN Degree_Programs AS t3 ON t2.degree_program_id = t3.degree_program_id WHERE t3.degree_summary_name = \"Bachelors\"",
            "correct": 0
        },
        {
            "index": 538,
            "question": "Find the kind of program which most number of students are enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the kind of program which most number of students are enrolled in? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8853608049928721,
            "example_similarity": 0.355380903024253,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 539,
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the degree summary name that has the most number of students enrolled? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8855734936663547,
            "example_similarity": 0.3556835598814237,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 540,
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id and detail of the vehicle used in lessons for most of the times? */\nSELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id and name of the browser that is compatible with the most web accelerators? */\nSELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the program which most number of students are enrolled in. List both the id and the summary. */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                }
            ],
            "example_quality": 0.8857569045755197,
            "example_similarity": 0.35552757626578557,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 541,
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id and detail of the vehicle used in lessons for most of the times? */\nSELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id and name of the browser that is compatible with the most web accelerators? */\nSELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the program id and the summary of the degree that has the most students enrolled? */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                }
            ],
            "example_quality": 0.885939637440658,
            "example_similarity": 0.3556589837913923,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 542,
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which fault log included the most number of faulty parts? List the fault log id, description and record time. */\nSELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the maximum number that a certain service is provided? List the service id, details and number. */\nSELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first name, last name and id of the player with the most all star game experiences? Also list the count. */\nSELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3148,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time."
                }
            ],
            "example_quality": 0.8855756568024267,
            "example_similarity": 0.3557300299094132,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS enrollment_count FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollment_count DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 543,
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which fault log included the most number of faulty parts? List the fault log id, description and record time. */\nSELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the maximum number that a certain service is provided? List the service id, details and number. */\nSELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first name, last name and id of the player with the most all star game experiences? Also list the count. */\nSELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3148,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time."
                }
            ],
            "example_quality": 0.885213016792697,
            "example_similarity": 0.35570224909192055,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS enrollment_count FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollment_count DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 544,
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which projects have no outcome? List the project details. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: What are the details of the project with no outcomes? */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: what state has no rivers */\nSELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );\n\n/* Answer the following: Find the famous titles of artists that do not have any volume. */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Answer the following: What are the famous titles of artists who do not have any volumes? */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which semesters do not have any student enrolled? List the semester name. */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4359,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                    "question": "Which projects have no outcome? List the project details."
                }
            ],
            "example_quality": 0.8848679561000635,
            "example_similarity": 0.35582727465081027,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
            "correct": 1
        },
        {
            "index": 545,
            "question": "What is the name of the semester with no students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which projects have no outcome? List the project details. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: What are the details of the project with no outcomes? */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: what state has no rivers */\nSELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );\n\n/* Answer the following: Find the famous titles of artists that do not have any volume. */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Answer the following: What are the famous titles of artists who do not have any volumes? */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the semester with no students enrolled? */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4359,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                    "question": "Which projects have no outcome? List the project details."
                }
            ],
            "example_quality": 0.8845241616852009,
            "example_similarity": 0.3558051341170669,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
            "correct": 1
        },
        {
            "index": 546,
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of addresses of people? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Answer the following: What are the different cities where people live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Answer the following: Find the name of bank branches that provided some loans. */\nSELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id\n\n/* Answer the following: What are the names of the different banks that have provided loans? */\nSELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id\n\n/* Answer the following: Find the last name of the individuals that have been contact individuals of an organization. */\nSELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are all the course names of the courses which ever have students enrolled in? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 92,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "Find distinct cities of addresses of people?"
                }
            ],
            "example_quality": 0.8847356558945688,
            "example_similarity": 0.35571619434604435,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT DISTINCT T2.course_name FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id;",
            "correct": 1
        },
        {
            "index": 547,
            "question": "What are the names of all courses that have some students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of addresses of people? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Answer the following: What are the different cities where people live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Answer the following: Find the name of bank branches that provided some loans. */\nSELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id\n\n/* Answer the following: What are the names of the different banks that have provided loans? */\nSELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id\n\n/* Answer the following: Find the last name of the individuals that have been contact individuals of an organization. */\nSELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of all courses that have some students enrolled? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 92,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "Find distinct cities of addresses of people?"
                }
            ],
            "example_quality": 0.884946376816151,
            "example_similarity": 0.35573481081568514,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment_Courses AS T3 ON T2.course_id = T3.course_id;",
            "correct": 0
        },
        {
            "index": 548,
            "question": "What's the name of the course with most number of enrollments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What's the name of the course with most number of enrollments? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8851563286832747,
            "example_similarity": 0.35572880497299697,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 549,
            "question": "What is the name of the course with the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the course with the most students enrolled? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8853655156984235,
            "example_similarity": 0.35600239060746464,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 550,
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities. */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Answer the following: Which cities have lower temperature in March than in Dec and have never served as host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Answer the following: Show all cities where at least one customer lives in but no performer lives in. */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Which cities have at least one customer but no performer? */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6293,
                    "db_id": "city_record",
                    "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
                    "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities."
                }
            ],
            "example_quality": 0.8848499970803224,
            "example_similarity": 0.35576792000210694,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
            "correct": 0
        },
        {
            "index": 551,
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities. */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Answer the following: Which cities have lower temperature in March than in Dec and have never served as host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Answer the following: Show all cities where at least one customer lives in but no performer lives in. */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Which cities have at least one customer but no performer? */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the last name of the students who live in North Carolina but have not registered in any degree programs? */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6293,
                    "db_id": "city_record",
                    "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
                    "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities."
                }
            ],
            "example_quality": 0.8843363496731764,
            "example_similarity": 0.3555880791803974,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
            "correct": 0
        },
        {
            "index": 552,
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name and id for all customers with at least 2 accounts. */\nSELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the first names and ids for customers who have two or more accounts? */\nSELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date and id of the transcript with at least 2 course results. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1572,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
                    "question": "Show first name and id for all customers with at least 2 accounts."
                }
            ],
            "example_quality": 0.8843852047422941,
            "example_similarity": 0.3556256133285099,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 GROUP BY T1.transcript_id HAVING COUNT(*) >= 2",
            "correct": 0
        },
        {
            "index": 553,
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name and id for all customers with at least 2 accounts. */\nSELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the first names and ids for customers who have two or more accounts? */\nSELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with at least 2 courses listed? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1572,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
                    "question": "Show first name and id for all customers with at least 2 accounts."
                }
            ],
            "example_quality": 0.8844338831203842,
            "example_similarity": 0.35555916758809875,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 554,
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What is the company where Eduardo Martins is a customer? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the phone number of the man with the first name Timmothy and the last name Ward? */\nSELECT ",
            "response": "cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                }
            ],
            "example_quality": 0.8846424862194446,
            "example_similarity": 0.35549204491328557,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT cell_mobile_number FROM students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
            "correct": 1
        },
        {
            "index": 555,
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What is the company where Eduardo Martins is a customer? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the mobile phone number of the student named Timmothy Ward ? */\nSELECT ",
            "response": "cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                }
            ],
            "example_quality": 0.8839494366947249,
            "example_similarity": 0.355522021141443,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
            "correct": 0
        },
        {
            "index": 556,
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the first student to register? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                }
            ],
            "example_quality": 0.883962888375901,
            "example_similarity": 0.35565457492985364,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
            "correct": 1
        },
        {
            "index": 557,
            "question": "What is the first, middle, and last name of the first student to register?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the first student to register? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                }
            ],
            "example_quality": 0.8839762917566059,
            "example_similarity": 0.3559514777814883,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
            "correct": 1
        },
        {
            "index": 558,
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the earliest graduate of the school? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                }
            ],
            "example_quality": 0.8839896470965198,
            "example_similarity": 0.3561697366505894,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 559,
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the earliest school graduate? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                }
            ],
            "example_quality": 0.8840029546534646,
            "example_similarity": 0.3563926936075388,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
            "correct": 1
        },
        {
            "index": 560,
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Whose permanent address is different from his or her current address? List his or her first name. */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8838132668376151,
            "example_similarity": 0.35614589375856953,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "correct": 1
        },
        {
            "index": 561,
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first name of the student whose permanent address is different from his or her current one? */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8836242552706634,
            "example_similarity": 0.35613781290625934,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "correct": 1
        },
        {
            "index": 562,
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation hired the most number of research staff? List the organisation id, type and detail. */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids, types, and details of the organization with the most research staff? */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id, name and nationality of the architect who built most mills? */\nSELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which fault log included the most number of faulty parts? List the fault log id, description and record time. */\nSELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id, name and IATA code of the airport that had most number of flights? */\nSELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which address holds the most number of students currently? List the address id and all lines. */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4361,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail."
                }
            ],
            "example_quality": 0.8837804907086669,
            "example_similarity": 0.35640297456909437,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 563,
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation hired the most number of research staff? List the organisation id, type and detail. */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids, types, and details of the organization with the most research staff? */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id, name and nationality of the architect who built most mills? */\nSELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which fault log included the most number of faulty parts? List the fault log id, description and record time. */\nSELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id, name and IATA code of the airport that had most number of flights? */\nSELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id, line 1, and line 2 of the address with the most students? */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4361,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail."
                }
            ],
            "example_quality": 0.8839361711362335,
            "example_similarity": 0.35678416181854783,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 564,
            "question": "On average, when were the transcripts printed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: On average, when were the transcripts printed? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8841419580668429,
            "example_similarity": 0.3565569336078419,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT AVG(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 565,
            "question": "What is the average transcript date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the average transcript date? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8843470165481405,
            "example_similarity": 0.3568433018286332,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT AVG(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 566,
            "question": "When is the first transcript released? List the date and details.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: List top 10 employee work longest in the company. List employee's first and last name. */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: What are the first and last names of the top 10 longest-serving employees? */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: Which model has the least amount of RAM? List the model name and the amount of RAM. */\nSELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When is the first transcript released? List the date and details. */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3859,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                    "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount."
                }
            ],
            "example_quality": 0.8843882626455684,
            "example_similarity": 0.35676892619919603,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 567,
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: List top 10 employee work longest in the company. List employee's first and last name. */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: What are the first and last names of the top 10 longest-serving employees? */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: Which model has the least amount of RAM? List the model name and the amount of RAM. */\nSELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the earliest date of a transcript release, and what details can you tell me? */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3859,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                    "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount."
                }
            ],
            "example_quality": 0.8844293632541164,
            "example_similarity": 0.3564569686832386,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MIN(transcript_date), other_details FROM Transcripts;",
            "correct": 1
        },
        {
            "index": 568,
            "question": "How many transcripts are released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are released? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.884632832685007,
            "example_similarity": 0.3566479512470622,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 569,
            "question": "How many transcripts are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are listed? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8848355869333637,
            "example_similarity": 0.35683826251892165,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 570,
            "question": "What is the last transcript release date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the highest acc percent score in the competition? */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: Return the highest acc percent across all basketball matches. */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: what are the top 3 highest support rates? */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Answer the following: Return the top 3 greatest support rates. */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Answer the following: What is the largest payment amount? */\nSELECT amount FROM payment ORDER BY amount DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the last transcript release date? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 988,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "What is the highest acc percent score in the competition?"
                }
            ],
            "example_quality": 0.8850376297633052,
            "example_similarity": 0.3570166891786103,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 571,
            "question": "When was the last transcript released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the highest acc percent score in the competition? */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: Return the highest acc percent across all basketball matches. */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: what are the top 3 highest support rates? */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Answer the following: Return the top 3 greatest support rates. */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Answer the following: What is the largest payment amount? */\nSELECT amount FROM payment ORDER BY amount DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When was the last transcript released? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 988,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "What is the highest acc percent score in the competition?"
                }
            ],
            "example_quality": 0.8852389649125814,
            "example_similarity": 0.3569109973703582,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 572,
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer with the most accounts, and how many accounts does this person have? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id with most number of cards, and how many does he have? */\nSELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 538,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices."
                }
            ],
            "example_quality": 0.8852822534354615,
            "example_similarity": 0.3566646377001185,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MAX(count) AS max_count, student_course_id FROM ( SELECT student_course_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id, transcript_id ) AS counts GROUP BY student_course_id;",
            "correct": 0
        },
        {
            "index": 573,
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer with the most accounts, and how many accounts does this person have? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id with most number of cards, and how many does he have? */\nSELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 538,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices."
                }
            ],
            "example_quality": 0.8853253908640208,
            "example_similarity": 0.35647106450524974,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_id, COUNT(*) as course_count FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 574,
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What are the name and code of the location with the smallest number of documents? */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What is the name of the movie that is rated by most of times? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the movie that has been reviewed the most? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date of the transcript which shows the least number of results, also list the id. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4233,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the location name and code with the least documents."
                }
            ],
            "example_quality": 0.8854199479175698,
            "example_similarity": 0.3563146509277798,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 575,
            "question": "What is the date and id of the transcript with the least number of results?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What are the name and code of the location with the smallest number of documents? */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What is the name of the movie that is rated by most of times? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the movie that has been reviewed the most? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with the least number of results? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4233,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the location name and code with the least documents."
                }
            ],
            "example_quality": 0.8855141760770197,
            "example_similarity": 0.35641416017404876,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 576,
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have loans of both Mortgages and Auto. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'\n\n/* Answer the following: What are the names of customers who have taken both Mortgage and Auto loans? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'\n\n/* Answer the following: Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\" */\nSELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\n\n/* Answer the following: Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers. */\nSELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\n\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the semester when both Master students and Bachelor students got enrolled in. */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3043,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
                    "question": "Find the name of customers who have loans of both Mortgages and Auto."
                }
            ],
            "example_quality": 0.8852437627462625,
            "example_similarity": 0.35633010449469743,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Master' INTERSECT SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "correct": 0
        },
        {
            "index": 577,
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have loans of both Mortgages and Auto. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'\n\n/* Answer the following: What are the names of customers who have taken both Mortgage and Auto loans? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'\n\n/* Answer the following: Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\" */\nSELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\n\n/* Answer the following: Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers. */\nSELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"\n\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id of the semester that had both Masters and Bachelors students enrolled? */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3043,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
                    "question": "Find the name of customers who have loans of both Mortgages and Auto."
                }
            ],
            "example_quality": 0.884974286723411,
            "example_similarity": 0.3562255827891068,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Masters' INTERSECT SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelors'",
            "correct": 0
        },
        {
            "index": 578,
            "question": "How many different addresses do the students currently live?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different addresses do the students currently live? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.885173293147765,
            "example_similarity": 0.35620541043195514,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT current_address_id) FROM Students",
            "correct": 1
        },
        {
            "index": 579,
            "question": "What are the different addresses that have students living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the different addresses that have students living there? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8853716121578725,
            "example_similarity": 0.35606297667254977,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students)",
            "correct": 0
        },
        {
            "index": 580,
            "question": "List all the student details in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: What are the names of enzymes in descending order? */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: List the total points of gymnasts in descending order. */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List all the student details in reversed lexicographical order. */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.8855692473093246,
            "example_similarity": 0.3560749146661954,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC",
            "correct": 0
        },
        {
            "index": 581,
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: What are the names of enzymes in descending order? */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: List the total points of gymnasts in descending order. */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What other details can you tell me about students in reverse alphabetical order? */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.8857662021332328,
            "example_similarity": 0.35588041425444394,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT other_student_details FROM Students ORDER BY last_name DESC",
            "correct": 0
        },
        {
            "index": 582,
            "question": "Describe the section h.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Describe the section h. */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8859624801364403,
            "example_similarity": 0.3554800528400984,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name, section_description, other_details FROM Sections WHERE section_id = 'h'",
            "correct": 0
        },
        {
            "index": 583,
            "question": "What is the description for the section named h?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description for the section named h? */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8861580848017294,
            "example_similarity": 0.35540872031182125,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "correct": 1
        },
        {
            "index": 584,
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the official languages of the countries of players from Maryland or Duke college? */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: Return the official native languages of countries who have players from Maryland or Duke colleges. */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: Find the names of the students who are in the position of striker and got a yes tryout decision. */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'\n\n/* Answer the following: What are the names of all students who successfully tried out for the position of striker? */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'\n\n/* Answer the following: What are the details of the markets that can be accessed by walk or bus? */\nSELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1079,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "What are the official languages of the countries of players from Maryland or Duke college?"
                }
            ],
            "example_quality": 0.8855263781142442,
            "example_similarity": 0.35536521501412466,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = \"Haiti\" OR T1.cell_mobile_number = \"09700166582\"",
            "correct": 0
        },
        {
            "index": 585,
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the official languages of the countries of players from Maryland or Duke college? */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: Return the official native languages of countries who have players from Maryland or Duke colleges. */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: Find the names of the students who are in the position of striker and got a yes tryout decision. */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'\n\n/* Answer the following: What are the names of all students who successfully tried out for the position of striker? */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'\n\n/* Answer the following: What are the details of the markets that can be accessed by walk or bus? */\nSELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1079,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "What are the official languages of the countries of players from Maryland or Duke college?"
                }
            ],
            "example_quality": 0.8848968311077419,
            "example_similarity": 0.3554307265417748,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = \"Haiti\" OR T1.cell_mobile_number = \"09700166582\"",
            "correct": 0
        },
        {
            "index": 586,
            "question": "List the title of all cartoons in alphabetical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the locations of all the gas stations ordered by opening year? */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: List all department names ordered by their starting date. */\nSELECT dname FROM department ORDER BY mgr_start_date\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoons in alphabetical order. */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                }
            ],
            "example_quality": 0.8850932528976603,
            "example_similarity": 0.35539588320523313,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon ORDER BY Title",
            "correct": 1
        },
        {
            "index": 587,
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the locations of all the gas stations ordered by opening year? */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: List all department names ordered by their starting date. */\nSELECT dname FROM department ORDER BY mgr_start_date\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of the cartoons sorted alphabetically? */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                }
            ],
            "example_quality": 0.8852890054480902,
            "example_similarity": 0.3551990746836666,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon ORDER BY Title",
            "correct": 1
        },
        {
            "index": 588,
            "question": "List all cartoon directed by \"Ben Jones\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List all cartoon directed by \"Ben Jones\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8854840921735185,
            "example_similarity": 0.35517104026032636,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
            "correct": 1
        },
        {
            "index": 589,
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the names of all cartoons directed by Ben Jones? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8856785164652443,
            "example_similarity": 0.35526227124248433,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "correct": 1
        },
        {
            "index": 590,
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons were written by \"Joseph Kuhr\"? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8858722816915744,
            "example_similarity": 0.3554293625689311,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
            "correct": 1
        },
        {
            "index": 591,
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the number of cartoones written by Joseph Kuhr? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8860653911980184,
            "example_similarity": 0.3552630571451984,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
            "correct": 1
        },
        {
            "index": 592,
            "question": "list all cartoon titles and their directors ordered by their air date",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all schools and their nicknames in the order of founded year. */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: What are the names of students and their respective departments, ordered by number of credits from least to greatest? */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: List all manufacturer names and ids ordered by their opening year. */\nSELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: list all cartoon titles and their directors ordered by their air date */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 978,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "List all schools and their nicknames in the order of founded year."
                }
            ],
            "example_quality": 0.8862578483074812,
            "example_similarity": 0.3553071110945631,
            "db_id": "tvshow",
            "pred": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;",
            "correct": 1
        },
        {
            "index": 593,
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all schools and their nicknames in the order of founded year. */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: What are the names of students and their respective departments, ordered by number of credits from least to greatest? */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Answer the following: List all manufacturer names and ids ordered by their opening year. */\nSELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name and directors of all the cartoons that are ordered by air date? */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 978,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "List all schools and their nicknames in the order of founded year."
                }
            ],
            "example_quality": 0.8864496563204535,
            "example_similarity": 0.35526431442568596,
            "db_id": "tvshow",
            "pred": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date",
            "correct": 1
        },
        {
            "index": 594,
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Answer the following: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Give me the names of members whose address is in Harford or Waterbury. */\nSELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\n\n/* Answer the following: What are the life spans of representatives from New York state or Indiana state? */\nSELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.8866408185152002,
            "example_similarity": 0.35538642000923854,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
            "correct": 1
        },
        {
            "index": 595,
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Answer the following: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Give me the names of members whose address is in Harford or Waterbury. */\nSELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\n\n/* Answer the following: What are the life spans of representatives from New York state or Indiana state? */\nSELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.8868313381479478,
            "example_similarity": 0.35550319619022186,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "correct": 1
        },
        {
            "index": 596,
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer with the most accounts, and how many accounts does this person have? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id with most number of cards, and how many does he have? */\nSELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Which country has the most of TV Channels? List the country and number of TV Channels it has. */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 538,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices."
                }
            ],
            "example_quality": 0.8870212184530687,
            "example_similarity": 0.35555056357606063,
            "db_id": "tvshow",
            "pred": "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 597,
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer with the most accounts, and how many accounts does this person have? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id with most number of cards, and how many does he have? */\nSELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the country with the most number of TV Channels and how many does it have? */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 538,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices."
                }
            ],
            "example_quality": 0.8872104626432645,
            "example_similarity": 0.35578673954837486,
            "db_id": "tvshow",
            "pred": "SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 598,
            "question": "List the number of different series names and contents in the TV Channel table.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the numbers of different majors and cities. */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many different majors are there and how many different city codes are there for each student? */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the number of different series names and contents in the TV Channel table. */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5701,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "Find the numbers of different majors and cities."
                }
            ],
            "example_quality": 0.8868974016689447,
            "example_similarity": 0.35557939949163997,
            "db_id": "tvshow",
            "pred": "SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel",
            "correct": 1
        },
        {
            "index": 599,
            "question": "How many different series and contents are listed in the TV Channel table?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the numbers of different majors and cities. */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many different majors are there and how many different city codes are there for each student? */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many different series and contents are listed in the TV Channel table? */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5701,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "Find the numbers of different majors and cities."
                }
            ],
            "example_quality": 0.8865853859733371,
            "example_similarity": 0.3554685967912925,
            "db_id": "tvshow",
            "pred": "SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel",
            "correct": 1
        },
        {
            "index": 600,
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8867744103300482,
            "example_similarity": 0.3556146481553148,
            "db_id": "tvshow",
            "pred": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 601,
            "question": "What is the content of the series Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of the series Sky Radio? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8869628056539582,
            "example_similarity": 0.3557763172561842,
            "db_id": "tvshow",
            "pred": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 602,
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the Package Option of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8871505750797822,
            "example_similarity": 0.35588309025670667,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 603,
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the Package Options of the TV Channels whose series names are Sky Radio? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.887337721721441,
            "example_similarity": 0.35592204670707944,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 604,
            "question": "How many TV Channel using language English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channel using language English? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8875242486722333,
            "example_similarity": 0.3563151117511626,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM TV_Channel WHERE Language = \"English\"",
            "correct": 1
        },
        {
            "index": 605,
            "question": "How many TV Channels use the English language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channels use the English language? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8877101590050065,
            "example_similarity": 0.35661571787749424,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM TV_Channel WHERE Language = \"English\"",
            "correct": 1
        },
        {
            "index": 606,
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. */\nSELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer with the most accounts, and how many accounts does this person have? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the language used least number of TV Channel. List language and number of TV Channel. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1034,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
                    "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company."
                }
            ],
            "example_quality": 0.8877304392706747,
            "example_similarity": 0.3567229720090689,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 607,
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. */\nSELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer with the most accounts, and how many accounts does this person have? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the languages used by the least number of TV Channels and how many channels use it? */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1034,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
                    "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company."
                }
            ],
            "example_quality": 0.8877506527150394,
            "example_similarity": 0.3567313879994145,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 608,
            "question": "List each language and the number of TV Channels using it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List each language and the number of TV Channels using it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8879352733520213,
            "example_similarity": 0.3566808814267393,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
            "correct": 1
        },
        {
            "index": 609,
            "question": "For each language, list the number of TV Channels that use it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: For each language, list the number of TV Channels that use it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8881192876814925,
            "example_similarity": 0.3565812933554831,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
            "correct": 1
        },
        {
            "index": 610,
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8883026986852933,
            "example_similarity": 0.35656847348927423,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "correct": 1
        },
        {
            "index": 611,
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8884855093257429,
            "example_similarity": 0.35660623544042275,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle\";",
            "correct": 0
        },
        {
            "index": 612,
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Which players are from Indonesia? */\nSELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                }
            ],
            "example_quality": 0.8886677225457988,
            "example_similarity": 0.35661752451897627,
            "db_id": "tvshow",
            "pred": "SELECT T2.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\";",
            "correct": 0
        },
        {
            "index": 613,
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Which players are from Indonesia? */\nSELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                }
            ],
            "example_quality": 0.8888493412692152,
            "example_similarity": 0.35661679334059176,
            "db_id": "tvshow",
            "pred": "SELECT T2.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\";",
            "correct": 0
        },
        {
            "index": 614,
            "question": "List the Episode of all TV series sorted by rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the locations of all the gas stations ordered by opening year? */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: List all department names ordered by their starting date. */\nSELECT dname FROM department ORDER BY mgr_start_date\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all TV series sorted by rating. */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                }
            ],
            "example_quality": 0.8890303684006986,
            "example_similarity": 0.3568556655236291,
            "db_id": "tvshow",
            "pred": "SELECT Episode FROM TV_series ORDER BY Rating",
            "correct": 1
        },
        {
            "index": 615,
            "question": "What are all of the episodes ordered by ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the locations of all the gas stations ordered by opening year? */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: List all department names ordered by their starting date. */\nSELECT dname FROM department ORDER BY mgr_start_date\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are all of the episodes ordered by ratings? */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                }
            ],
            "example_quality": 0.8892108068260631,
            "example_similarity": 0.35693452971441536,
            "db_id": "tvshow",
            "pred": "SELECT Episode FROM TV_series ORDER BY Rating",
            "correct": 1
        },
        {
            "index": 616,
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Answer the following: Which restaurants have highest rating? List the restaurant name and its rating. */\nSELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;\n\n/* Answer the following: Which film has the highest rental rate? And what is the rate? */\nSELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                }
            ],
            "example_quality": 0.8893906594123845,
            "example_similarity": 0.3568324355863903,
            "db_id": "tvshow",
            "pred": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 617,
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Answer the following: Which restaurants have highest rating? List the restaurant name and its rating. */\nSELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;\n\n/* Answer the following: Which film has the highest rental rate? And what is the rate? */\nSELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are 3 most highly rated episodes in the TV series table and what were those ratings? */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                }
            ],
            "example_quality": 0.8895699290081505,
            "example_similarity": 0.356780139446285,
            "db_id": "tvshow",
            "pred": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 618,
            "question": "What is minimum and maximum share of TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: What are the durations of the longest and the shortest tracks in milliseconds? */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Answer the following: Find the maximum and minimum durations of tracks in milliseconds. */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is minimum and maximum share of TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                }
            ],
            "example_quality": 0.8897486184434124,
            "example_similarity": 0.3569599933699211,
            "db_id": "tvshow",
            "pred": "SELECT min(Share), max(Share) FROM TV_series",
            "correct": 1
        },
        {
            "index": 619,
            "question": "What is the maximum and minimum share for the TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: What are the durations of the longest and the shortest tracks in milliseconds? */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Answer the following: Find the maximum and minimum durations of tracks in milliseconds. */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the maximum and minimum share for the TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                }
            ],
            "example_quality": 0.8899267305299334,
            "example_similarity": 0.35710933871488854,
            "db_id": "tvshow",
            "pred": "SELECT max(Share) , min(Share) FROM TV_series",
            "correct": 1
        },
        {
            "index": 620,
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the air date of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8901042680613368,
            "example_similarity": 0.3571623063257596,
            "db_id": "tvshow",
            "pred": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 621,
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: When did the episode \"A Love of a Lifetime\" air? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8902812338132511,
            "example_similarity": 0.3572156621711696,
            "db_id": "tvshow",
            "pred": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 622,
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8904576305434548,
            "example_similarity": 0.35721527425086014,
            "db_id": "tvshow",
            "pred": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 623,
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the weekly rank for the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8906334609920207,
            "example_similarity": 0.3573490467730186,
            "db_id": "tvshow",
            "pred": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 624,
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8908087278814566,
            "example_similarity": 0.35730856653607335,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name, T2.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = \"A Love of a Lifetime\";",
            "correct": 0
        },
        {
            "index": 625,
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name of the series that has the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8909834339168463,
            "example_similarity": 0.3573249594097022,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.Channel = T2.Channel WHERE T2.Title = \"A Love of a Lifetime\";",
            "correct": 0
        },
        {
            "index": 626,
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Which players are from Indonesia? */\nSELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                }
            ],
            "example_quality": 0.8911575817859887,
            "example_similarity": 0.35731004499084634,
            "db_id": "tvshow",
            "pred": "SELECT T2.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\";",
            "correct": 0
        },
        {
            "index": 627,
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Which players are from Indonesia? */\nSELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the episode for the TV series named \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                }
            ],
            "example_quality": 0.8913311741595358,
            "example_similarity": 0.35734188553714763,
            "db_id": "tvshow",
            "pred": "SELECT T2.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\";",
            "correct": 0
        },
        {
            "index": 628,
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the number of cartoons directed by each of the listed directors. */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.8915042136911289,
            "example_similarity": 0.35743104389351094,
            "db_id": "tvshow",
            "pred": "SELECT count(*) , Directed_by FROM Cartoon GROUP BY Directed_by",
            "correct": 1
        },
        {
            "index": 629,
            "question": "How many cartoons did each director create?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons did each director create? */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.891676703017534,
            "example_similarity": 0.3572125431213899,
            "db_id": "tvshow",
            "pred": "SELECT count(*) , Directed_by FROM Cartoon GROUP BY Directed_by",
            "correct": 1
        },
        {
            "index": 630,
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the production code and channel of the most recently aired cartoon . */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.8908215672611103,
            "example_similarity": 0.3573239441521921,
            "db_id": "tvshow",
            "pred": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 631,
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Answer the following: Show the enrollment and primary_conference of the oldest college. */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the produdction code and channel of the most recent cartoon ? */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                }
            ],
            "example_quality": 0.8899691419191285,
            "example_similarity": 0.3572317125207326,
            "db_id": "tvshow",
            "pred": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 632,
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the package choice and series name of the TV channel that has high definition TV. */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8901432413781172,
            "example_similarity": 0.35725505140453656,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'",
            "correct": 0
        },
        {
            "index": 633,
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options and the name of the series for the TV Channel that supports high definition TV? */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8903167907598264,
            "example_similarity": 0.3573111645635113,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'",
            "correct": 0
        },
        {
            "index": 634,
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are playing some cartoon written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.8904897926671452,
            "example_similarity": 0.3571516217025469,
            "db_id": "tvshow",
            "pred": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\";",
            "correct": 1
        },
        {
            "index": 635,
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of the album that has the track Ball to the Wall? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that have cartoons on TV that were written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                }
            ],
            "example_quality": 0.890662249686567,
            "example_similarity": 0.35708478764850315,
            "db_id": "tvshow",
            "pred": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = \"Todd Casey\";",
            "correct": 1
        },
        {
            "index": 636,
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names for tracks without a race in class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Answer the following: Give the names of tracks that do not have a race in the class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Answer the following: What are the ids of the movies that are not reviewed by Brittany Harris. */\nSELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n\n/* Answer the following: What are the ids of all moviest hat have not been reviewed by Britanny Harris? */\nSELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n\n/* Answer the following: Find the name of customers who do not have a loan with a type of Mortgages. */\nSELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are not playing any cartoon written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 774,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
                    "question": "What are the names for tracks without a race in class 'GT'."
                }
            ],
            "example_quality": 0.890703137134649,
            "example_similarity": 0.35684571566142315,
            "db_id": "tvshow",
            "pred": "SELECT Country FROM TV_Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'",
            "correct": 1
        },
        {
            "index": 637,
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names for tracks without a race in class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Answer the following: Give the names of tracks that do not have a race in the class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Answer the following: What are the ids of the movies that are not reviewed by Brittany Harris. */\nSELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n\n/* Answer the following: What are the ids of all moviest hat have not been reviewed by Britanny Harris? */\nSELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n\n/* Answer the following: Find the name of customers who do not have a loan with a type of Mortgages. */\nSELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that are not playing cartoons written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 774,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
                    "question": "What are the names for tracks without a race in class 'GT'."
                }
            ],
            "example_quality": 0.8907438962076978,
            "example_similarity": 0.3567760783879936,
            "db_id": "tvshow",
            "pred": "SELECT Country FROM TV_Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'",
            "correct": 1
        },
        {
            "index": 638,
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: What are the names and addressed of customers who have both New and Pending orders? */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff. */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff? */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: Find the name and age of the person who is a friend of both Dan and Alice. */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4736,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
                    "question": "Find the name and address of the customers who have both New and Pending orders."
                }
            ],
            "example_quality": 0.8906826957557394,
            "example_similarity": 0.356763836129143,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')",
            "correct": 0
        },
        {
            "index": 639,
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: What are the names and addressed of customers who have both New and Pending orders? */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Answer the following: Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff. */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff? */\nSELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"\n\n/* Answer the following: Find the name and age of the person who is a friend of both Dan and Alice. */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4736,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
                    "question": "Find the name and address of the customers who have both New and Pending orders."
                }
            ],
            "example_quality": 0.8906216868544915,
            "example_similarity": 0.3566675956583089,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' INTERSECT SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Michael Chang'",
            "correct": 1
        },
        {
            "index": 640,
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Answer the following: What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection? */\nSELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'\n\n/* Answer the following: Show the names and total passengers for all train stations not in London. */\nSELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the pixel aspect ratio and nation of the tv channels that do not use English. */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                }
            ],
            "example_quality": 0.8907925904687813,
            "example_similarity": 0.3568017527565431,
            "db_id": "tvshow",
            "pred": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
            "correct": 1
        },
        {
            "index": 641,
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Answer the following: What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection? */\nSELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'\n\n/* Answer the following: Show the names and total passengers for all train stations not in London. */\nSELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                }
            ],
            "example_quality": 0.890962960842465,
            "example_similarity": 0.35697430917294676,
            "db_id": "tvshow",
            "pred": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
            "correct": 1
        },
        {
            "index": 642,
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find id of the tv channels that from the countries where have more than two tv channels. */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.8908731950675286,
            "example_similarity": 0.35701272358799874,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel WHERE Country IN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2 )",
            "correct": 0
        },
        {
            "index": 643,
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the nominees who have been nominated more than two times? */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Answer the following: Find the list of attribute data types possessed by more than 3 attribute definitions. */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of all tv channels that have more than 2 TV channels? */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                }
            ],
            "example_quality": 0.8907837085018456,
            "example_similarity": 0.35699535057685233,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2",
            "correct": 0
        },
        {
            "index": 644,
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the chip models that are not used by any phone with full accreditation type. */\nSELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'\n\n/* Answer the following: Which address do not have any member with the black membership card? */\nSELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'\n\n/* Answer the following: Show all headquarters without a company in banking industry. */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: What are the headquarters without companies that are in the banking industry? */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: Find the name of customers who do not have an saving account. */\nSELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the id of tv channels that do not play any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1051,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
                    "question": "Find the names of the chip models that are not used by any phone with full accreditation type."
                }
            ],
            "example_quality": 0.8905776705043198,
            "example_similarity": 0.3570007877567173,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "correct": 1
        },
        {
            "index": 645,
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the chip models that are not used by any phone with full accreditation type. */\nSELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'\n\n/* Answer the following: Which address do not have any member with the black membership card? */\nSELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'\n\n/* Answer the following: Show all headquarters without a company in banking industry. */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: What are the headquarters without companies that are in the banking industry? */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: Find the name of customers who do not have an saving account. */\nSELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1051,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
                    "question": "Find the names of the chip models that are not used by any phone with full accreditation type."
                }
            ],
            "example_quality": 0.8903722713843057,
            "example_similarity": 0.35703453283627384,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "correct": 1
        },
        {
            "index": 646,
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: What are the first name and major of the students who are able to consume soy? */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: Find the name and flag of ships that are not steered by any captain with Midshipman rank. */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                }
            ],
            "example_quality": 0.890392908276441,
            "example_similarity": 0.3571900377130441,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
            "correct": 1
        },
        {
            "index": 647,
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: What are the first name and major of the students who are able to consume soy? */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: Find the name and flag of ships that are not steered by any captain with Midshipman rank. */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                }
            ],
            "example_quality": 0.8904134813760196,
            "example_similarity": 0.3572851105873174,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
            "correct": 1
        },
        {
            "index": 648,
            "question": "How many poker players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many poker players are there? */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8905825963738961,
            "example_similarity": 0.3575788357987861,
            "db_id": "poker_player",
            "pred": "SELECT count(*) FROM poker_player",
            "correct": 1
        },
        {
            "index": 649,
            "question": "Count the number of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of poker players. */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8907511902161551,
            "example_similarity": 0.3576331937449469,
            "db_id": "poker_player",
            "pred": "SELECT count(*) FROM poker_player",
            "correct": 1
        },
        {
            "index": 650,
            "question": "List the earnings of poker players in descending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: What are the names of enzymes in descending order? */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: List the total points of gymnasts in descending order. */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the earnings of poker players in descending order. */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.8909192653081303,
            "example_similarity": 0.3581619560181526,
            "db_id": "poker_player",
            "pred": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 651,
            "question": "What are the earnings of poker players, ordered descending by value?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: What are the names of enzymes in descending order? */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: List the total points of gymnasts in descending order. */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the earnings of poker players, ordered descending by value? */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.8910868240403759,
            "example_similarity": 0.3582585517103429,
            "db_id": "poker_player",
            "pred": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 652,
            "question": "List the final tables made and the best finishes of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the final tables made and the best finishes of poker players. */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8912538687887802,
            "example_similarity": 0.3581089722048642,
            "db_id": "poker_player",
            "pred": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
            "correct": 1
        },
        {
            "index": 653,
            "question": "What are the final tables made and best finishes for all poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the final tables made and best finishes for all poker players? */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8914204019146778,
            "example_similarity": 0.35817822850062,
            "db_id": "poker_player",
            "pred": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
            "correct": 1
        },
        {
            "index": 654,
            "question": "What is the average earnings of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players? */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8915864257649612,
            "example_similarity": 0.35857942301447127,
            "db_id": "poker_player",
            "pred": "SELECT AVG(Earnings) FROM poker_player",
            "correct": 1
        },
        {
            "index": 655,
            "question": "Return the average earnings across all poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the average earnings across all poker players. */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8917519426721902,
            "example_similarity": 0.3586572007037986,
            "db_id": "poker_player",
            "pred": "SELECT AVG(Earnings) FROM poker_player",
            "correct": 1
        },
        {
            "index": 656,
            "question": "What is the money rank of the poker player with the highest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the poker player with the highest earnings? */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8919169549547022,
            "example_similarity": 0.35882391405002867,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 657,
            "question": "Return the money rank of the player with the greatest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the player with the greatest earnings. */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8920814649167195,
            "example_similarity": 0.35901906234044273,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 658,
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the maximum share count of transactions where the amount is smaller than 10000 */\nSELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\n\n/* Answer the following: What are the average enrollment size of the universities that are founded before 1850? */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Return the average enrollment of universities founded before 1850. */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: How many cities have a stadium that was opened before the year of 2006? */\nSELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006\n\n/* Answer the following: What are the names of stations that have latitude lower than 37.5? */\nSELECT name FROM station WHERE lat  <  37.5\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the maximum number of final tables made among poker players with earnings less than 200000? */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5856,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
                    "question": "Show the maximum share count of transactions where the amount is smaller than 10000"
                }
            ],
            "example_quality": 0.8919225589936262,
            "example_similarity": 0.35899793744496933,
            "db_id": "poker_player",
            "pred": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "correct": 1
        },
        {
            "index": 659,
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the maximum share count of transactions where the amount is smaller than 10000 */\nSELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\n\n/* Answer the following: What are the average enrollment size of the universities that are founded before 1850? */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Return the average enrollment of universities founded before 1850. */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: How many cities have a stadium that was opened before the year of 2006? */\nSELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006\n\n/* Answer the following: What are the names of stations that have latitude lower than 37.5? */\nSELECT name FROM station WHERE lat  <  37.5\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the maximum final tables made across all poker players who have earnings below 200000. */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5856,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
                    "question": "Show the maximum share count of transactions where the amount is smaller than 10000"
                }
            ],
            "example_quality": 0.891764135334336,
            "example_similarity": 0.3588677269590873,
            "db_id": "poker_player",
            "pred": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "correct": 1
        },
        {
            "index": 660,
            "question": "What are the names of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the descriptions of all the project outcomes? */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Answer the following: List the description of the outcomes for all projects. */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the names of entrepreneurs? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2310,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of perpetrators?"
                }
            ],
            "example_quality": 0.8918473209878698,
            "example_similarity": 0.3594367388643244,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
            "correct": 1
        },
        {
            "index": 661,
            "question": "Return the names of all the poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the descriptions of all the project outcomes? */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Answer the following: List the description of the outcomes for all projects. */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the names of entrepreneurs? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of all the poker players. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2310,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of perpetrators?"
                }
            ],
            "example_quality": 0.8919302549450236,
            "example_similarity": 0.35953689663554483,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
            "correct": 1
        },
        {
            "index": 662,
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show writers who have published a book with price more than 4000000. */\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n\n/* Answer the following: Show the facility codes of apartments with more than 4 bedrooms. */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: What are the facility codes of the apartments with more than four bedrooms? */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: Show the addresses of the buildings that have apartments with more than 2 bathrooms. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Answer the following: Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players whose earnings is higher than 300000? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 224,
                    "db_id": "book_2",
                    "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
                    "question": "Show writers who have published a book with price more than 4000000."
                }
            ],
            "example_quality": 0.8920935022940493,
            "example_similarity": 0.3595573709746012,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000",
            "correct": 1
        },
        {
            "index": 663,
            "question": "Give the names of poker players who have earnings above 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show writers who have published a book with price more than 4000000. */\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n\n/* Answer the following: Show the facility codes of apartments with more than 4 bedrooms. */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: What are the facility codes of the apartments with more than four bedrooms? */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: Show the addresses of the buildings that have apartments with more than 2 bathrooms. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Answer the following: Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the names of poker players who have earnings above 300000. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 224,
                    "db_id": "book_2",
                    "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
                    "question": "Show writers who have published a book with price more than 4000000."
                }
            ],
            "example_quality": 0.89225625719255,
            "example_similarity": 0.35962411172111286,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000",
            "correct": 1
        },
        {
            "index": 664,
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the titles of books in descending order of publication price. */\nSELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC\n\n/* Answer the following: What are the heights of perpetrators in descending order of the number of people they injured? */\nSELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC\n\n/* Answer the following: Find the name of all students who were in the tryout sorted in alphabetic order. */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\n\n/* Answer the following: What are the names of all students who tried out in alphabetical order? */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\n\n/* Answer the following: Show names of actors in descending order of the year their musical is awarded. */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of poker players ordered by the final tables made in ascending order. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 225,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
                    "question": "Show the titles of books in descending order of publication price."
                }
            ],
            "example_quality": 0.8922705616033517,
            "example_similarity": 0.3596122443361603,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC",
            "correct": 1
        },
        {
            "index": 665,
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the titles of books in descending order of publication price. */\nSELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC\n\n/* Answer the following: What are the heights of perpetrators in descending order of the number of people they injured? */\nSELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC\n\n/* Answer the following: Find the name of all students who were in the tryout sorted in alphabetic order. */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\n\n/* Answer the following: What are the names of all students who tried out in alphabetical order? */\nSELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName\n\n/* Answer the following: Show names of actors in descending order of the year their musical is awarded. */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players, ordered ascending by the number of final tables they have made? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 225,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
                    "question": "Show the titles of books in descending order of publication price."
                }
            ],
            "example_quality": 0.8922848229933692,
            "example_similarity": 0.359497151263795,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC",
            "correct": 1
        },
        {
            "index": 666,
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the primary conference of the school that has the lowest acc percent score in the competition? */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Answer the following: Return the primary conference of the school with the lowest acc percentage score. */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Answer the following: What is the name of the artist who produced the shortest song? */\nSELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: What are the names of the artists who sang the shortest song? */\nSELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: What is the last name of the staff who has handled the first ever complaint? */\nSELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the birth date of the poker player with the lowest earnings? */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 990,
                    "db_id": "university_basketball",
                    "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
                    "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?"
                }
            ],
            "example_quality": 0.8923714824183041,
            "example_similarity": 0.35979618702880467,
            "db_id": "poker_player",
            "pred": "SELECT t2.Birth_Date FROM poker_player AS t1 JOIN people AS t2 ON t1.People_ID = t2.People_ID ORDER BY t1.Earnings LIMIT 1",
            "correct": 1
        },
        {
            "index": 667,
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the primary conference of the school that has the lowest acc percent score in the competition? */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Answer the following: Return the primary conference of the school with the lowest acc percentage score. */\nSELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1\n\n/* Answer the following: What is the name of the artist who produced the shortest song? */\nSELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: What are the names of the artists who sang the shortest song? */\nSELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: What is the last name of the staff who has handled the first ever complaint? */\nSELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the birth date of the poker player with the lowest earnings. */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 990,
                    "db_id": "university_basketball",
                    "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
                    "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?"
                }
            ],
            "example_quality": 0.8924578819948883,
            "example_similarity": 0.3599477805878456,
            "db_id": "poker_player",
            "pred": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1",
            "correct": 1
        },
        {
            "index": 668,
            "question": "What is the money rank of the tallest poker player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is detail of the student who most recently registered course? */\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\n\n/* Answer the following: What details do we have on the students who registered for courses most recently? */\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\n\n/* Answer the following: Show the height of the mountain climbed by the climber with the maximum points. */\nSELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1\n\n/* Answer the following: What is the height of the mountain climbined by the climbing who had the most points? */\nSELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1\n\n/* Answer the following: What is the level name of the cheapest catalog (in USD)? */\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the tallest poker player? */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 68,
                    "db_id": "student_assessment",
                    "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
                    "question": "What is detail of the student who most recently registered course?"
                }
            ],
            "example_quality": 0.8926039031296265,
            "example_similarity": 0.3599797717516788,
            "db_id": "poker_player",
            "pred": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 669,
            "question": "Return the money rank of the poker player with the greatest height.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is detail of the student who most recently registered course? */\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\n\n/* Answer the following: What details do we have on the students who registered for courses most recently? */\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1\n\n/* Answer the following: Show the height of the mountain climbed by the climber with the maximum points. */\nSELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1\n\n/* Answer the following: What is the height of the mountain climbined by the climbing who had the most points? */\nSELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1\n\n/* Answer the following: What is the level name of the cheapest catalog (in USD)? */\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the poker player with the greatest height. */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 68,
                    "db_id": "student_assessment",
                    "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
                    "question": "What is detail of the student who most recently registered course?"
                }
            ],
            "example_quality": 0.8927494877288349,
            "example_similarity": 0.3598435665967726,
            "db_id": "poker_player",
            "pred": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 670,
            "question": "What is the average earnings of poker players with height higher than 200?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of cities of markets with low film market estimate bigger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Answer the following: Give the average number of cities within markets that had a low market estimation larger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Answer the following: What is the total kills of the perpetrators with height more than 1.84. */\nSELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84\n\n/* Answer the following: What is the average weeks on top of volumes associated with the artist aged 25 or younger? */\nSELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\n\n/* Answer the following: Return the average number of weeks on top for volumes by artists that are at most 25 years old. */\nSELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players with height higher than 200? */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4135,
                    "db_id": "film_rank",
                    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
                    "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?"
                }
            ],
            "example_quality": 0.8928152976057518,
            "example_similarity": 0.36008320421203377,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
            "correct": 1
        },
        {
            "index": 671,
            "question": "Give average earnings of poker players who are taller than 200.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of cities of markets with low film market estimate bigger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Answer the following: Give the average number of cities within markets that had a low market estimation larger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Answer the following: What is the total kills of the perpetrators with height more than 1.84. */\nSELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84\n\n/* Answer the following: What is the average weeks on top of volumes associated with the artist aged 25 or younger? */\nSELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\n\n/* Answer the following: Return the average number of weeks on top for volumes by artists that are at most 25 years old. */\nSELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give average earnings of poker players who are taller than 200. */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4135,
                    "db_id": "film_rank",
                    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
                    "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?"
                }
            ],
            "example_quality": 0.8928809113280429,
            "example_similarity": 0.3600293510241435,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
            "correct": 1
        },
        {
            "index": 672,
            "question": "What are the names of poker players in descending order of earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the titles of books in descending order of publication price. */\nSELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC\n\n/* Answer the following: What are the heights of perpetrators in descending order of the number of people they injured? */\nSELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC\n\n/* Answer the following: Show names of actors in descending order of the year their musical is awarded. */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n\n/* Answer the following: What are the names of actors ordered descending by the year in which their musical was awarded? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n\n/* Answer the following: List the names of perpetrators in descending order of the year. */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players in descending order of earnings? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 225,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
                    "question": "Show the titles of books in descending order of publication price."
                }
            ],
            "example_quality": 0.8929463297713988,
            "example_similarity": 0.3604160419019573,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC",
            "correct": 1
        },
        {
            "index": 673,
            "question": "Return the names of poker players sorted by their earnings descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the titles of books in descending order of publication price. */\nSELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC\n\n/* Answer the following: What are the heights of perpetrators in descending order of the number of people they injured? */\nSELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC\n\n/* Answer the following: Show names of actors in descending order of the year their musical is awarded. */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n\n/* Answer the following: What are the names of actors ordered descending by the year in which their musical was awarded? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC\n\n/* Answer the following: List the names of perpetrators in descending order of the year. */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of poker players sorted by their earnings descending. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 225,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
                    "question": "Show the titles of books in descending order of publication price."
                }
            ],
            "example_quality": 0.8930115538063048,
            "example_similarity": 0.3605219669370616,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC",
            "correct": 1
        },
        {
            "index": 674,
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are different nationalities of people and the corresponding number of people from each nation? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8931702903733577,
            "example_similarity": 0.3604243628942844,
            "db_id": "poker_player",
            "pred": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
            "correct": 1
        },
        {
            "index": 675,
            "question": "How many people are there of each nationality?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many people are there of each nationality? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8933285566098417,
            "example_similarity": 0.3603525802888576,
            "db_id": "poker_player",
            "pred": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
            "correct": 1
        },
        {
            "index": 676,
            "question": "What is the most common nationality of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the most common nationality of people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8934863546030224,
            "example_similarity": 0.360402284628597,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 677,
            "question": "Give the nationality that is most common across all people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the nationality that is most common across all people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8936436864278332,
            "example_similarity": 0.360410828897125,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 678,
            "question": "What are the nationalities that are shared by at least two people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the nationalities that are shared by at least two people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.8938005541469662,
            "example_similarity": 0.36032449979734765,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 679,
            "question": "Return the nationalities for which there are two or more people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the nationalities for which there are two or more people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.893956959810962,
            "example_similarity": 0.36011207176648413,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 680,
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the customers in increasing order of IDs. */\nSELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n\n/* Answer the following: What is the ordered list of customer ids? */\nSELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n\n/* Answer the following: List the snatch score and clean jerk score of body builders in ascending order of snatch score. */\nSELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC\n\n/* Answer the following: What are the name and assets of each company, sorted in ascending order of company name? */\nSELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\n\n/* Answer the following: List the name and assets of each company in ascending order of company name. */\nSELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names and birth dates of people in ascending alphabetical order of name. */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 930,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
                    "question": "List all the customers in increasing order of IDs."
                }
            ],
            "example_quality": 0.8941129054582988,
            "example_similarity": 0.3604164120904503,
            "db_id": "poker_player",
            "pred": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
            "correct": 1
        },
        {
            "index": 681,
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the customers in increasing order of IDs. */\nSELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n\n/* Answer the following: What is the ordered list of customer ids? */\nSELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n\n/* Answer the following: List the snatch score and clean jerk score of body builders in ascending order of snatch score. */\nSELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC\n\n/* Answer the following: What are the name and assets of each company, sorted in ascending order of company name? */\nSELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\n\n/* Answer the following: List the name and assets of each company in ascending order of company name. */\nSELECT name ,  Assets_billion FROM Companies ORDER BY name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names and birth dates of people, ordered by their names in alphabetical order? */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 930,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
                    "question": "List all the customers in increasing order of IDs."
                }
            ],
            "example_quality": 0.8942683931154819,
            "example_similarity": 0.3604813374571376,
            "db_id": "poker_player",
            "pred": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
            "correct": 1
        },
        {
            "index": 682,
            "question": "Show names of people whose nationality is not \"Russia\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Show names of people whose nationality is not \"Russia\". */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8944234247971307,
            "example_similarity": 0.3605940509447221,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "correct": 1
        },
        {
            "index": 683,
            "question": "What are the names of people who are not from Russia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who are not from Russia? */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.894578002506066,
            "example_similarity": 0.3607469021147427,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "correct": 1
        },
        {
            "index": 684,
            "question": "List the names of people that are not poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of people that are not poker players. */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8947321282333963,
            "example_similarity": 0.36108965855564557,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "correct": 1
        },
        {
            "index": 685,
            "question": "What are the names of people who do not play poker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who do not play poker? */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8948858039586032,
            "example_similarity": 0.361147087015736,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "correct": 1
        },
        {
            "index": 686,
            "question": "How many distinct nationalities are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many distinct nationalities are there? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8950390316496256,
            "example_similarity": 0.3611216064860738,
            "db_id": "poker_player",
            "pred": "SELECT count(DISTINCT Nationality) FROM people",
            "correct": 1
        },
        {
            "index": 687,
            "question": "Count the number of different nationalities.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of different nationalities. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.895191813262945,
            "example_similarity": 0.36108062457411016,
            "db_id": "poker_player",
            "pred": "SELECT count(DISTINCT Nationality) FROM people",
            "correct": 1
        },
        {
            "index": 688,
            "question": "How many states are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many states are there? */\nSELECT ",
            "response": "count(*) FROM area_code_state",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8953441507436675,
            "example_similarity": 0.361480745230781,
            "db_id": "voter_1",
            "pred": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE",
            "correct": 1
        },
        {
            "index": 689,
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name and number of followers for each user, and sort the results by the number of followers in descending order. */\nSELECT name ,  followers FROM user_profiles ORDER BY followers DESC\n\n/* Answer the following: Show all the cinema names and opening years in descending order of opening year. */\nSELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC\n\n/* Answer the following: List the name and cost of all procedures sorted by the cost from the highest to the lowest. */\nSELECT name ,  cost FROM procedures ORDER BY cost DESC\n\n/* Answer the following: Sort the list of names and costs of all procedures in the descending order of cost. */\nSELECT name ,  cost FROM procedures ORDER BY cost DESC\n\n/* Answer the following: Please list the age and famous title of artists in descending order of age. */\nSELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the contestant numbers and names, ordered by contestant name descending. */\nSELECT ",
            "response": "contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 293,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
                    "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order."
                }
            ],
            "example_quality": 0.895496046025607,
            "example_similarity": 0.3615511564113848,
            "db_id": "voter_1",
            "pred": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC",
            "correct": 1
        },
        {
            "index": 690,
            "question": "List the vote ids, phone numbers and states of all votes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: Show ids, customer ids, names for all accounts. */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the vote ids, phone numbers and states of all votes. */\nSELECT ",
            "response": "vote_id , phone_number , state FROM votes",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                }
            ],
            "example_quality": 0.8956475010313669,
            "example_similarity": 0.3618472885802685,
            "db_id": "voter_1",
            "pred": "SELECT vote_id, phone_number, state FROM Votes",
            "correct": 1
        },
        {
            "index": 691,
            "question": "What are the maximum and minimum values of area codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: What are the durations of the longest and the shortest tracks in milliseconds? */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Answer the following: Find the maximum and minimum durations of tracks in milliseconds. */\nSELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the maximum and minimum values of area codes? */\nSELECT ",
            "response": "max(area_code) , min(area_code) FROM area_code_state",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                }
            ],
            "example_quality": 0.8957985176724215,
            "example_similarity": 0.362136391848689,
            "db_id": "voter_1",
            "pred": "SELECT max(area_code) , min(area_code) FROM AREA_CODE_STATE",
            "correct": 1
        },
        {
            "index": 692,
            "question": "What is last date created of votes from the state 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum point for climbers whose country is United Kingdom? */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Answer the following: Return the maximum number of points for climbers from the United Kingdom. */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Answer the following: What is the maximum elevation of all airports in the country of Iceland? */\nSELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n\n/* Answer the following: What is the highest elevation of an airport in the country of Iceland? */\nSELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n\n/* Answer the following: What is the average number of rooms of apartments with type code \"Studio\"? */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is last date created of votes from the state 'CA'? */\nSELECT ",
            "response": "max(created) FROM votes WHERE state = 'CA'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1117,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "What is the maximum point for climbers whose country is United Kingdom?"
                }
            ],
            "example_quality": 0.8958848717734086,
            "example_similarity": 0.3622148240617019,
            "db_id": "voter_1",
            "pred": "SELECT max(created) FROM VOTES WHERE state = 'CA'",
            "correct": 1
        },
        {
            "index": 693,
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all regions except for Denmark. */\nSELECT region_name FROM region WHERE region_name != 'Denmark'\n\n/* Answer the following: Return the names of all regions other than Denmark. */\nSELECT region_name FROM region WHERE region_name != 'Denmark'\n\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the names of the contestants whose names are not 'Jessie Alloway' */\nSELECT ",
            "response": "contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2697,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                    "question": "Show names for all regions except for Denmark."
                }
            ],
            "example_quality": 0.8958427098612777,
            "example_similarity": 0.36215528229675337,
            "db_id": "voter_1",
            "pred": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
            "correct": 1
        },
        {
            "index": 694,
            "question": "What are the distinct states and create time of all votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each classroom report the grade that is taught in it. Report just the classroom number and the grade number. */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: What are the grade number and classroom number of each class in the list? */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: Report the first name and last name of all the teachers. */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: What are the first name and last name of all the teachers? */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: Report the first name and last name of all the students. */\nSELECT DISTINCT firstname ,  lastname FROM list\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the distinct states and create time of all votes? */\nSELECT ",
            "response": "DISTINCT state , created FROM votes",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4037,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT classroom ,  grade FROM list",
                    "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number."
                }
            ],
            "example_quality": 0.8959927924119099,
            "example_similarity": 0.3622454128443847,
            "db_id": "voter_1",
            "pred": "SELECT DISTINCT state, created FROM VOTES",
            "correct": 1
        },
        {
            "index": 695,
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. */\nSELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1\n\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Answer the following: What are the ids and names of the medicine that can interact with two or more enzymes? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: For every medicine id, what are the names of the medicines that can interact with more than one enzyme? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: What is the id and trade name of the medicines can interact with at least 3 enzymes? */\nSELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the contestant numbers and names of the contestants who had at least two votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2648,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
                    "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code."
                }
            ],
            "example_quality": 0.8960705006242667,
            "example_similarity": 0.3623847947255312,
            "db_id": "voter_1",
            "pred": "SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 696,
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the code and description of the least frequent detention type ? */\nSELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id and detail of the vehicle used in lessons for most of the times? */\nSELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                }
            ],
            "example_quality": 0.8961093029553768,
            "example_similarity": 0.3623370675300443,
            "db_id": "voter_1",
            "pred": "SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 697,
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: Give the number of students living in either HKG or CHI. */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who has a either Ph.D. or MA degree? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: How many professors attained either Ph.D. or Masters degrees? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: Show the number of documents with document type code CV or BK. */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the number of votes from state 'NY' or 'CA'? */\nSELECT ",
            "response": "count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                }
            ],
            "example_quality": 0.8962583570400893,
            "example_similarity": 0.3621939069059755,
            "db_id": "voter_1",
            "pred": "SELECT count(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
            "correct": 1
        },
        {
            "index": 698,
            "question": "How many contestants did not get voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: Count the number of products that were never ordered. */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many students are not involved in any behavior incident? */\nSELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )\n\n/* Answer the following: How many customers did not have any event? */\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n\n/* Answer the following: How many colors are never used by any product? */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many contestants did not get voted? */\nSELECT ",
            "response": "count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.8964069840357338,
            "example_similarity": 0.362252829214594,
            "db_id": "voter_1",
            "pred": "SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN ( SELECT contestant_number FROM VOTES )",
            "correct": 1
        },
        {
            "index": 699,
            "question": "What is the area code in which the most voters voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is the area code in which the most voters voted? */\nSELECT ",
            "response": "T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8965551857753108,
            "example_similarity": 0.36238266284368287,
            "db_id": "voter_1",
            "pred": "SELECT t1.area_code FROM AREA_CODE_STATE AS t1 JOIN VOTES AS t2 ON t1.state = t2.state GROUP BY t1.area_code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 700,
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name, last name, and phone of the customer with account name 162? */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n\n/* Answer the following: Give the full name and phone of the customer who has the account name 162. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n\n/* Answer the following: What is the first name, last name, and phone of the customer with card 4560596484842. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\n\n/* Answer the following: Return the full name and phone of the customer who has card number 4560596484842. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\n\n/* Answer the following: Give me the product type, name and price for all the products supplied by supplier id 3. */\nSELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? */\nSELECT ",
            "response": "T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 674,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
                    "question": "What is the first name, last name, and phone of the customer with account name 162?"
                }
            ],
            "example_quality": 0.8966781193608492,
            "example_similarity": 0.36230572007858153,
            "db_id": "voter_1",
            "pred": "SELECT T3.created, T1.state, T2.phone_number FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number JOIN AREA_CODE_STATE AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling'",
            "correct": 0
        },
        {
            "index": 701,
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born. */\nSELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'\n\n/* Answer the following: Find the names of districts where have both city mall and village store type stores. */\nSELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"\n\n/* Answer the following: What are the names of the districts that have both mall and village store style shops? */\nSELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"\n\n/* Answer the following: Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300. */\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"\n\n/* Answer the following: What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300? */\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. */\nSELECT ",
            "response": "T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 14,
                    "db_id": "department_management",
                    "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
                    "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born."
                }
            ],
            "example_quality": 0.8967840123302476,
            "example_similarity": 0.36233274712462515,
            "db_id": "voter_1",
            "pred": "SELECT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Kelly Clauss'",
            "correct": 0
        },
        {
            "index": 702,
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all artists that have \"a\" in their names. */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: What are the names of artist who have the letter 'a' in their names? */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: Find the names of all the tracks that contain the word \"you\". */\nSELECT Name FROM TRACK WHERE Name LIKE '%you%'\n\n/* Answer the following: What are the names of tracks that contain the the word you in them? */\nSELECT Name FROM TRACK WHERE Name LIKE '%you%'\n\n/* Answer the following: Which enzyme names have the substring \"ALA\"? */\nSELECT name FROM enzyme WHERE name LIKE \"%ALA%\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Return the names of the contestants whose names contain the substring 'Al' . */\nSELECT ",
            "response": "contestant_name from contestants where contestant_name like \"%al%\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 818,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "Find the names of all artists that have \"a\" in their names."
                }
            ],
            "example_quality": 0.8959813760353801,
            "example_similarity": 0.3621979313538491,
            "db_id": "voter_1",
            "pred": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
            "correct": 1
        },
        {
            "index": 703,
            "question": "What are the names of all the countries that became independent after 1950?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Name all the products with next entry ID greater than 8. */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: What are the catalog entry names of the products with next entry ID above 8? */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: Show ids for all aircrafts with more than 1000 distance. */\nSELECT aid FROM Aircraft WHERE distance  >  1000\n\n/* Answer the following: What are the ids of all aircrafts that can cover a distance of more than 1000? */\nSELECT aid FROM Aircraft WHERE distance  >  1000\n\n/* Answer the following: Show ids for all employees with at least 100000 salary. */\nSELECT eid FROM Employee WHERE salary  >  100000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of all the countries that became independent after 1950? */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 342,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
                    "question": "Name all the products with next entry ID greater than 8."
                }
            ],
            "example_quality": 0.8961293399386014,
            "example_similarity": 0.36215416270530676,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE IndepYear > 1950",
            "correct": 1
        },
        {
            "index": 704,
            "question": "Give the names of the nations that were founded after 1950.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Name all the products with next entry ID greater than 8. */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: What are the catalog entry names of the products with next entry ID above 8? */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: Show ids for all aircrafts with more than 1000 distance. */\nSELECT aid FROM Aircraft WHERE distance  >  1000\n\n/* Answer the following: What are the ids of all aircrafts that can cover a distance of more than 1000? */\nSELECT aid FROM Aircraft WHERE distance  >  1000\n\n/* Answer the following: Show ids for all employees with at least 100000 salary. */\nSELECT eid FROM Employee WHERE salary  >  100000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of the nations that were founded after 1950. */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 342,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
                    "question": "Name all the products with next entry ID greater than 8."
                }
            ],
            "example_quality": 0.8962768834898253,
            "example_similarity": 0.36190272913262345,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE IndepYear > 1950",
            "correct": 1
        },
        {
            "index": 705,
            "question": "How many countries have a republic as their form of government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have a republic as their form of government? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8964240084777829,
            "example_similarity": 0.3620221823056512,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "correct": 1
        },
        {
            "index": 706,
            "question": "How many countries have governments that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have governments that are republics? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8965707166810721,
            "example_similarity": 0.3623684180905789,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "correct": 1
        },
        {
            "index": 707,
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: How many people in total can stay in the modern rooms of this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: Find the number of customers in the banks at New York City. */\nSELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the countries in the Caribbean region? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                }
            ],
            "example_quality": 0.8967170098682277,
            "example_similarity": 0.3623193041608188,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean';",
            "correct": 1
        },
        {
            "index": 708,
            "question": "How much surface area do the countires in the Carribean cover together?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: How many people in total can stay in the modern rooms of this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: Find the number of customers in the banks at New York City. */\nSELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How much surface area do the countires in the Carribean cover together? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                }
            ],
            "example_quality": 0.8968628897977923,
            "example_similarity": 0.3621348749876155,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean';",
            "correct": 1
        },
        {
            "index": 709,
            "question": "Which continent is Anguilla in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent is Anguilla in? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8970083582183878,
            "example_similarity": 0.3618774814504579,
            "db_id": "world_1",
            "pred": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "correct": 1
        },
        {
            "index": 710,
            "question": "What is the continent name which Anguilla belongs to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the continent name which Anguilla belongs to? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8971534168687845,
            "example_similarity": 0.36174936532542873,
            "db_id": "world_1",
            "pred": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
            "correct": 1
        },
        {
            "index": 711,
            "question": "Which region is the city Kabul located in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the instructor who advises of all students from History department? */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Give id of the instructor who advises students in the History department. */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Find all the instruments ever used by the musician with last name \"Heilo\"? */\nSELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: What are all the instruments used by the musician with the last name \"Heilo\"? */\nSELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which region is the city Kabul located in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1415,
                    "db_id": "college_2",
                    "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
                    "question": "What is the id of the instructor who advises of all students from History department?"
                }
            ],
            "example_quality": 0.8972684575882671,
            "example_similarity": 0.36160301700550956,
            "db_id": "world_1",
            "pred": "SELECT c.Region FROM city AS c JOIN country AS co ON c.CountryCode = co.Code WHERE c.Name = 'Kabul'",
            "correct": 0
        },
        {
            "index": 712,
            "question": "What region is Kabul in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the instructor who advises of all students from History department? */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Give id of the instructor who advises students in the History department. */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Find all the instruments ever used by the musician with last name \"Heilo\"? */\nSELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: What are all the instruments used by the musician with the last name \"Heilo\"? */\nSELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region is Kabul in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1415,
                    "db_id": "college_2",
                    "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
                    "question": "What is the id of the instructor who advises of all students from History department?"
                }
            ],
            "example_quality": 0.8973831751596614,
            "example_similarity": 0.3613620124028868,
            "db_id": "world_1",
            "pred": "SELECT Region FROM city WHERE Name = 'Kabul'",
            "correct": 0
        },
        {
            "index": 713,
            "question": "Which language is the most popular in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Answer the following: Which team had the least number of attendances in home games in 1980? */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Answer the following: Find the team that attended the least number of home games in 1980. */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8407,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in PVLDB with the most citations ."
                }
            ],
            "example_quality": 0.8971892588959325,
            "example_similarity": 0.36121981618233245,
            "db_id": "world_1",
            "pred": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.Name = \"Aruba\" ORDER BY cl.Percentage DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 714,
            "question": "What language is predominantly spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Answer the following: Which team had the least number of attendances in home games in 1980? */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Answer the following: Find the team that attended the least number of home games in 1980. */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What language is predominantly spoken in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8407,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in PVLDB with the most citations ."
                }
            ],
            "example_quality": 0.896995885815015,
            "example_similarity": 0.36093930366351457,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage WHERE CountryCode = \"ABW\" AND IsOfficial = \"T\" ORDER BY Percentage DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 715,
            "question": "What are the population and life expectancies in Brazil?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population and life expectancies in Brazil? */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8971399475131758,
            "example_similarity": 0.36101114486735725,
            "db_id": "world_1",
            "pred": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "correct": 1
        },
        {
            "index": 716,
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give me Brazil\u2019s population and life expectancies. */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8972836068043585,
            "example_similarity": 0.3609039842680201,
            "db_id": "world_1",
            "pred": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "correct": 1
        },
        {
            "index": 717,
            "question": "What are the region and population of Angola?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the region and population of Angola? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8974268653722745,
            "example_similarity": 0.3610055549436995,
            "db_id": "world_1",
            "pred": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
            "correct": 1
        },
        {
            "index": 718,
            "question": "What region does Angola belong to and what is its population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the first names and last names of the employees who live in Calgary city. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region does Angola belong to and what is its population? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                }
            ],
            "example_quality": 0.8975697248912546,
            "example_similarity": 0.36086308350252677,
            "db_id": "world_1",
            "pred": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
            "correct": 1
        },
        {
            "index": 719,
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of rooms of apartments with type code \"Studio\"? */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average room count of the apartments that have the \"Studio\" type code. */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average number of customers in all banks of Utah state. */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Answer the following: What is the average number of customers across banks in the state of Utah? */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Answer the following: What are the average prominence of the mountains in country 'Morocco'? */\nSELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average expected life expectancy for countries in the region of Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1213,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "What is the average number of rooms of apartments with type code \"Studio\"?"
                }
            ],
            "example_quality": 0.8977121870263154,
            "example_similarity": 0.3610955679253287,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
            "correct": 1
        },
        {
            "index": 720,
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of rooms of apartments with type code \"Studio\"? */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average room count of the apartments that have the \"Studio\" type code. */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average number of customers in all banks of Utah state. */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Answer the following: What is the average number of customers across banks in the state of Utah? */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Answer the following: What are the average prominence of the mountains in country 'Morocco'? */\nSELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How long is the people\u2019s average life expectancy in Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1213,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "What is the average number of rooms of apartments with type code \"Studio\"?"
                }
            ],
            "example_quality": 0.8978542534332233,
            "example_similarity": 0.3611466114281437,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
            "correct": 1
        },
        {
            "index": 721,
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: Give the name of the lowest earning instructor in the Statistics department. */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Give the name of the student in the History department with the most credits. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Find the name of the most expensive hardware product. */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the name of country that has the shortest life expectancy in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1361,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?"
                }
            ],
            "example_quality": 0.8979364845063295,
            "example_similarity": 0.361261922250415,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 722,
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: Give the name of the lowest earning instructor in the Statistics department. */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Give the name of the student in the History department with the most credits. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Answer the following: Find the name of the most expensive hardware product. */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the country in Asia with the lowest life expectancy. */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1361,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?"
                }
            ],
            "example_quality": 0.8980184877925298,
            "example_similarity": 0.3615907706630743,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 723,
            "question": "What is the total population and maximum GNP in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum price and score of wines produced by St. Helena appelation? */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: Give the maximum price and score for wines produced in the appelation St. Helena. */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average latitude and longitude in San Jose? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average distance and average price for flights from Los Angeles. */\nSELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and maximum GNP in Asia? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6574,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "What are the maximum price and score of wines produced by St. Helena appelation?"
                }
            ],
            "example_quality": 0.897782324914909,
            "example_similarity": 0.36176103898663264,
            "db_id": "world_1",
            "pred": "SELECT sum(Population), max(GNP) FROM country WHERE Continent = \"Asia\"",
            "correct": 1
        },
        {
            "index": 724,
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum price and score of wines produced by St. Helena appelation? */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: Give the maximum price and score for wines produced in the appelation St. Helena. */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average latitude and longitude in San Jose? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average distance and average price for flights from Los Angeles. */\nSELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Asia, and what is the largest GNP among them? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6574,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "What are the maximum price and score of wines produced by St. Helena appelation?"
                }
            ],
            "example_quality": 0.897546814420928,
            "example_similarity": 0.36166224926727075,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = \"Asia\"",
            "correct": 1
        },
        {
            "index": 725,
            "question": "What is the average life expectancy in African countries that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for flights from Los Angeles to Honolulu. */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average price for flights from LA to Honolulu? */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: List total amount of  invoice from Chicago, IL. */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: What are the total amount of money in the invoices billed from Chicago, Illinois? */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: Show the average price range of hotels that have 5 star ratings and allow pets. */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average life expectancy in African countries that are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 394,
                    "db_id": "flight_1",
                    "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                    "question": "What is the average price for flights from Los Angeles to Honolulu."
                }
            ],
            "example_quality": 0.8975608082047507,
            "example_similarity": 0.3617476239541339,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "correct": 1
        },
        {
            "index": 726,
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for flights from Los Angeles to Honolulu. */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average price for flights from LA to Honolulu? */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: List total amount of  invoice from Chicago, IL. */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: What are the total amount of money in the invoices billed from Chicago, Illinois? */\nSELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: Show the average price range of hotels that have 5 star ratings and allow pets. */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the average life expectancy for countries in Africa which are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 394,
                    "db_id": "flight_1",
                    "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                    "question": "What is the average price for flights from Los Angeles to Honolulu."
                }
            ],
            "example_quality": 0.8975747634382045,
            "example_similarity": 0.3617485339672287,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "correct": 1
        },
        {
            "index": 727,
            "question": "What is the total surface area of the continents Asia and Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total budgets of the Marketing or Finance department. */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: What is the sum of budgets of the Marketing and Finance departments? */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: Find the total account balance of each customer from Utah or Texas. */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Answer the following: What are the total account balances for each customer from Utah or Texas? */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Answer the following: What is the total revenue of all companies whose main office is at Tokyo or Taiwan? */\nSELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the continents Asia and Europe? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1353,
                    "db_id": "college_2",
                    "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
                    "question": "Find the total budgets of the Marketing or Finance department."
                }
            ],
            "example_quality": 0.897715650971302,
            "example_similarity": 0.36196795804880033,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "correct": 1
        },
        {
            "index": 728,
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total budgets of the Marketing or Finance department. */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: What is the sum of budgets of the Marketing and Finance departments? */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: Find the total account balance of each customer from Utah or Texas. */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Answer the following: What are the total account balances for each customer from Utah or Texas? */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Answer the following: What is the total revenue of all companies whose main office is at Tokyo or Taiwan? */\nSELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total surface area covered by countries in Asia or Europe. */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1353,
                    "db_id": "college_2",
                    "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
                    "question": "Find the total budgets of the Marketing or Finance department."
                }
            ],
            "example_quality": 0.8978561514507369,
            "example_similarity": 0.36200332064334323,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "correct": 1
        },
        {
            "index": 729,
            "question": "How many people live in Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: How many people in total can stay in the modern rooms of this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: Find the number of customers in the banks at New York City. */\nSELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                }
            ],
            "example_quality": 0.897996266469323,
            "example_similarity": 0.361911572669373,
            "db_id": "world_1",
            "pred": "SELECT sum(Population) FROM city WHERE District = 'Gelderland';",
            "correct": 1
        },
        {
            "index": 730,
            "question": "What is the total population of Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: How many people in total can stay in the modern rooms of this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Answer the following: Find the number of customers in the banks at New York City. */\nSELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population of Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                }
            ],
            "example_quality": 0.8981359976111459,
            "example_similarity": 0.3618519658033928,
            "db_id": "world_1",
            "pred": "SELECT sum(Population) FROM city WHERE District = 'Gelderland';",
            "correct": 1
        },
        {
            "index": 731,
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average latitude and longitude in San Jose? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average distance and average price for flights from Los Angeles. */\nSELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n\n/* Answer the following: What is the average distance and price for all flights from LA? */\nSELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n\n/* Answer the following: Find the average height and weight for all males (sex is M). */\nSELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average GNP and total population in all nations whose government is US territory? */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                }
            ],
            "example_quality": 0.8980266211686981,
            "example_similarity": 0.3620564316868501,
            "db_id": "world_1",
            "pred": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US territory'",
            "correct": 0
        },
        {
            "index": 732,
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average latitude and longitude in San Jose? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average distance and average price for flights from Los Angeles. */\nSELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n\n/* Answer the following: What is the average distance and price for all flights from LA? */\nSELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"\n\n/* Answer the following: Find the average height and weight for all males (sex is M). */\nSELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean GNP and total population of nations which are considered US territory. */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                }
            ],
            "example_quality": 0.8979175435689892,
            "example_similarity": 0.3619415788972824,
            "db_id": "world_1",
            "pred": "SELECT avg(GNP), sum(Population) FROM country WHERE Region = \"US Territory\"",
            "correct": 0
        },
        {
            "index": 733,
            "question": "How many unique languages are spoken in the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many unique languages are spoken in the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8980568102216919,
            "example_similarity": 0.3617941142734655,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT Language) FROM countrylanguage",
            "correct": 1
        },
        {
            "index": 734,
            "question": "What is the number of distinct languages used around the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct languages used around the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8981956974012264,
            "example_similarity": 0.3615212618941232,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT Language) FROM countrylanguage",
            "correct": 1
        },
        {
            "index": 735,
            "question": "How many type of governments are in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different courses offered by Physics department? */\nSELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n\n/* Answer the following: Count the number of courses in the Physics department. */\nSELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n\n/* Answer the following: How many professors are teaching class with code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: How many professors teach a class with the code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: How many different locations does the school with code BUS has? */\nSELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many type of governments are in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1341,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
                    "question": "How many different courses offered by Physics department?"
                }
            ],
            "example_quality": 0.8983342066564628,
            "example_similarity": 0.3614805254012988,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
            "correct": 1
        },
        {
            "index": 736,
            "question": "How many different forms of governments are there in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different courses offered by Physics department? */\nSELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n\n/* Answer the following: Count the number of courses in the Physics department. */\nSELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n\n/* Answer the following: How many professors are teaching class with code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: How many professors teach a class with the code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: How many different locations does the school with code BUS has? */\nSELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many different forms of governments are there in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1341,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
                    "question": "How many different courses offered by Physics department?"
                }
            ],
            "example_quality": 0.8984723395278534,
            "example_similarity": 0.3614331077836058,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
            "correct": 1
        },
        {
            "index": 737,
            "question": "What is the total number of languages used in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'? */\nSELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'\n\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of languages used in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3724,
                    "db_id": "mountain_photos",
                    "query": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
                    "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?"
                }
            ],
            "example_quality": 0.8984033323305127,
            "example_similarity": 0.361325686835992,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
            "correct": 1
        },
        {
            "index": 738,
            "question": "How many languages are spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'? */\nSELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'\n\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Answer the following: Find the cities corresponding to employees who help customers with the postal code 70174. */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many languages are spoken in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3724,
                    "db_id": "mountain_photos",
                    "query": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
                    "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?"
                }
            ],
            "example_quality": 0.8983345121445468,
            "example_similarity": 0.36110733764337405,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
            "correct": 1
        },
        {
            "index": 739,
            "question": "How many official languages does Afghanistan have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many orders does Lucas Mancini has? */\nSELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n\n/* Answer the following: How many orders does Luca Mancini have in his invoices? */\nSELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n\n/* Answer the following: how many chinese restaurants are there in the bay area ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";\n\n/* Answer the following: how many places for chinese food are there in the bay area ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";\n\n/* Answer the following: how many chinese places are there in the bay area ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages does Afghanistan have? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 608,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
                    "question": "How many orders does Lucas Mancini has?"
                }
            ],
            "example_quality": 0.8982817388376708,
            "example_similarity": 0.3610532126128411,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = \"AF\" AND IsOfficial = \"T\";",
            "correct": 0
        },
        {
            "index": 740,
            "question": "How many official languages are spoken in Afghanistan?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many orders does Lucas Mancini has? */\nSELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n\n/* Answer the following: How many orders does Luca Mancini have in his invoices? */\nSELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";\n\n/* Answer the following: how many chinese restaurants are there in the bay area ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";\n\n/* Answer the following: how many places for chinese food are there in the bay area ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";\n\n/* Answer the following: how many chinese places are there in the bay area ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages are spoken in Afghanistan? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 608,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
                    "question": "How many orders does Lucas Mancini has?"
                }
            ],
            "example_quality": 0.898229108161354,
            "example_similarity": 0.3610458245965888,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = \"AF\" AND IsOfficial = \"T\";",
            "correct": 0
        },
        {
            "index": 741,
            "question": "What is name of the country that speaks the largest number of languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is name of the country that speaks the largest number of languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.8983439586676589,
            "example_similarity": 0.36107916968871184,
            "db_id": "world_1",
            "pred": "SELECT T2.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 742,
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the nation that uses the greatest amount of languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.898458499603866,
            "example_similarity": 0.36103090013103806,
            "db_id": "world_1",
            "pred": "SELECT T2.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 743,
            "question": "Which continent has the most diverse languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent has the most diverse languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.898572732219922,
            "example_similarity": 0.36096397271195346,
            "db_id": "world_1",
            "pred": "SELECT T2.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 744,
            "question": "Which continent speaks the most languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the party email that has used party services the greatest number of times. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent speaks the most languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                }
            ],
            "example_quality": 0.8986866577590528,
            "example_similarity": 0.3608725997058088,
            "db_id": "world_1",
            "pred": "SELECT T2.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 745,
            "question": "How many countries speak both English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: How many states that have some college students playing in the mid position but not in the goalie position. */\nSELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')\n\n/* Answer the following: What is the count of states with college students playing in the mid position but not as goalies? */\nSELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')\n\n/* Answer the following: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. */\nSELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries speak both English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1107,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "What are the names of countries that have both players with position forward and players with position defender?"
                }
            ],
            "example_quality": 0.8984229712775598,
            "example_similarity": 0.36063687774682074,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2",
            "correct": 0
        },
        {
            "index": 746,
            "question": "What is the number of nations that use English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: How many states that have some college students playing in the mid position but not in the goalie position. */\nSELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')\n\n/* Answer the following: What is the count of states with college students playing in the mid position but not as goalies? */\nSELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')\n\n/* Answer the following: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. */\nSELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of nations that use English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1107,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "What are the names of countries that have both players with position forward and players with position defender?"
                }
            ],
            "example_quality": 0.8981599917303337,
            "example_similarity": 0.3604600562536108,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch')",
            "correct": 0
        },
        {
            "index": 747,
            "question": "What are the names of nations speak both English and French?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. */\nSELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n\n/* Answer the following: Show the names of donors who donated to both school \"Glenn\" and \"Triton.\" */\nSELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'\n\n/* Answer the following: What are the coupon amount of the coupons owned by both good and bad customers? */\nSELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations speak both English and French? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1107,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "What are the names of countries that have both players with position forward and players with position defender?"
                }
            ],
            "example_quality": 0.898213942930777,
            "example_similarity": 0.3604329951665508,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "correct": 1
        },
        {
            "index": 748,
            "question": "Give the names of nations that speak both English and French.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. */\nSELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n\n/* Answer the following: Show the names of donors who donated to both school \"Glenn\" and \"Triton.\" */\nSELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'\n\n/* Answer the following: What are the coupon amount of the coupons owned by both good and bad customers? */\nSELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of nations that speak both English and French. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1107,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "What are the names of countries that have both players with position forward and players with position defender?"
                }
            ],
            "example_quality": 0.8982677498766737,
            "example_similarity": 0.3603679516882528,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "correct": 1
        },
        {
            "index": 749,
            "question": "What are the names of nations where both English and French are official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Answer the following: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids. */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Answer the following: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems. */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations where both English and French are official languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5387,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
                    "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?"
                }
            ],
            "example_quality": 0.8981419304315877,
            "example_similarity": 0.3604579856371554,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 750,
            "question": "Give the names of countries with English and French as official languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Answer the following: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids. */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Answer the following: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems. */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries with English and French as official languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5387,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
                    "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?"
                }
            ],
            "example_quality": 0.8980164465050219,
            "example_similarity": 0.3604034198133811,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 751,
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many instrument does the musician with last name \"Heilo\" use? */\nSELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: How many different instruments does the musician with the last name \"Heilo\" use? */\nSELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Count the number of different official languages corresponding to countries that players who play Defender are from. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: How many distinct colleges are associated with players from the team with name \"Columbus Crew\". */\nSELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct continents where Chinese is spoken? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5215,
                    "db_id": "music_2",
                    "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
                    "question": "How many instrument does the musician with last name \"Heilo\" use?"
                }
            ],
            "example_quality": 0.8980244139530844,
            "example_similarity": 0.3601549459305398,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT C.Continent) FROM countrylanguage AS CL JOIN country AS C ON CL.CountryCode = C.Code WHERE CL.Language = \"Chinese\"",
            "correct": 1
        },
        {
            "index": 752,
            "question": "How many continents speak Chinese?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many instrument does the musician with last name \"Heilo\" use? */\nSELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: How many different instruments does the musician with the last name \"Heilo\" use? */\nSELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Count the number of different official languages corresponding to countries that players who play Defender are from. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: How many distinct colleges are associated with players from the team with name \"Columbus Crew\". */\nSELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many continents speak Chinese? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5215,
                    "db_id": "music_2",
                    "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
                    "question": "How many instrument does the musician with last name \"Heilo\" use?"
                }
            ],
            "example_quality": 0.8980323602111256,
            "example_similarity": 0.35997936283582455,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT c.Continent) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.Language = \"Chinese\"",
            "correct": 1
        },
        {
            "index": 753,
            "question": "What are the regions that use English or Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the official languages of the countries of players from Maryland or Duke college? */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: Return the official native languages of countries who have players from Maryland or Duke colleges. */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: What are the details of the markets that can be accessed by walk or bus? */\nSELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n\n/* Answer the following: Find the details of all the markets that are accessible by walk or bus. */\nSELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n\n/* Answer the following: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'? */\nSELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the regions that use English or Dutch? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1079,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "What are the official languages of the countries of players from Maryland or Duke college?"
                }
            ],
            "example_quality": 0.897986896047057,
            "example_similarity": 0.3599973203892434,
            "db_id": "world_1",
            "pred": "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "correct": 1
        },
        {
            "index": 754,
            "question": "Which regions speak Dutch or English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the official languages of the countries of players from Maryland or Duke college? */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: Return the official native languages of countries who have players from Maryland or Duke colleges. */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Answer the following: What are the details of the markets that can be accessed by walk or bus? */\nSELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n\n/* Answer the following: Find the details of all the markets that are accessible by walk or bus. */\nSELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"\n\n/* Answer the following: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'? */\nSELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which regions speak Dutch or English? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1079,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "What are the official languages of the countries of players from Maryland or Duke college?"
                }
            ],
            "example_quality": 0.8979415524775878,
            "example_similarity": 0.35982622865404124,
            "db_id": "world_1",
            "pred": "SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" OR T2.Language = \"English\"",
            "correct": 1
        },
        {
            "index": 755,
            "question": "What are the countries where either English or Dutch is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems. */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries where either English or Dutch is the official language ? */\nSELECT ",
            "response": "t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1107,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "What are the names of countries that have both players with position forward and players with position defender?"
                }
            ],
            "example_quality": 0.8972784889734811,
            "example_similarity": 0.3597852415331497,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = \"English\" OR T2.Language = \"Dutch\") AND T2.IsOfficial = \"T\"",
            "correct": 0
        },
        {
            "index": 756,
            "question": "Which countries have either English or Dutch as an official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems. */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Answer the following: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids. */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Answer the following: Show the names of donors who donated to both school \"Glenn\" and \"Triton.\" */\nSELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have either English or Dutch as an official language? */\nSELECT ",
            "response": "* FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5385,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
                    "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?"
                }
            ],
            "example_quality": 0.8968878612914948,
            "example_similarity": 0.3595801149247449,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 757,
            "question": "Which language is the most popular on the Asian continent?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the top 3 wineries with the greatest number of wines made of white color grapes. */\nSELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Which 3 wineries produce the most wines made from white grapes? */\nSELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Find the busiest source airport that runs most number of routes in China. */\nSELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the airport with the most number of routes that start in China? */\nSELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the busiest destination airport that runs most number of routes in China. */\nSELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular on the Asian continent? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6588,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes."
                }
            ],
            "example_quality": 0.8968418653921894,
            "example_similarity": 0.359427100781455,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY SUM(T2.Percentage) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 758,
            "question": "What is the language that is used by the largest number of Asian nations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the top 3 wineries with the greatest number of wines made of white color grapes. */\nSELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Which 3 wineries produce the most wines made from white grapes? */\nSELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Find the busiest source airport that runs most number of routes in China. */\nSELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the airport with the most number of routes that start in China? */\nSELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the busiest destination airport that runs most number of routes in China. */\nSELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language that is used by the largest number of Asian nations? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6588,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes."
                }
            ],
            "example_quality": 0.8967959908540957,
            "example_similarity": 0.3592436486305169,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 759,
            "question": "Which languages are spoken by only one country in republic governments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids and details of the investors who have at least two transactions with type code \"SALE\". */\nSELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Show the names of customers who have at least 2 mailshots with outcome code 'Order'. */\nSELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: Show the names of customers who use Credit Card payment method and have more than 2 orders. */\nSELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Answer the following: What are the hometowns that are shared by at least two gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which languages are spoken by only one country in republic governments? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5882,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
                    "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\"."
                }
            ],
            "example_quality": 0.8965226527904923,
            "example_similarity": 0.3589841809673775,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING COUNT(*) = 1",
            "correct": 0
        },
        {
            "index": 760,
            "question": "What languages are only used by a single country with a republic government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids and details of the investors who have at least two transactions with type code \"SALE\". */\nSELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Show the names of customers who have at least 2 mailshots with outcome code 'Order'. */\nSELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: Show the names of customers who use Credit Card payment method and have more than 2 orders. */\nSELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Answer the following: What are the hometowns that are shared by at least two gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What languages are only used by a single country with a republic government? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5882,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
                    "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\"."
                }
            ],
            "example_quality": 0.8962500340375824,
            "example_similarity": 0.3587448981015462,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING COUNT(*) = 1",
            "correct": 0
        },
        {
            "index": 761,
            "question": "Find the city with the largest population that uses English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: What is the name and sex of the candidate with the highest support rate? */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: Show the name and population of the country that has the highest roller coaster. */\nSELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the city with the largest population that uses English. */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8407,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in PVLDB with the most citations ."
                }
            ],
            "example_quality": 0.8960420824071282,
            "example_similarity": 0.35871603514183137,
            "db_id": "world_1",
            "pred": "SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = \"English\" ORDER BY city.Population DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 762,
            "question": "What is the most populace city that speaks English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: What is the name and sex of the candidate with the highest support rate? */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: Show the name and population of the country that has the highest roller coaster. */\nSELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the most populace city that speaks English? */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8407,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in PVLDB with the most citations ."
                }
            ],
            "example_quality": 0.8958346765814786,
            "example_similarity": 0.35851601887246226,
            "db_id": "world_1",
            "pred": "SELECT t1.Name, t1.Population FROM city AS t1 JOIN countrylanguage AS t2 ON t1.CountryCode = t2.CountryCode WHERE t2.Language = \"English\" ORDER BY t1.Population DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 763,
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id, genre and artist name of English songs ordered by rating. */\nSELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\n\n/* Answer the following: What is the id, genre, and name of the artist for every English song ordered by ascending rating? */\nSELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\n\n/* Answer the following: What is the first, last name, gpa of the youngest one among students whose GPA is above 3? */\nSELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n\n/* Answer the following: What is the first and last name of the youngest student with a GPA above 3, and what is their GPA? */\nSELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the name, population and expected life length of asian country with the largest area? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3622,
                    "db_id": "music_1",
                    "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
                    "question": "List the id, genre and artist name of English songs ordered by rating."
                }
            ],
            "example_quality": 0.8956188334725641,
            "example_similarity": 0.35846845845029335,
            "db_id": "world_1",
            "pred": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 764,
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id, genre and artist name of English songs ordered by rating. */\nSELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\n\n/* Answer the following: What is the id, genre, and name of the artist for every English song ordered by ascending rating? */\nSELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating\n\n/* Answer the following: What is the first, last name, gpa of the youngest one among students whose GPA is above 3? */\nSELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n\n/* Answer the following: What is the first and last name of the youngest student with a GPA above 3, and what is their GPA? */\nSELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, population, and life expectancy of the largest Asian country by land? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3622,
                    "db_id": "music_1",
                    "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
                    "question": "List the id, genre and artist name of English songs ordered by rating."
                }
            ],
            "example_quality": 0.8954035553979662,
            "example_similarity": 0.35849909291358584,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 765,
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find number of products which Sony does not make. */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: How many products are not made by Sony? */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is average life expectancy in the countries where English is not the official language? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5317,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
                    "question": "Find number of products which Sony does not make."
                }
            ],
            "example_quality": 0.8949187968678477,
            "example_similarity": 0.35842625578016296,
            "db_id": "world_1",
            "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
            "correct": 1
        },
        {
            "index": 766,
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find number of products which Sony does not make. */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: How many products are not made by Sony? */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean life expectancy of countries in which English is not the official language. */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5317,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
                    "question": "Find number of products which Sony does not make."
                }
            ],
            "example_quality": 0.8944353040257975,
            "example_similarity": 0.3584584939325245,
            "db_id": "world_1",
            "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
            "correct": 1
        },
        {
            "index": 767,
            "question": "What is the total number of people living in the nations that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the title of the course with Differential Geometry as a prerequisite? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the course title of the prerequisite of course Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of people living in the nations that do not use English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1423,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "What is the title of the prerequisite class of International Finance course?"
                }
            ],
            "example_quality": 0.894143375749088,
            "example_similarity": 0.35830935960375737,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
            "correct": 0
        },
        {
            "index": 768,
            "question": "How many people live in countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the title of the course with Differential Geometry as a prerequisite? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the course title of the prerequisite of course Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in countries that do not speak English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1423,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "What is the title of the prerequisite class of International Finance course?"
                }
            ],
            "example_quality": 0.8938522077022654,
            "example_similarity": 0.35799514956186557,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
            "correct": 0
        },
        {
            "index": 769,
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which country does customer with first name as Carole and last name as Bernhard lived in? */\nSELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is the country in which the customer Carole Bernhard lived? */\nSELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is zip code of customer with first name as Carole and last name as Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is the zip code of the customer Carole Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: Find all cities in which there is a restaurant called \" MGM Grand Buffet \" */\nSELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language spoken in the country whose head of state is Beatrix? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6685,
                    "db_id": "driving_school",
                    "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?"
                }
            ],
            "example_quality": 0.8938771638408333,
            "example_similarity": 0.3580127627386897,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 770,
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which country does customer with first name as Carole and last name as Bernhard lived in? */\nSELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is the country in which the customer Carole Bernhard lived? */\nSELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is zip code of customer with first name as Carole and last name as Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is the zip code of the customer Carole Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: Find all cities in which there is a restaurant called \" MGM Grand Buffet \" */\nSELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language used in the country the name of whose head of state is Beatrix. */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6685,
                    "db_id": "driving_school",
                    "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?"
                }
            ],
            "example_quality": 0.8939020551582618,
            "example_similarity": 0.3579646334887799,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM countrylanguage AS T2 JOIN country AS T1 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 771,
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the number of restaurant rated more than 3.5 */\nSELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";\n\n/* Answer the following: return me the number of papers published on PVLDB before 2000 . */\nSELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;\n\n/* Answer the following: return me the number of papers published in the VLDB conference before 2000 . */\nSELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;\n\n/* Answer the following: return me the total citations of papers in PVLDB before 2005 . */\nSELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;\n\n/* Answer the following: return me the total citations of papers in the VLDB conference before 2005 . */\nSELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of unique official languages spoken in the countries that are founded before 1930? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8189,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
                    "question": "find the number of restaurant rated more than 3.5"
                }
            ],
            "example_quality": 0.8936660807831743,
            "example_similarity": 0.3578494111433057,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';",
            "correct": 1
        },
        {
            "index": 772,
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the number of restaurant rated more than 3.5 */\nSELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";\n\n/* Answer the following: return me the number of papers published on PVLDB before 2000 . */\nSELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;\n\n/* Answer the following: return me the number of papers published in the VLDB conference before 2000 . */\nSELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;\n\n/* Answer the following: return me the total citations of papers in PVLDB before 2005 . */\nSELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;\n\n/* Answer the following: return me the total citations of papers in the VLDB conference before 2005 . */\nSELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: For the countries founded before 1930, what is the total number of distinct official languages? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8189,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
                    "question": "find the number of restaurant rated more than 3.5"
                }
            ],
            "example_quality": 0.8934307177406648,
            "example_similarity": 0.35772020564544965,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT cl.Language) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';",
            "correct": 1
        },
        {
            "index": 773,
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of instructors who earn more than at least one instructor from the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of the songs whose rating is below the rating of all songs in English? */\nSELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries that have greater surface area than any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1489,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department."
                }
            ],
            "example_quality": 0.8934715576918412,
            "example_similarity": 0.35778448404358926,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')",
            "correct": 0
        },
        {
            "index": 774,
            "question": "Which countries have greater area than that of any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of instructors who earn more than at least one instructor from the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of the songs whose rating is below the rating of all songs in English? */\nSELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have greater area than that of any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1489,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department."
                }
            ],
            "example_quality": 0.893512292113428,
            "example_similarity": 0.3577289087809609,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')",
            "correct": 0
        },
        {
            "index": 775,
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the friend of Zach with longest year relationship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Which friend of Zach has the longest-lasting friendship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Find the name of persons who are friends with Alice for the shortest years. */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of all people who are friends with Alice for the shortest amount of time? */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: Who is the oldest person whose job is student? */\nSELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the African countries that have a  population less than any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4469,
                    "db_id": "network_2",
                    "query": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
                    "question": "Who is the friend of Zach with longest year relationship?"
                }
            ],
            "example_quality": 0.893289629306315,
            "example_similarity": 0.3575840312139685,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')",
            "correct": 0
        },
        {
            "index": 776,
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the friend of Zach with longest year relationship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Which friend of Zach has the longest-lasting friendship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Find the name of persons who are friends with Alice for the shortest years. */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of all people who are friends with Alice for the shortest amount of time? */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: Who is the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which African countries have a smaller population than that of any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4469,
                    "db_id": "network_2",
                    "query": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
                    "question": "Who is the friend of Zach with longest year relationship?"
                }
            ],
            "example_quality": 0.8930675403724161,
            "example_similarity": 0.35739274750064404,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')",
            "correct": 1
        },
        {
            "index": 777,
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the friend of Zach with longest year relationship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Which friend of Zach has the longest-lasting friendship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Find the name of persons who are friends with Alice for the shortest years. */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of all people who are friends with Alice for the shortest amount of time? */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: Who is the oldest person whose job is student? */\nSELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which Asian countries have a population that is larger than any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4469,
                    "db_id": "network_2",
                    "query": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
                    "question": "Who is the friend of Zach with longest year relationship?"
                }
            ],
            "example_quality": 0.8928460230960047,
            "example_similarity": 0.3571891978556916,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')",
            "correct": 1
        },
        {
            "index": 778,
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the friend of Zach with longest year relationship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Which friend of Zach has the longest-lasting friendship? */\nSELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')\n\n/* Answer the following: Find the name of persons who are friends with Alice for the shortest years. */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of all people who are friends with Alice for the shortest amount of time? */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: Who is the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the Asian countries which have a population larger than that of any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4469,
                    "db_id": "network_2",
                    "query": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
                    "question": "Who is the friend of Zach with longest year relationship?"
                }
            ],
            "example_quality": 0.892625075272746,
            "example_similarity": 0.357052773594682,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')",
            "correct": 0
        },
        {
            "index": 779,
            "question": "What are the country codes for countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address do not have any member with the black membership card? */\nSELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'\n\n/* Answer the following: Show all headquarters without a company in banking industry. */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: What are the headquarters without companies that are in the banking industry? */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: Find the name of customers who do not have an saving account. */\nSELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'\n\n/* Answer the following: What are the names of customers who do not have saving accounts? */\nSELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes for countries that do not speak English? */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 799,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
                    "question": "Which address do not have any member with the black membership card?"
                }
            ],
            "example_quality": 0.8927629121465936,
            "example_similarity": 0.35703638455834186,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'",
            "correct": 0
        },
        {
            "index": 780,
            "question": "Return the country codes for countries that do not speak English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address do not have any member with the black membership card? */\nSELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'\n\n/* Answer the following: Show all headquarters without a company in banking industry. */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: What are the headquarters without companies that are in the banking industry? */\nSELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'\n\n/* Answer the following: Find the name of customers who do not have an saving account. */\nSELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'\n\n/* Answer the following: What are the names of customers who do not have saving accounts? */\nSELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country codes for countries that do not speak English. */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 799,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
                    "question": "Which address do not have any member with the black membership card?"
                }
            ],
            "example_quality": 0.8929003955925595,
            "example_similarity": 0.35694451754859924,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
            "correct": 0
        },
        {
            "index": 781,
            "question": "What are the country codes of countries where people use languages other than English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct nominees of the musicals with the award that is not \"Tony Award\"? */\nSELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\n\n/* Answer the following: Return the different nominees of musicals that have an award that is not the Tony Award. */\nSELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\n\n/* Answer the following: What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ? */\nSELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\n\n/* Answer the following: Give the different reigns of wrestlers who are not located in Tokyo, Japan. */\nSELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\n\n/* Answer the following: List the distinct police forces of counties whose location is not on east side. */\nSELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of countries where people use languages other than English? */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 249,
                    "db_id": "musical",
                    "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
                    "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?"
                }
            ],
            "example_quality": 0.8930375269682413,
            "example_similarity": 0.3569381629226435,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != \"English\"",
            "correct": 1
        },
        {
            "index": 782,
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct nominees of the musicals with the award that is not \"Tony Award\"? */\nSELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\n\n/* Answer the following: Return the different nominees of musicals that have an award that is not the Tony Award. */\nSELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\n\n/* Answer the following: What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ? */\nSELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\n\n/* Answer the following: Give the different reigns of wrestlers who are not located in Tokyo, Japan. */\nSELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\n\n/* Answer the following: List the distinct police forces of counties whose location is not on east side. */\nSELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the country codes for countries in which people speak langauges that are not English. */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 249,
                    "db_id": "musical",
                    "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
                    "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?"
                }
            ],
            "example_quality": 0.8931743076242922,
            "example_similarity": 0.3569045806704111,
            "db_id": "world_1",
            "pred": "SELECT CountryCode FROM countrylanguage WHERE Language != \"English\"",
            "correct": 1
        },
        {
            "index": 783,
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all male student ids who don't play football. */\nSELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n\n/* Answer the following: What are the ids of all male students who do not play football? */\nSELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n\n/* Answer the following: Find the names of the artists who are from UK and have produced English songs. */\nSELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n\n/* Answer the following: What are the names of the artists that are from the UK and sang songs in English? */\nSELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n\n/* Answer the following: Show student ids who are female and play football. */\nSELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of the countries that do not speak English and whose government forms are not Republic? */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6028,
                    "db_id": "game_1",
                    "query": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
                    "question": "Show all male student ids who don't play football."
                }
            ],
            "example_quality": 0.8929499836095981,
            "example_similarity": 0.3568861348949208,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm <> 'Republic'",
            "correct": 1
        },
        {
            "index": 784,
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all male student ids who don't play football. */\nSELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n\n/* Answer the following: What are the ids of all male students who do not play football? */\nSELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n\n/* Answer the following: Find the names of the artists who are from UK and have produced English songs. */\nSELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n\n/* Answer the following: What are the names of the artists that are from the UK and sang songs in English? */\nSELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"\n\n/* Answer the following: Show student ids who are female and play football. */\nSELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries that do not speak English and do not have Republics for governments. */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6028,
                    "db_id": "game_1",
                    "query": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
                    "question": "Show all male student ids who don't play football."
                }
            ],
            "example_quality": 0.8927262318500438,
            "example_similarity": 0.3568031962339984,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'",
            "correct": 1
        },
        {
            "index": 785,
            "question": "Which cities are in European countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the trains that do not pass any station located in London. */\nSELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")\n\n/* Answer the following: How many co-authors has Mark Steedman had ? */\nSELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );\n\n/* Answer the following: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names. */\nSELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n\n/* Answer the following: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER? */\nSELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n\n/* Answer the following: Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\". */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which cities are in European countries where English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6621,
                    "db_id": "train_station",
                    "query": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")",
                    "question": "Find the names of the trains that do not pass any station located in London."
                }
            ],
            "example_quality": 0.8922212959561542,
            "example_similarity": 0.35660245149042885,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'",
            "correct": 0
        },
        {
            "index": 786,
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the trains that do not pass any station located in London. */\nSELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")\n\n/* Answer the following: How many co-authors has Mark Steedman had ? */\nSELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );\n\n/* Answer the following: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names. */\nSELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n\n/* Answer the following: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER? */\nSELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n\n/* Answer the following: Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\". */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of cities in Europe for which English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6621,
                    "db_id": "train_station",
                    "query": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")",
                    "question": "Find the names of the trains that do not pass any station located in London."
                }
            ],
            "example_quality": 0.8917176448864219,
            "example_similarity": 0.3564870137163057,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'",
            "correct": 0
        },
        {
            "index": 787,
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the institution that \"Matthias Blume\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n\n/* Answer the following: Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution. */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n\n/* Answer the following: Which institution does \"Katsuhiro Ueno\" belong to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: What is the name of the institution the author \"Katsuhiro Ueno\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: How many businesses in \" San Diego \" has Christine reviewed in 2010 ? */\nSELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which unique cities are in Asian countries where Chinese is the official language ? */\nSELECT ",
            "response": "distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2871,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
                    "question": "What is the name of the institution that \"Matthias Blume\" belongs to?"
                }
            ],
            "example_quality": 0.8910511312551833,
            "example_similarity": 0.3563925629113411,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 788,
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the institution that \"Matthias Blume\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n\n/* Answer the following: Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution. */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n\n/* Answer the following: Which institution does \"Katsuhiro Ueno\" belong to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: What is the name of the institution the author \"Katsuhiro Ueno\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: How many businesses in \" San Diego \" has Christine reviewed in 2010 ? */\nSELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the different names of cities that are in Asia and for which Chinese is the official language. */\nSELECT ",
            "response": "DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2871,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
                    "question": "What is the name of the institution that \"Matthias Blume\" belongs to?"
                }
            ],
            "example_quality": 0.8907646105888368,
            "example_similarity": 0.356294841898381,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
            "correct": 1
        },
        {
            "index": 789,
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, independence year, and surface area of the country with the smallest population? */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                }
            ],
            "example_quality": 0.8908487401788927,
            "example_similarity": 0.3564960897097637,
            "db_id": "world_1",
            "pred": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 790,
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, year of independence, and surface area of the country that has the lowest population. */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                }
            ],
            "example_quality": 0.8909326567826444,
            "example_similarity": 0.35670218985356816,
            "db_id": "world_1",
            "pred": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1",
            "correct": 1
        },
        {
            "index": 791,
            "question": "What are the population, name and leader of the country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Answer the following: What is the name, account type, and account balance corresponding to the customer with the highest credit score? */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Answer the following: Find the name, headquarter and founder of the manufacturer that has the highest revenue. */\nSELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population, name and leader of the country with the largest area? */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                }
            ],
            "example_quality": 0.8910705421722999,
            "example_similarity": 0.35680243150987623,
            "db_id": "world_1",
            "pred": "SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 792,
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Answer the following: What is the name, account type, and account balance corresponding to the customer with the highest credit score? */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Answer the following: Find the name, headquarter and founder of the manufacturer that has the highest revenue. */\nSELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, population, and head of state for the country that has the largest area. */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                }
            ],
            "example_quality": 0.8912080793665267,
            "example_similarity": 0.35699772908938165,
            "db_id": "world_1",
            "pred": "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 793,
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email for the users who have more than one follower. */\nSELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1\n\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the customers that had more than 1 policy? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Answer the following: Find the the customer details and id for the customers who had more than one policy. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 287,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
                    "question": "Find the name and email for the users who have more than one follower."
                }
            ],
            "example_quality": 0.8910989034517485,
            "example_similarity": 0.35695662625701663,
            "db_id": "world_1",
            "pred": "SELECT T1.Name AS CountryName, COUNT(T2.Language) AS NumLanguages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) >= 3",
            "correct": 1
        },
        {
            "index": 794,
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email for the users who have more than one follower. */\nSELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1\n\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the customers that had more than 1 policy? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Answer the following: Find the the customer details and id for the customers who had more than one policy. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 287,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
                    "question": "Find the name and email for the users who have more than one follower."
                }
            ],
            "example_quality": 0.8909900025392744,
            "example_similarity": 0.3568584368698837,
            "db_id": "world_1",
            "pred": "SELECT T1.Name, COUNT(T2.Language) AS NumLanguages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) > 2",
            "correct": 1
        },
        {
            "index": 795,
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students whose age is older than the average age for each gender. */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: How many students are older than average for each gender? */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: Find the name and budget of departments whose budgets are more than the average budget. */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Answer the following: What are the names and budgets of departments with budgets greater than the average? */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the number of cities in each district whose population is greater than the average population of cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5735,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "Find the number of students whose age is older than the average age for each gender."
                }
            ],
            "example_quality": 0.8908104886626065,
            "example_similarity": 0.3569444925810823,
            "db_id": "world_1",
            "pred": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "correct": 1
        },
        {
            "index": 796,
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students whose age is older than the average age for each gender. */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: How many students are older than average for each gender? */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: Find the name and budget of departments whose budgets are more than the average budget. */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Answer the following: What are the names and budgets of departments with budgets greater than the average? */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many cities in each district have a population that is above the average population across all cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5735,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "Find the number of students whose age is older than the average age for each gender."
                }
            ],
            "example_quality": 0.8906314258258297,
            "example_similarity": 0.3568325827590107,
            "db_id": "world_1",
            "pred": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District",
            "correct": 1
        },
        {
            "index": 797,
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of different departments in each school whose number of different departments is less than 5. */\nSELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\n\n/* Answer the following: How many different departments are there in each school that has less than 5 apartments? */\nSELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\n\n/* Answer the following: Find the ids and names of stations from which at least 200 trips started. */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: What are the ids and names of all start stations that were the beginning of at least 200 trips? */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the government form name and total population for each government form whose average life expectancy is longer than 72. */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3198,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
                    "question": "Find the number of different departments in each school whose number of different departments is less than 5."
                }
            ],
            "example_quality": 0.8901950674511041,
            "example_similarity": 0.35676861882544453,
            "db_id": "world_1",
            "pred": "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
            "correct": 1
        },
        {
            "index": 798,
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of different departments in each school whose number of different departments is less than 5. */\nSELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\n\n/* Answer the following: How many different departments are there in each school that has less than 5 apartments? */\nSELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\n\n/* Answer the following: Find the ids and names of stations from which at least 200 trips started. */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: What are the ids and names of all start stations that were the beginning of at least 200 trips? */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3198,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
                    "question": "Find the number of different departments in each school whose number of different departments is less than 5."
                }
            ],
            "example_quality": 0.8897598027063903,
            "example_similarity": 0.3567181094033468,
            "db_id": "world_1",
            "pred": "SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",
            "correct": 1
        },
        {
            "index": 799,
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and average salaries of all departments whose average salary is greater than 42000. */\nSELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n\n/* Answer the following: What are the names and average salaries for departments with average salary higher than 42000? */\nSELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n\n/* Answer the following: What are the average price and score of wines grouped by appelation? */\nSELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n\n/* Answer the following: What are the average price and score of wines for each appelation? */\nSELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n\n/* Answer the following: Find the number of different departments in each school whose number of different departments is less than 5. */\nSELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1487,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
                    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000."
                }
            ],
            "example_quality": 0.8892341934161421,
            "example_similarity": 0.35676132078495537,
            "db_id": "world_1",
            "pred": "SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72",
            "correct": 1
        },
        {
            "index": 800,
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and average salaries of all departments whose average salary is greater than 42000. */\nSELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n\n/* Answer the following: What are the names and average salaries for departments with average salary higher than 42000? */\nSELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n\n/* Answer the following: What are the average price and score of wines grouped by appelation? */\nSELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n\n/* Answer the following: What are the average price and score of wines for each appelation? */\nSELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n\n/* Answer the following: Find the number of different departments in each school whose number of different departments is less than 5. */\nSELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1487,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
                    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000."
                }
            ],
            "example_quality": 0.8887098981491195,
            "example_similarity": 0.3567335341119174,
            "db_id": "world_1",
            "pred": "SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72",
            "correct": 1
        },
        {
            "index": 801,
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Answer the following: Which restaurants have highest rating? List the restaurant name and its rating. */\nSELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;\n\n/* Answer the following: Which film has the highest rental rate? And what is the rate? */\nSELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names and areas of countries with the top 5 largest area? */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                }
            ],
            "example_quality": 0.888848837102741,
            "example_similarity": 0.3568728984753656,
            "db_id": "world_1",
            "pred": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "correct": 1
        },
        {
            "index": 802,
            "question": "Return the names and surface areas of the 5 largest countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Answer the following: Which restaurants have highest rating? List the restaurant name and its rating. */\nSELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;\n\n/* Answer the following: Which film has the highest rental rate? And what is the rate? */\nSELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names and surface areas of the 5 largest countries. */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                }
            ],
            "example_quality": 0.8889874295751815,
            "example_similarity": 0.35690953739240566,
            "db_id": "world_1",
            "pred": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "correct": 1
        },
        {
            "index": 803,
            "question": "What are names of countries with the top 3 largest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are names of countries with the top 3 largest population? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8891256768608911,
            "example_similarity": 0.3568807684162453,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 804,
            "question": "Return the names of the 3 most populated countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 most populated countries. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8892635802478801,
            "example_similarity": 0.3569793895515138,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 805,
            "question": "What are the names of the nations with the 3 lowest populations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Show the name of employees with three lowest salaries. */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Answer the following: What is the name of the 3 employees who get paid the least? */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the nations with the 3 lowest populations? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                }
            ],
            "example_quality": 0.8894011410177584,
            "example_similarity": 0.3570205998664264,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "correct": 1
        },
        {
            "index": 806,
            "question": "Return the names of the 3 countries with the fewest people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Show the name of employees with three lowest salaries. */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Answer the following: What is the name of the 3 employees who get paid the least? */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 countries with the fewest people. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                }
            ],
            "example_quality": 0.889538360445776,
            "example_similarity": 0.35708701933999465,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "correct": 1
        },
        {
            "index": 807,
            "question": "how many countries are in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: how many countries are in Asia? */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8896752398008619,
            "example_similarity": 0.3573870879953881,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE Continent = \"Asia\"",
            "correct": 1
        },
        {
            "index": 808,
            "question": "Count the number of countries in Asia.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many animal type allergies exist? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries in Asia. */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                }
            ],
            "example_quality": 0.8898117803456628,
            "example_similarity": 0.3571491438334237,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE Continent = \"Asia\"",
            "correct": 1
        },
        {
            "index": 809,
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What is the company where Eduardo Martins is a customer? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the countries that are in the continent of Europe and have a population of 80000? */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                }
            ],
            "example_quality": 0.8899479833365829,
            "example_similarity": 0.3570629491621945,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = \"Europe\" AND Population = 80000;",
            "correct": 1
        },
        {
            "index": 810,
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What is the company where Eduardo Martins is a customer? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries that are in Europe and have a population equal to 80000. */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                }
            ],
            "example_quality": 0.8900838500238217,
            "example_similarity": 0.35692109922762943,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = \"Europe\" AND Population = 80000;",
            "correct": 1
        },
        {
            "index": 811,
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London. */\nSELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'\n\n/* Answer the following: What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London? */\nSELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'\n\n/* Answer the following: What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape? */\nSELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\n\n/* Answer the following: Give the average price and case of wines made from Zinfandel grapes in the year 2009. */\nSELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\n\n/* Answer the following: Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. */\nSELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5411,
                    "db_id": "shop_membership",
                    "query": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
                    "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London."
                }
            ],
            "example_quality": 0.8893951014688353,
            "example_similarity": 0.3569990706566034,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
            "correct": 0
        },
        {
            "index": 812,
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London. */\nSELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'\n\n/* Answer the following: What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London? */\nSELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'\n\n/* Answer the following: What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape? */\nSELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\n\n/* Answer the following: Give the average price and case of wines made from Zinfandel grapes in the year 2009. */\nSELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"\n\n/* Answer the following: Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50. */\nSELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5411,
                    "db_id": "shop_membership",
                    "query": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
                    "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London."
                }
            ],
            "example_quality": 0.888708049338861,
            "example_similarity": 0.35697734416195764,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
            "correct": 0
        },
        {
            "index": 813,
            "question": "What are the cities whose population is between 160000 and 900000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened. */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: What are the years of opening for tracks with seating between 4000 and 5000? */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: the names of models that launched between 2002 and 2004. */\nSELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;\n\n/* Answer the following: Find the name of rooms whose base price is between 120 and 150. */\nSELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150\n\n/* Answer the following: Which rooms cost between 120 and 150? Give me the room names. */\nSELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the cities whose population is between 160000 and 900000? */\nSELECT ",
            "response": "name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 778,
                    "db_id": "race_track",
                    "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
                    "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened."
                }
            ],
            "example_quality": 0.8888449398070789,
            "example_similarity": 0.35707116247662546,
            "db_id": "world_1",
            "pred": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "correct": 1
        },
        {
            "index": 814,
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened. */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: What are the years of opening for tracks with seating between 4000 and 5000? */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: the names of models that launched between 2002 and 2004. */\nSELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;\n\n/* Answer the following: Find the name of rooms whose base price is between 120 and 150. */\nSELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150\n\n/* Answer the following: Which rooms cost between 120 and 150? Give me the room names. */\nSELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of cities that have a population between 160000 and 900000 . */\nSELECT ",
            "response": "name from city where population between 160000 and 900000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 778,
                    "db_id": "race_track",
                    "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
                    "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened."
                }
            ],
            "example_quality": 0.8881624931160793,
            "example_similarity": 0.3572275292307609,
            "db_id": "world_1",
            "pred": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "correct": 1
        },
        {
            "index": 815,
            "question": "Which language is spoken by the largest number of countries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is spoken by the largest number of countries? */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8882997170509062,
            "example_similarity": 0.35706240841161224,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 816,
            "question": "Give the language that is spoken in the most countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the language that is spoken in the most countries. */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8884366046525594,
            "example_similarity": 0.356958194442387,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 817,
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of school that has the smallest enrollment in each state? */\nSELECT cName ,  state ,  min(enr) FROM college GROUP BY state\n\n/* Answer the following: What is the name of the school with smallest enrollment size per state? */\nSELECT cName ,  state ,  min(enr) FROM college GROUP BY state\n\n/* Answer the following: Select the code of the product that is cheapest in each product category. */\nSELECT code ,  name ,  min(price) FROM products GROUP BY name\n\n/* Answer the following: What are the codes and names of the cheapest products in each category? */\nSELECT code ,  name ,  min(price) FROM products GROUP BY name\n\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language spoken by the largest percentage of people in each country? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4993,
                    "db_id": "soccer_2",
                    "query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
                    "question": "What is the name of school that has the smallest enrollment in each state?"
                }
            ],
            "example_quality": 0.8883134515413819,
            "example_similarity": 0.3570458790161761,
            "db_id": "world_1",
            "pred": "SELECT Country.Name, CountryLanguage.Language FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE Percentage = (SELECT MAX(Percentage) FROM CountryLanguage WHERE CountryCode = Country.Code)",
            "correct": 0
        },
        {
            "index": 818,
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of school that has the smallest enrollment in each state? */\nSELECT cName ,  state ,  min(enr) FROM college GROUP BY state\n\n/* Answer the following: What is the name of the school with smallest enrollment size per state? */\nSELECT cName ,  state ,  min(enr) FROM college GROUP BY state\n\n/* Answer the following: Select the code of the product that is cheapest in each product category. */\nSELECT code ,  name ,  min(price) FROM products GROUP BY name\n\n/* Answer the following: What are the codes and names of the cheapest products in each category? */\nSELECT code ,  name ,  min(price) FROM products GROUP BY name\n\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4993,
                    "db_id": "soccer_2",
                    "query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
                    "question": "What is the name of school that has the smallest enrollment in each state?"
                }
            ],
            "example_quality": 0.8881905995380557,
            "example_similarity": 0.35692086095624287,
            "db_id": "world_1",
            "pred": "SELECT CountryCode, Language FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
            "correct": 0
        },
        {
            "index": 819,
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average age and number of male students (with sex M) from each city. */\nSELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code\n\n/* Answer the following: What is the average age and how many male students are there in each city? */\nSELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code\n\n/* Answer the following: Find the number of employees whose title is IT Staff from each city? */\nSELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city\n\n/* Answer the following: How many employees who are IT staff are from each city? */\nSELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city\n\n/* Answer the following: Find the number of professors with a Ph.D. degree in each department. */\nSELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5729,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
                    "question": "Find the average age and number of male students (with sex M) from each city."
                }
            ],
            "example_quality": 0.8879461023083646,
            "example_similarity": 0.3567617647677994,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
            "correct": 0
        },
        {
            "index": 820,
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average age and number of male students (with sex M) from each city. */\nSELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code\n\n/* Answer the following: What is the average age and how many male students are there in each city? */\nSELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code\n\n/* Answer the following: Find the number of employees whose title is IT Staff from each city? */\nSELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city\n\n/* Answer the following: How many employees who are IT staff are from each city? */\nSELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city\n\n/* Answer the following: Find the number of professors with a Ph.D. degree in each department. */\nSELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5729,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
                    "question": "Find the average age and number of male students (with sex M) from each city."
                }
            ],
            "example_quality": 0.8877022014133801,
            "example_similarity": 0.3566274606779206,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 821,
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the average salary of employees for each department who gets a commission percentage. */\nSELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\n\n/* Answer the following: What is the average salary of employees who have a commission percentage that is not null? */\nSELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\n\n/* Answer the following: List the number of invoices from the US, grouped by state. */\nSELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;\n\n/* Answer the following: How many invoices were billed from each state? */\nSELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;\n\n/* Answer the following: Find the number of rooms with king bed for each decor type. */\nSELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3454,
                    "db_id": "hr_1",
                    "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
                    "question": "display the average salary of employees for each department who gets a commission percentage."
                }
            ],
            "example_quality": 0.8874826505960582,
            "example_similarity": 0.35653173737385335,
            "db_id": "world_1",
            "pred": "SELECT CountryCode FROM countrylanguage WHERE Language = \"Spanish\" ORDER BY Percentage DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 822,
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the average salary of employees for each department who gets a commission percentage. */\nSELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\n\n/* Answer the following: What is the average salary of employees who have a commission percentage that is not null? */\nSELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id\n\n/* Answer the following: List the number of invoices from the US, grouped by state. */\nSELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;\n\n/* Answer the following: How many invoices were billed from each state? */\nSELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;\n\n/* Answer the following: Find the number of rooms with king bed for each decor type. */\nSELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3454,
                    "db_id": "hr_1",
                    "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
                    "question": "display the average salary of employees for each department who gets a commission percentage."
                }
            ],
            "example_quality": 0.8872636339656399,
            "example_similarity": 0.35650519851084367,
            "db_id": "world_1",
            "pred": "SELECT CountryCode FROM countrylanguage WHERE Language = \"Spanish\" AND Percentage > 50;",
            "correct": 0
        },
        {
            "index": 823,
            "question": "How many conductors are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many conductors are there? */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8874006161843937,
            "example_similarity": 0.3568452452154036,
            "db_id": "orchestra",
            "pred": "SELECT count(*) FROM conductor",
            "correct": 1
        },
        {
            "index": 824,
            "question": "Count the number of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of conductors. */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.887537265922034,
            "example_similarity": 0.35696381343060996,
            "db_id": "orchestra",
            "pred": "SELECT count(*) FROM conductor",
            "correct": 1
        },
        {
            "index": 825,
            "question": "List the names of conductors in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of the books in ascending order of issues. */\nSELECT Title FROM book ORDER BY Issues ASC\n\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Answer the following: Return all players sorted by college in ascending alphabetical order. */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are all the players who played in match season, sorted by college in ascending alphabetical order? */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are the birthdays of people in ascending order of height? */\nSELECT Birth_Date FROM People ORDER BY Height ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of conductors in ascending order of age. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 216,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book ORDER BY Issues ASC",
                    "question": "List the titles of the books in ascending order of issues."
                }
            ],
            "example_quality": 0.887673584387583,
            "example_similarity": 0.35728975979641214,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 826,
            "question": "What are the names of conductors, ordered by age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of the books in ascending order of issues. */\nSELECT Title FROM book ORDER BY Issues ASC\n\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Answer the following: Return all players sorted by college in ascending alphabetical order. */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are all the players who played in match season, sorted by college in ascending alphabetical order? */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are the birthdays of people in ascending order of height? */\nSELECT Birth_Date FROM People ORDER BY Height ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, ordered by age? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 216,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book ORDER BY Issues ASC",
                    "question": "List the titles of the books in ascending order of issues."
                }
            ],
            "example_quality": 0.8878095727842082,
            "example_similarity": 0.3572436127725061,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 827,
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors whose nationalities are not \"USA\"? */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8879452323092575,
            "example_similarity": 0.35751416549233894,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "correct": 1
        },
        {
            "index": 828,
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the names of conductors that do not have the nationality \"USA\". */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8880805641542947,
            "example_similarity": 0.3576369325685146,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "correct": 1
        },
        {
            "index": 829,
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List official names of cities in descending order of population. */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the official names of cities, ordered descending by population? */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the dates of publications in descending order of price? */\nSELECT Publication_Date FROM publication ORDER BY Price DESC\n\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: What are the names of all the teams in the basketball competition, sorted by all home scores in descending order? */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies of orchestras in descending order of years in which they were founded? */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 31,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "List official names of cities in descending order of population."
                }
            ],
            "example_quality": 0.8882155695051338,
            "example_similarity": 0.35777415935587786,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "correct": 1
        },
        {
            "index": 830,
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List official names of cities in descending order of population. */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the official names of cities, ordered descending by population? */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the dates of publications in descending order of price? */\nSELECT Publication_Date FROM publication ORDER BY Price DESC\n\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: What are the names of all the teams in the basketball competition, sorted by all home scores in descending order? */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the record companies of orchestras, sorted descending by the years in which they were founded. */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 31,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "List official names of cities in descending order of population."
                }
            ],
            "example_quality": 0.8883502495418747,
            "example_similarity": 0.35779893546308567,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "correct": 1
        },
        {
            "index": 831,
            "question": "What is the average attendance of shows?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the average attendance of shows? */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8884846054389361,
            "example_similarity": 0.3580145721315934,
            "db_id": "orchestra",
            "pred": "SELECT AVG(Attendance) FROM show",
            "correct": 1
        },
        {
            "index": 832,
            "question": "Return the average attendance across all shows.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the average attendance across all shows. */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8886186383650914,
            "example_similarity": 0.35798891359137114,
            "db_id": "orchestra",
            "pred": "SELECT AVG(Attendance) FROM show",
            "correct": 1
        },
        {
            "index": 833,
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum sales of the companies whose industries are not \"Banking\". */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Return the average and minimum ages across artists from the United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: What are the maximum and minimum age of students with major 600? */\nSELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the maximum and minimum share of performances whose type is not \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4554,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\"."
                }
            ],
            "example_quality": 0.8885122534450852,
            "example_similarity": 0.35823870631525656,
            "db_id": "orchestra",
            "pred": "SELECT max(Share) , min(Share) FROM performance WHERE Type != \"Live final\"",
            "correct": 1
        },
        {
            "index": 834,
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum sales of the companies whose industries are not \"Banking\". */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Return the average and minimum ages across artists from the United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: What are the maximum and minimum age of students with major 600? */\nSELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the maximum and minimum shares for performances that do not have the type \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4554,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\"."
                }
            ],
            "example_quality": 0.8884061236447913,
            "example_similarity": 0.35834462604098866,
            "db_id": "orchestra",
            "pred": "SELECT max(Share) , min(Share) FROM performance WHERE Type != \"Live final\"",
            "correct": 1
        },
        {
            "index": 835,
            "question": "How many different nationalities do conductors have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many different nationalities do conductors have? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8885397690056958,
            "example_similarity": 0.3584220473906299,
            "db_id": "orchestra",
            "pred": "SELECT count(DISTINCT Nationality) FROM conductor",
            "correct": 1
        },
        {
            "index": 836,
            "question": "Count the number of different nationalities of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of different nationalities of conductors. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8886730946408564,
            "example_similarity": 0.35837760695268644,
            "db_id": "orchestra",
            "pred": "SELECT count(DISTINCT Nationality) FROM conductor",
            "correct": 1
        },
        {
            "index": 837,
            "question": "List names of conductors in descending order of years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List official names of cities in descending order of population. */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the official names of cities, ordered descending by population? */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the dates of publications in descending order of price? */\nSELECT Publication_Date FROM publication ORDER BY Price DESC\n\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: What are the names of all the teams in the basketball competition, sorted by all home scores in descending order? */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List names of conductors in descending order of years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 31,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "List official names of cities in descending order of population."
                }
            ],
            "example_quality": 0.8888061016962437,
            "example_similarity": 0.35852962979506453,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "correct": 1
        },
        {
            "index": 838,
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List official names of cities in descending order of population. */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the official names of cities, ordered descending by population? */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: What are the dates of publications in descending order of price? */\nSELECT Publication_Date FROM publication ORDER BY Price DESC\n\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: What are the names of all the teams in the basketball competition, sorted by all home scores in descending order? */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, sorted descending by the number of years they have worked? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 31,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "List official names of cities in descending order of population."
                }
            ],
            "example_quality": 0.888938791312358,
            "example_similarity": 0.358578349698468,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "correct": 1
        },
        {
            "index": 839,
            "question": "List the name of the conductor with the most years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the name of the conductor with the most years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8890711646242622,
            "example_similarity": 0.358693081781075,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 840,
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has worked the greatest number of years? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8892032227616142,
            "example_similarity": 0.35876010768376565,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 841,
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors and the orchestras they have conducted. */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8893349668486992,
            "example_similarity": 0.35891972004958994,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "correct": 1
        },
        {
            "index": 842,
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors as well as the corresonding orchestras that they have conducted? */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8894663980044608,
            "example_similarity": 0.3588505093170524,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "correct": 1
        },
        {
            "index": 843,
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: List the name of staff who has been assigned multiple jobs. */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: Find the name of the ships that have more than one captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Answer the following: What are the names of ships that have more than one captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors that have conducted more than one orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                }
            ],
            "example_quality": 0.8895975173425338,
            "example_similarity": 0.35902105325335365,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 844,
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: List the name of staff who has been assigned multiple jobs. */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: Find the name of the ships that have more than one captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Answer the following: What are the names of ships that have more than one captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted at more than one orchestra? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                }
            ],
            "example_quality": 0.8897283259712748,
            "example_similarity": 0.35919114120979356,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 845,
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the most common genre in all tracks? */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the genre that is most frequent across all tracks. */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the user who gives the most reviews. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the program that is broadcast most frequently. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which program is broadcast most frequently? Give me the program name. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the name of the conductor that has conducted the most number of orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 836,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the most common genre in all tracks?"
                }
            ],
            "example_quality": 0.8898588249937941,
            "example_similarity": 0.35930089113091973,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 846,
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the most common genre in all tracks? */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the genre that is most frequent across all tracks. */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the user who gives the most reviews. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the program that is broadcast most frequently. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which program is broadcast most frequently? Give me the program name. */\nSELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has conducted the most orchestras? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 836,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the most common genre in all tracks?"
                }
            ],
            "example_quality": 0.8899890155079858,
            "example_similarity": 0.35942277932184485,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 847,
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the the name of the customers who have a loan with amount more than 3000. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\n\n/* Answer the following: What are the names of customers who have a loan of more than 3000 in amount? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\n\n/* Answer the following: What are the names of representatives with more than 10000 votes in election? */\nSELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000\n\n/* Answer the following: Show writers who have published a book with price more than 4000000. */\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n\n/* Answer the following: Show the facility codes of apartments with more than 4 bedrooms. */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the name of the conductor that has conducted orchestras founded after 2008. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3075,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
                    "question": "Find the the name of the customers who have a loan with amount more than 3000."
                }
            ],
            "example_quality": 0.8900141503131578,
            "example_similarity": 0.35935751708373437,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008",
            "correct": 1
        },
        {
            "index": 848,
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the the name of the customers who have a loan with amount more than 3000. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\n\n/* Answer the following: What are the names of customers who have a loan of more than 3000 in amount? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\n\n/* Answer the following: What are the names of representatives with more than 10000 votes in election? */\nSELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000\n\n/* Answer the following: Show writers who have published a book with price more than 4000000. */\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n\n/* Answer the following: Show the facility codes of apartments with more than 4 bedrooms. */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted orchestras founded after the year 2008? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3075,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
                    "question": "Find the the name of the customers who have a loan with amount more than 3000."
                }
            ],
            "example_quality": 0.8900392258381291,
            "example_similarity": 0.35939818107268057,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008",
            "correct": 1
        },
        {
            "index": 849,
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the different record companies and the corresponding number of orchestras. */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8901687438288969,
            "example_similarity": 0.35932587903485047,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company",
            "correct": 1
        },
        {
            "index": 850,
            "question": "How many orchestras does each record company manage?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many orchestras does each record company manage? */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8902979570714511,
            "example_similarity": 0.3592162408631981,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company",
            "correct": 1
        },
        {
            "index": 851,
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the different statuses, ordered by the number of cities that have each. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Answer the following: Return the different statuses of cities, ascending by frequency. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Answer the following: Please show the industries of companies in descending order of the number of companies. */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Answer the following: Sort all the industries in descending order of the count of companies in each industry */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Answer the following: Please show the software platforms of devices in descending order of the count. */\nSELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the record formats of orchestras in ascending order of count. */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 45,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
                    "question": "Please show the different statuses, ordered by the number of cities that have each."
                }
            ],
            "example_quality": 0.8903093578269489,
            "example_similarity": 0.3593372423814864,
            "db_id": "orchestra",
            "pred": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "correct": 1
        },
        {
            "index": 852,
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the different statuses, ordered by the number of cities that have each. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Answer the following: Return the different statuses of cities, ascending by frequency. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Answer the following: Please show the industries of companies in descending order of the number of companies. */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Answer the following: Sort all the industries in descending order of the count of companies in each industry */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Answer the following: Please show the software platforms of devices in descending order of the count. */\nSELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the major record formats of orchestras, sorted by their frequency? */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 45,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
                    "question": "Please show the different statuses, ordered by the number of cities that have each."
                }
            ],
            "example_quality": 0.8903207318201097,
            "example_similarity": 0.35921429887162637,
            "db_id": "orchestra",
            "pred": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC",
            "correct": 0
        },
        {
            "index": 853,
            "question": "List the record company shared by the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the record company shared by the most number of orchestras. */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8904493124393124,
            "example_similarity": 0.35912924889248804,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 854,
            "question": "What is the record company used by the greatest number of orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the record company used by the greatest number of orchestras? */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8905775919329432,
            "example_similarity": 0.35897127825035063,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 855,
            "question": "List the names of orchestras that have no performance.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of orchestras that have no performance. */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.890705571357583,
            "example_similarity": 0.35922049462906513,
            "db_id": "orchestra",
            "pred": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "correct": 1
        },
        {
            "index": 856,
            "question": "What are the orchestras that do not have any performances?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the orchestras that do not have any performances? */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8908332517648755,
            "example_similarity": 0.3592635529663823,
            "db_id": "orchestra",
            "pred": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "correct": 1
        },
        {
            "index": 857,
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Answer the following: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Answer the following: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the record companies shared by orchestras founded before 2003 and after 2003. */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                }
            ],
            "example_quality": 0.8909606342015559,
            "example_similarity": 0.35924064098882963,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "correct": 1
        },
        {
            "index": 858,
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Answer the following: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Answer the following: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                }
            ],
            "example_quality": 0.8910877197094795,
            "example_similarity": 0.359163788510887,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "correct": 1
        },
        {
            "index": 859,
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: Give the number of students living in either HKG or CHI. */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who has a either Ph.D. or MA degree? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: How many professors attained either Ph.D. or Masters degrees? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: Show the number of documents with document type code CV or BK. */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Find the number of orchestras whose record format is \"CD\" or \"DVD\". */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                }
            ],
            "example_quality": 0.8912145093256502,
            "example_similarity": 0.35903245152932056,
            "db_id": "orchestra",
            "pred": "SELECT count(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "correct": 1
        },
        {
            "index": 860,
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: Give the number of students living in either HKG or CHI. */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who has a either Ph.D. or MA degree? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: How many professors attained either Ph.D. or Masters degrees? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: Show the number of documents with document type code CV or BK. */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of orchestras that have CD or DVD as their record format. */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                }
            ],
            "example_quality": 0.8913410040822481,
            "example_similarity": 0.35893034413881414,
            "db_id": "orchestra",
            "pred": "SELECT count(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "correct": 1
        },
        {
            "index": 861,
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: List the name of staff who has been assigned multiple jobs. */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: Find the name of the ships that have more than one captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Answer the following: What are the names of ships that have more than one captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the years in which orchestras that have given more than one performance are founded. */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                }
            ],
            "example_quality": 0.8912976283404084,
            "example_similarity": 0.35895512092598714,
            "db_id": "orchestra",
            "pred": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
            "correct": 1
        },
        {
            "index": 862,
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: List the name of staff who has been assigned multiple jobs. */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: Find the name of the ships that have more than one captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Answer the following: What are the names of ships that have more than one captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are years of founding for orchestras that have had more than a single performance? */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                }
            ],
            "example_quality": 0.8912543532383407,
            "example_similarity": 0.3588762907445239,
            "db_id": "orchestra",
            "pred": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 863,
            "question": "How many high schoolers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there? */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8913803620990147,
            "example_similarity": 0.3590949961406704,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler",
            "correct": 1
        },
        {
            "index": 864,
            "question": "Count the number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers. */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8915060792725112,
            "example_similarity": 0.35913407269937014,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler",
            "correct": 1
        },
        {
            "index": 865,
            "question": "Show the names and grades of each high schooler.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names and grades of each high schooler. */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8916315057704621,
            "example_similarity": 0.359108776369374,
            "db_id": "network_1",
            "pred": "SELECT name, grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 866,
            "question": "What are the names and grades for each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names and grades for each high schooler? */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8917566425998265,
            "example_similarity": 0.35919628368290835,
            "db_id": "network_1",
            "pred": "SELECT name, grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 867,
            "question": "Show all the grades of the high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id of students who attended some courses? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: What are the ids of all students who have attended at least one course? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: List every album's title. */\nSELECT title FROM albums;\n\n/* Answer the following: What are the titles of all the albums? */\nSELECT title FROM albums;\n\n/* Answer the following: List all media types. */\nSELECT name FROM media_types;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show all the grades of the high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 65,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance",
                    "question": "List the id of students who attended some courses?"
                }
            ],
            "example_quality": 0.8918814907629178,
            "example_similarity": 0.3591957022542176,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler;",
            "correct": 1
        },
        {
            "index": 868,
            "question": "What is the grade of each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id of students who attended some courses? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: What are the ids of all students who have attended at least one course? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: List every album's title. */\nSELECT title FROM albums;\n\n/* Answer the following: What are the titles of all the albums? */\nSELECT title FROM albums;\n\n/* Answer the following: List all media types. */\nSELECT name FROM media_types;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the grade of each high schooler? */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 65,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance",
                    "question": "List the id of students who attended some courses?"
                }
            ],
            "example_quality": 0.8920060512574305,
            "example_similarity": 0.3591521917348331,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler;",
            "correct": 1
        },
        {
            "index": 869,
            "question": "What grade is Kyle in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What grade is Kyle in? */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8921303250764668,
            "example_similarity": 0.3589796364861995,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "correct": 1
        },
        {
            "index": 870,
            "question": "Return the grade for the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade for the high schooler named Kyle. */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8922543132085629,
            "example_similarity": 0.3590023311100307,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "correct": 1
        },
        {
            "index": 871,
            "question": "Show the names of all high schoolers in grade 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of students who registered course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: What are the ids of the students who registered for course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: Who is the advisor of student with ID 1004? */\nSELECT Advisor FROM Student WHERE StuID  =  1004\n\n/* Answer the following: Who advises student 1004? */\nSELECT Advisor FROM Student WHERE StuID  =  1004\n\n/* Answer the following: List the document type code for the document with the id 2. */\nSELECT document_type_code FROM Documents WHERE document_id = 2;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all high schoolers in grade 10. */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 88,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
                    "question": "What are the id of students who registered course 301?"
                }
            ],
            "example_quality": 0.8923780166377149,
            "example_similarity": 0.35891723024550376,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade = 10;",
            "correct": 1
        },
        {
            "index": 872,
            "question": "What are the names of all high schoolers in grade 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of students who registered course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: What are the ids of the students who registered for course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: Who is the advisor of student with ID 1004? */\nSELECT Advisor FROM Student WHERE StuID  =  1004\n\n/* Answer the following: Who advises student 1004? */\nSELECT Advisor FROM Student WHERE StuID  =  1004\n\n/* Answer the following: List the document type code for the document with the id 2. */\nSELECT document_type_code FROM Documents WHERE document_id = 2;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of all high schoolers in grade 10? */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 88,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
                    "question": "What are the id of students who registered course 301?"
                }
            ],
            "example_quality": 0.8925014363434055,
            "example_similarity": 0.3589434712100381,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade = 10",
            "correct": 1
        },
        {
            "index": 873,
            "question": "Show the ID of the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ID of the high schooler named Kyle. */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8926245733006296,
            "example_similarity": 0.3590403090505569,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "correct": 1
        },
        {
            "index": 874,
            "question": "What is Kyle's id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Return the names of musicals who have the nominee Bob Fosse. */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: Find the emails of the user named \"Mary\". */\nSELECT email FROM user_profiles WHERE name  =  'Mary'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is Kyle's id? */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                }
            ],
            "example_quality": 0.8927474284799195,
            "example_similarity": 0.35886886897232084,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "correct": 1
        },
        {
            "index": 875,
            "question": "How many high schoolers are there in grade 9 or 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: Give the number of students living in either HKG or CHI. */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who has a either Ph.D. or MA degree? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: How many professors attained either Ph.D. or Masters degrees? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there in grade 9 or 10? */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                }
            ],
            "example_quality": 0.8925434722351262,
            "example_similarity": 0.3588949169883258,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;",
            "correct": 1
        },
        {
            "index": 876,
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: Give the number of students living in either HKG or CHI. */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who has a either Ph.D. or MA degree? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: How many professors attained either Ph.D. or Masters degrees? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')? */\nSELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers in grades 9 or 10. */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                }
            ],
            "example_quality": 0.8923399816438596,
            "example_similarity": 0.35882519994808,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;",
            "correct": 1
        },
        {
            "index": 877,
            "question": "Show the number of high schoolers for each grade.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the number of high schoolers for each grade. */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8924627410718599,
            "example_similarity": 0.35889079686413033,
            "db_id": "network_1",
            "pred": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade",
            "correct": 1
        },
        {
            "index": 878,
            "question": "How many high schoolers are in each grade?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are in each grade? */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8925852208656276,
            "example_similarity": 0.35878515066397787,
            "db_id": "network_1",
            "pred": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade",
            "correct": 1
        },
        {
            "index": 879,
            "question": "Which grade has the most high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grade has the most high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8927074219795461,
            "example_similarity": 0.35871711091893094,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 880,
            "question": "Return the grade that has the greatest number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade that has the greatest number of high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8928293453636603,
            "example_similarity": 0.35858199793090784,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 881,
            "question": "Show me all grades that have at least 4 students.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show me all grades that have at least 4 students. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.8929509919637015,
            "example_similarity": 0.3585722567300782,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "correct": 1
        },
        {
            "index": 882,
            "question": "Which grades have 4 or more high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the states where at least 3 heads were born? */\nSELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: What are the students ids of students who have more than one allergy? */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grades have 4 or more high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 8,
                    "db_id": "department_management",
                    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3",
                    "question": "What are the names of the states where at least 3 heads were born?"
                }
            ],
            "example_quality": 0.8930723627211123,
            "example_similarity": 0.35852683912821703,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "correct": 1
        },
        {
            "index": 883,
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the student IDs and numbers of friends corresponding to each. */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8931934585730703,
            "example_similarity": 0.3584900288821068,
            "db_id": "network_1",
            "pred": "SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 884,
            "question": "How many friends does each student have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does each student have? */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8933142804525125,
            "example_similarity": 0.3584195981491351,
            "db_id": "network_1",
            "pred": "SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 885,
            "question": "Show the names of high school students and their corresponding number of friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high school students and their corresponding number of friends. */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.893321834937877,
            "example_similarity": 0.3584968063517211,
            "db_id": "network_1",
            "pred": "SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID;",
            "correct": 0
        },
        {
            "index": 886,
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of the high schoolers and how many friends does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8933293723702269,
            "example_similarity": 0.3585794882103053,
            "db_id": "network_1",
            "pred": "SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name",
            "correct": 0
        },
        {
            "index": 887,
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Give the building that the instructor who teaches the greatest number of courses lives in. */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2577,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
                }
            ],
            "example_quality": 0.8934308424502305,
            "example_similarity": 0.358601584699667,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 888,
            "question": "Return the name of the high school student with the most friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Give the building that the instructor who teaches the greatest number of courses lives in. */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the name of the high school student with the most friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2577,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
                }
            ],
            "example_quality": 0.8935320839940177,
            "example_similarity": 0.35853916692767923,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 889,
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: What are the names for all aircrafts with at least 2 flights? */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have at least 3 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                }
            ],
            "example_quality": 0.8935495854845654,
            "example_similarity": 0.3587009372024248,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 3",
            "correct": 1
        },
        {
            "index": 890,
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: What are the names for all aircrafts with at least 2 flights? */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have 3 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                }
            ],
            "example_quality": 0.8935670476459209,
            "example_similarity": 0.35874900722083614,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 3",
            "correct": 1
        },
        {
            "index": 891,
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last names of faculties who are members of computer science department. */\nSELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"\n\n/* Answer the following: What are the last names of faculty who are part of the computer science department? */\nSELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"\n\n/* Answer the following: Find all movies written by \" Matt Damon \" */\nSELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";\n\n/* Answer the following: Show the pair of male and female names in all weddings after year 2014 */\nSELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014\n\n/* Answer the following: Show the dates of performances with attending members whose roles are \"Violin\". */\nSELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all of the high schooler Kyle's friends. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4698,
                    "db_id": "college_3",
                    "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
                    "question": "Find the last names of faculties who are members of computer science department."
                }
            ],
            "example_quality": 0.8933767987703802,
            "example_similarity": 0.35881033472436547,
            "db_id": "network_1",
            "pred": "SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = \"Kyle\"",
            "correct": 0
        },
        {
            "index": 892,
            "question": "Return the names of friends of the high school student Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last names of faculties who are members of computer science department. */\nSELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"\n\n/* Answer the following: What are the last names of faculty who are part of the computer science department? */\nSELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"\n\n/* Answer the following: Find all movies written by \" Matt Damon \" */\nSELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";\n\n/* Answer the following: Show the pair of male and female names in all weddings after year 2014 */\nSELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014\n\n/* Answer the following: Show the dates of performances with attending members whose roles are \"Violin\". */\nSELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the names of friends of the high school student Kyle. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4698,
                    "db_id": "college_3",
                    "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
                    "question": "Find the last names of faculties who are members of computer science department."
                }
            ],
            "example_quality": 0.893186976461825,
            "example_similarity": 0.3588283206732951,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.friend_id WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = \"Kyle\")",
            "correct": 1
        },
        {
            "index": 893,
            "question": "How many friends does the high school student Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does the high school student Kyle have? */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8932830127350155,
            "example_similarity": 0.358861420116752,
            "db_id": "network_1",
            "pred": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
            "correct": 1
        },
        {
            "index": 894,
            "question": "Count the number of friends Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of friends Kyle has. */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8933788341619575,
            "example_similarity": 0.35884548495399876,
            "db_id": "network_1",
            "pred": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
            "correct": 1
        },
        {
            "index": 895,
            "question": "Show ids of all students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids of the employees who don't authorize destruction for any document. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Which employees do not authorize destruction for any document? Give me their employee ids. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Show the ids of all employees who don't destroy any document. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Which employees do not destroy any document? Find their employee ids. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Show ids for the faculty members who don't advise any student. */\nSELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show ids of all students who do not have any friends. */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4241,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "Show the ids of the employees who don't authorize destruction for any document."
                }
            ],
            "example_quality": 0.89349796395619,
            "example_similarity": 0.358953540898805,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 896,
            "question": "What are the ids of high school students who do not have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids of the employees who don't authorize destruction for any document. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Which employees do not authorize destruction for any document? Give me their employee ids. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Show the ids of all employees who don't destroy any document. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Which employees do not destroy any document? Find their employee ids. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Show ids for the faculty members who don't advise any student. */\nSELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of high school students who do not have friends? */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4241,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "Show the ids of the employees who don't authorize destruction for any document."
                }
            ],
            "example_quality": 0.8936168278357032,
            "example_similarity": 0.35889886113698527,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 897,
            "question": "Show names of all high school students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of physicians who never took any appointment. */\nSELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n\n/* Answer the following: Which physicians have never taken any appointment? Find their names. */\nSELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n\n/* Answer the following: Show the names of all the clients with no booking. */\nSELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\n\n/* Answer the following: What are the names of the clients who do not have any booking? */\nSELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\n\n/* Answer the following: Find the names of artists that do not have any albums. */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show names of all high school students who do not have any friends. */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3913,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
                    "question": "List the name of physicians who never took any appointment."
                }
            ],
            "example_quality": 0.8937131301458082,
            "example_similarity": 0.3589512990537942,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 898,
            "question": "What are the names of students who have no friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of physicians who never took any appointment. */\nSELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n\n/* Answer the following: Which physicians have never taken any appointment? Find their names. */\nSELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n\n/* Answer the following: Show the names of all the clients with no booking. */\nSELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\n\n/* Answer the following: What are the names of the clients who do not have any booking? */\nSELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\n\n/* Answer the following: Find the names of artists that do not have any albums. */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have no friends? */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3913,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
                    "question": "List the name of physicians who never took any appointment."
                }
            ],
            "example_quality": 0.8938092179741537,
            "example_similarity": 0.358966350302355,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 899,
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids of all the faculty members who participate in an activity and advise a student. */\nSELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student\n\n/* Answer the following: What are ids of the faculty members who not only participate in an activity but also advise a student. */\nSELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student\n\n/* Answer the following: Find the names of all the customers and staff members. */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: What are the names of the customers and staff members? */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: Return all reviewer names and movie names together in a single list. */\nSELECT name FROM Reviewer UNION SELECT title FROM Movie\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ids of high schoolers who have friends and are also liked by someone else. */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6774,
                    "db_id": "activity_1",
                    "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                    "question": "Show the ids of all the faculty members who participate in an activity and advise a student."
                }
            ],
            "example_quality": 0.8937938573312458,
            "example_similarity": 0.35894010626461376,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)",
            "correct": 1
        },
        {
            "index": 900,
            "question": "What are the ids of students who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids of all the faculty members who participate in an activity and advise a student. */\nSELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student\n\n/* Answer the following: What are ids of the faculty members who not only participate in an activity but also advise a student. */\nSELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student\n\n/* Answer the following: Find the names of all the customers and staff members. */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: What are the names of the customers and staff members? */\nSELECT customer_details FROM customers UNION SELECT staff_details FROM staff\n\n/* Answer the following: Return all reviewer names and movie names together in a single list. */\nSELECT name FROM Reviewer UNION SELECT title FROM Movie\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of students who both have friends and are liked? */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6774,
                    "db_id": "activity_1",
                    "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                    "question": "Show the ids of all the faculty members who participate in an activity and advise a student."
                }
            ],
            "example_quality": 0.8937785308231,
            "example_similarity": 0.35890599376785315,
            "db_id": "network_1",
            "pred": "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes",
            "correct": 0
        },
        {
            "index": 901,
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the line 1 of addresses shared by some students and some teachers? */\nSELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id\n\n/* Answer the following: Show all cities where at least one customer lives in but no performer lives in. */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Which cities have at least one customer but no performer? */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Answer the following: Which cities have lower temperature in March than in July and have been once host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show name of all students who have some friends and also are liked by someone else. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3126,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
                    "question": "What are the line 1 of addresses shared by some students and some teachers?"
                }
            ],
            "example_quality": 0.8934066375753843,
            "example_similarity": 0.35878063152585726,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler AS H WHERE H.ID IN (SELECT F.student_id FROM Friend AS F) AND H.ID IN (SELECT L.liked_id FROM Likes AS L)",
            "correct": 1
        },
        {
            "index": 902,
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the line 1 of addresses shared by some students and some teachers? */\nSELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id\n\n/* Answer the following: Show all cities where at least one customer lives in but no performer lives in. */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Which cities have at least one customer but no performer? */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Answer the following: Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Answer the following: Which cities have lower temperature in March than in July and have been once host cities? */\nSELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who both have friends and are liked? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3126,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
                    "question": "What are the line 1 of addresses shared by some students and some teachers?"
                }
            ],
            "example_quality": 0.8930355689246701,
            "example_similarity": 0.3587260723728657,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler AS H WHERE H.ID IN (SELECT F.student_id FROM Friend AS F) AND H.ID IN (SELECT L.student_id FROM Likes AS L)",
            "correct": 0
        },
        {
            "index": 903,
            "question": "Count the number of likes for each student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of likes for each student id. */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8931540234441334,
            "example_similarity": 0.35872408643791154,
            "db_id": "network_1",
            "pred": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 904,
            "question": "How many likes correspond to each student id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes correspond to each student id? */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8932722158960757,
            "example_similarity": 0.35862166314885446,
            "db_id": "network_1",
            "pred": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 905,
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have likes, and numbers of likes for each. */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8932796499116602,
            "example_similarity": 0.35869567967090726,
            "db_id": "network_1",
            "pred": "SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id;",
            "correct": 1
        },
        {
            "index": 906,
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have likes, and how many likes does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8932870675166141,
            "example_similarity": 0.35870276482270735,
            "db_id": "network_1",
            "pred": "SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
            "correct": 1
        },
        {
            "index": 907,
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Give the building that the instructor who teaches the greatest number of courses lives in. */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2577,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
                }
            ],
            "example_quality": 0.8933863467512523,
            "example_similarity": 0.35872423815176074,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 908,
            "question": "Give the name of the student with the most likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Give the building that the instructor who teaches the greatest number of courses lives in. */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Give the name of the student with the most likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2577,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
                }
            ],
            "example_quality": 0.8934854073091621,
            "example_similarity": 0.35870400317273127,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 909,
            "question": "Show the names of students who have at least 2 likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: What are the names for all aircrafts with at least 2 flights? */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have at least 2 likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                }
            ],
            "example_quality": 0.8935025750778989,
            "example_similarity": 0.3588958193327434,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 910,
            "question": "What are the names of students who have 2 or more likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: What are the names for all aircrafts with at least 2 flights? */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have 2 or more likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                }
            ],
            "example_quality": 0.8935197051152758,
            "example_similarity": 0.3589688694208539,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 911,
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of schools that have more than one donator with donation amount above 8.5. */\nSELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1\n\n/* Answer the following: Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate. */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5\n\n/* Answer the following: What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5\n\n/* Answer the following: Show the names and heights of buildings with at least two institutions founded after 1880. */\nSELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2\n\n/* Answer the following: Find the name and country of origin for all artists who have release at least one song of resolution above 900. */\nSELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have a grade higher than 5 and have at least 2 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1908,
                    "db_id": "school_finance",
                    "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
                    "question": "Find the names of schools that have more than one donator with donation amount above 8.5."
                }
            ],
            "example_quality": 0.8933611558020738,
            "example_similarity": 0.3591012531312266,
            "db_id": "network_1",
            "pred": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade > 5 GROUP BY T2.student_id HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 912,
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of schools that have more than one donator with donation amount above 8.5. */\nSELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1\n\n/* Answer the following: Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate. */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5\n\n/* Answer the following: What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5\n\n/* Answer the following: Show the names and heights of buildings with at least two institutions founded after 1880. */\nSELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2\n\n/* Answer the following: Find the name and country of origin for all artists who have release at least one song of resolution above 900. */\nSELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1908,
                    "db_id": "school_finance",
                    "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
                    "question": "Find the names of schools that have more than one donator with donation amount above 8.5."
                }
            ],
            "example_quality": 0.8932029541847338,
            "example_similarity": 0.35908438990278835,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2)",
            "correct": 1
        },
        {
            "index": 913,
            "question": "How many likes does Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes does Kyle have? */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8932968692058032,
            "example_similarity": 0.3589717891518611,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
            "correct": 1
        },
        {
            "index": 914,
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Count the number of trips that did not end in San Francisco city. */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the number of likes that the high schooler named Kyle has. */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                }
            ],
            "example_quality": 0.8933905787235442,
            "example_similarity": 0.3590390244335344,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
            "correct": 1
        },
        {
            "index": 915,
            "question": "Find the average grade of all students who have some friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the title of the course with Differential Geometry as a prerequisite? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the course title of the prerequisite of course Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the average grade of all students who have some friends. */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1423,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "What is the title of the prerequisite class of International Finance course?"
                }
            ],
            "example_quality": 0.8929684500660788,
            "example_similarity": 0.35897082730897556,
            "db_id": "network_1",
            "pred": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 916,
            "question": "What is the average grade of students who have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the title of the course with Differential Geometry as a prerequisite? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: What is the course title of the prerequisite of course Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the average grade of students who have friends? */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1423,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "What is the title of the prerequisite class of International Finance course?"
                }
            ],
            "example_quality": 0.8925472430869051,
            "example_similarity": 0.3590377384559183,
            "db_id": "network_1",
            "pred": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 917,
            "question": "Find the minimum grade of students who have no friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find number of products which Sony does not make. */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: How many products are not made by Sony? */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the minimum grade of students who have no friends. */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5317,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
                    "question": "Find number of products which Sony does not make."
                }
            ],
            "example_quality": 0.8921075828894147,
            "example_similarity": 0.35896838654534885,
            "db_id": "network_1",
            "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 918,
            "question": "What is the lowest grade of students who do not have any friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find number of products which Sony does not make. */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: How many products are not made by Sony? */\nSELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')\n\n/* Answer the following: What is the title of the prerequisite class of International Finance course? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the lowest grade of students who do not have any friends? */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5317,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
                    "question": "Find number of products which Sony does not make."
                }
            ],
            "example_quality": 0.8916688805572783,
            "example_similarity": 0.3588757574065115,
            "db_id": "network_1",
            "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 919,
            "question": "Which states have both owners and professionals living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the common login name of course authors and students. */\nSELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\n\n/* Answer the following: What are the login names used both by some course authors and some students? */\nSELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\n\n/* Answer the following: Find the common personal name of course authors and students. */\nSELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n\n/* Answer the following: What are the personal names used both by some course authors and some students? */\nSELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n\n/* Answer the following: Show ids of students who play video game and play sports. */\nSELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which states have both owners and professionals living there? */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3847,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
                    "question": "Find the common login name of course authors and students."
                }
            ],
            "example_quality": 0.8917867599037884,
            "example_similarity": 0.35871496889041204,
            "db_id": "dog_kennels",
            "pred": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
            "correct": 1
        },
        {
            "index": 920,
            "question": "Find the states where both owners and professionals live.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the common login name of course authors and students. */\nSELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\n\n/* Answer the following: What are the login names used both by some course authors and some students? */\nSELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\n\n/* Answer the following: Find the common personal name of course authors and students. */\nSELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n\n/* Answer the following: What are the personal names used both by some course authors and some students? */\nSELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n\n/* Answer the following: Show ids of students who play video game and play sports. */\nSELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the states where both owners and professionals live. */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3847,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
                    "question": "Find the common login name of course authors and students."
                }
            ],
            "example_quality": 0.8919043829908495,
            "example_similarity": 0.3586716086301092,
            "db_id": "dog_kennels",
            "pred": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "correct": 1
        },
        {
            "index": 921,
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which projects have no outcome? List the project details. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: What are the details of the project with no outcomes? */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: how many states do not have rivers */\nSELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );\n\n/* Answer the following: How many enzymes do not have any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Answer the following: What is the count of enzymes without any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of the dogs who have gone through any treatments? */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4359,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                    "question": "Which projects have no outcome? List the project details."
                }
            ],
            "example_quality": 0.8916691168472174,
            "example_similarity": 0.35862094714831855,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 922,
            "question": "Find the average age of the dogs who went through treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which projects have no outcome? List the project details. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: What are the details of the project with no outcomes? */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: how many states do not have rivers */\nSELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );\n\n/* Answer the following: How many enzymes do not have any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Answer the following: What is the count of enzymes without any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the average age of the dogs who went through treatments. */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4359,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                    "question": "Which projects have no outcome? List the project details."
                }
            ],
            "example_quality": 0.891434361042292,
            "example_similarity": 0.35844905631507656,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 923,
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id. */\nSELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n\n/* Answer the following: What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3? */\nSELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n\n/* Answer the following: What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: What is the id, first name, and last name of the driver who was in the first position for laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2939,
                    "db_id": "sakila_1",
                    "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
                    "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id."
                }
            ],
            "example_quality": 0.8910426560127934,
            "example_similarity": 0.3583862573650988,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
            "correct": 1
        },
        {
            "index": 924,
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id. */\nSELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n\n/* Answer the following: What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3? */\nSELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n\n/* Answer the following: What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: What is the id, first name, and last name of the driver who was in the first position for laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2939,
                    "db_id": "sakila_1",
                    "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
                    "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id."
                }
            ],
            "example_quality": 0.890651798829679,
            "example_similarity": 0.3583672139778796,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
            "correct": 1
        },
        {
            "index": 925,
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average longitude of stations that never had bike availability more than 10? */\nSELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)\n\n/* Answer the following: What is the mean longitude for all stations that have never had more than 10 bikes available? */\nSELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)\n\n/* Answer the following: List the project details of the projects launched by the organisation */\nSELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\n\n/* Answer the following: What are the details for the projects which were launched by the organization with the most projects? */\nSELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\n\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 152,
                    "db_id": "bike_1",
                    "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
                    "question": "What is the average longitude of stations that never had bike availability more than 10?"
                }
            ],
            "example_quality": 0.8898243120755136,
            "example_similarity": 0.35834216169905314,
            "db_id": "dog_kennels",
            "pred": "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment) > 1000)",
            "correct": 1
        },
        {
            "index": 926,
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average longitude of stations that never had bike availability more than 10? */\nSELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)\n\n/* Answer the following: What is the mean longitude for all stations that have never had more than 10 bikes available? */\nSELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)\n\n/* Answer the following: List the project details of the projects launched by the organisation */\nSELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\n\n/* Answer the following: What are the details for the projects which were launched by the organization with the most projects? */\nSELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\n\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 152,
                    "db_id": "bike_1",
                    "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
                    "question": "What is the average longitude of stations that never had bike availability more than 10?"
                }
            ],
            "example_quality": 0.8889986125497589,
            "example_similarity": 0.3583325031521043,
            "db_id": "dog_kennels",
            "pred": "SELECT name FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) <= 1000)",
            "correct": 0
        },
        {
            "index": 927,
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of students who registered courses or attended courses? */\nSELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\n\n/* Answer the following: What are the ids of the students who either registered or attended a course? */\nSELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\n\n/* Answer the following: Show ids for all employees who don't have a certificate. */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which first names are used for professionals or owners but are not used as dog names? */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 100,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
                    "question": "What are the id of students who registered courses or attended courses?"
                }
            ],
            "example_quality": 0.8885401190683453,
            "example_similarity": 0.3581394203324631,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs)",
            "correct": 1
        },
        {
            "index": 928,
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of students who registered courses or attended courses? */\nSELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\n\n/* Answer the following: What are the ids of the students who either registered or attended a course? */\nSELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\n\n/* Answer the following: Show ids for all employees who don't have a certificate. */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names that are used for professionals or owners but are not used as dog names. */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 100,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
                    "question": "What are the id of students who registered courses or attended courses?"
                }
            ],
            "example_quality": 0.8880826137194351,
            "example_similarity": 0.3579507114281775,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs",
            "correct": 1
        },
        {
            "index": 929,
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Answer the following: Give the names, details, and data types of characteristics that are not found in any product. */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Answer the following: List the date, theme and sales of the journal which did not have any of the listed editors serving on committee. */\nSELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID\n\n/* Answer the following: Show the first names and last names of customers without any account. */\nSELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who do not have any accounts? */\nSELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professional did not operate any treatment on dogs? List the professional's id, role and email. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.8879798844636326,
            "example_similarity": 0.35788408778581166,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "correct": 1
        },
        {
            "index": 930,
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Answer the following: Give the names, details, and data types of characteristics that are not found in any product. */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Answer the following: List the date, theme and sales of the journal which did not have any of the listed editors serving on committee. */\nSELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID\n\n/* Answer the following: Show the first names and last names of customers without any account. */\nSELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who do not have any accounts? */\nSELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the id, role and email of the professionals who did not perform any treatment on dogs. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.8878773761309611,
            "example_similarity": 0.3578560472398939,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "correct": 1
        },
        {
            "index": 931,
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the customer id, first and last name with most number of accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the id and full name of the customer with the most accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id, first and last name with least number of accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Return the id and full name of the customer who has the fewest accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Find the id and first name of the student that has the most number of assessment notes? */\nSELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner owns the most dogs? List the owner id, first name and last name. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1568,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id, first and last name with most number of accounts."
                }
            ],
            "example_quality": 0.8879392722312529,
            "example_similarity": 0.35778397612014945,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 932,
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the customer id, first and last name with most number of accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the id and full name of the customer with the most accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id, first and last name with least number of accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Return the id and full name of the customer who has the fewest accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Find the id and first name of the student that has the most number of assessment notes? */\nSELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the owner id, first name and last name of the owner who has the most dogs. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1568,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id, first and last name with most number of accounts."
                }
            ],
            "example_quality": 0.888001035507295,
            "example_similarity": 0.35783688893991555,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 933,
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. */\nSELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1\n\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Answer the following: Show id, first and last names for all customers with at least two cards. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and full names of customers who hold two or more cards? */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids, scores, and dates of the games which caused at least two injury accidents? */\nSELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two treatments? List the professional's id, role, and first name. */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2648,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
                    "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code."
                }
            ],
            "example_quality": 0.8879672347803473,
            "example_similarity": 0.35784206453738127,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 934,
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. */\nSELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1\n\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Answer the following: Show id, first and last names for all customers with at least two cards. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and full names of customers who hold two or more cards? */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids, scores, and dates of the games which caused at least two injury accidents? */\nSELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the id, role, and first name of the professionals who have performed two or more treatments? */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2648,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
                    "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code."
                }
            ],
            "example_quality": 0.8879335064318299,
            "example_similarity": 0.3578914724229366,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "correct": 1
        },
        {
            "index": 935,
            "question": "What is the name of the breed with the most dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the name of the breed with the most dogs? */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8880533636442021,
            "example_similarity": 0.3580348914942421,
            "db_id": "dog_kennels",
            "pred": "SELECT t1.breed_name FROM Breeds AS t1 JOIN Dogs AS t2 ON t1.breed_code = t2.breed_code GROUP BY t1.breed_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 936,
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which course is enrolled in by the most students? Give me the course name. */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which breed do the most dogs have? Give me the breed name. */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                }
            ],
            "example_quality": 0.8881729647514198,
            "example_similarity": 0.3581268316839821,
            "db_id": "dog_kennels",
            "pred": "SELECT t1.breed_name FROM Breeds AS t1 JOIN Dogs AS t2 ON t1.breed_code = t2.breed_code GROUP BY t1.breed_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 937,
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and surname of the driver who participated the most number of races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids and last names of all drivers who participated in the most races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which part fault requires the most number of skills to fix? List part id and name. */\nSELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and name of the stadium where the most injury accidents happened? */\nSELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the id and name of the stadium where the largest number of injury accidents occurred. */\nSELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2232,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and surname of the driver who participated the most number of races?"
                }
            ],
            "example_quality": 0.8882671991414773,
            "example_similarity": 0.35811751399217145,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 938,
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and surname of the driver who participated the most number of races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids and last names of all drivers who participated in the most races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which part fault requires the most number of skills to fix? List part id and name. */\nSELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and name of the stadium where the most injury accidents happened? */\nSELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the id and name of the stadium where the largest number of injury accidents occurred. */\nSELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2232,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and surname of the driver who participated the most number of races?"
                }
            ],
            "example_quality": 0.8883612326053301,
            "example_similarity": 0.3581475990080837,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 939,
            "question": "What is the description of the treatment type that costs the least money in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the emails of customers who has filed a complaints of the product with the most complaints. */\nSELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints? */\nSELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is detail of the student who registered the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the details of the student who registered for the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the least common media type in all tracks? */\nSELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the description of the treatment type that costs the least money in total? */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5777,
                    "db_id": "customer_complaints",
                    "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
                    "question": "Find the emails of customers who has filed a complaints of the product with the most complaints."
                }
            ],
            "example_quality": 0.8882978898154852,
            "example_similarity": 0.35814245221123064,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 940,
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the emails of customers who has filed a complaints of the product with the most complaints. */\nSELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints? */\nSELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is detail of the student who registered the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the details of the student who registered for the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the least common media type in all tracks? */\nSELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the description of the treatment type whose total cost is the lowest. */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5777,
                    "db_id": "customer_complaints",
                    "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
                    "question": "Find the emails of customers who has filed a complaints of the product with the most complaints."
                }
            ],
            "example_quality": 0.8882346817975338,
            "example_similarity": 0.3580364066528455,
            "db_id": "dog_kennels",
            "pred": "SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_code ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 941,
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and surname of the driver who participated the most number of races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids and last names of all drivers who participated in the most races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which part fault requires the most number of skills to fix? List part id and name. */\nSELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the customer that has purchased the most items? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Give me the name of the customer who ordered the most items in total. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2232,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and surname of the driver who participated the most number of races?"
                }
            ],
            "example_quality": 0.88821672908199,
            "example_similarity": 0.3579571340211369,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 942,
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and surname of the driver who participated the most number of races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids and last names of all drivers who participated in the most races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which part fault requires the most number of skills to fix? List part id and name. */\nSELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the customer that has purchased the most items? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Give me the name of the customer who ordered the most items in total. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2232,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and surname of the driver who participated the most number of races?"
                }
            ],
            "example_quality": 0.8881988144826147,
            "example_similarity": 0.35793835027322557,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 943,
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. */\nSELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1\n\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Answer the following: What are the ids and names of the medicine that can interact with two or more enzymes? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: For every medicine id, what are the names of the medicines that can interact with more than one enzyme? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: What is the id and trade name of the medicines can interact with at least 3 enzymes? */\nSELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two types of treatments? List the professional id and cell phone. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2648,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
                    "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code."
                }
            ],
            "example_quality": 0.8882643512647117,
            "example_similarity": 0.3579158316586233,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2",
            "correct": 1
        },
        {
            "index": 944,
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. */\nSELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1\n\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Answer the following: What are the ids and names of the medicine that can interact with two or more enzymes? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: For every medicine id, what are the names of the medicines that can interact with more than one enzyme? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: What is the id and trade name of the medicines can interact with at least 3 enzymes? */\nSELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id and cell phone of the professionals who operate two or more types of treatments. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2648,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
                    "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code."
                }
            ],
            "example_quality": 0.8883297491976939,
            "example_similarity": 0.3578254469467904,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2",
            "correct": 1
        },
        {
            "index": 945,
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all player names who have an overall rating higher than the average. */\nSELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )\n\n/* Answer the following: what is the highest point in the smallest state */\nSELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Answer the following: how high is the highest point in the largest state */\nSELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the first name and last name of the professionals who have done treatment with cost below average? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1298,
                    "db_id": "soccer_1",
                    "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
                    "question": "List all player names who have an overall rating higher than the average."
                }
            ],
            "example_quality": 0.8877887337020561,
            "example_similarity": 0.3577468785391834,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
            "correct": 0
        },
        {
            "index": 946,
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all player names who have an overall rating higher than the average. */\nSELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )\n\n/* Answer the following: what is the highest point in the smallest state */\nSELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Answer the following: how high is the highest point in the largest state */\nSELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1298,
                    "db_id": "soccer_1",
                    "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
                    "question": "List all player names who have an overall rating higher than the average."
                }
            ],
            "example_quality": 0.8872488620023925,
            "example_similarity": 0.3575855292816546,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
            "correct": 0
        },
        {
            "index": 947,
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the date of each treatment, together with the first name of the professional who operated it. */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8873679233941534,
            "example_similarity": 0.35751028450420663,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "correct": 1
        },
        {
            "index": 948,
            "question": "What are the date and the operating professional's first name of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the date and the operating professional's first name of each treatment? */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8874867336015435,
            "example_similarity": 0.3575652598615156,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "correct": 1
        },
        {
            "index": 949,
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the cost of each treatment and the corresponding treatment type description. */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8876052934186125,
            "example_similarity": 0.3576130830807863,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "correct": 1
        },
        {
            "index": 950,
            "question": "What are the cost and treatment type description of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the cost and treatment type description of each treatment? */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8877236036360666,
            "example_similarity": 0.35769498708602077,
            "db_id": "dog_kennels",
            "pred": "SELECT T2.treatment_type_description, T1.cost_of_treatment FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "correct": 1
        },
        {
            "index": 951,
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Wat is the tax source system code and master customer id of the taxes related to each parking fine id? */\nSELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id\n\n/* Answer the following: Show codes and fates of missions, and names of ships involved. */\nSELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID\n\n/* Answer the following: What are the mission codes, fates, and names of the ships involved? */\nSELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID\n\n/* Answer the following: List the id and type of each thing, and the details of the organization that owns it. */\nSELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id\n\n/* Answer the following: What is the document type name and the document type description and creation date for all the documents? */\nSELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each owner's first name, last name, and the size of his for her dog. */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2651,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
                    "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?"
                }
            ],
            "example_quality": 0.8878416650412863,
            "example_similarity": 0.35772934180493565,
            "db_id": "dog_kennels",
            "pred": "SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;",
            "correct": 0
        },
        {
            "index": 952,
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Wat is the tax source system code and master customer id of the taxes related to each parking fine id? */\nSELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id\n\n/* Answer the following: Show codes and fates of missions, and names of ships involved. */\nSELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID\n\n/* Answer the following: What are the mission codes, fates, and names of the ships involved? */\nSELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID\n\n/* Answer the following: List the id and type of each thing, and the details of the organization that owns it. */\nSELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id\n\n/* Answer the following: What is the document type name and the document type description and creation date for all the documents? */\nSELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name, last name, and the size of their dog? */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2651,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
                    "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?"
                }
            ],
            "example_quality": 0.8879594784183438,
            "example_similarity": 0.35781298241772597,
            "db_id": "dog_kennels",
            "pred": "SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;",
            "correct": 0
        },
        {
            "index": 953,
            "question": "List pairs of the owner's first name and the dogs's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List pairs of the owner's first name and the dogs's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8880770445480202,
            "example_similarity": 0.35788407605358497,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "correct": 1
        },
        {
            "index": 954,
            "question": "What are each owner's first name and their dogs's name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: What are the names of climbers and the corresponding heights of the mountains that they climb? */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name and their dogs's name? */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.8881943642078232,
            "example_similarity": 0.3578417480735407,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "correct": 1
        },
        {
            "index": 955,
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the entry names of catalog with the attribute possessed by most entries. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: Find the entry names of the catalog with the attribute that have the most entries. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: Find the emails of parties with the most popular party form. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What are the party emails associated with parties that used the party form that is the most common? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What is the name and open year for the branch with most number of memberships registered in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the names of the dogs of the rarest breed and the treatment dates of them. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 316,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the entry names of catalog with the attribute possessed by most entries."
                }
            ],
            "example_quality": 0.88781226377353,
            "example_similarity": 0.35778940712671625,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE B.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 956,
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the entry names of catalog with the attribute possessed by most entries. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: Find the entry names of the catalog with the attribute that have the most entries. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: Find the emails of parties with the most popular party form. */\nSELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What are the party emails associated with parties that used the party form that is the most common? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What is the name and open year for the branch with most number of memberships registered in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are of the rarest breed? Show their names and treatment dates. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 316,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the entry names of catalog with the attribute possessed by most entries."
                }
            ],
            "example_quality": 0.8874309627125303,
            "example_similarity": 0.35770714086104277,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE B.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 957,
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\". */\nSELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n\n/* Answer the following: Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names. */\nSELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n\n/* Answer the following: Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\". */\nSELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\n\n/* Answer the following: What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have? */\nSELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\n\n/* Answer the following: Show the first name and last name for the customer with account name 900. */\nSELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1237,
                    "db_id": "apartment_rentals",
                    "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                    "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\"."
                }
            ],
            "example_quality": 0.8874490723698442,
            "example_similarity": 0.3576619392797383,
            "db_id": "dog_kennels",
            "pred": "SELECT T2.first_name, T3.name FROM Owners AS T1 JOIN Dogs AS T3 ON T1.owner_id = T3.owner_id WHERE T1.state = \"Virginia\"",
            "correct": 0
        },
        {
            "index": 958,
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\". */\nSELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n\n/* Answer the following: Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names. */\nSELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n\n/* Answer the following: Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\". */\nSELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\n\n/* Answer the following: What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have? */\nSELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\n\n/* Answer the following: Show the first name and last name for the customer with account name 900. */\nSELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names of owners living in Virginia and the names of dogs they own. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1237,
                    "db_id": "apartment_rentals",
                    "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                    "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\"."
                }
            ],
            "example_quality": 0.8874671442199403,
            "example_similarity": 0.35762530571007,
            "db_id": "dog_kennels",
            "pred": "SELECT T2.first_name, T3.name FROM Owners AS T2 JOIN Dogs AS T3 ON T2.owner_id = T3.owner_id WHERE T2.state = \"Virginia\"",
            "correct": 1
        },
        {
            "index": 959,
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: Find the name and credit score of the customers who have some loans. */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the different names and credit scores of customers who have taken a loan? */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the distinct names and nationalities of the architects who have ever built a mill? */\nSELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of the dogs who have gone through a treatment? */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 688,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show distinct first and last names for all customers with an account."
                }
            ],
            "example_quality": 0.8875613158920549,
            "example_similarity": 0.3576695311277439,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "correct": 1
        },
        {
            "index": 960,
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: Find the name and credit score of the customers who have some loans. */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the different names and credit scores of customers who have taken a loan? */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Answer the following: What are the distinct names and nationalities of the architects who have ever built a mill? */\nSELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the arriving date and the departing date of the dogs that received a treatment. */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 688,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show distinct first and last names for all customers with an account."
                }
            ],
            "example_quality": 0.8876552913731858,
            "example_similarity": 0.35758207774710493,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "correct": 1
        },
        {
            "index": 961,
            "question": "List the last name of the owner owning the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how high is the highest point in the largest state */\nSELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Answer the following: what is the highest point in the smallest state */\nSELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Answer the following: what is the capital of the state with the highest point */\nSELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Answer the following: what is the capital of the state with the highest elevation */\nSELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Answer the following: List all player names who have an overall rating higher than the average. */\nSELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the last name of the owner owning the youngest dog. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 7563,
                    "db_id": "geo",
                    "query": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "how high is the highest point in the largest state"
                }
            ],
            "example_quality": 0.8876055054988399,
            "example_similarity": 0.35765172963692027,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = (SELECT MIN(age) FROM Dogs)",
            "correct": 0
        },
        {
            "index": 962,
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how high is the highest point in the largest state */\nSELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Answer the following: what is the highest point in the smallest state */\nSELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Answer the following: what is the capital of the state with the highest point */\nSELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Answer the following: what is the capital of the state with the highest elevation */\nSELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Answer the following: List all player names who have an overall rating higher than the average. */\nSELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Who owns the youngest dog? Give me his or her last name. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 7563,
                    "db_id": "geo",
                    "query": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "how high is the highest point in the largest state"
                }
            ],
            "example_quality": 0.8875558231294305,
            "example_similarity": 0.3575011989344846,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs)",
            "correct": 0
        },
        {
            "index": 963,
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Answer the following: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Give me the names of members whose address is in Harford or Waterbury. */\nSELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\n\n/* Answer the following: What are the life spans of representatives from New York state or Indiana state? */\nSELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.8876725875913937,
            "example_similarity": 0.35749428819192147,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "correct": 1
        },
        {
            "index": 964,
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Answer the following: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Answer the following: Give me the names of members whose address is in Harford or Waterbury. */\nSELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'\n\n/* Answer the following: What are the life spans of representatives from New York state or Indiana state? */\nSELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.8877891098034358,
            "example_similarity": 0.3575219621688086,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "correct": 1
        },
        {
            "index": 965,
            "question": "What are the arriving date and the departing date of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of all the dogs? */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8879053905186655,
            "example_similarity": 0.3575526719103384,
            "db_id": "dog_kennels",
            "pred": "SELECT date_arrived, date_departed FROM Dogs",
            "correct": 1
        },
        {
            "index": 966,
            "question": "List the arrival date and the departure date for all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the arrival date and the departure date for all the dogs. */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8880214304870726,
            "example_similarity": 0.3575184660428552,
            "db_id": "dog_kennels",
            "pred": "SELECT date_arrived, date_departed FROM Dogs",
            "correct": 1
        },
        {
            "index": 967,
            "question": "How many dogs went through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs went through any treatments? */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8881372304555452,
            "example_similarity": 0.357426229902507,
            "db_id": "dog_kennels",
            "pred": "SELECT count(DISTINCT dog_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 968,
            "question": "Count the number of dogs that went through a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs that went through a treatment. */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8882527911678845,
            "example_similarity": 0.35728182993238405,
            "db_id": "dog_kennels",
            "pred": "SELECT count(DISTINCT dog_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 969,
            "question": "How many professionals have performed any treatment to dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals have performed any treatment to dogs? */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.8883681133648216,
            "example_similarity": 0.35717346913759346,
            "db_id": "dog_kennels",
            "pred": "SELECT count(DISTINCT professional_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 970,
            "question": "Find the number of professionals who have ever treated dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: From the trip record, find the number of unique bikes. */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have ever treated dogs. */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                }
            ],
            "example_quality": 0.888483197784033,
            "example_similarity": 0.3570376743123874,
            "db_id": "dog_kennels",
            "pred": "SELECT count(DISTINCT professional_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 971,
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M. */\nSELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'\n\n/* Answer the following: What are the full name, hire date, salary, and department id for employees without the letter M in their first name? */\nSELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'\n\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                }
            ],
            "example_quality": 0.8882610025962493,
            "example_similarity": 0.3569830451117471,
            "db_id": "dog_kennels",
            "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
            "correct": 1
        },
        {
            "index": 972,
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M. */\nSELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'\n\n/* Answer the following: What are the full name, hire date, salary, and department id for employees without the letter M in their first name? */\nSELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'\n\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                }
            ],
            "example_quality": 0.8880392646002098,
            "example_similarity": 0.35696976107533385,
            "db_id": "dog_kennels",
            "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
            "correct": 1
        },
        {
            "index": 973,
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                }
            ],
            "example_quality": 0.8879566880771803,
            "example_similarity": 0.35695183590573976,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
            "correct": 1
        },
        {
            "index": 974,
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                }
            ],
            "example_quality": 0.8878742811157995,
            "example_similarity": 0.35695011626620726,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
            "correct": 1
        },
        {
            "index": 975,
            "question": "How many dogs have an age below the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of rooms whose price is higher than the average price. */\nSELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );\n\n/* Answer the following: What are the name of rooms that cost more than the average. */\nSELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );\n\n/* Answer the following: Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date. */\nSELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n\n/* Answer the following: Return the claim start date for the claims whose claimed amount is no more than the average */\nSELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n\n/* Answer the following: what state has the smallest population */\nSELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have an age below the average? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2635,
                    "db_id": "inn_1",
                    "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
                    "question": "Find the name of rooms whose price is higher than the average price."
                }
            ],
            "example_quality": 0.8875558264196611,
            "example_similarity": 0.35676953890979657,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);",
            "correct": 1
        },
        {
            "index": 976,
            "question": "Count the number of dogs of an age below the average.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of rooms whose price is higher than the average price. */\nSELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );\n\n/* Answer the following: What are the name of rooms that cost more than the average. */\nSELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );\n\n/* Answer the following: Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date. */\nSELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n\n/* Answer the following: Return the claim start date for the claims whose claimed amount is no more than the average */\nSELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n\n/* Answer the following: what state has the smallest population */\nSELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs of an age below the average. */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 2635,
                    "db_id": "inn_1",
                    "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
                    "question": "Find the name of rooms whose price is higher than the average price."
                }
            ],
            "example_quality": 0.8872380242946214,
            "example_similarity": 0.35665351913511734,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);",
            "correct": 1
        },
        {
            "index": 977,
            "question": "How much does the most recent treatment cost?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most recent treatment cost? */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8873534408511263,
            "example_similarity": 0.3565400422966909,
            "db_id": "dog_kennels",
            "pred": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 978,
            "question": "Show me the cost of the most recently performed treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Show me the cost of the most recently performed treatment. */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8874686213819535,
            "example_similarity": 0.35651673563793246,
            "db_id": "dog_kennels",
            "pred": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 979,
            "question": "How many dogs have not gone through any treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: Count the number of products that were never ordered. */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many students are not involved in any behavior incident? */\nSELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )\n\n/* Answer the following: How many customers did not have any event? */\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n\n/* Answer the following: How many colors are never used by any product? */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have not gone through any treatment? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.8875835666103682,
            "example_similarity": 0.3565941398735377,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "correct": 1
        },
        {
            "index": 980,
            "question": "Tell me the number of dogs that have not received any treatment .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: Count the number of products that were never ordered. */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many students are not involved in any behavior incident? */\nSELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )\n\n/* Answer the following: How many customers did not have any event? */\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n\n/* Answer the following: How many colors are never used by any product? */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the number of dogs that have not received any treatment . */\nSELECT ",
            "response": "count(*) from dogs where dog_id not in ( select dog_id from treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.8870180051478407,
            "example_similarity": 0.35647929861611816,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "correct": 1
        },
        {
            "index": 981,
            "question": "How many owners temporarily do not have any dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: Count the number of products that were never ordered. */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many students are not involved in any behavior incident? */\nSELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )\n\n/* Answer the following: How many customers did not have any event? */\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n\n/* Answer the following: How many colors are never used by any product? */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many owners temporarily do not have any dogs? */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.8871331753770477,
            "example_similarity": 0.35655658320702477,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NOT NULL)",
            "correct": 1
        },
        {
            "index": 982,
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: Count the number of products that were never ordered. */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many students are not involved in any behavior incident? */\nSELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )\n\n/* Answer the following: How many customers did not have any event? */\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n\n/* Answer the following: How many colors are never used by any product? */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of owners who do not own any dogs at this moment. */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.88724811104367,
            "example_similarity": 0.3563904980154085,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
            "correct": 0
        },
        {
            "index": 983,
            "question": "How many professionals did not operate any treatment on dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: Count the number of products that were never ordered. */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many students are not involved in any behavior incident? */\nSELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )\n\n/* Answer the following: How many customers did not have any event? */\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n\n/* Answer the following: How many colors are never used by any product? */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals did not operate any treatment on dogs? */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.8873628128635644,
            "example_similarity": 0.3564582906456644,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "correct": 1
        },
        {
            "index": 984,
            "question": "Find the number of professionals who have not treated any dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: Count the number of products that were never ordered. */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many students are not involved in any behavior incident? */\nSELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )\n\n/* Answer the following: How many customers did not have any event? */\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )\n\n/* Answer the following: How many colors are never used by any product? */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have not treated any dogs. */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.8874772815496788,
            "example_similarity": 0.3563401292512076,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "correct": 1
        },
        {
            "index": 985,
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the state, account type, and credit score of the customer whose number of loan is 0. */\nSELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n\n/* Answer the following: What are the states, account types, and credit scores for customers who have 0 loans? */\nSELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3025,
                    "db_id": "loan_1",
                    "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
                    "question": "Find the state, account type, and credit score of the customer whose number of loan is 0."
                }
            ],
            "example_quality": 0.8874978044188592,
            "example_similarity": 0.35635843421319546,
            "db_id": "dog_kennels",
            "pred": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'",
            "correct": 1
        },
        {
            "index": 986,
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the state, account type, and credit score of the customer whose number of loan is 0. */\nSELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n\n/* Answer the following: What are the states, account types, and credit scores for customers who have 0 loans? */\nSELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3025,
                    "db_id": "loan_1",
                    "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
                    "question": "Find the state, account type, and credit score of the customer whose number of loan is 0."
                }
            ],
            "example_quality": 0.8875182856595014,
            "example_similarity": 0.3563511129595064,
            "db_id": "dog_kennels",
            "pred": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'",
            "correct": 1
        },
        {
            "index": 987,
            "question": "What is the average age of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of all the dogs? */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8876322488959153,
            "example_similarity": 0.3566166993176881,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 988,
            "question": "Compute the average age of all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Answer the following: What is the average number of bedrooms of all apartments? */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Answer the following: Find the average number of bedrooms of all the apartments. */\nSELECT avg(bedroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Compute the average age of all the dogs. */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                }
            ],
            "example_quality": 0.8877459814375187,
            "example_similarity": 0.35673661315956445,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 989,
            "question": "What is the age of the oldest dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: Return the maximum enrollment across all schools. */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: When is the last day any resident moved in? */\nSELECT max(date_moved_in) FROM Residents\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the age of the oldest dog? */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 940,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
                }
            ],
            "example_quality": 0.8878594839840934,
            "example_similarity": 0.3567574932851737,
            "db_id": "dog_kennels",
            "pred": "SELECT max(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 990,
            "question": "Tell me the age of the oldest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: Return the maximum enrollment across all schools. */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: When is the last day any resident moved in? */\nSELECT max(date_moved_in) FROM Residents\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the age of the oldest dog. */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 940,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
                }
            ],
            "example_quality": 0.8879727572325944,
            "example_similarity": 0.35660944220197877,
            "db_id": "dog_kennels",
            "pred": "SELECT max(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 991,
            "question": "How much does each charge type costs? List both charge type and amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does each charge type costs? List both charge type and amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8880858018771629,
            "example_similarity": 0.35645668771037153,
            "db_id": "dog_kennels",
            "pred": "SELECT charge_type, charge_amount FROM Charges",
            "correct": 1
        },
        {
            "index": 992,
            "question": "List each charge type and its amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each charge type and its amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8881986186091416,
            "example_similarity": 0.35632441090344386,
            "db_id": "dog_kennels",
            "pred": "SELECT charge_type, charge_amount FROM Charges",
            "correct": 1
        },
        {
            "index": 993,
            "question": "How much does the most expensive charge type costs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: Return the maximum enrollment across all schools. */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: When is the last day any resident moved in? */\nSELECT max(date_moved_in) FROM Residents\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most expensive charge type costs? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 940,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
                }
            ],
            "example_quality": 0.8883112081170881,
            "example_similarity": 0.35616567955039213,
            "db_id": "dog_kennels",
            "pred": "SELECT max(charge_amount) FROM Charges",
            "correct": 1
        },
        {
            "index": 994,
            "question": "What is the charge amount of the most expensive charge type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: Return the maximum enrollment across all schools. */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: When is the last day any resident moved in? */\nSELECT max(date_moved_in) FROM Residents\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the charge amount of the most expensive charge type? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 940,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
                }
            ],
            "example_quality": 0.8884235710867892,
            "example_similarity": 0.3561201698509269,
            "db_id": "dog_kennels",
            "pred": "SELECT max(charge_amount) FROM Charges",
            "correct": 1
        },
        {
            "index": 995,
            "question": "List the email, cell phone and home phone of all the professionals.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: Show ids, customer ids, names for all accounts. */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the email, cell phone and home phone of all the professionals. */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                }
            ],
            "example_quality": 0.8885357082012748,
            "example_similarity": 0.3562983365043179,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address, cell_number, home_phone FROM Professionals",
            "correct": 1
        },
        {
            "index": 996,
            "question": "What are the email, cell phone and home phone of each professional?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: Show ids, customer ids, names for all accounts. */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the email, cell phone and home phone of each professional? */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                }
            ],
            "example_quality": 0.8886476201408318,
            "example_similarity": 0.3563462072417999,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address, cell_number, home_phone FROM Professionals",
            "correct": 1
        },
        {
            "index": 997,
            "question": "What are all the possible breed type and size type combinations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each classroom report the grade that is taught in it. Report just the classroom number and the grade number. */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: What are the grade number and classroom number of each class in the list? */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: Report the first name and last name of all the teachers. */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: What are the first name and last name of all the teachers? */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: Report the first name and last name of all the students. */\nSELECT DISTINCT firstname ,  lastname FROM list\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are all the possible breed type and size type combinations? */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4037,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT classroom ,  grade FROM list",
                    "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number."
                }
            ],
            "example_quality": 0.8887593075830175,
            "example_similarity": 0.35628572706564987,
            "db_id": "dog_kennels",
            "pred": "SELECT breed_code, size_code FROM Dogs",
            "correct": 1
        },
        {
            "index": 998,
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each classroom report the grade that is taught in it. Report just the classroom number and the grade number. */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: What are the grade number and classroom number of each class in the list? */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: Report the first name and last name of all the teachers. */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: What are the first name and last name of all the teachers? */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: Report the first name and last name of all the students. */\nSELECT DISTINCT firstname ,  lastname FROM list\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the distinct breed type and size type combinations for dogs. */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4037,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT classroom ,  grade FROM list",
                    "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number."
                }
            ],
            "example_quality": 0.8888707712026738,
            "example_similarity": 0.3562009167395771,
            "db_id": "dog_kennels",
            "pred": "SELECT DISTINCT breed_code, size_code FROM Dogs",
            "correct": 1
        },
        {
            "index": 999,
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. */\nSELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: For each journal_committee, find the editor name and the journal theme. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: Show the names of members and the location of the performances they attended. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID\n\n/* Answer the following: For each nomination, show the name of the artwork and name of the festival where it is nominated. */\nSELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the first name of all the professionals along with the description of the treatment they have done. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3135,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description."
                }
            ],
            "example_quality": 0.8887679121923437,
            "example_similarity": 0.3562150395924865,
            "db_id": "dog_kennels",
            "pred": "SELECT T2.first_name, T3.treatment_type_description FROM Professionals AS T2 JOIN Treatments AS T1 ON T2.professional_id = T1.professional_id JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code",
            "correct": 1
        },
        {
            "index": 1000,
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. */\nSELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: For each journal_committee, find the editor name and the journal theme. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: Show the names of members and the location of the performances they attended. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID\n\n/* Answer the following: For each nomination, show the name of the artwork and name of the festival where it is nominated. */\nSELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each professional's first name and description of the treatment they have performed? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3135,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description."
                }
            ],
            "example_quality": 0.8886652589000344,
            "example_similarity": 0.35616896262534786,
            "db_id": "dog_kennels",
            "pred": "SELECT T2.first_name, T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "correct": 0
        },
        {
            "index": 1001,
            "question": "How many singers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are there? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8887764824176169,
            "example_similarity": 0.3564488773843272,
            "db_id": "singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 1002,
            "question": "What is the count of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the count of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8888874839321703,
            "example_similarity": 0.3563794360764273,
            "db_id": "singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 1003,
            "question": "List the name of singers in ascending order of net worth.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of the books in ascending order of issues. */\nSELECT Title FROM book ORDER BY Issues ASC\n\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Answer the following: Return all players sorted by college in ascending alphabetical order. */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are all the players who played in match season, sorted by college in ascending alphabetical order? */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are the birthdays of people in ascending order of height? */\nSELECT Birth_Date FROM People ORDER BY Height ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers in ascending order of net worth. */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 216,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book ORDER BY Issues ASC",
                    "question": "List the titles of the books in ascending order of issues."
                }
            ],
            "example_quality": 0.8889982641077115,
            "example_similarity": 0.3566150673019239,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "correct": 1
        },
        {
            "index": 1004,
            "question": "What are the names of singers ordered by ascending net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of the books in ascending order of issues. */\nSELECT Title FROM book ORDER BY Issues ASC\n\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Answer the following: Return all players sorted by college in ascending alphabetical order. */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are all the players who played in match season, sorted by college in ascending alphabetical order? */\nSELECT player FROM match_season ORDER BY College ASC\n\n/* Answer the following: What are the birthdays of people in ascending order of height? */\nSELECT Birth_Date FROM People ORDER BY Height ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of singers ordered by ascending net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 216,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book ORDER BY Issues ASC",
                    "question": "List the titles of the books in ascending order of issues."
                }
            ],
            "example_quality": 0.8891088236056123,
            "example_similarity": 0.3566329788487913,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "correct": 1
        },
        {
            "index": 1005,
            "question": "What are the birth year and citizenship of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth year and citizenship of singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8892191630846115,
            "example_similarity": 0.3567309939893778,
            "db_id": "singer",
            "pred": "SELECT Birth_Year, Citizenship FROM singer",
            "correct": 1
        },
        {
            "index": 1006,
            "question": "What are the birth years and citizenships of the singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: Show all allergies and their types. */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Answer the following: What are the allergies and their types? */\nSELECT allergy ,  allergytype FROM Allergy_type\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth years and citizenships of the singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                }
            ],
            "example_quality": 0.8893292832008295,
            "example_similarity": 0.3568261512592285,
            "db_id": "singer",
            "pred": "SELECT Birth_Year, Citizenship FROM singer",
            "correct": 1
        },
        {
            "index": 1007,
            "question": "List the name of singers whose citizenship is not \"France\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers whose citizenship is not \"France\". */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8894391846077803,
            "example_similarity": 0.3569376357263093,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "correct": 1
        },
        {
            "index": 1008,
            "question": "What are the names of the singers who are not French citizens?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the hosts of competitions whose theme is not \"Aliens\"? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Return the hosts of competitions for which the theme is not Aliens? */\nSELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who are not French citizens? */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.8895488679563837,
            "example_similarity": 0.3569921251658768,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Citizenship != 'French'",
            "correct": 0
        },
        {
            "index": 1009,
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors of age either 24 or 25. */\nSELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\n\n/* Answer the following: Show the names of people aged either 35 or 36. */\nSELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\n\n/* Answer the following: Show the name of technicians aged either 36 or 37 */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: What are the names of the technicians aged either 36 or 37? */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: Find the official names of cities with population bigger than 1500 or smaller than 500. */\nSELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name of singers whose birth year is either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 654,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                    "question": "Show the names of editors of age either 24 or 25."
                }
            ],
            "example_quality": 0.8896017007362653,
            "example_similarity": 0.3572168291918719,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "correct": 1
        },
        {
            "index": 1010,
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors of age either 24 or 25. */\nSELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\n\n/* Answer the following: Show the names of people aged either 35 or 36. */\nSELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\n\n/* Answer the following: Show the name of technicians aged either 36 or 37 */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: What are the names of the technicians aged either 36 or 37? */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: Find the official names of cities with population bigger than 1500 or smaller than 500. */\nSELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers whose birth years are either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 654,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                    "question": "Show the names of editors of age either 24 or 25."
                }
            ],
            "example_quality": 0.889654428896781,
            "example_similarity": 0.35738353588665966,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "correct": 1
        },
        {
            "index": 1011,
            "question": "What is the name of the singer with the largest net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer with the largest net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8897635738731442,
            "example_similarity": 0.3575022896681986,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 1012,
            "question": "What is the name of the singer who is worth the most?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer who is worth the most? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                }
            ],
            "example_quality": 0.8898725031479732,
            "example_similarity": 0.3576225805822398,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 1013,
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenship of singers and the number of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.889981217360068,
            "example_similarity": 0.35763453563075986,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1014,
            "question": "For each citizenship, how many singers are from that country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: Show all origins and the number of flights from each origin. */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, how many singers are from that country? */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                }
            ],
            "example_quality": 0.8900897171457088,
            "example_similarity": 0.35757520954476735,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1015,
            "question": "Please show the most common citizenship of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Please show the most common citizenship of singers. */\nSELECT ",
            "response": "Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                }
            ],
            "example_quality": 0.8901980031386688,
            "example_similarity": 0.3576792023608157,
            "db_id": "singer",
            "pred": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 1016,
            "question": "What is the most common singer citizenship ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is id of students who registered some courses but the least number of courses in these students? */\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What are the ids of the students who registered for some courses but had the least number of courses for all students? */\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: Which destination has least number of flights? */\nSELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What destination has the fewest number of flights? */\nSELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is the id of the department with the least number of staff? */\nSELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the most common singer citizenship ? */\nSELECT ",
            "response": "citizenship from singer group by citizenship order by count(*) desc limit 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 59,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
                    "question": "what is id of students who registered some courses but the least number of courses in these students?"
                }
            ],
            "example_quality": 0.8895678869938473,
            "example_similarity": 0.3576225216253145,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 1017,
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: For each city, what is the highest latitude for its stations? */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: display the employee ID for each employee and the date on which he ended his previous job. */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Answer the following: What are the employee ids for each employee and final dates of employment at their last job? */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Answer the following: Please show the different statuses of cities and the average population of cities with each status. */\nSELECT Status ,  avg(Population) FROM city GROUP BY Status\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenships and the maximum net worth of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                }
            ],
            "example_quality": 0.8896371417755643,
            "example_similarity": 0.3576705041301366,
            "db_id": "singer",
            "pred": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1018,
            "question": "For each citizenship, what is the maximum net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: For each city, what is the highest latitude for its stations? */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: display the employee ID for each employee and the date on which he ended his previous job. */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Answer the following: What are the employee ids for each employee and final dates of employment at their last job? */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Answer the following: Please show the different statuses of cities and the average population of cities with each status. */\nSELECT Status ,  avg(Population) FROM city GROUP BY Status\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, what is the maximum net worth? */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                }
            ],
            "example_quality": 0.8897062604968063,
            "example_similarity": 0.3577142460641548,
            "db_id": "singer",
            "pred": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1019,
            "question": "Show titles of songs and names of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wrestlers and the elimination moves? */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Answer the following: Give the names of wrestlers and their elimination moves. */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Answer the following: Show the premise type and address type code for all customer addresses. */\nSELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id\n\n/* Answer the following: Show the names of trains and locations of railways they are in. */\nSELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID\n\n/* Answer the following: Show the authors of submissions and the acceptance results of their submissions. */\nSELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show titles of songs and names of singers. */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1857,
                    "db_id": "wrestler",
                    "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
                    "question": "What are the names of wrestlers and the elimination moves?"
                }
            ],
            "example_quality": 0.8898144977288998,
            "example_similarity": 0.35792516178208733,
            "db_id": "singer",
            "pred": "SELECT T2.Name, T1.Title FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "correct": 1
        },
        {
            "index": 1020,
            "question": "What are the song titles and singer names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wrestlers and the elimination moves? */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Answer the following: Give the names of wrestlers and their elimination moves. */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Answer the following: Show the premise type and address type code for all customer addresses. */\nSELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id\n\n/* Answer the following: Show the names of trains and locations of railways they are in. */\nSELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID\n\n/* Answer the following: Show the authors of submissions and the acceptance results of their submissions. */\nSELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the song titles and singer names? */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 1857,
                    "db_id": "wrestler",
                    "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
                    "question": "What are the names of wrestlers and the elimination moves?"
                }
            ],
            "example_quality": 0.8899225227311264,
            "example_similarity": 0.3580637423972788,
            "db_id": "singer",
            "pred": "SELECT T2.Name, T1.Title FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "correct": 1
        },
        {
            "index": 1021,
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show writers who have published a book with price more than 4000000. */\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n\n/* Answer the following: Show the facility codes of apartments with more than 4 bedrooms. */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: What are the facility codes of the apartments with more than four bedrooms? */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: Show the addresses of the buildings that have apartments with more than 2 bathrooms. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Answer the following: Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show distinct names of singers that have songs with sales more than 300000. */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 224,
                    "db_id": "book_2",
                    "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
                    "question": "Show writers who have published a book with price more than 4000000."
                }
            ],
            "example_quality": 0.8898983705618448,
            "example_similarity": 0.3582737159285425,
            "db_id": "singer",
            "pred": "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
            "correct": 0
        },
        {
            "index": 1022,
            "question": "what are the different names of the singers that have sales more than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show writers who have published a book with price more than 4000000. */\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000\n\n/* Answer the following: Show the facility codes of apartments with more than 4 bedrooms. */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: What are the facility codes of the apartments with more than four bedrooms? */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: Show the addresses of the buildings that have apartments with more than 2 bathrooms. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Answer the following: Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings. */\nSELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: what are the different names of the singers that have sales more than 300000? */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 224,
                    "db_id": "book_2",
                    "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000",
                    "question": "Show writers who have published a book with price more than 4000000."
                }
            ],
            "example_quality": 0.8898742656570825,
            "example_similarity": 0.35842896087024234,
            "db_id": "singer",
            "pred": "SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
            "correct": 0
        },
        {
            "index": 1023,
            "question": "Show the names of singers that have more than one song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: Show the names of editors that are on at least two journal committees. */\nSELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers that have more than one song. */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3063,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "Find the name of customers who have more than one loan."
                }
            ],
            "example_quality": 0.8899463693696722,
            "example_similarity": 0.35868521011932053,
            "db_id": "singer",
            "pred": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 1024,
            "question": "What are the names of the singers that have more than one songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: Show the names of editors that are on at least two journal committees. */\nSELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers that have more than one songs? */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 3063,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "Find the name of customers who have more than one loan."
                }
            ],
            "example_quality": 0.8900183322546983,
            "example_similarity": 0.35882448939610095,
            "db_id": "singer",
            "pred": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 1025,
            "question": "Show the names of singers and the total sales of their songs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product name and total order quantity for each product. */\nSELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id\n\n/* Answer the following: Show the names of countries and the average speed of roller coasters from each country. */\nSELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name\n\n/* Answer the following: For each user, return the name and the average rating of reviews given by them. */\nSELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\n\n/* Answer the following: What are the line 1 and average monthly rentals of all student addresses? */\nSELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id\n\n/* Answer the following: How many engineers did each staff contact? List both the contact staff name and number of engineers contacted. */\nSELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers and the total sales of their songs. */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5662,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
                    "question": "Show the product name and total order quantity for each product."
                }
            ],
            "example_quality": 0.8899622748806053,
            "example_similarity": 0.3589177694141892,
            "db_id": "singer",
            "pred": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID",
            "correct": 1
        },
        {
            "index": 1026,
            "question": "For each singer name, what is the total sales for their songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product name and total order quantity for each product. */\nSELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id\n\n/* Answer the following: Show the names of countries and the average speed of roller coasters from each country. */\nSELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name\n\n/* Answer the following: For each user, return the name and the average rating of reviews given by them. */\nSELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\n\n/* Answer the following: What are the line 1 and average monthly rentals of all student addresses? */\nSELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id\n\n/* Answer the following: How many engineers did each staff contact? List both the contact staff name and number of engineers contacted. */\nSELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each singer name, what is the total sales for their songs? */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 5662,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
                    "question": "Show the product name and total order quantity for each product."
                }
            ],
            "example_quality": 0.8899063267801463,
            "example_similarity": 0.35888663379565555,
            "db_id": "singer",
            "pred": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "correct": 1
        },
        {
            "index": 1027,
            "question": "List the name of singers that do not have any song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers that do not have any song. */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8900135260724733,
            "example_similarity": 0.3590985656188794,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "correct": 1
        },
        {
            "index": 1028,
            "question": "What is the sname of every sing that does not have any song?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: List the names of editors that are not on any journal committee. */\nSELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the sname of every sing that does not have any song? */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.8901205168058658,
            "example_similarity": 0.3590067009189926,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "correct": 1
        },
        {
            "index": 1029,
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Answer the following: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Answer the following: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the citizenship shared by singers with birth year before 1945 and after 1955. */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                }
            ],
            "example_quality": 0.8902272995883674,
            "example_similarity": 0.35903977294247,
            "db_id": "singer",
            "pred": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "correct": 1
        },
        {
            "index": 1030,
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Answer the following: Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats. */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Answer the following: What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats? */\nSELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                }
            ],
            "example_quality": 0.8903338750256603,
            "example_similarity": 0.35903130347784273,
            "db_id": "singer",
            "pred": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "correct": 1
        },
        {
            "index": 1031,
            "question": "How many available features are there in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Answer the following: How many actors are there? */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: How many available features are there in total? */\nSELECT ",
            "response": "count(*) FROM Other_Available_Features",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                }
            ],
            "example_quality": 0.8904402437210767,
            "example_similarity": 0.3590987526777395,
            "db_id": "real_estate_properties",
            "pred": "SELECT count(*) FROM Other_Available_Features",
            "correct": 1
        },
        {
            "index": 1032,
            "question": "What is the feature type name of feature AirCon?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What is the name of the language that the film 'AIRPORT POLLOCK' is in? */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Answer the following: What are the monthly rentals of student addresses in Texas state? */\nSELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What is the feature type name of feature AirCon? */\nSELECT ",
            "response": "T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                }
            ],
            "example_quality": 0.8905464062756105,
            "example_similarity": 0.35922638419611186,
            "db_id": "real_estate_properties",
            "pred": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'",
            "correct": 1
        },
        {
            "index": 1033,
            "question": "Show the property type descriptions of properties belonging to that code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: What is the name of each aircraft and how many flights does each one complete? */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: Show the property type descriptions of properties belonging to that code. */\nSELECT ",
            "response": "T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.8904638474678845,
            "example_similarity": 0.359189301327904,
            "db_id": "real_estate_properties",
            "pred": "SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code",
            "correct": 0
        },
        {
            "index": 1034,
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of departments that are either in division AS or in division EN and in Building NEB. */\nSELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"\n\n/* Answer the following: What are the names of departments either in division AS, or in division EN and in building NEB? */\nSELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"\n\n/* Answer the following: Find the names of courses that have either 3 credits or 1 credit but 4 hours. */\nSELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4\n\n/* Answer the following: What are the names of courses that give either 3 credits, or 1 credit and 4 hours? */\nSELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4\n\n/* Answer the following: Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment. */\nSELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What are the names of properties that are either houses or apartments with more than 1 room? */\nSELECT ",
            "response": "property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
            "n_examples": 5,
            "examples": [
                {
                    "ex_id": 4706,
                    "db_id": "college_3",
                    "query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
                    "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB."
                }
            ],
            "example_quality": 0.8903538798816042,
            "example_similarity": 0.35931820152981003,
            "db_id": "real_estate_properties",
            "pred": "SELECT property_name FROM Properties WHERE (property_type_code = \"APT\" OR property_type_code = \"HSE\") AND room_count > 1",
            "correct": 0
        }
    ]
}