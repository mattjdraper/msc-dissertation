{
    "args": {
        "data_type": "spider",
        "split": "test",
        "tokenizer": "gpt-3.5-turbo",
        "max_seq_length": 2048,
        "prompt_repr": "SQL",
        "k-shot": 3,
        "example_type": "QA",
        "selector_type": "EMBEDPRED",
        "embedding_model": "all-mpnet-base-v2"
    },
    "questions": [
        {
            "index": 1,
            "question": "How many singers do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers do we have? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 0.32407407407407407,
            "db_id": "concert_singer"
        },
        {
            "index": 2,
            "question": "What is the total number of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the total number of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 0.28425925925925927,
            "db_id": "concert_singer"
        },
        {
            "index": 3,
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: List the names and buildings of all departments sorted by the budget from large to small. */\nSELECT dept_name ,  building FROM department ORDER BY budget DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5299,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
                },
                {
                    "ex_id": 5300,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?"
                },
                {
                    "ex_id": 1379,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
                    "question": "List the names and buildings of all departments sorted by the budget from large to small."
                }
            ],
            "example_quality": 0.9753086419753088,
            "example_similarity": 0.32212408990186764,
            "db_id": "concert_singer"
        },
        {
            "index": 4,
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: List the names and buildings of all departments sorted by the budget from large to small. */\nSELECT dept_name ,  building FROM department ORDER BY budget DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names, countries, and ages for every singer in descending order of age? */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5299,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
                },
                {
                    "ex_id": 5300,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?"
                },
                {
                    "ex_id": 1379,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
                    "question": "List the names and buildings of all departments sorted by the budget from large to small."
                }
            ],
            "example_quality": 0.9629629629629631,
            "example_similarity": 0.34927011260344587,
            "db_id": "concert_singer"
        },
        {
            "index": 5,
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Return the average and minimum ages across artists from the United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Show the average, maximum, minimum enrollment of all schools. */\nSELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age of all singers from France? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1660,
                    "db_id": "theme_gallery",
                    "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
                    "question": "What is the average and minimum age of all artists from United States."
                },
                {
                    "ex_id": 1661,
                    "db_id": "theme_gallery",
                    "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
                    "question": "Return the average and minimum ages across artists from the United States."
                },
                {
                    "ex_id": 1892,
                    "db_id": "school_finance",
                    "query": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school",
                    "question": "Show the average, maximum, minimum enrollment of all schools."
                }
            ],
            "example_quality": 0.9044054580896687,
            "example_similarity": 0.3808363072924476,
            "db_id": "concert_singer"
        },
        {
            "index": 6,
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and minimum age of all artists from United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Return the average and minimum ages across artists from the United States. */\nSELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'\n\n/* Answer the following: Show the average, maximum, minimum enrollment of all schools. */\nSELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age for all French singers? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1660,
                    "db_id": "theme_gallery",
                    "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
                    "question": "What is the average and minimum age of all artists from United States."
                },
                {
                    "ex_id": 1661,
                    "db_id": "theme_gallery",
                    "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
                    "question": "Return the average and minimum ages across artists from the United States."
                },
                {
                    "ex_id": 1892,
                    "db_id": "school_finance",
                    "query": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school",
                    "question": "Show the average, maximum, minimum enrollment of all schools."
                }
            ],
            "example_quality": 0.8653671215074724,
            "example_similarity": 0.38090691742738525,
            "db_id": "concert_singer"
        },
        {
            "index": 7,
            "question": "Show the name and the release year of the song by the youngest singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cell phone number of the student whose address has the lowest monthly rental? */\nSELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1\n\n/* Answer the following: What is the party of the representative that has the smallest number of votes. */\nSELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1\n\n/* Answer the following: What is the department name of the students with lowest gpa belongs to? */\nSELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and the release year of the song by the youngest singer. */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3118,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
                    "question": "What is the cell phone number of the student whose address has the lowest monthly rental?"
                },
                {
                    "ex_id": 1185,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1",
                    "question": "What is the party of the representative that has the smallest number of votes."
                },
                {
                    "ex_id": 3300,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
                    "question": "What is the department name of the students with lowest gpa belongs to?"
                }
            ],
            "example_quality": 0.7642814908714854,
            "example_similarity": 0.37210303694666774,
            "db_id": "concert_singer"
        },
        {
            "index": 8,
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the state with the lowest population */\nSELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );\n\n/* Answer the following: what is the population density of the state with the smallest area */\nSELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Answer the following: what is the population density of the smallest state */\nSELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and release years for all the songs of the youngest singer? */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7033,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
                    "question": "what is the state with the lowest population"
                },
                {
                    "ex_id": 7152,
                    "db_id": "geo",
                    "query": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
                    "question": "what is the population density of the state with the smallest area"
                },
                {
                    "ex_id": 7153,
                    "db_id": "geo",
                    "query": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
                    "question": "what is the population density of the smallest state"
                }
            ],
            "example_quality": 0.6784415953712754,
            "example_similarity": 0.37541959202619,
            "db_id": "concert_singer"
        },
        {
            "index": 9,
            "question": "What are all distinct countries where singers above age 20 are from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct publishers of publications with price higher than 5000000? */\nSELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n\n/* Answer the following: Find the buildings which have rooms with capacity more than 50. */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Answer the following: What are the distinct buildings with capacities of greater than 50? */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all distinct countries where singers above age 20 are from? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 220,
                    "db_id": "book_2",
                    "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
                    "question": "What are the distinct publishers of publications with price higher than 5000000?"
                },
                {
                    "ex_id": 1323,
                    "db_id": "college_2",
                    "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
                    "question": "Find the buildings which have rooms with capacity more than 50."
                },
                {
                    "ex_id": 1324,
                    "db_id": "college_2",
                    "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
                    "question": "What are the distinct buildings with capacities of greater than 50?"
                }
            ],
            "example_quality": 0.7141703069966893,
            "example_similarity": 0.3716251752754846,
            "db_id": "concert_singer"
        },
        {
            "index": 10,
            "question": "What are  the different countries with singers above age 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct publishers of publications with price higher than 5000000? */\nSELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n\n/* Answer the following: Find the buildings which have rooms with capacity more than 50. */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Answer the following: What are the distinct buildings with capacities of greater than 50? */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are  the different countries with singers above age 20? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 220,
                    "db_id": "book_2",
                    "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
                    "question": "What are the distinct publishers of publications with price higher than 5000000?"
                },
                {
                    "ex_id": 1323,
                    "db_id": "college_2",
                    "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
                    "question": "Find the buildings which have rooms with capacity more than 50."
                },
                {
                    "ex_id": 1324,
                    "db_id": "college_2",
                    "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
                    "question": "What are the distinct buildings with capacities of greater than 50?"
                }
            ],
            "example_quality": 0.7427532762970203,
            "example_similarity": 0.38400514140806685,
            "db_id": "concert_singer"
        },
        {
            "index": 11,
            "question": "Show all countries and the number of singers in each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show all countries and the number of singers in each country. */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7661393420882003,
            "example_similarity": 0.3806182400078964,
            "db_id": "concert_singer"
        },
        {
            "index": 12,
            "question": "How many singers are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are from each country? */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.785627730247517,
            "example_similarity": 0.3687993385907341,
            "db_id": "concert_singer"
        },
        {
            "index": 13,
            "question": "List all song names by singers above the average age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and budget of departments whose budgets are more than the average budget. */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Answer the following: What are the names and budgets of departments with budgets greater than the average? */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all song names by singers above the average age. */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1359,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
                    "question": "Find the name and budget of departments whose budgets are more than the average budget."
                },
                {
                    "ex_id": 1360,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
                    "question": "What are the names and budgets of departments with budgets greater than the average?"
                },
                {
                    "ex_id": 360,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "Show names for all aircrafts with distances more than the average."
                }
            ],
            "example_quality": 0.7920587332462288,
            "example_similarity": 0.36455929753416033,
            "db_id": "concert_singer"
        },
        {
            "index": 14,
            "question": "What are all the song names by singers who are older than average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the team names of the universities whose enrollments are smaller than the average enrollment size. */\nSELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)\n\n/* Answer the following: What are the names of teams from universities that have a below average enrollment? */\nSELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)\n\n/* Answer the following: Find the name of accounts whose checking balance is below the average checking balance. */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all the song names by singers who are older than average? */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1012,
                    "db_id": "university_basketball",
                    "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
                    "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size."
                },
                {
                    "ex_id": 1013,
                    "db_id": "university_basketball",
                    "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
                    "question": "What are the names of teams from universities that have a below average enrollment?"
                },
                {
                    "ex_id": 1809,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "Find the name of accounts whose checking balance is below the average checking balance."
                }
            ],
            "example_quality": 0.7458339677349615,
            "example_similarity": 0.35799986719081134,
            "db_id": "concert_singer"
        },
        {
            "index": 15,
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the names and ids of all products whose price is between 600 and 700. */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Answer the following: What are the names and ids of products costing between 600 and 700? */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Answer the following: Find the room number of the rooms which can sit 50 to 100 students and their buildings. */\nSELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show location and name for all stadiums with a capacity between 5000 and 10000. */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4752,
                    "db_id": "department_store",
                    "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
                    "question": "Return the names and ids of all products whose price is between 600 and 700."
                },
                {
                    "ex_id": 4753,
                    "db_id": "department_store",
                    "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
                    "question": "What are the names and ids of products costing between 600 and 700?"
                },
                {
                    "ex_id": 1329,
                    "db_id": "college_2",
                    "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
                    "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings."
                }
            ],
            "example_quality": 0.762778369885964,
            "example_similarity": 0.3574059366508178,
            "db_id": "concert_singer"
        },
        {
            "index": 16,
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the names and ids of all products whose price is between 600 and 700. */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Answer the following: What are the names and ids of products costing between 600 and 700? */\nSELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700\n\n/* Answer the following: Find the room number of the rooms which can sit 50 to 100 students and their buildings. */\nSELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the locations and names of all stations with capacity between 5000 and 10000? */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4752,
                    "db_id": "department_store",
                    "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
                    "question": "Return the names and ids of all products whose price is between 600 and 700."
                },
                {
                    "ex_id": 4753,
                    "db_id": "department_store",
                    "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
                    "question": "What are the names and ids of products costing between 600 and 700?"
                },
                {
                    "ex_id": 1329,
                    "db_id": "college_2",
                    "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
                    "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings."
                }
            ],
            "example_quality": 0.7776047217680913,
            "example_similarity": 0.36483690787898393,
            "db_id": "concert_singer"
        },
        {
            "index": 17,
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and average height of the mountains? */\nSELECT max(height) ,  avg(height) FROM mountain\n\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and largest salary of all employees? */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the maximum capacity and the average of all stadiums ? */\nSELECT ",
            "response": "max(capacity), average from stadium",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3715,
                    "db_id": "mountain_photos",
                    "query": "SELECT max(height) ,  avg(height) FROM mountain",
                    "question": "What are the maximum and average height of the mountains?"
                },
                {
                    "ex_id": 372,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is average and maximum salary of all employees."
                },
                {
                    "ex_id": 373,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is the average and largest salary of all employees?"
                }
            ],
            "example_quality": 0.7482031368274846,
            "example_similarity": 0.3797904791241978,
            "db_id": "concert_singer"
        },
        {
            "index": 18,
            "question": "What is the average and maximum capacities for all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and largest salary of all employees? */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: Find the average and maximum rating of all reviews. */\nSELECT avg(rating) ,  max(rating) FROM review\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average and maximum capacities for all stadiums ? */\nSELECT ",
            "response": "avg(capacity) , max(capacity) from stadium",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 372,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is average and maximum salary of all employees."
                },
                {
                    "ex_id": 373,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is the average and largest salary of all employees?"
                },
                {
                    "ex_id": 1694,
                    "db_id": "epinions_1",
                    "query": "SELECT avg(rating) ,  max(rating) FROM review",
                    "question": "Find the average and maximum rating of all reviews."
                }
            ],
            "example_quality": 0.7344140736704021,
            "example_similarity": 0.3859396853104196,
            "db_id": "concert_singer"
        },
        {
            "index": 19,
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 34,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "What is the official name and status of the city with the most residents?"
                },
                {
                    "ex_id": 356,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "Show the id and name of the aircraft with the maximum distance."
                }
            ],
            "example_quality": 0.7483922803193283,
            "example_similarity": 0.3907989180421068,
            "db_id": "concert_singer"
        },
        {
            "index": 20,
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with the highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 34,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "What is the official name and status of the city with the most residents?"
                },
                {
                    "ex_id": 356,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "Show the id and name of the aircraft with the maximum distance."
                }
            ],
            "example_quality": 0.7609726663033618,
            "example_similarity": 0.3978086797423407,
            "db_id": "concert_singer"
        },
        {
            "index": 21,
            "question": "How many concerts are there in year 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of instructors who teach a course in the Spring 2010 semester. */\nSELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n\n/* Answer the following: How many instructors teach a course in the Spring of 2010? */\nSELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts are there in year 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1485,
                    "db_id": "college_2",
                    "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
                    "question": "Find the total number of instructors who teach a course in the Spring 2010 semester."
                },
                {
                    "ex_id": 1486,
                    "db_id": "college_2",
                    "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
                    "question": "How many instructors teach a course in the Spring of 2010?"
                },
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                }
            ],
            "example_quality": 0.747386501548871,
            "example_similarity": 0.4039255343385447,
            "db_id": "concert_singer"
        },
        {
            "index": 22,
            "question": "How many concerts occurred in 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of instructors who teach a course in the Spring 2010 semester. */\nSELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n\n/* Answer the following: How many instructors teach a course in the Spring of 2010? */\nSELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts occurred in 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1485,
                    "db_id": "college_2",
                    "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
                    "question": "Find the total number of instructors who teach a course in the Spring 2010 semester."
                },
                {
                    "ex_id": 1486,
                    "db_id": "college_2",
                    "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
                    "question": "How many instructors teach a course in the Spring of 2010?"
                },
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                }
            ],
            "example_quality": 0.735035442681152,
            "example_similarity": 0.4056689165176991,
            "db_id": "concert_singer"
        },
        {
            "index": 23,
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all the ranks and the number of male and female faculty for each rank. */\nSELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex\n\n/* Answer the following: How many faculty members do we have for each rank and gender? */\nSELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex\n\n/* Answer the following: Find the number of trains for each station, as well as the station network name and services. */\nSELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and the number of concerts in each stadium. */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6744,
                    "db_id": "activity_1",
                    "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
                    "question": "Show all the ranks and the number of male and female faculty for each rank."
                },
                {
                    "ex_id": 6745,
                    "db_id": "activity_1",
                    "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
                    "question": "How many faculty members do we have for each rank and gender?"
                },
                {
                    "ex_id": 3165,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
                    "question": "Find the number of trains for each station, as well as the station network name and services."
                }
            ],
            "example_quality": 0.7156038036127429,
            "example_similarity": 0.40711430879575305,
            "db_id": "concert_singer"
        },
        {
            "index": 24,
            "question": "For each stadium, how many concerts play there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: List the name and the number of enrolled student for each course. */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: For each stadium, how many concerts play there? */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                },
                {
                    "ex_id": 3827,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "What is the name of each course and the corresponding number of student enrollment?"
                },
                {
                    "ex_id": 3828,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "List the name and the number of enrolled student for each course."
                }
            ],
            "example_quality": 0.7195171371923708,
            "example_similarity": 0.39950857063749856,
            "db_id": "concert_singer"
        },
        {
            "index": 25,
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the area of the appelation that produces the highest number of wines before the year of 2010? */\nSELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the area for the appelation which produced the most wines prior to 2010? */\nSELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and capacity with most number of concerts in year 2014 or after. */\nSELECT ",
            "response": "T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6564,
                    "db_id": "wine_1",
                    "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?"
                },
                {
                    "ex_id": 6565,
                    "db_id": "wine_1",
                    "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the area for the appelation which produced the most wines prior to 2010?"
                },
                {
                    "ex_id": 3670,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
                    "question": "What are the name and id of the team with the most victories in 2008 postseason?"
                }
            ],
            "example_quality": 0.7134886245963837,
            "example_similarity": 0.3965461632887047,
            "db_id": "concert_singer"
        },
        {
            "index": 26,
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the name and id of the team that won the most times in 2008 postseason. */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: What is the area of the appelation that produces the highest number of wines before the year of 2010? */\nSELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity of the stadium with the most concerts after 2013 ? */\nSELECT ",
            "response": "t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3670,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
                    "question": "What are the name and id of the team with the most victories in 2008 postseason?"
                },
                {
                    "ex_id": 3671,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the name and id of the team that won the most times in 2008 postseason."
                },
                {
                    "ex_id": 6564,
                    "db_id": "wine_1",
                    "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?"
                }
            ],
            "example_quality": 0.6966832324979384,
            "example_similarity": 0.40356159425533344,
            "db_id": "concert_singer"
        },
        {
            "index": 27,
            "question": "Which year has most number of concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the year and semester when offers the largest number of courses. */\nSELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Which year has most number of concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                },
                {
                    "ex_id": 1406,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which year had the greatest number of courses?"
                },
                {
                    "ex_id": 1407,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year and semester when offers the largest number of courses."
                }
            ],
            "example_quality": 0.7035961991955455,
            "example_similarity": 0.39910869570266677,
            "db_id": "concert_singer"
        },
        {
            "index": 28,
            "question": "What is the year that had the most concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the year and semester when offers the largest number of courses. */\nSELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the year that had the most concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                },
                {
                    "ex_id": 1406,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which year had the greatest number of courses?"
                },
                {
                    "ex_id": 1407,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year and semester when offers the largest number of courses."
                }
            ],
            "example_quality": 0.7100153825576093,
            "example_similarity": 0.39441390050589753,
            "db_id": "concert_singer"
        },
        {
            "index": 29,
            "question": "Show the stadium names without any concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium names without any concert. */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7200148521245883,
            "example_similarity": 0.3934444682919137,
            "db_id": "concert_singer"
        },
        {
            "index": 30,
            "question": "What are the names of the stadiums without any concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the stadiums without any concerts? */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7293476903871021,
            "example_similarity": 0.3895752953837084,
            "db_id": "concert_singer"
        },
        {
            "index": 31,
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status shared by cities with population bigger than 1500 and smaller than 500. */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500? */\nSELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500\n\n/* Answer the following: Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000. */\nSELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show countries where a singer above age 40 and a singer below 30 are from. */\nSELECT ",
            "response": "country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 51,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
                },
                {
                    "ex_id": 52,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
                    "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?"
                },
                {
                    "ex_id": 231,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
                    "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000."
                }
            ],
            "example_quality": 0.7380784100520343,
            "example_similarity": 0.3876517052860983,
            "db_id": "concert_singer"
        },
        {
            "index": 32,
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all church names except for those that had a wedding in year 2015. */\nSELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015\n\n/* Answer the following: Show all artist names who didn't have an exhibition in 2004. */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: What are the names of artists who did not have an exhibition in 2004? */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show names for all stadiums except for stadiums having a concert in year 2014. */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1643,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
                    "question": "Show all church names except for those that had a wedding in year 2015."
                },
                {
                    "ex_id": 1682,
                    "db_id": "theme_gallery",
                    "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
                    "question": "Show all artist names who didn't have an exhibition in 2004."
                },
                {
                    "ex_id": 1683,
                    "db_id": "theme_gallery",
                    "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
                    "question": "What are the names of artists who did not have an exhibition in 2004?"
                }
            ],
            "example_quality": 0.7462634597379082,
            "example_similarity": 0.38873203394035216,
            "db_id": "concert_singer"
        },
        {
            "index": 33,
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the appelations that produce wines after the year of 2008 but not in Central Coast area. */\nSELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\n\n/* Answer the following: What are the appelations for wines produced after 2008 but not in the Central Coast area? */\nSELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\n\n/* Answer the following: which states does not border texas */\nSELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of all stadiums that did not have a concert in 2014? */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6594,
                    "db_id": "wine_1",
                    "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
                    "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area."
                },
                {
                    "ex_id": 6595,
                    "db_id": "wine_1",
                    "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
                    "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?"
                },
                {
                    "ex_id": 7552,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
                    "question": "which states does not border texas"
                }
            ],
            "example_quality": 0.7281187980259696,
            "example_similarity": 0.3865752788263794,
            "db_id": "concert_singer"
        },
        {
            "index": 34,
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Answer the following: Show the album names, ids and the number of tracks for each album. */\nSELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n\n/* Answer the following: What are the names and ids of the different albums, and how many tracks are on each? */\nSELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and theme for all concerts and the number of singers in each concert. */\nSELECT ",
            "response": "T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 663,
                    "db_id": "journal_committee",
                    "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
                    "question": "Show the id, name of each editor and the number of journal committees they are on."
                },
                {
                    "ex_id": 834,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
                    "question": "Show the album names, ids and the number of tracks for each album."
                },
                {
                    "ex_id": 835,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
                    "question": "What are the names and ids of the different albums, and how many tracks are on each?"
                }
            ],
            "example_quality": 0.7302542638981809,
            "example_similarity": 0.39134217902511886,
            "db_id": "concert_singer"
        },
        {
            "index": 35,
            "question": "What are the names , themes , and number of singers for every concert ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Answer the following: For each country and airline name, how many routes are there? */\nSELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n\n/* Answer the following: What is the total number of routes for each country and airline in that country? */\nSELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names , themes , and number of singers for every concert ? */\nSELECT ",
            "response": "t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 663,
                    "db_id": "journal_committee",
                    "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
                    "question": "Show the id, name of each editor and the number of journal committees they are on."
                },
                {
                    "ex_id": 6868,
                    "db_id": "flight_4",
                    "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
                    "question": "For each country and airline name, how many routes are there?"
                },
                {
                    "ex_id": 6869,
                    "db_id": "flight_4",
                    "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
                    "question": "What is the total number of routes for each country and airline in that country?"
                }
            ],
            "example_quality": 0.719570036538413,
            "example_similarity": 0.394051134093182,
            "db_id": "concert_singer"
        },
        {
            "index": 36,
            "question": "List singer names and number of concerts for each singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: How many actors have appeared in each musical? */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Answer the following: Show aircraft names and number of flights for each aircraft. */\nSELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List singer names and number of concerts for each singer. */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                },
                {
                    "ex_id": 258,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "How many actors have appeared in each musical?"
                },
                {
                    "ex_id": 416,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
                    "question": "Show aircraft names and number of flights for each aircraft."
                }
            ],
            "example_quality": 0.7245819799679017,
            "example_similarity": 0.39635394104566374,
            "db_id": "concert_singer"
        },
        {
            "index": 37,
            "question": "What are the names of the singers and number of concerts for each person?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergy type with number of students affected. */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: How many students are affected by each allergy type? */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: Show the card type codes and the number of transactions. */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers and number of concerts for each person? */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 518,
                    "db_id": "allergy_1",
                    "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
                    "question": "Show all allergy type with number of students affected."
                },
                {
                    "ex_id": 519,
                    "db_id": "allergy_1",
                    "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
                    "question": "How many students are affected by each allergy type?"
                },
                {
                    "ex_id": 740,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
                    "question": "Show the card type codes and the number of transactions."
                }
            ],
            "example_quality": 0.7293230075363369,
            "example_similarity": 0.39474287883838144,
            "db_id": "concert_singer"
        },
        {
            "index": 38,
            "question": "List all singer names in concerts in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me a list of names and years of races that had any driver whose forename is Lewis? */\nSELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\n\n/* Answer the following: What are the names and years of all races that had a driver with the last name Lewis? */\nSELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\n\n/* Answer the following: Find all users who have written tips for \" Barrio Cafe \" in 2015 */\nSELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all singer names in concerts in year 2014. */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2176,
                    "db_id": "formula_1",
                    "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
                    "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?"
                },
                {
                    "ex_id": 2177,
                    "db_id": "formula_1",
                    "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
                    "question": "What are the names and years of all races that had a driver with the last name Lewis?"
                },
                {
                    "ex_id": 8164,
                    "db_id": "yelp",
                    "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;",
                    "question": "Find all users who have written tips for \" Barrio Cafe \" in 2015"
                }
            ],
            "example_quality": 0.7292937969599164,
            "example_similarity": 0.391239969966947,
            "db_id": "concert_singer"
        },
        {
            "index": 39,
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me a list of names and years of races that had any driver whose forename is Lewis? */\nSELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\n\n/* Answer the following: What are the names and years of all races that had a driver with the last name Lewis? */\nSELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\n\n/* Answer the following: Find all users who have written tips for \" Barrio Cafe \" in 2015 */\nSELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who performed in a concert in 2014? */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2176,
                    "db_id": "formula_1",
                    "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
                    "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?"
                },
                {
                    "ex_id": 2177,
                    "db_id": "formula_1",
                    "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
                    "question": "What are the names and years of all races that had a driver with the last name Lewis?"
                },
                {
                    "ex_id": 8164,
                    "db_id": "yelp",
                    "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;",
                    "question": "Find all users who have written tips for \" Barrio Cafe \" in 2015"
                }
            ],
            "example_quality": 0.7292660843617741,
            "example_similarity": 0.38929239349051087,
            "db_id": "concert_singer"
        },
        {
            "index": 40,
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: what is the name and nation of the singer who have a song having 'Hey' in its name? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                },
                {
                    "ex_id": 4758,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "What are the names and ids of customers whose address contains TN?"
                },
                {
                    "ex_id": 4759,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "Return the names and ids of customers who have TN in their address."
                }
            ],
            "example_quality": 0.7360344322527296,
            "example_similarity": 0.38867119476435913,
            "db_id": "concert_singer"
        },
        {
            "index": 41,
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                },
                {
                    "ex_id": 4758,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "What are the names and ids of customers whose address contains TN?"
                },
                {
                    "ex_id": 4759,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "Return the names and ids of customers who have TN in their address."
                }
            ],
            "example_quality": 0.7424726168319313,
            "example_similarity": 0.38657061379354957,
            "db_id": "concert_singer"
        },
        {
            "index": 42,
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007. */\nSELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'\n\n/* Answer the following: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007? */\nSELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'\n\n/* Answer the following: Find the players' first name and last name who won award both in 1960 and in 1961. */\nSELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3698,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
                    "question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007."
                },
                {
                    "ex_id": 3699,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
                    "question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?"
                },
                {
                    "ex_id": 3662,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
                    "question": "Find the players' first name and last name who won award both in 1960 and in 1961."
                }
            ],
            "example_quality": 0.7343996153919139,
            "example_similarity": 0.3882868812306995,
            "db_id": "concert_singer"
        },
        {
            "index": 43,
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007. */\nSELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'\n\n/* Answer the following: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007? */\nSELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'\n\n/* Answer the following: Find the players' first name and last name who won award both in 1960 and in 1961. */\nSELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3698,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
                    "question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007."
                },
                {
                    "ex_id": 3699,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
                    "question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?"
                },
                {
                    "ex_id": 3662,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
                    "question": "Find the players' first name and last name who won award both in 1960 and in 1961."
                }
            ],
            "example_quality": 0.7267021023909669,
            "example_similarity": 0.3890799144264931,
            "db_id": "concert_singer"
        },
        {
            "index": 44,
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers are in the state with the highest point. */\nSELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Answer the following: how many rivers are in the state with the largest population */\nSELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: Which city has the most addresses? List the city name, number of addresses, and city id. */\nSELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the number of concerts happened in the stadium with the highest capacity . */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7562,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
                    "question": "how many rivers are in the state with the highest point."
                },
                {
                    "ex_id": 7557,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many rivers are in the state with the largest population"
                },
                {
                    "ex_id": 2935,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which city has the most addresses? List the city name, number of addresses, and city id."
                }
            ],
            "example_quality": 0.7108838288477073,
            "example_similarity": 0.3899212849591847,
            "db_id": "concert_singer"
        },
        {
            "index": 45,
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers are in the state with the highest point. */\nSELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Answer the following: how many rivers are in the state with the largest population */\nSELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: Which city has the most addresses? List the city name, number of addresses, and city id. */\nSELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the number of concerts that occurred in the stadium with the largest capacity ? */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7562,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
                    "question": "how many rivers are in the state with the highest point."
                },
                {
                    "ex_id": 7557,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many rivers are in the state with the largest population"
                },
                {
                    "ex_id": 2935,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which city has the most addresses? List the city name, number of addresses, and city id."
                }
            ],
            "example_quality": 0.695768589684148,
            "example_similarity": 0.390039436298716,
            "db_id": "concert_singer"
        },
        {
            "index": 46,
            "question": "Find the number of pets whose weight is heavier than 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets whose weight is heavier than 10. */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.7023823159953622,
            "example_similarity": 0.3885462042602056,
            "db_id": "pets_1"
        },
        {
            "index": 47,
            "question": "How many pets have a greater weight than 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets have a greater weight than 10? */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.708714607144397,
            "example_similarity": 0.3889650535048488,
            "db_id": "pets_1"
        },
        {
            "index": 48,
            "question": "Find the weight of the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: Give the name of the lowest earning instructor in the Statistics department. */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the weight of the youngest dog. */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1361,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?"
                },
                {
                    "ex_id": 1362,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "Give the name of the lowest earning instructor in the Statistics department."
                },
                {
                    "ex_id": 1333,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "What is the name of the student who has the highest total credits in the History department."
                }
            ],
            "example_quality": 0.7045094722428082,
            "example_similarity": 0.3873761651547146,
            "db_id": "pets_1"
        },
        {
            "index": 49,
            "question": "How much does the youngest dog weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the latest movie which \" Gabriele Ferzetti \" acted in */\nSELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;\n\n/* Answer the following: return me the paper by \" H. V. Jagadish \" with the most citations . */\nSELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in Databases area with the most citations . */\nSELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How much does the youngest dog weigh? */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8534,
                    "db_id": "imdb",
                    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
                    "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in"
                },
                {
                    "ex_id": 8409,
                    "db_id": "academic",
                    "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;",
                    "question": "return me the paper by \" H. V. Jagadish \" with the most citations ."
                },
                {
                    "ex_id": 8406,
                    "db_id": "academic",
                    "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in Databases area with the most citations ."
                }
            ],
            "example_quality": 0.6912278185214794,
            "example_similarity": 0.38167458535681387,
            "db_id": "pets_1"
        },
        {
            "index": 50,
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: For each city, what is the highest latitude for its stations? */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: display the employee ID for each employee and the date on which he ended his previous job. */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the maximum weight for each type of pet. List the maximum weight and pet type. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                },
                {
                    "ex_id": 115,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, what is the highest latitude for its stations?"
                },
                {
                    "ex_id": 3448,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
                    "question": "display the employee ID for each employee and the date on which he ended his previous job."
                }
            ],
            "example_quality": 0.6860186467664344,
            "example_similarity": 0.38060341249025736,
            "db_id": "pets_1"
        },
        {
            "index": 51,
            "question": "List the maximum weight and type for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: For each city, what is the highest latitude for its stations? */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: display the employee ID for each employee and the date on which he ended his previous job. */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: List the maximum weight and type for each type of pet. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                },
                {
                    "ex_id": 115,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, what is the highest latitude for its stations?"
                },
                {
                    "ex_id": 3448,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
                    "question": "display the employee ID for each employee and the date on which he ended his previous job."
                }
            ],
            "example_quality": 0.6810137562566854,
            "example_similarity": 0.3789424381239143,
            "db_id": "pets_1"
        },
        {
            "index": 52,
            "question": "Find number of pets owned by students who are older than 20.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many courses do the student whose id is 171 attend? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n\n/* Answer the following: How many courses does the student with id 171 actually attend? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171\n\n/* Answer the following: What is the total number of purchases for members with level 6? */\nSELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find number of pets owned by students who are older than 20. */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 72,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
                    "question": "How many courses do the student whose id is 171 attend?"
                },
                {
                    "ex_id": 73,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
                    "question": "How many courses does the student with id 171 actually attend?"
                },
                {
                    "ex_id": 5439,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
                    "question": "What is the total number of purchases for members with level 6?"
                }
            ],
            "example_quality": 0.683301953251749,
            "example_similarity": 0.3749295868191116,
            "db_id": "pets_1"
        },
        {
            "index": 53,
            "question": "How many pets are owned by students that have an age greater than 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of cities in counties that have a population more than 20000. */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many days had both mean humidity above 50 and mean visibility above 8? */\nSELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets are owned by students that have an age greater than 20? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2557,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "Show the number of cities in counties that have a population more than 20000."
                },
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                },
                {
                    "ex_id": 138,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
                    "question": "How many days had both mean humidity above 50 and mean visibility above 8?"
                }
            ],
            "example_quality": 0.6729756695794069,
            "example_similarity": 0.3751777783113891,
            "db_id": "pets_1"
        },
        {
            "index": 54,
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Annual Meeting events happened in the United Kingdom region? */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: Count the number of Annual Meeting events that took place in the region of the United Kingdom. */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: How many clubs does \"Linda Smith\" belong to? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of dog pets that are raised by female students (with sex F). */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2082,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
                    "question": "How many Annual Meeting events happened in the United Kingdom region?"
                },
                {
                    "ex_id": 2083,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
                    "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom."
                },
                {
                    "ex_id": 4267,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
                    "question": "How many clubs does \"Linda Smith\" belong to?"
                }
            ],
            "example_quality": 0.6786334279882311,
            "example_similarity": 0.37285967130562264,
            "db_id": "pets_1"
        },
        {
            "index": 55,
            "question": "How many dog pets are raised by female students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Annual Meeting events happened in the United Kingdom region? */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: Count the number of Annual Meeting events that took place in the region of the United Kingdom. */\nSELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"\n\n/* Answer the following: How many clubs does \"Linda Smith\" belong to? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many dog pets are raised by female students? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2082,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
                    "question": "How many Annual Meeting events happened in the United Kingdom region?"
                },
                {
                    "ex_id": 2083,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
                    "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom."
                },
                {
                    "ex_id": 4267,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
                    "question": "How many clubs does \"Linda Smith\" belong to?"
                }
            ],
            "example_quality": 0.6840854497276435,
            "example_similarity": 0.37150464697885377,
            "db_id": "pets_1"
        },
        {
            "index": 56,
            "question": "Find the number of distinct type of pets.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of distinct type of pets. */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6897267809825071,
            "example_similarity": 0.36794828694081144,
            "db_id": "pets_1"
        },
        {
            "index": 57,
            "question": "How many different types of pet are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many different types of pet are there? */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6951701707898315,
            "example_similarity": 0.3679373892282905,
            "db_id": "pets_1"
        },
        {
            "index": 58,
            "question": "Find the first name of students who have cat or dog pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\". */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\n\n/* Answer the following: Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names. */\nSELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"\n\n/* Answer the following: Find the name of physicians who are affiliated with Surgery or Psychiatry department. */\nSELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have cat or dog pet. */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 922,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
                    "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\"."
                },
                {
                    "ex_id": 923,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
                    "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names."
                },
                {
                    "ex_id": 3989,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
                    "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department."
                }
            ],
            "example_quality": 0.6977257280082783,
            "example_similarity": 0.3712323931906927,
            "db_id": "pets_1"
        },
        {
            "index": 59,
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which rivers run through states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Answer the following: what rivers run through the states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Answer the following: what is the capital of the state that borders the state that borders texas */\nSELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the first names of every student who has a cat or dog as a pet? */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7432,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "which rivers run through states that border the state with the capital atlanta"
                },
                {
                    "ex_id": 7433,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "what rivers run through the states that border the state with the capital atlanta"
                },
                {
                    "ex_id": 7466,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
                    "question": "what is the capital of the state that borders the state that borders texas"
                }
            ],
            "example_quality": 0.6866176938921067,
            "example_similarity": 0.369761411008553,
            "db_id": "pets_1"
        },
        {
            "index": 60,
            "question": "Find the first name of students who have both cat and dog pets .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name and age of the student who has allergy to both milk and cat. */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: What are the last names and ages of the students who are allergic to milk and cat? */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: Find the first name and age of the students who are playing both Football and Lacrosse. */\nSELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have both cat and dog pets . */\nSELECT ",
            "response": "t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 520,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the last name and age of the student who has allergy to both milk and cat."
                },
                {
                    "ex_id": 521,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "What are the last names and ages of the students who are allergic to milk and cat?"
                },
                {
                    "ex_id": 6052,
                    "db_id": "game_1",
                    "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
                    "question": "Find the first name and age of the students who are playing both Football and Lacrosse."
                }
            ],
            "example_quality": 0.6756561187210882,
            "example_similarity": 0.3739374886199852,
            "db_id": "pets_1"
        },
        {
            "index": 61,
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name and age of the student who has allergy to both milk and cat. */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: What are the last names and ages of the students who are allergic to milk and cat? */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: Find the first name and age of the students who are playing both Football and Lacrosse. */\nSELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the students' first names who have both cats and dogs as pets? */\nSELECT ",
            "response": "T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 520,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the last name and age of the student who has allergy to both milk and cat."
                },
                {
                    "ex_id": 521,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "What are the last names and ages of the students who are allergic to milk and cat?"
                },
                {
                    "ex_id": 6052,
                    "db_id": "game_1",
                    "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
                    "question": "Find the first name and age of the students who are playing both Football and Lacrosse."
                }
            ],
            "example_quality": 0.6657569475016986,
            "example_similarity": 0.3757970992552926,
            "db_id": "pets_1"
        },
        {
            "index": 62,
            "question": "Find the major and age of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first and last name of the students who do not have any food type allergy. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What is the full name of each student who is not allergic to any type of food. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What are the titles and directors of the films were never presented in China? */\nSELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the major and age of students who do not have a cat pet. */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 528,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "List the first and last name of the students who do not have any food type allergy."
                },
                {
                    "ex_id": 529,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "What is the full name of each student who is not allergic to any type of food."
                },
                {
                    "ex_id": 4159,
                    "db_id": "film_rank",
                    "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
                    "question": "What are the titles and directors of the films were never presented in China?"
                }
            ],
            "example_quality": 0.664132647660944,
            "example_similarity": 0.37631423526363583,
            "db_id": "pets_1"
        },
        {
            "index": 63,
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first and last name of the students who do not have any food type allergy. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What is the full name of each student who is not allergic to any type of food. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What are the titles and directors of the films were never presented in China? */\nSELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What major is every student who does not own a cat as a pet, and also how old are they? */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 528,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "List the first and last name of the students who do not have any food type allergy."
                },
                {
                    "ex_id": 529,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "What is the full name of each student who is not allergic to any type of food."
                },
                {
                    "ex_id": 4159,
                    "db_id": "film_rank",
                    "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
                    "question": "What are the titles and directors of the films were never presented in China?"
                }
            ],
            "example_quality": 0.6625599128944992,
            "example_similarity": 0.3738566223722661,
            "db_id": "pets_1"
        },
        {
            "index": 64,
            "question": "Find the id of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles and directors of the films were never presented in China? */\nSELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')\n\n/* Answer the following: Return the titles and directors of films that were never in the market of China. */\nSELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')\n\n/* Answer the following: Find the name of students who didn't take any course from Biology department. */\nSELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of students who do not have a cat pet. */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4159,
                    "db_id": "film_rank",
                    "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
                    "question": "What are the titles and directors of the films were never presented in China?"
                },
                {
                    "ex_id": 4160,
                    "db_id": "film_rank",
                    "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",
                    "question": "Return the titles and directors of films that were never in the market of China."
                },
                {
                    "ex_id": 1453,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
                    "question": "Find the name of students who didn't take any course from Biology department."
                }
            ],
            "example_quality": 0.6559423163730325,
            "example_similarity": 0.37258938801001823,
            "db_id": "pets_1"
        },
        {
            "index": 65,
            "question": "What are the ids of the students who do not own cats as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the person who has no student friends. */\nSELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n\n/* Answer the following: What are the names of the people who have no friends who are students? */\nSELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n\n/* Answer the following: Which events id does not have any participant with detail 'Kenyatta Kuhn'? */\nSELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the ids of the students who do not own cats as pets? */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4449,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
                    "question": "Find the name of the person who has no student friends."
                },
                {
                    "ex_id": 4450,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
                    "question": "What are the names of the people who have no friends who are students?"
                },
                {
                    "ex_id": 2150,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
                    "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?"
                }
            ],
            "example_quality": 0.653901161458639,
            "example_similarity": 0.3722418589637103,
            "db_id": "pets_1"
        },
        {
            "index": 66,
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and gender of the student who has allergy to milk but not cat. */\nSELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: What are the first name and gender of the students who have allergy to milk but can put up with cats? */\nSELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: Show the name and age for all male people who don't have a wedding. */\nSELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a dog but do not have a cat as a pet. */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 524,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the first name and gender of the student who has allergy to milk but not cat."
                },
                {
                    "ex_id": 525,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?"
                },
                {
                    "ex_id": 1642,
                    "db_id": "wedding",
                    "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
                    "question": "Show the name and age for all male people who don't have a wedding."
                }
            ],
            "example_quality": 0.6449756915905669,
            "example_similarity": 0.37385707555283826,
            "db_id": "pets_1"
        },
        {
            "index": 67,
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and gender of the student who has allergy to milk but not cat. */\nSELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: What are the first name and gender of the students who have allergy to milk but can put up with cats? */\nSELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name of every student who has a dog but does not have a cat? */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 524,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the first name and gender of the student who has allergy to milk but not cat."
                },
                {
                    "ex_id": 525,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?"
                },
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                }
            ],
            "example_quality": 0.6363219579844256,
            "example_similarity": 0.3736661285704122,
            "db_id": "pets_1"
        },
        {
            "index": 68,
            "question": "Find the type and weight of the youngest pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List top 10 employee work longest in the company. List employee's first and last name. */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: What are the first and last names of the top 10 longest-serving employees? */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: Show the details and star ratings of the 3 least expensive hotels. */\nSELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the type and weight of the youngest pet. */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 602,
                    "db_id": "store_1",
                    "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
                    "question": "List top 10 employee work longest in the company. List employee's first and last name."
                },
                {
                    "ex_id": 603,
                    "db_id": "store_1",
                    "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
                    "question": "What are the first and last names of the top 10 longest-serving employees?"
                },
                {
                    "ex_id": 5944,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                    "question": "Show the details and star ratings of the 3 least expensive hotels."
                }
            ],
            "example_quality": 0.6404446742885762,
            "example_similarity": 0.37285187817157195,
            "db_id": "pets_1"
        },
        {
            "index": 69,
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List top 10 employee work longest in the company. List employee's first and last name. */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: What are the first and last names of the top 10 longest-serving employees? */\nSELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;\n\n/* Answer the following: Show the details and star ratings of the 3 least expensive hotels. */\nSELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What type of pet is the youngest animal, and how much does it weigh? */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 602,
                    "db_id": "store_1",
                    "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
                    "question": "List top 10 employee work longest in the company. List employee's first and last name."
                },
                {
                    "ex_id": 603,
                    "db_id": "store_1",
                    "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
                    "question": "What are the first and last names of the top 10 longest-serving employees?"
                },
                {
                    "ex_id": 5944,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                    "question": "Show the details and star ratings of the 3 least expensive hotels."
                }
            ],
            "example_quality": 0.6444478915694182,
            "example_similarity": 0.3698035100063686,
            "db_id": "pets_1"
        },
        {
            "index": 70,
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email of the users who have more than 1000 followers. */\nSELECT name ,  email FROM user_profiles WHERE followers  >  1000\n\n/* Answer the following: Find the name and capacity of products with price greater than 700 (in USD). */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id and weight of all pets whose age is older than 1. */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 285,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
                    "question": "Find the name and email of the users who have more than 1000 followers."
                },
                {
                    "ex_id": 336,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
                    "question": "Find the name and capacity of products with price greater than 700 (in USD)."
                },
                {
                    "ex_id": 337,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
                    "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities."
                }
            ],
            "example_quality": 0.6495272074041407,
            "example_similarity": 0.370164958364919,
            "db_id": "pets_1"
        },
        {
            "index": 71,
            "question": "What is the id and weight of every pet who is older than 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email of the users who have more than 1000 followers. */\nSELECT name ,  email FROM user_profiles WHERE followers  >  1000\n\n/* Answer the following: Find the name and capacity of products with price greater than 700 (in USD). */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Answer the following: Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities. */\nSELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id and weight of every pet who is older than 1? */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 285,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
                    "question": "Find the name and email of the users who have more than 1000 followers."
                },
                {
                    "ex_id": 336,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
                    "question": "Find the name and capacity of products with price greater than 700 (in USD)."
                },
                {
                    "ex_id": 337,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
                    "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities."
                }
            ],
            "example_quality": 0.6544634439195753,
            "example_similarity": 0.3688425483824157,
            "db_id": "pets_1"
        },
        {
            "index": 72,
            "question": "Find the average and maximum age for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average and oldest age for students with different sex. */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: What is the average and oldest age for each gender of student? */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average and maximum age for each type of pet. */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5723,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
                    "question": "Find the average and oldest age for students with different sex."
                },
                {
                    "ex_id": 5724,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
                    "question": "What is the average and oldest age for each gender of student?"
                },
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                }
            ],
            "example_quality": 0.6592625627540257,
            "example_similarity": 0.37099097704050304,
            "db_id": "pets_1"
        },
        {
            "index": 73,
            "question": "What is the average and maximum age for each pet type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average and oldest age for students with different sex. */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: What is the average and oldest age for each gender of student? */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average and maximum age for each pet type? */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5723,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
                    "question": "Find the average and oldest age for students with different sex."
                },
                {
                    "ex_id": 5724,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
                    "question": "What is the average and oldest age for each gender of student?"
                },
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                }
            ],
            "example_quality": 0.6639301988806829,
            "example_similarity": 0.37365995448559497,
            "db_id": "pets_1"
        },
        {
            "index": 74,
            "question": "Find the average weight for each pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the different statuses of cities and the average population of cities with each status. */\nSELECT Status ,  avg(Population) FROM city GROUP BY Status\n\n/* Answer the following: What are the statuses and average populations of each city? */\nSELECT Status ,  avg(Population) FROM city GROUP BY Status\n\n/* Answer the following: What is the average rating for right-footed players and left-footed players? */\nSELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average weight for each pet type. */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 43,
                    "db_id": "farm",
                    "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
                    "question": "Please show the different statuses of cities and the average population of cities with each status."
                },
                {
                    "ex_id": 44,
                    "db_id": "farm",
                    "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
                    "question": "What are the statuses and average populations of each city?"
                },
                {
                    "ex_id": 1302,
                    "db_id": "soccer_1",
                    "query": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
                    "question": "What is the average rating for right-footed players and left-footed players?"
                }
            ],
            "example_quality": 0.6607793749872848,
            "example_similarity": 0.3736230269695159,
            "db_id": "pets_1"
        },
        {
            "index": 75,
            "question": "What is the average weight for each type of pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the different statuses of cities and the average population of cities with each status. */\nSELECT Status ,  avg(Population) FROM city GROUP BY Status\n\n/* Answer the following: What are the statuses and average populations of each city? */\nSELECT Status ,  avg(Population) FROM city GROUP BY Status\n\n/* Answer the following: What is the average rating for right-footed players and left-footed players? */\nSELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average weight for each type of pet? */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 43,
                    "db_id": "farm",
                    "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
                    "question": "Please show the different statuses of cities and the average population of cities with each status."
                },
                {
                    "ex_id": 44,
                    "db_id": "farm",
                    "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
                    "question": "What are the statuses and average populations of each city?"
                },
                {
                    "ex_id": 1302,
                    "db_id": "soccer_1",
                    "query": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
                    "question": "What is the average rating for right-footed players and left-footed players?"
                }
            ],
            "example_quality": 0.6577125730643775,
            "example_similarity": 0.3742645353909658,
            "db_id": "pets_1"
        },
        {
            "index": 76,
            "question": "Find the first name and age of students who have a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: Find the name and credit score of the customers who have some loans. */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a pet. */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 688,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show distinct first and last names for all customers with an account."
                },
                {
                    "ex_id": 689,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "What are the full names of customers who have accounts?"
                },
                {
                    "ex_id": 3073,
                    "db_id": "loan_1",
                    "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
                    "question": "Find the name and credit score of the customers who have some loans."
                }
            ],
            "example_quality": 0.6622163549977409,
            "example_similarity": 0.3746147893777141,
            "db_id": "pets_1"
        },
        {
            "index": 77,
            "question": "What are the different first names and ages of the students who do have pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the full names of customers who have accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: Find the name and credit score of the customers who have some loans. */\nSELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the different first names and ages of the students who do have pets? */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 688,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show distinct first and last names for all customers with an account."
                },
                {
                    "ex_id": 689,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "What are the full names of customers who have accounts?"
                },
                {
                    "ex_id": 3073,
                    "db_id": "loan_1",
                    "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
                    "question": "Find the name and credit score of the customers who have some loans."
                }
            ],
            "example_quality": 0.6666031555821859,
            "example_similarity": 0.37392718897685623,
            "db_id": "pets_1"
        },
        {
            "index": 78,
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many people live in the capital of texas */\nSELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );\n\n/* Answer the following: what is the size of the capital of texas */\nSELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );\n\n/* Answer the following: display the employee id and salary of all employees who report to Payam (first name). */\nSELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7238,
                    "db_id": "geo",
                    "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
                    "question": "how many people live in the capital of texas"
                },
                {
                    "ex_id": 7239,
                    "db_id": "geo",
                    "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
                    "question": "what is the size of the capital of texas"
                },
                {
                    "ex_id": 3478,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
                    "question": "display the employee id and salary of all employees who report to Payam (first name)."
                }
            ],
            "example_quality": 0.6595374837373841,
            "example_similarity": 0.37197438876347877,
            "db_id": "pets_1"
        },
        {
            "index": 79,
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id of the pet owned by the student whose last name is 'Smith'? */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                },
                {
                    "ex_id": 825,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Find the name of the artist who made the album \"Balls to the Wall\"."
                },
                {
                    "ex_id": 2979,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
                    "question": "Which language does the film AIRPORT POLLOCK use? List the language name."
                }
            ],
            "example_quality": 0.6638471358419742,
            "example_similarity": 0.3713727438986809,
            "db_id": "pets_1"
        },
        {
            "index": 80,
            "question": "Find the number of pets for each student who has any pet and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of pilots that have more than one record. */\nSELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1\n\n/* Answer the following: For each customer who has at least two orders, find the customer name and number of orders made. */\nSELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: Which customers have made at least two orders? Give me each customer name and number of orders made. */\nSELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets for each student who has any pet and student id. */\nSELECT ",
            "response": "count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2097,
                    "db_id": "pilot_record",
                    "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
                    "question": "Show names of pilots that have more than one record."
                },
                {
                    "ex_id": 6938,
                    "db_id": "tracking_orders",
                    "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
                    "question": "For each customer who has at least two orders, find the customer name and number of orders made."
                },
                {
                    "ex_id": 6939,
                    "db_id": "tracking_orders",
                    "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
                    "question": "Which customers have made at least two orders? Give me each customer name and number of orders made."
                }
            ],
            "example_quality": 0.6611046021995051,
            "example_similarity": 0.3720339768598614,
            "db_id": "pets_1"
        },
        {
            "index": 81,
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id of students who registered some courses and the number of their registered courses? */\nSELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\n\n/* Answer the following: For every student who is registered for some course, how many courses are they registered for? */\nSELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\n\n/* Answer the following: How many residents does each property have? List property id and resident count. */\nSELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: For students who have pets , how many pets does each student have ? list their ids instead of names . */\nSELECT ",
            "response": "count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 80,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                    "question": "List the id of students who registered some courses and the number of their registered courses?"
                },
                {
                    "ex_id": 81,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                    "question": "For every student who is registered for some course, how many courses are they registered for?"
                },
                {
                    "ex_id": 4844,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
                    "question": "How many residents does each property have? List property id and resident count."
                }
            ],
            "example_quality": 0.6585066029953959,
            "example_similarity": 0.3720989238861636,
            "db_id": "pets_1"
        },
        {
            "index": 82,
            "question": "Find the first name and gender of student who have more than one pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and details of events that have more than one participants? */\nSELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1\n\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and gender of student who have more than one pet. */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2140,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
                    "question": "What are the ids and details of events that have more than one participants?"
                },
                {
                    "ex_id": 3825,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",
                    "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?"
                },
                {
                    "ex_id": 3826,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",
                    "question": "Return the descriptions and names of the courses that have more than two students enrolled in."
                }
            ],
            "example_quality": 0.6619936498423357,
            "example_similarity": 0.37224897404092927,
            "db_id": "pets_1"
        },
        {
            "index": 83,
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are name and phone number of patients who had more than one appointment? */\nSELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1\n\n/* Answer the following: Which patients made more than one appointment? Tell me the name and phone number of these patients. */\nSELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1\n\n/* Answer the following: What are the ids and details of events that have more than one participants? */\nSELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name and gender of the all the students who have more than one pet? */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3907,
                    "db_id": "hospital_1",
                    "query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
                    "question": "what are name and phone number of patients who had more than one appointment?"
                },
                {
                    "ex_id": 3908,
                    "db_id": "hospital_1",
                    "query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
                    "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients."
                },
                {
                    "ex_id": 2140,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
                    "question": "What are the ids and details of events that have more than one participants?"
                }
            ],
            "example_quality": 0.6631837043693314,
            "example_similarity": 0.3735115278574127,
            "db_id": "pets_1"
        },
        {
            "index": 84,
            "question": "Find the last name of the student who has a cat that is age 3.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which rivers run through states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Answer the following: what rivers run through the states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Answer the following: what are the major cities in the states through which the major river in virginia runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the last name of the student who has a cat that is age 3. */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7432,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "which rivers run through states that border the state with the capital atlanta"
                },
                {
                    "ex_id": 7433,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "what rivers run through the states that border the state with the capital atlanta"
                },
                {
                    "ex_id": 7551,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
                    "question": "what are the major cities in the states through which the major river in virginia runs"
                }
            ],
            "example_quality": 0.6558869179790654,
            "example_similarity": 0.3727545411359908,
            "db_id": "pets_1"
        },
        {
            "index": 85,
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who was the director of the movie Joy from 2015 ? */\nSELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";\n\n/* Answer the following: Who is the director of the tv series \" House of Cards \" from 2013 ? */\nSELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";\n\n/* Answer the following: list all the businesses which Niloofar rated 5 */\nSELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the last name of the student who has a cat that is 3 years old? */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8456,
                    "db_id": "imdb",
                    "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";",
                    "question": "Who was the director of the movie Joy from 2015 ?"
                },
                {
                    "ex_id": 8485,
                    "db_id": "imdb",
                    "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";",
                    "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?"
                },
                {
                    "ex_id": 8146,
                    "db_id": "yelp",
                    "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";",
                    "question": "list all the businesses which Niloofar rated 5"
                }
            ],
            "example_quality": 0.6580321929924605,
            "example_similarity": 0.3720086203784213,
            "db_id": "pets_1"
        },
        {
            "index": 86,
            "question": "Find the average age of students who do not have any pet .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who do not have any loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have never taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average age of students who do not have any pet . */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 299,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who do not have any tweet."
                },
                {
                    "ex_id": 3085,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who do not have any loan."
                },
                {
                    "ex_id": 3086,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have never taken a loan?"
                }
            ],
            "example_quality": 0.653440631384837,
            "example_similarity": 0.37548332634301335,
            "db_id": "pets_1"
        },
        {
            "index": 87,
            "question": "What is the average age for all students who do not own any pets ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who do not have any loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have never taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average age for all students who do not own any pets ? */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 299,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who do not have any tweet."
                },
                {
                    "ex_id": 3085,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who do not have any loan."
                },
                {
                    "ex_id": 3086,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have never taken a loan?"
                }
            ],
            "example_quality": 0.6489546229176186,
            "example_similarity": 0.3765496555603806,
            "db_id": "pets_1"
        },
        {
            "index": 88,
            "question": "How many continents are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many continents are there? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6529437749299184,
            "example_similarity": 0.3801907923945774,
            "db_id": "car_1"
        },
        {
            "index": 89,
            "question": "What is the number of continents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of continents? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6568432830767733,
            "example_similarity": 0.37894550561891105,
            "db_id": "car_1"
        },
        {
            "index": 90,
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries does each continent have? List the continent id, continent name and the number of countries. */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                },
                {
                    "ex_id": 1962,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "How many bookings did each customer make? List the customer id, first name, and the count."
                },
                {
                    "ex_id": 2141,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
                    "question": "How many events have each participants attended? List the participant id, type and the number."
                }
            ],
            "example_quality": 0.6596460344769304,
            "example_similarity": 0.38288051310295795,
            "db_id": "car_1"
        },
        {
            "index": 91,
            "question": "For each continent, list its id, name, and how many countries it has?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For each continent, list its id, name, and how many countries it has? */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                },
                {
                    "ex_id": 1962,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "How many bookings did each customer make? List the customer id, first name, and the count."
                },
                {
                    "ex_id": 2141,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
                    "question": "How many events have each participants attended? List the participant id, type and the number."
                }
            ],
            "example_quality": 0.6623871869452158,
            "example_similarity": 0.3834462104793977,
            "db_id": "car_1"
        },
        {
            "index": 92,
            "question": "How many countries are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries are listed? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6660568914349417,
            "example_similarity": 0.3847836810882467,
            "db_id": "car_1"
        },
        {
            "index": 93,
            "question": "How many countries exist?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries exist? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6696476775485445,
            "example_similarity": 0.38510090725166035,
            "db_id": "car_1"
        },
        {
            "index": 94,
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in. */\nSELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\n\n/* Answer the following: What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in. */\nSELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\n\n/* Answer the following: Find the number of trains for each station, as well as the station network name and services. */\nSELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many models does each car maker produce? List maker full name, id and the number. */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6780,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
                    "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in."
                },
                {
                    "ex_id": 6781,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
                    "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in."
                },
                {
                    "ex_id": 3165,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
                    "question": "Find the number of trains for each station, as well as the station network name and services."
                }
            ],
            "example_quality": 0.6693617862211546,
            "example_similarity": 0.38516527347587465,
            "db_id": "car_1"
        },
        {
            "index": 95,
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each country and airline name, how many routes are there? */\nSELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n\n/* Answer the following: What is the total number of routes for each country and airline in that country? */\nSELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the full name of each car maker, along with its id and how many models it produces? */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6868,
                    "db_id": "flight_4",
                    "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
                    "question": "For each country and airline name, how many routes are there?"
                },
                {
                    "ex_id": 6869,
                    "db_id": "flight_4",
                    "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
                    "question": "What is the total number of routes for each country and airline in that country?"
                },
                {
                    "ex_id": 663,
                    "db_id": "journal_committee",
                    "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
                    "question": "Show the id, name of each editor and the number of journal committees they are on."
                }
            ],
            "example_quality": 0.6704301654644695,
            "example_similarity": 0.3853097325854853,
            "db_id": "car_1"
        },
        {
            "index": 96,
            "question": "Which model of the car has the minimum horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: what is the highest point in states bordering colorado */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model of the car has the minimum horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                },
                {
                    "ex_id": 2556,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "What are the names of cities that are in the county with the most police officers?"
                },
                {
                    "ex_id": 7188,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
                    "question": "what is the highest point in states bordering colorado"
                }
            ],
            "example_quality": 0.6646221481874046,
            "example_similarity": 0.3846525710192013,
            "db_id": "car_1"
        },
        {
            "index": 97,
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has made the minimum amount of payment in one claim? */\nSELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)\n\n/* Answer the following: Which customer made the smallest amount of claim in one claim? Return the customer details. */\nSELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)\n\n/* Answer the following: Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it. */\nSELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model of the car with the smallest amount of horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1522,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
                    "question": "What is the name of the customer who has made the minimum amount of payment in one claim?"
                },
                {
                    "ex_id": 1523,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
                    "question": "Which customer made the smallest amount of claim in one claim? Return the customer details."
                },
                {
                    "ex_id": 6516,
                    "db_id": "scientist_1",
                    "query": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",
                    "question": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it."
                }
            ],
            "example_quality": 0.6595562144646583,
            "example_similarity": 0.38466704937482027,
            "db_id": "car_1"
        },
        {
            "index": 98,
            "question": "Find the model of the car whose weight is below the average weight.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name, location, open year for all tracks with a seating higher than the average. */\nSELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)\n\n/* Answer the following: What are the names, locations, and years of opening for tracks with seating higher than average? */\nSELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)\n\n/* Answer the following: What is the name and building of the departments whose budget is more than the average budget? */\nSELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the model of the car whose weight is below the average weight. */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 758,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
                    "question": "Show the name, location, open year for all tracks with a seating higher than the average."
                },
                {
                    "ex_id": 759,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
                    "question": "What are the names, locations, and years of opening for tracks with seating higher than average?"
                },
                {
                    "ex_id": 1327,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
                    "question": "What is the name and building of the departments whose budget is more than the average budget?"
                }
            ],
            "example_quality": 0.6543083496487623,
            "example_similarity": 0.38452772673847957,
            "db_id": "car_1"
        },
        {
            "index": 99,
            "question": "What is the model for the car with a weight smaller than the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name. */\nSELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')\n\n/* Answer the following: What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name? */\nSELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')\n\n/* Answer the following: Show the name, location, open year for all tracks with a seating higher than the average. */\nSELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model for the car with a weight smaller than the average? */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3506,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
                    "question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name."
                },
                {
                    "ex_id": 3507,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
                    "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?"
                },
                {
                    "ex_id": 758,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
                    "question": "Show the name, location, open year for all tracks with a seating higher than the average."
                }
            ],
            "example_quality": 0.6484980174025259,
            "example_similarity": 0.38382567099244796,
            "db_id": "car_1"
        },
        {
            "index": 100,
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which rivers run through states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Answer the following: what rivers run through the states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Answer the following: Find the names of students who have taken any course in the fall semester of year 2003. */\nSELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the name of the makers that produced some cars in the year of 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7432,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "which rivers run through states that border the state with the capital atlanta"
                },
                {
                    "ex_id": 7433,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "what rivers run through the states that border the state with the capital atlanta"
                },
                {
                    "ex_id": 1427,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
                    "question": "Find the names of students who have taken any course in the fall semester of year 2003."
                }
            ],
            "example_quality": 0.6424606929362054,
            "example_similarity": 0.38364903044413967,
            "db_id": "car_1"
        },
        {
            "index": 101,
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show distinct types of artworks that are nominated in festivals in 2007. */\nSELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007\n\n/* Answer the following: What authors wrote papers about Bacterial Wilt in 2016 ? */\nSELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;\n\n/* Answer the following: Who wrote on the topic of Bacterial Wilt in 2016 ? */\nSELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the different car makers who produced a car in 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4609,
                    "db_id": "entertainment_awards",
                    "query": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007",
                    "question": "Show distinct types of artworks that are nominated in festivals in 2007."
                },
                {
                    "ex_id": 8040,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
                    "question": "What authors wrote papers about Bacterial Wilt in 2016 ?"
                },
                {
                    "ex_id": 8041,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
                    "question": "Who wrote on the topic of Bacterial Wilt in 2016 ?"
                }
            ],
            "example_quality": 0.6404385096530624,
            "example_similarity": 0.3830825074293428,
            "db_id": "car_1"
        },
        {
            "index": 102,
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and years of the movies that has the top 3 highest rating star? */\nSELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\n\n/* Answer the following: What are the names and years released for the movies with the top 3 highest ratings? */\nSELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\n\n/* Answer the following: Which team had the least number of attendances in home games in 1980? */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the make and production time of the cars that were produced in the earliest year? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2501,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
                    "question": "What are the names and years of the movies that has the top 3 highest rating star?"
                },
                {
                    "ex_id": 2502,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
                    "question": "What are the names and years released for the movies with the top 3 highest ratings?"
                },
                {
                    "ex_id": 3702,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
                    "question": "Which team had the least number of attendances in home games in 1980?"
                }
            ],
            "example_quality": 0.6372930632610471,
            "example_similarity": 0.38259267557336546,
            "db_id": "car_1"
        },
        {
            "index": 103,
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and years of the movies that has the top 3 highest rating star? */\nSELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\n\n/* Answer the following: What are the names and years released for the movies with the top 3 highest ratings? */\nSELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\n\n/* Answer the following: Which campus has the most faculties in year 2003? */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maker of the carr produced in the earliest year and what year was it? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2501,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
                    "question": "What are the names and years of the movies that has the top 3 highest rating star?"
                },
                {
                    "ex_id": 2502,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
                    "question": "What are the names and years released for the movies with the top 3 highest ratings?"
                },
                {
                    "ex_id": 2351,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
                    "question": "Which campus has the most faculties in year 2003?"
                }
            ],
            "example_quality": 0.6341151227596623,
            "example_similarity": 0.38212574507749625,
            "db_id": "car_1"
        },
        {
            "index": 104,
            "question": "Which distinct car models are the produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the papers written by Su-In Lee before 2012 . */\nSELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;\n\n/* Answer the following: character recognition papers earlier than 2010 */\nSELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;\n\n/* Answer the following: papers before 2010 about character recognition */\nSELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinct car models are the produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8128,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;",
                    "question": "Give me the papers written by Su-In Lee before 2012 ."
                },
                {
                    "ex_id": 7916,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
                    "question": "character recognition papers earlier than 2010"
                },
                {
                    "ex_id": 7917,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
                    "question": "papers before 2010 about character recognition"
                }
            ],
            "example_quality": 0.6335299031142353,
            "example_similarity": 0.3800419738155452,
            "db_id": "car_1"
        },
        {
            "index": 105,
            "question": "What are the different models for the cards produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the distinct director of films with market estimation in the year of 1995. */\nSELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995\n\n/* Answer the following: Who are the different directors of films which had market estimation in 1995? */\nSELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995\n\n/* Answer the following: Which authors published papers in 2015 ? */\nSELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models for the cards produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4133,
                    "db_id": "film_rank",
                    "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995",
                    "question": "Show the distinct director of films with market estimation in the year of 1995."
                },
                {
                    "ex_id": 4134,
                    "db_id": "film_rank",
                    "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995",
                    "question": "Who are the different directors of films which had market estimation in 1995?"
                },
                {
                    "ex_id": 8090,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
                    "question": "Which authors published papers in 2015 ?"
                }
            ],
            "example_quality": 0.6318809219391557,
            "example_similarity": 0.37852225039342335,
            "db_id": "car_1"
        },
        {
            "index": 106,
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all product names and the number of customers having an order on each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Answer the following: What are teh names of the different products, as well as the number of customers who have ordered each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Answer the following: Show the id, name of each festival and the number of artworks it has nominated. */\nSELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in each continents? List the continent name and the count. */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1622,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "Show all product names and the number of customers having an order on each product."
                },
                {
                    "ex_id": 1623,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "What are teh names of the different products, as well as the number of customers who have ordered each product."
                },
                {
                    "ex_id": 4613,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
                    "question": "Show the id, name of each festival and the number of artworks it has nominated."
                }
            ],
            "example_quality": 0.6324413649282945,
            "example_similarity": 0.3779203698377977,
            "db_id": "car_1"
        },
        {
            "index": 107,
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all product names and the number of customers having an order on each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Answer the following: What are teh names of the different products, as well as the number of customers who have ordered each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Answer the following: Show the id, name of each festival and the number of artworks it has nominated. */\nSELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of each continent and how many car makers are there in each one? */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1622,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "Show all product names and the number of customers having an order on each product."
                },
                {
                    "ex_id": 1623,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "What are teh names of the different products, as well as the number of customers who have ordered each product."
                },
                {
                    "ex_id": 4613,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
                    "question": "Show the id, name of each festival and the number of artworks it has nominated."
                }
            ],
            "example_quality": 0.6329913323475429,
            "example_similarity": 0.3767536974070995,
            "db_id": "car_1"
        },
        {
            "index": 108,
            "question": "Which of the countries has the most car makers? List the country name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Return the hometown that is most common among gymnasts. */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which city does has most number of customers? */\nSELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which of the countries has the most car makers? List the country name. */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                },
                {
                    "ex_id": 1764,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Return the hometown that is most common among gymnasts."
                },
                {
                    "ex_id": 6689,
                    "db_id": "driving_school",
                    "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city does has most number of customers?"
                }
            ],
            "example_quality": 0.6356179558134608,
            "example_similarity": 0.3763365274904155,
            "db_id": "car_1"
        },
        {
            "index": 109,
            "question": "What is the name of the country with the most car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the country with the most car makers? */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                },
                {
                    "ex_id": 4334,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of the organization with the most research staff?"
                },
                {
                    "ex_id": 6341,
                    "db_id": "e_government",
                    "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which is the email of the party that has used the services the most number of times?"
                }
            ],
            "example_quality": 0.6374930204390253,
            "example_similarity": 0.37733320840770296,
            "db_id": "car_1"
        },
        {
            "index": 110,
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many engineers did each staff contact? List both the contact staff name and number of engineers contacted. */\nSELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name\n\n/* Answer the following: Show all the faculty ranks and the number of students advised by each rank. */\nSELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank\n\n/* Answer the following: How many students are advised by each rank of faculty? List the rank and the number of students. */\nSELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced by each maker ? Only list the count and the maker full name . */\nSELECT ",
            "response": "count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3156,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
                    "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted."
                },
                {
                    "ex_id": 6758,
                    "db_id": "activity_1",
                    "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
                    "question": "Show all the faculty ranks and the number of students advised by each rank."
                },
                {
                    "ex_id": 6759,
                    "db_id": "activity_1",
                    "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
                    "question": "How many students are advised by each rank of faculty? List the rank and the number of students."
                }
            ],
            "example_quality": 0.634907505887335,
            "example_similarity": 0.3787669313771123,
            "db_id": "car_1"
        },
        {
            "index": 111,
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in. */\nSELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\n\n/* Answer the following: What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in. */\nSELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID\n\n/* Answer the following: Find the number of trains for each station, as well as the station network name and services. */\nSELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models that are produced by each maker and what is the id and full name of each maker? */\nSELECT ",
            "response": "Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6780,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
                    "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in."
                },
                {
                    "ex_id": 6781,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
                    "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in."
                },
                {
                    "ex_id": 3165,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
                    "question": "Find the number of trains for each station, as well as the station network name and services."
                }
            ],
            "example_quality": 0.6350203742796644,
            "example_similarity": 0.37869724502264956,
            "db_id": "car_1"
        },
        {
            "index": 112,
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi river run */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi runs */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the accelerate of the car make amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7286,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi river run"
                },
                {
                    "ex_id": 7287,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi runs"
                }
            ],
            "example_quality": 0.6302115188970654,
            "example_similarity": 0.3779591602102308,
            "db_id": "car_1"
        },
        {
            "index": 113,
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi river run */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi runs */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How much does the car accelerate that makes amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7286,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi river run"
                },
                {
                    "ex_id": 7287,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi runs"
                }
            ],
            "example_quality": 0.6254877759991141,
            "example_similarity": 0.3758969334493605,
            "db_id": "car_1"
        },
        {
            "index": 114,
            "question": "How many car makers are there in france?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in france? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                },
                {
                    "ex_id": 573,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums has Billy Cobam released?"
                },
                {
                    "ex_id": 6870,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "Find the number of routes with destination airports in Italy."
                }
            ],
            "example_quality": 0.6287729709464903,
            "example_similarity": 0.3757672332534109,
            "db_id": "car_1"
        },
        {
            "index": 115,
            "question": "What is the number of makers of care in France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border the mississippi river */\nSELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of makers of care in France? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7527,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "how many states border the mississippi river"
                },
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                }
            ],
            "example_quality": 0.624116264135201,
            "example_similarity": 0.3743960641700858,
            "db_id": "car_1"
        },
        {
            "index": 116,
            "question": "How many car models are produced in the usa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: What is the number of routes operated by the airline American Airlines whose destinations are in Italy? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: Hom many musicians performed in the song \"Flash\"? */\nSELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced in the usa? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6872,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                    "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'."
                },
                {
                    "ex_id": 6873,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                    "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?"
                },
                {
                    "ex_id": 5185,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
                    "question": "Hom many musicians performed in the song \"Flash\"?"
                }
            ],
            "example_quality": 0.6249346378844461,
            "example_similarity": 0.37357696311586386,
            "db_id": "car_1"
        },
        {
            "index": 117,
            "question": "What is the count of the car models produced in the United States?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many times has the student Linda Smith visited Subway? */\nSELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\n\n/* Answer the following: Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\". */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"\n\n/* Answer the following: How many products have the color description 'red' and the characteristic name 'slow'? */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the count of the car models produced in the United States? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2839,
                    "db_id": "restaurant_1",
                    "query": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
                    "question": "How many times has the student Linda Smith visited Subway?"
                },
                {
                    "ex_id": 5575,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
                    "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\"."
                },
                {
                    "ex_id": 5576,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
                    "question": "How many products have the color description 'red' and the characteristic name 'slow'?"
                }
            ],
            "example_quality": 0.6228669561334327,
            "example_similarity": 0.3718859250470004,
            "db_id": "car_1"
        },
        {
            "index": 118,
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all products with manufacturer code equal to 2. */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average price of products with manufacturer codes equal to 2? */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average capacity of the stadiums that were opened in year 2005? */\nSELECT avg(capacity) FROM stadium WHERE opening_year  =  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon(mpg) of the cars with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5333,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "Compute the average price of all products with manufacturer code equal to 2."
                },
                {
                    "ex_id": 5334,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "What is the average price of products with manufacturer codes equal to 2?"
                },
                {
                    "ex_id": 5632,
                    "db_id": "swimming",
                    "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
                    "question": "What is the average capacity of the stadiums that were opened in year 2005?"
                }
            ],
            "example_quality": 0.6260629988780646,
            "example_similarity": 0.3727502692154328,
            "db_id": "car_1"
        },
        {
            "index": 119,
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all products with manufacturer code equal to 2. */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average price of products with manufacturer codes equal to 2? */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What is the average capacity of the stadiums that were opened in year 2005? */\nSELECT avg(capacity) FROM stadium WHERE opening_year  =  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon of all the cards with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5333,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "Compute the average price of all products with manufacturer code equal to 2."
                },
                {
                    "ex_id": 5334,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "What is the average price of products with manufacturer codes equal to 2?"
                },
                {
                    "ex_id": 5632,
                    "db_id": "swimming",
                    "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
                    "question": "What is the average capacity of the stadiums that were opened in year 2005?"
                }
            ],
            "example_quality": 0.6292053266185851,
            "example_similarity": 0.3729701640028472,
            "db_id": "car_1"
        },
        {
            "index": 120,
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of persons who are friends with Alice for the shortest years. */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of all people who are friends with Alice for the shortest amount of time? */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of wines whose production year are before the year of all wines by Brander winery? */\nSELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the smallest weight of the car produced with 8 cylinders on 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4473,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
                    "question": "Find the name of persons who are friends with Alice for the shortest years."
                },
                {
                    "ex_id": 4474,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
                    "question": "What are the names of all people who are friends with Alice for the shortest amount of time?"
                },
                {
                    "ex_id": 6584,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
                    "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?"
                }
            ],
            "example_quality": 0.6245425246639782,
            "example_similarity": 0.37332107401181813,
            "db_id": "car_1"
        },
        {
            "index": 121,
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of persons who are friends with Alice for the shortest years. */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of all people who are friends with Alice for the shortest amount of time? */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Answer the following: What are the names of wines whose production year are before the year of all wines by Brander winery? */\nSELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the minimum weight of the car with 8 cylinders produced in 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4473,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
                    "question": "Find the name of persons who are friends with Alice for the shortest years."
                },
                {
                    "ex_id": 4474,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
                    "question": "What are the names of all people who are friends with Alice for the shortest amount of time?"
                },
                {
                    "ex_id": 6584,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
                    "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?"
                }
            ],
            "example_quality": 0.6199567938160592,
            "example_similarity": 0.3736661838553516,
            "db_id": "car_1"
        },
        {
            "index": 122,
            "question": "What are all the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each trip, return its ending station's installation date. */\nSELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id\n\n/* Answer the following: What is the installation date for each ending station on all the trips? */\nSELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id\n\n/* Answer the following: List all country and league names. */\nSELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are all the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 162,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
                    "question": "For each trip, return its ending station's installation date."
                },
                {
                    "ex_id": 163,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
                    "question": "What is the installation date for each ending station on all the trips?"
                },
                {
                    "ex_id": 1294,
                    "db_id": "soccer_1",
                    "query": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
                    "question": "List all country and league names."
                }
            ],
            "example_quality": 0.6154580587119202,
            "example_similarity": 0.3729250606946451,
            "db_id": "car_1"
        },
        {
            "index": 123,
            "question": "What are the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6185844159581647,
            "example_similarity": 0.3743646943475342,
            "db_id": "car_1"
        },
        {
            "index": 124,
            "question": "What are the countries having at least one car maker? List name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the budget type code and description and the corresponding document id. */\nSELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code\n\n/* Answer the following: Return the budget type codes, budget type descriptions and document ids for documents with expenses. */\nSELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code\n\n/* Answer the following: What is each customer's move in date, and the corresponding customer id and details? */\nSELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the countries having at least one car maker? List name and id. */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6450,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
                    "question": "Show the budget type code and description and the corresponding document id."
                },
                {
                    "ex_id": 6451,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
                    "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses."
                },
                {
                    "ex_id": 4850,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "What is each customer's move in date, and the corresponding customer id and details?"
                }
            ],
            "example_quality": 0.6162107943778253,
            "example_similarity": 0.37378490538078685,
            "db_id": "car_1"
        },
        {
            "index": 125,
            "question": "What are the names and ids of all countries with at least one car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and name of the mountains that have at least 2 photos? */\nSELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and names of the architects who built at least 3 bridges ? */\nSELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3\n\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all countries with at least one car maker? */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3719,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
                    "question": "What are the id and name of the mountains that have at least 2 photos?"
                },
                {
                    "ex_id": 6954,
                    "db_id": "architecture",
                    "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
                    "question": "What are the ids and names of the architects who built at least 3 bridges ?"
                },
                {
                    "ex_id": 870,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
                    "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
                }
            ],
            "example_quality": 0.6184277746894694,
            "example_similarity": 0.37499462613774054,
            "db_id": "car_1"
        },
        {
            "index": 126,
            "question": "What is the number of the cars with horsepower more than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of the cars with horsepower more than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.6214561256839974,
            "example_similarity": 0.3755144754755484,
            "db_id": "car_1"
        },
        {
            "index": 127,
            "question": "What is the number of cars with a horsepower greater than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a horsepower greater than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.6244367861116824,
            "example_similarity": 0.3757656009238307,
            "db_id": "car_1"
        },
        {
            "index": 128,
            "question": "What is the average weight of cars each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prices of wines for different years? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average prices of wines for each each? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average number of attendance at home games for each year? */\nSELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight of cars each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6556,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the average prices of wines for different years?"
                },
                {
                    "ex_id": 6557,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What is the average prices of wines for each each?"
                },
                {
                    "ex_id": 3640,
                    "db_id": "baseball_1",
                    "query": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
                    "question": "What is the average number of attendance at home games for each year?"
                }
            ],
            "example_quality": 0.6270102967971081,
            "example_similarity": 0.3782457403167964,
            "db_id": "car_1"
        },
        {
            "index": 129,
            "question": "What is the average weight and year for each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prices of wines for different years? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average prices of wines for each each? */\nSELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the average number of attendance at home games for each year? */\nSELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight and year for each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6556,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the average prices of wines for different years?"
                },
                {
                    "ex_id": 6557,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What is the average prices of wines for each each?"
                },
                {
                    "ex_id": 3640,
                    "db_id": "baseball_1",
                    "query": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
                    "question": "What is the average number of attendance at home games for each year?"
                }
            ],
            "example_quality": 0.6295439080920618,
            "example_similarity": 0.3803017240621518,
            "db_id": "car_1"
        },
        {
            "index": 130,
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of the customers who have once bought product \"food\". */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n\n/* Answer the following: What are the names of the customers who bought product \"food\" at least once? */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n\n/* Answer the following: List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\"). */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which countries in europe have at least 3 car manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6942,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
                    "question": "List the names of the customers who have once bought product \"food\"."
                },
                {
                    "ex_id": 6943,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
                    "question": "What are the names of the customers who bought product \"food\" at least once?"
                },
                {
                    "ex_id": 6944,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
                    "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\")."
                }
            ],
            "example_quality": 0.6281912080167865,
            "example_similarity": 0.3789303277387521,
            "db_id": "car_1"
        },
        {
            "index": 131,
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the major cities in the states through which the major river in virginia runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );\n\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of all European countries with at least 3 manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7551,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
                    "question": "what are the major cities in the states through which the major river in virginia runs"
                },
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                },
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                }
            ],
            "example_quality": 0.6236993808004531,
            "example_similarity": 0.37776800971530117,
            "db_id": "car_1"
        },
        {
            "index": 132,
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum training hours for the students whose training hours is greater than 1000 in different positions? */\nSELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos\n\n/* Answer the following: For each position, what is the maximum number of  hours for students who spent more than 1000 hours training? */\nSELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos\n\n/* Answer the following: What is the maximum length in meters for the bridges and what are the architects' names? */\nSELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum horsepower and the make of the car models with 3 cylinders? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5015,
                    "db_id": "soccer_2",
                    "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
                    "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?"
                },
                {
                    "ex_id": 5016,
                    "db_id": "soccer_2",
                    "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
                    "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?"
                },
                {
                    "ex_id": 6948,
                    "db_id": "architecture",
                    "query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
                    "question": "What is the maximum length in meters for the bridges and what are the architects' names?"
                }
            ],
            "example_quality": 0.6218097567477827,
            "example_similarity": 0.37809127381952884,
            "db_id": "car_1"
        },
        {
            "index": 133,
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum training hours for the students whose training hours is greater than 1000 in different positions? */\nSELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos\n\n/* Answer the following: For each position, what is the maximum number of  hours for students who spent more than 1000 hours training? */\nSELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos\n\n/* Answer the following: what state has the largest capital */\nSELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5015,
                    "db_id": "soccer_2",
                    "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
                    "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?"
                },
                {
                    "ex_id": 5016,
                    "db_id": "soccer_2",
                    "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
                    "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?"
                },
                {
                    "ex_id": 7409,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
                    "question": "what state has the largest capital"
                }
            ],
            "example_quality": 0.6194615850728115,
            "example_similarity": 0.3776155109698694,
            "db_id": "car_1"
        },
        {
            "index": 134,
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the film that has the highest high market estimation. */\nSELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1\n\n/* Answer the following: Return the title of the film with the highest high estimate? */\nSELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1\n\n/* Answer the following: What is the total point count of the youngest gymnast? */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4157,
                    "db_id": "film_rank",
                    "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
                    "question": "What is the title of the film that has the highest high market estimation."
                },
                {
                    "ex_id": 4158,
                    "db_id": "film_rank",
                    "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
                    "question": "Return the title of the film with the highest high estimate?"
                },
                {
                    "ex_id": 1755,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "What is the total point count of the youngest gymnast?"
                }
            ],
            "example_quality": 0.6205637711392762,
            "example_similarity": 0.37619657397863615,
            "db_id": "car_1"
        },
        {
            "index": 135,
            "question": "What is the car model with the highest mpg ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the film that has the highest high market estimation. */\nSELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1\n\n/* Answer the following: Return the title of the film with the highest high estimate? */\nSELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1\n\n/* Answer the following: Find the name and gender of the candidate who got the highest support rate. */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the car model with the highest mpg ? */\nSELECT ",
            "response": "t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4157,
                    "db_id": "film_rank",
                    "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
                    "question": "What is the title of the film that has the highest high market estimation."
                },
                {
                    "ex_id": 4158,
                    "db_id": "film_rank",
                    "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
                    "question": "Return the title of the film with the highest high estimate?"
                },
                {
                    "ex_id": 2415,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
                    "question": "Find the name and gender of the candidate who got the highest support rate."
                }
            ],
            "example_quality": 0.6182166557140091,
            "example_similarity": 0.3763021426386457,
            "db_id": "car_1"
        },
        {
            "index": 136,
            "question": "What is the average horsepower of the cars before 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average fee on a CSU campus in 1996 */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Answer the following: What is the average fee for a CSU campus in the year of 1996? */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Answer the following: What is the average fee on a CSU campus in 2005? */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower of the cars before 1980? */\nSELECT ",
            "response": "avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2353,
                    "db_id": "csu_1",
                    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
                    "question": "Find the average fee on a CSU campus in 1996"
                },
                {
                    "ex_id": 2354,
                    "db_id": "csu_1",
                    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
                    "question": "What is the average fee for a CSU campus in the year of 1996?"
                },
                {
                    "ex_id": 2355,
                    "db_id": "csu_1",
                    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
                    "question": "What is the average fee on a CSU campus in 2005?"
                }
            ],
            "example_quality": 0.6193898992585957,
            "example_similarity": 0.3771401987793746,
            "db_id": "car_1"
        },
        {
            "index": 137,
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average fee on a CSU campus in 1996 */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Answer the following: What is the average fee for a CSU campus in the year of 1996? */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Answer the following: What is the average fee on a CSU campus in 2005? */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower for all cars produced before 1980 ? */\nSELECT ",
            "response": "avg(horsepower) from cars_data where year < 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2353,
                    "db_id": "csu_1",
                    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
                    "question": "Find the average fee on a CSU campus in 1996"
                },
                {
                    "ex_id": 2354,
                    "db_id": "csu_1",
                    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
                    "question": "What is the average fee for a CSU campus in the year of 1996?"
                },
                {
                    "ex_id": 2355,
                    "db_id": "csu_1",
                    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
                    "question": "What is the average fee on a CSU campus in 2005?"
                }
            ],
            "example_quality": 0.6165532520433449,
            "example_similarity": 0.3775360553504712,
            "db_id": "car_1"
        },
        {
            "index": 138,
            "question": "What is the average edispl of the cars of model volvo?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average height of the players from the college named 'Yale University'? */\nSELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n\n/* Answer the following: Find the average height of the players who belong to the college called 'Yale University'. */\nSELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n\n/* Answer the following: Find the average access counts of documents with functional area \"Acknowledgement\". */\nSELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl of the cars of model volvo? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3656,
                    "db_id": "baseball_1",
                    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
                    "question": "What is the average height of the players from the college named 'Yale University'?"
                },
                {
                    "ex_id": 3657,
                    "db_id": "baseball_1",
                    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
                    "question": "Find the average height of the players who belong to the college called 'Yale University'."
                },
                {
                    "ex_id": 4524,
                    "db_id": "document_management",
                    "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
                    "question": "Find the average access counts of documents with functional area \"Acknowledgement\"."
                }
            ],
            "example_quality": 0.6151153188176609,
            "example_similarity": 0.37804465525705977,
            "db_id": "car_1"
        },
        {
            "index": 139,
            "question": "What is the average edispl for all volvos?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average access counts of documents with functional area \"Acknowledgement\". */\nSELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"\n\n/* Answer the following: What are the average access counts of documents that have the functional area description \"Acknowledgement\"? */\nSELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"\n\n/* Answer the following: What is the average height of the players from the college named 'Yale University'? */\nSELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl for all volvos? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4524,
                    "db_id": "document_management",
                    "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
                    "question": "Find the average access counts of documents with functional area \"Acknowledgement\"."
                },
                {
                    "ex_id": 4525,
                    "db_id": "document_management",
                    "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
                    "question": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?"
                },
                {
                    "ex_id": 3656,
                    "db_id": "baseball_1",
                    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
                    "question": "What is the average height of the players from the college named 'Yale University'?"
                }
            ],
            "example_quality": 0.6136980752786774,
            "example_similarity": 0.3773984386823934,
            "db_id": "car_1"
        },
        {
            "index": 140,
            "question": "What is the maximum accelerate for different number of cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: For each city, what is the highest latitude for its stations? */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: display the employee ID for each employee and the date on which he ended his previous job. */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for different number of cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                },
                {
                    "ex_id": 115,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, what is the highest latitude for its stations?"
                },
                {
                    "ex_id": 3448,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
                    "question": "display the employee ID for each employee and the date on which he ended his previous job."
                }
            ],
            "example_quality": 0.6123914406750384,
            "example_similarity": 0.37656533321959496,
            "db_id": "car_1"
        },
        {
            "index": 141,
            "question": "What is the maximum accelerate for all the different cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: For each city, what is the highest latitude for its stations? */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: display the employee ID for each employee and the date on which he ended his previous job. */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for all the different cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                },
                {
                    "ex_id": 115,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, what is the highest latitude for its stations?"
                },
                {
                    "ex_id": 3448,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
                    "question": "display the employee ID for each employee and the date on which he ended his previous job."
                }
            ],
            "example_quality": 0.6111033398955646,
            "example_similarity": 0.3758583080549292,
            "db_id": "car_1"
        },
        {
            "index": 142,
            "question": "Which model has the most version(make) of cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model has the most version(make) of cars? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                },
                {
                    "ex_id": 4334,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of the organization with the most research staff?"
                },
                {
                    "ex_id": 6341,
                    "db_id": "e_government",
                    "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which is the email of the party that has used the services the most number of times?"
                }
            ],
            "example_quality": 0.6083490910230607,
            "example_similarity": 0.37581235111062683,
            "db_id": "car_1"
        },
        {
            "index": 143,
            "question": "What model has the most different versions?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What model has the most different versions? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6110879085683539,
            "example_similarity": 0.37508495615037685,
            "db_id": "car_1"
        },
        {
            "index": 144,
            "question": "How many cars have more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.6137886869810737,
            "example_similarity": 0.37570103912834213,
            "db_id": "car_1"
        },
        {
            "index": 145,
            "question": "What is the number of cars with more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.616452213277756,
            "example_similarity": 0.3763424743779866,
            "db_id": "car_1"
        },
        {
            "index": 146,
            "question": "how many cars were produced in 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many exhibition are there in year 2005 or after? */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Answer the following: Count the number of exhibitions that happened in or after 2005. */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: how many cars were produced in 1980? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                },
                {
                    "ex_id": 1664,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
                    "question": "How many exhibition are there in year 2005 or after?"
                },
                {
                    "ex_id": 1665,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
                    "question": "Count the number of exhibitions that happened in or after 2005."
                }
            ],
            "example_quality": 0.6180645395693594,
            "example_similarity": 0.37646675787591893,
            "db_id": "car_1"
        },
        {
            "index": 147,
            "question": "In 1980, how many cars were made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many exhibition are there in year 2005 or after? */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Answer the following: Count the number of exhibitions that happened in or after 2005. */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In 1980, how many cars were made? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                },
                {
                    "ex_id": 1664,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
                    "question": "How many exhibition are there in year 2005 or after?"
                },
                {
                    "ex_id": 1665,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
                    "question": "Count the number of exhibitions that happened in or after 2005."
                }
            ],
            "example_quality": 0.619654929448832,
            "example_similarity": 0.3769476911363817,
            "db_id": "car_1"
        },
        {
            "index": 148,
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models were produced by the maker with full name American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                },
                {
                    "ex_id": 573,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums has Billy Cobam released?"
                },
                {
                    "ex_id": 6870,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "Find the number of routes with destination airports in Italy."
                }
            ],
            "example_quality": 0.621513591020835,
            "example_similarity": 0.37654574942235425,
            "db_id": "car_1"
        },
        {
            "index": 149,
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models created by the car maker American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                },
                {
                    "ex_id": 513,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students are affected by food related allergies?"
                },
                {
                    "ex_id": 822,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
                    "question": "Hom many albums does the artist \"Metallica\" have?"
                }
            ],
            "example_quality": 0.6233473041153613,
            "example_similarity": 0.3756378574213307,
            "db_id": "car_1"
        },
        {
            "index": 150,
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions and names of the courses that have student enrollment bigger than 2? */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Return the descriptions and names of the courses that have more than two students enrolled in. */\nSELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2\n\n/* Answer the following: Who are the customers that had more than 1 policy? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which makers designed more than 3 car models? List full name and the id. */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3825,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",
                    "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?"
                },
                {
                    "ex_id": 3826,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",
                    "question": "Return the descriptions and names of the courses that have more than two students enrolled in."
                },
                {
                    "ex_id": 3875,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
                    "question": "Who are the customers that had more than 1 policy? List the customer details and id."
                }
            ],
            "example_quality": 0.6253027665323702,
            "example_similarity": 0.37554230744722417,
            "db_id": "car_1"
        },
        {
            "index": 151,
            "question": "What are the names and ids of all makers with more than 3 models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List title of albums have the number of tracks greater than 10. */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;\n\n/* Answer the following: What are the names of the albums that have more than 10 tracks? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;\n\n/* Answer the following: Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name. */\nSELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all makers with more than 3 models? */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 628,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
                    "question": "List title of albums have the number of tracks greater than 10."
                },
                {
                    "ex_id": 629,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
                    "question": "What are the names of the albums that have more than 10 tracks?"
                },
                {
                    "ex_id": 2955,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
                    "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name."
                }
            ],
            "example_quality": 0.6258424179027305,
            "example_similarity": 0.375692015001535,
            "db_id": "car_1"
        },
        {
            "index": 152,
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: journal articles by mohammad rastegari */\nSELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;\n\n/* Answer the following: Journal Papers by mohammad rastegari */\nSELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;\n\n/* Answer the following: journal papers for instance segmentation */\nSELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7803,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
                    "question": "journal articles by mohammad rastegari"
                },
                {
                    "ex_id": 7804,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
                    "question": "Journal Papers by mohammad rastegari"
                },
                {
                    "ex_id": 7911,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;",
                    "question": "journal papers for instance segmentation"
                }
            ],
            "example_quality": 0.6246367356181382,
            "example_similarity": 0.3738184431325057,
            "db_id": "car_1"
        },
        {
            "index": 153,
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all procedures which cost more than 1000 or which physician John Wen was trained in. */\nSELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Answer the following: What are the procedures that cost more than 1000 or are specialized in by physician John Wen? */\nSELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Answer the following: Who was the director of the movie Joy from 2015 ? */\nSELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models created by either the car maker General Motors or weighed more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3981,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in."
                },
                {
                    "ex_id": 3982,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?"
                },
                {
                    "ex_id": 8456,
                    "db_id": "imdb",
                    "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";",
                    "question": "Who was the director of the movie Joy from 2015 ?"
                }
            ],
            "example_quality": 0.6230937743651077,
            "example_similarity": 0.3739721983745748,
            "db_id": "car_1"
        },
        {
            "index": 154,
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of races held between 2009 and 2011? */\nSELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011\n\n/* Answer the following: What are the names of all races held between 2009 and 2011? */\nSELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011\n\n/* Answer the following: Which campus was opened between 1935 and 1939? */\nSELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In which years cars were produced weighing no less than 3000 and no more than 4000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2204,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
                    "question": "What are the names of races held between 2009 and 2011?"
                },
                {
                    "ex_id": 2205,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
                    "question": "What are the names of all races held between 2009 and 2011?"
                },
                {
                    "ex_id": 2333,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
                    "question": "Which campus was opened between 1935 and 1939?"
                }
            ],
            "example_quality": 0.6202189098373011,
            "example_similarity": 0.37329893640508055,
            "db_id": "car_1"
        },
        {
            "index": 155,
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers with a book published in 1989 and a book in 1990. */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: What are the publishers who have published a book in both 1989 and 1990? */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: Show all director names who have a movie in both year 1999 and 2000. */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6979,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "Show publishers with a book published in 1989 and a book in 1990."
                },
                {
                    "ex_id": 6980,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "What are the publishers who have published a book in both 1989 and 1990?"
                },
                {
                    "ex_id": 6989,
                    "db_id": "culture_company",
                    "query": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999",
                    "question": "Show all director names who have a movie in both year 1999 and 2000."
                }
            ],
            "example_quality": 0.6165354030791175,
            "example_similarity": 0.37253400680559523,
            "db_id": "car_1"
        },
        {
            "index": 156,
            "question": "What is the horsepower of the car with the largest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the largest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.6152694557455822,
            "example_similarity": 0.37312904187174,
            "db_id": "car_1"
        },
        {
            "index": 157,
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the greatest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.6140196351296716,
            "example_similarity": 0.37371649687334785,
            "db_id": "car_1"
        },
        {
            "index": 158,
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the latest movie which \" Gabriele Ferzetti \" acted in */\nSELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;\n\n/* Answer the following: return me the paper by \" H. V. Jagadish \" with the most citations . */\nSELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in Databases area with the most citations . */\nSELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For model volvo, how many cylinders does the car with the least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8534,
                    "db_id": "imdb",
                    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
                    "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in"
                },
                {
                    "ex_id": 8409,
                    "db_id": "academic",
                    "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;",
                    "question": "return me the paper by \" H. V. Jagadish \" with the most citations ."
                },
                {
                    "ex_id": 8406,
                    "db_id": "academic",
                    "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in Databases area with the most citations ."
                }
            ],
            "example_quality": 0.6127412986874577,
            "example_similarity": 0.372184145236628,
            "db_id": "car_1"
        },
        {
            "index": 159,
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the latest movie by \" Jim Jarmusch \" */\nSELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;\n\n/* Answer the following: Find the latest movie which \" Gabriele Ferzetti \" acted in */\nSELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;\n\n/* Answer the following: return me the paper by \" H. V. Jagadish \" with the most citations . */\nSELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For a volvo model, how many cylinders does the version with least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8532,
                    "db_id": "imdb",
                    "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
                    "question": "What is the latest movie by \" Jim Jarmusch \""
                },
                {
                    "ex_id": 8534,
                    "db_id": "imdb",
                    "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
                    "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in"
                },
                {
                    "ex_id": 8409,
                    "db_id": "academic",
                    "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;",
                    "question": "return me the paper by \" H. V. Jagadish \" with the most citations ."
                }
            ],
            "example_quality": 0.611549935921919,
            "example_similarity": 0.3704104004877104,
            "db_id": "car_1"
        },
        {
            "index": 160,
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many budget record has a budget amount smaller than the invested amount? */\nSELECT count(*) FROM budget WHERE budgeted  <  invested\n\n/* Answer the following: Show the most common apartment type code among apartments with more than 1 bathroom. */\nSELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which apartment type code is the most common among apartments with more than one bathroom? */\nSELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have a larger accelerate than the car with the largest horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1905,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
                    "question": "How many budget record has a budget amount smaller than the invested amount?"
                },
                {
                    "ex_id": 1263,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the most common apartment type code among apartments with more than 1 bathroom."
                },
                {
                    "ex_id": 1264,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which apartment type code is the most common among apartments with more than one bathroom?"
                }
            ],
            "example_quality": 0.6092722563981645,
            "example_similarity": 0.3705505223649064,
            "db_id": "car_1"
        },
        {
            "index": 161,
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many budget record has a budget amount smaller than the invested amount? */\nSELECT count(*) FROM budget WHERE budgeted  <  invested\n\n/* Answer the following: Show the most common apartment type code among apartments with more than 1 bathroom. */\nSELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which apartment type code is the most common among apartments with more than one bathroom? */\nSELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a greater accelerate than the one with the most horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1905,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
                    "question": "How many budget record has a budget amount smaller than the invested amount?"
                },
                {
                    "ex_id": 1263,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the most common apartment type code among apartments with more than 1 bathroom."
                },
                {
                    "ex_id": 1264,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which apartment type code is the most common among apartments with more than one bathroom?"
                }
            ],
            "example_quality": 0.6070228710299848,
            "example_similarity": 0.3702487539773343,
            "db_id": "car_1"
        },
        {
            "index": 162,
            "question": "How many countries has more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are there that have more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Answer the following: What is the count of cities with more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Answer the following: List countries that have more than one swimmer. */\nSELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries has more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6854,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "How many cities are there that have more than 3 airports?"
                },
                {
                    "ex_id": 6855,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "What is the count of cities with more than 3 airports?"
                },
                {
                    "ex_id": 5618,
                    "db_id": "swimming",
                    "query": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",
                    "question": "List countries that have more than one swimmer."
                }
            ],
            "example_quality": 0.6037708030795386,
            "example_similarity": 0.3704593485784932,
            "db_id": "car_1"
        },
        {
            "index": 163,
            "question": "What is the number of countries with more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are there that have more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Answer the following: What is the count of cities with more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Answer the following: List countries that have more than one swimmer. */\nSELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of countries with more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6854,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "How many cities are there that have more than 3 airports?"
                },
                {
                    "ex_id": 6855,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "What is the count of cities with more than 3 airports?"
                },
                {
                    "ex_id": 5618,
                    "db_id": "swimming",
                    "query": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",
                    "question": "List countries that have more than one swimmer."
                }
            ],
            "example_quality": 0.6005586378033311,
            "example_similarity": 0.37089359793613175,
            "db_id": "car_1"
        },
        {
            "index": 164,
            "question": "How many cars has over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars has over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.6029942558655058,
            "example_similarity": 0.37127658545695175,
            "db_id": "car_1"
        },
        {
            "index": 165,
            "question": "What is the number of carsw ith over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many heads of the departments are older than 56 ? */\nSELECT count(*) FROM head WHERE age  >  56\n\n/* Answer the following: How many games are held after season 2007? */\nSELECT count(*) FROM game WHERE season  >  2007\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of carsw ith over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM head WHERE age  >  56",
                    "question": "How many heads of the departments are older than 56 ?"
                },
                {
                    "ex_id": 1275,
                    "db_id": "game_injury",
                    "query": "SELECT count(*) FROM game WHERE season  >  2007",
                    "question": "How many games are held after season 2007?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.6054003512845028,
            "example_similarity": 0.3709277909402192,
            "db_id": "car_1"
        },
        {
            "index": 166,
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Answer the following: Find out 5 customers who most recently purchased something. List customers' first and last name. */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For the cars with 4 cylinders, which model has the largest horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1037,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
                    "question": "List the name of the phone model launched in year 2002 and with the highest RAM size."
                },
                {
                    "ex_id": 544,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "Find out 5 customers who most recently purchased something. List customers' first and last name."
                },
                {
                    "ex_id": 545,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "What are the first and last names of the 5 customers who purchased something most recently?"
                }
            ],
            "example_quality": 0.6055884819191145,
            "example_similarity": 0.3704329339776778,
            "db_id": "car_1"
        },
        {
            "index": 167,
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the phone model launched in year 2002 and with the highest RAM size. */\nSELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;\n\n/* Answer the following: Find out 5 customers who most recently purchased something. List customers' first and last name. */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For all of the 4 cylinder cars, which model has the most horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1037,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
                    "question": "List the name of the phone model launched in year 2002 and with the highest RAM size."
                },
                {
                    "ex_id": 544,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "Find out 5 customers who most recently purchased something. List customers' first and last name."
                },
                {
                    "ex_id": 545,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "What are the first and last names of the 5 customers who purchased something most recently?"
                }
            ],
            "example_quality": 0.6057743594922337,
            "example_similarity": 0.3702043289374276,
            "db_id": "car_1"
        },
        {
            "index": 168,
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte? */\nSELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\n\n/* Answer the following: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems. */\nSELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\n\n/* Answer the following: which state capital has the smallest population */\nSELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. */\nSELECT ",
            "response": "T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5389,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
                    "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?"
                },
                {
                    "ex_id": 5390,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
                    "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems."
                },
                {
                    "ex_id": 7434,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
                    "question": "which state capital has the smallest population"
                }
            ],
            "example_quality": 0.6029860722372513,
            "example_similarity": 0.36935777483516813,
            "db_id": "car_1"
        },
        {
            "index": 169,
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte? */\nSELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\n\n/* Answer the following: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems. */\nSELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )\n\n/* Answer the following: which state capital has the smallest population */\nSELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? */\nSELECT ",
            "response": "t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5389,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
                    "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?"
                },
                {
                    "ex_id": 5390,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
                    "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems."
                },
                {
                    "ex_id": 7434,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
                    "question": "which state capital has the smallest population"
                }
            ],
            "example_quality": 0.5998370178276532,
            "example_similarity": 0.36874138841641874,
            "db_id": "car_1"
        },
        {
            "index": 170,
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wines that are more expensive then all wines made in the year 2006? */\nSELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\n\n/* Answer the following: Give the names of wines with prices above any wine produced in 2006. */\nSELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\n\n/* Answer the following: In which year did the most recent crime happen? */\nSELECT max(YEAR) FROM perpetrator;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6586,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
                    "question": "What are the names of wines that are more expensive then all wines made in the year 2006?"
                },
                {
                    "ex_id": 6587,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
                    "question": "Give the names of wines with prices above any wine produced in 2006."
                },
                {
                    "ex_id": 2324,
                    "db_id": "perpetrator",
                    "query": "SELECT max(YEAR) FROM perpetrator;",
                    "question": "In which year did the most recent crime happen?"
                }
            ],
            "example_quality": 0.5966330386461753,
            "example_similarity": 0.36809146241546314,
            "db_id": "car_1"
        },
        {
            "index": 171,
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wines that are more expensive then all wines made in the year 2006? */\nSELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\n\n/* Answer the following: Give the names of wines with prices above any wine produced in 2006. */\nSELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)\n\n/* Answer the following: In which year did the most recent crime happen? */\nSELECT max(YEAR) FROM perpetrator;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6586,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
                    "question": "What are the names of wines that are more expensive then all wines made in the year 2006?"
                },
                {
                    "ex_id": 6587,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
                    "question": "Give the names of wines with prices above any wine produced in 2006."
                },
                {
                    "ex_id": 2324,
                    "db_id": "perpetrator",
                    "query": "SELECT max(YEAR) FROM perpetrator;",
                    "question": "In which year did the most recent crime happen?"
                }
            ],
            "example_quality": 0.5934665329054164,
            "example_similarity": 0.3675817502040512,
            "db_id": "car_1"
        },
        {
            "index": 172,
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in? */\nSELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Answer the following: Among the procedures that cost more than 1000, which were not specialized in by physician John Wen? */\nSELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Answer the following: What are the response received dates for the documents described as 'Regular' or granted with more than 100? */\nSELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3983,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?"
                },
                {
                    "ex_id": 3984,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?"
                },
                {
                    "ex_id": 4337,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
                    "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?"
                }
            ],
            "example_quality": 0.5919435954941898,
            "example_similarity": 0.36787645866180824,
            "db_id": "car_1"
        },
        {
            "index": 173,
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the major cities in the states through which the major river in virginia runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );\n\n/* Answer the following: what are the major cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );\n\n/* Answer the following: Show the name and age for all male people who don't have a wedding. */\nSELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7551,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
                    "question": "what are the major cities in the states through which the major river in virginia runs"
                },
                {
                    "ex_id": 7281,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );",
                    "question": "what are the major cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 1642,
                    "db_id": "wedding",
                    "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
                    "question": "Show the name and age for all male people who don't have a wedding."
                }
            ],
            "example_quality": 0.5888203635984659,
            "example_similarity": 0.36704508903777866,
            "db_id": "car_1"
        },
        {
            "index": 174,
            "question": "What are the name of the countries where there is not a single car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that have not been on the affirmative side of debates. */\nSELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n\n/* Answer the following: List the names of aircrafts and that did not win any match. */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Answer the following: What are the names of all aicrafts that have never won any match? */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the name of the countries where there is not a single car maker? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1507,
                    "db_id": "debate",
                    "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
                    "question": "List the names of people that have not been on the affirmative side of debates."
                },
                {
                    "ex_id": 4832,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "List the names of aircrafts and that did not win any match."
                },
                {
                    "ex_id": 4833,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "What are the names of all aicrafts that have never won any match?"
                }
            ],
            "example_quality": 0.5858563208368478,
            "example_similarity": 0.3666684044817258,
            "db_id": "car_1"
        },
        {
            "index": 175,
            "question": "What are the names of the countries with no car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that have not been on the affirmative side of debates. */\nSELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n\n/* Answer the following: List the names of aircrafts and that did not win any match. */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Answer the following: What are the names of all aicrafts that have never won any match? */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of the countries with no car makers? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1507,
                    "db_id": "debate",
                    "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
                    "question": "List the names of people that have not been on the affirmative side of debates."
                },
                {
                    "ex_id": 4832,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "List the names of aircrafts and that did not win any match."
                },
                {
                    "ex_id": 4833,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "What are the names of all aicrafts that have never won any match?"
                }
            ],
            "example_quality": 0.5829261528496482,
            "example_similarity": 0.3664153882983478,
            "db_id": "car_1"
        },
        {
            "index": 176,
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail. */\nSELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2\n\n/* Answer the following: What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results? */\nSELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n\n/* Answer the following: What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races? */\nSELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . */\nSELECT ",
            "response": "t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3127,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
                    "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail."
                },
                {
                    "ex_id": 2210,
                    "db_id": "formula_1",
                    "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
                    "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?"
                },
                {
                    "ex_id": 2211,
                    "db_id": "formula_1",
                    "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
                    "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?"
                }
            ],
            "example_quality": 0.5814233512367174,
            "example_similarity": 0.36701915370263527,
            "db_id": "car_1"
        },
        {
            "index": 177,
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of customers who have bought by at least three distinct products. */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3\n\n/* Answer the following: What are the distinct names of customers who have purchased at least three different products? */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3\n\n/* Answer the following: Find the names of products that were bought by at least two distinct customers. */\nSELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? */\nSELECT ",
            "response": "T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4788,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
                    "question": "Find the names of customers who have bought by at least three distinct products."
                },
                {
                    "ex_id": 4789,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
                    "question": "What are the distinct names of customers who have purchased at least three different products?"
                },
                {
                    "ex_id": 4786,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
                    "question": "Find the names of products that were bought by at least two distinct customers."
                }
            ],
            "example_quality": 0.5796061940845538,
            "example_similarity": 0.36628892581281414,
            "db_id": "car_1"
        },
        {
            "index": 178,
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the major cities in the states through which the major river in virginia runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );\n\n/* Answer the following: what states border texas and have a major river */\nSELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );\n\n/* Answer the following: what are the major cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? */\nSELECT ",
            "response": "T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7551,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
                    "question": "what are the major cities in the states through which the major river in virginia runs"
                },
                {
                    "ex_id": 7417,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
                    "question": "what states border texas and have a major river"
                },
                {
                    "ex_id": 7281,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );",
                    "question": "what are the major cities in states through which the mississippi runs"
                }
            ],
            "example_quality": 0.5766134705978946,
            "example_similarity": 0.3656429657674467,
            "db_id": "car_1"
        },
        {
            "index": 179,
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the major cities in the states through which the major river in virginia runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );\n\n/* Answer the following: what is the capital of the state that borders the state that borders texas */\nSELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );\n\n/* Answer the following: List from which date and to which date these staff work: project staff of the project which hires the most staffs */\nSELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? */\nSELECT ",
            "response": "t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7551,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
                    "question": "what are the major cities in the states through which the major river in virginia runs"
                },
                {
                    "ex_id": 7466,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
                    "question": "what is the capital of the state that borders the state that borders texas"
                },
                {
                    "ex_id": 4327,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'",
                    "question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs"
                }
            ],
            "example_quality": 0.5735484578266584,
            "example_similarity": 0.36511786722571454,
            "db_id": "car_1"
        },
        {
            "index": 180,
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which country does Airline \"JetBlue Airways\" belong to? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.5759176330609547,
            "example_similarity": 0.3646381700662195,
            "db_id": "flight_2"
        },
        {
            "index": 181,
            "question": "What country is Jetblue Airways affiliated with?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What country is Jetblue Airways affiliated with? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.5782606295633804,
            "example_similarity": 0.36441444367118375,
            "db_id": "flight_2"
        },
        {
            "index": 182,
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of Airline \"JetBlue Airways\"? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.5805778788514937,
            "example_similarity": 0.36534726559710057,
            "db_id": "flight_2"
        },
        {
            "index": 183,
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which abbreviation corresponds to Jetblue Airways? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.5828698030107752,
            "example_similarity": 0.3646098999748494,
            "db_id": "flight_2"
        },
        {
            "index": 184,
            "question": "List all airline names and their abbreviations in \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List all airline names and their abbreviations in \"USA\". */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.585136814950934,
            "example_similarity": 0.3640654063713072,
            "db_id": "flight_2"
        },
        {
            "index": 185,
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the airline names and abbreviations for airlines in the USA? */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.5873793186539019,
            "example_similarity": 0.3644292287640007,
            "db_id": "flight_2"
        },
        {
            "index": 186,
            "question": "List the airport code and name in the city of Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List the airport code and name in the city of Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.5895977094138272,
            "example_similarity": 0.36480670883987065,
            "db_id": "flight_2"
        },
        {
            "index": 187,
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airport code and airport name corresonding to the city Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.5917923740693681,
            "example_similarity": 0.36509156967163625,
            "db_id": "flight_2"
        },
        {
            "index": 188,
            "question": "How many airlines do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines do we have? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.5939636912285736,
            "example_similarity": 0.36487339150356407,
            "db_id": "flight_2"
        },
        {
            "index": 189,
            "question": "What is the total number of airlines?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the total number of airlines? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.5961120314866235,
            "example_similarity": 0.36423620130748413,
            "db_id": "flight_2"
        },
        {
            "index": 190,
            "question": "How many airports do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airports do we have? */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.598237757636694,
            "example_similarity": 0.3640248216904662,
            "db_id": "flight_2"
        },
        {
            "index": 191,
            "question": "Return the number of  airports.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of  airports. */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6003412248741982,
            "example_similarity": 0.3636828137167009,
            "db_id": "flight_2"
        },
        {
            "index": 192,
            "question": "How many flights do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights do we have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6024227809946451,
            "example_similarity": 0.36347651819772886,
            "db_id": "flight_2"
        },
        {
            "index": 193,
            "question": "Return the number of flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6044827665853464,
            "example_similarity": 0.36314089529878363,
            "db_id": "flight_2"
        },
        {
            "index": 194,
            "question": "Which airline has abbreviation 'UAL'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has abbreviation 'UAL'? */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6065215152111951,
            "example_similarity": 0.36238587350171086,
            "db_id": "flight_2"
        },
        {
            "index": 195,
            "question": "Give the airline with abbreviation 'UAL'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airline with abbreviation 'UAL'. */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6085393535947274,
            "example_similarity": 0.3614587971028489,
            "db_id": "flight_2"
        },
        {
            "index": 196,
            "question": "How many airlines are from USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines are from USA? */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6105366017906727,
            "example_similarity": 0.36246626527539844,
            "db_id": "flight_2"
        },
        {
            "index": 197,
            "question": "Return the number of airlines in the USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of airlines in the USA. */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6125135733551871,
            "example_similarity": 0.3614421435517379,
            "db_id": "flight_2"
        },
        {
            "index": 198,
            "question": "Which city and country is the Alton airport at?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city and country is the Alton airport at? */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.6144705755099589,
            "example_similarity": 0.3615366717669248,
            "db_id": "flight_2"
        },
        {
            "index": 199,
            "question": "Give the city and country for the Alton airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the city and country for the Alton airport. */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.616407909301366,
            "example_similarity": 0.3619437067331042,
            "db_id": "flight_2"
        },
        {
            "index": 200,
            "question": "What is the airport name for airport 'AKO'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport name for airport 'AKO'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6183258697548593,
            "example_similarity": 0.3617229432258937,
            "db_id": "flight_2"
        },
        {
            "index": 201,
            "question": "Return the name of the airport with code 'AKO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the name of the airport with code 'AKO'. */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6202247460247355,
            "example_similarity": 0.3611652373399458,
            "db_id": "flight_2"
        },
        {
            "index": 202,
            "question": "What are airport names at City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airport names at City 'Aberdeen'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6221048215394646,
            "example_similarity": 0.3606418778634792,
            "db_id": "flight_2"
        },
        {
            "index": 203,
            "question": "What are the names of airports in Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the names of airports in Aberdeen? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6239663741427185,
            "example_similarity": 0.36058462530180263,
            "db_id": "flight_2"
        },
        {
            "index": 204,
            "question": "How many flights depart from 'APG'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from 'APG'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6258096762302542,
            "example_similarity": 0.36086905933762303,
            "db_id": "flight_2"
        },
        {
            "index": 205,
            "question": "Count the number of flights departing from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights departing from 'APG'. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6276349948827895,
            "example_similarity": 0.35968393899928447,
            "db_id": "flight_2"
        },
        {
            "index": 206,
            "question": "How many flights have destination ATO?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights have destination ATO? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.629442591995009,
            "example_similarity": 0.36120111513143466,
            "db_id": "flight_2"
        },
        {
            "index": 207,
            "question": "Count the number of flights into ATO.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights into ATO. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6312327244008302,
            "example_similarity": 0.3601486727556574,
            "db_id": "flight_2"
        },
        {
            "index": 208,
            "question": "How many flights depart from City Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents were shipped by USPS? */\nSELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";\n\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Answer the following: How many classes are professor whose last name is Graztevski has? */\nSELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City Aberdeen? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2117,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
                    "question": "How many documents were shipped by USPS?"
                },
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                },
                {
                    "ex_id": 3182,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
                    "question": "How many classes are professor whose last name is Graztevski has?"
                }
            ],
            "example_quality": 0.6319173463278119,
            "example_similarity": 0.36079397862881435,
            "db_id": "flight_2"
        },
        {
            "index": 209,
            "question": "Return the number of flights departing from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights departing from Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6299011213013127,
            "example_similarity": 0.3597075488685337,
            "db_id": "flight_2"
        },
        {
            "index": 210,
            "question": "How many flights arriving in Aberdeen city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights arriving in Aberdeen city? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                },
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                }
            ],
            "example_quality": 0.6273912164821952,
            "example_similarity": 0.3595030369089134,
            "db_id": "flight_2"
        },
        {
            "index": 211,
            "question": "Return the number of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights arriving in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                },
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                }
            ],
            "example_quality": 0.6249051022300836,
            "example_similarity": 0.35902588284494585,
            "db_id": "flight_2"
        },
        {
            "index": 212,
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many credit cards does customer Blanche Huels have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"\n\n/* Answer the following: Count the number of credit cards that the customer with first name Blanche and last name Huels has. */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"\n\n/* Answer the following: How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed? */\nSELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 710,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
                    "question": "How many credit cards does customer Blanche Huels have?"
                },
                {
                    "ex_id": 711,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
                    "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has."
                },
                {
                    "ex_id": 6677,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
                    "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?"
                }
            ],
            "example_quality": 0.6241964303642183,
            "example_similarity": 0.359037734631236,
            "db_id": "flight_2"
        },
        {
            "index": 213,
            "question": "How many flights fly from Aberdeen to Ashley?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many times does ROY SWEAZY has reserved a room. */\nSELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights fly from Aberdeen to Ashley? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                },
                {
                    "ex_id": 2581,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
                    "question": "How many times does ROY SWEAZY has reserved a room."
                }
            ],
            "example_quality": 0.6220027590688203,
            "example_similarity": 0.3590133610125267,
            "db_id": "flight_2"
        },
        {
            "index": 214,
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents were shipped by USPS? */\nSELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";\n\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many students are attending English courses? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights does airline 'JetBlue Airways' have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2117,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
                    "question": "How many documents were shipped by USPS?"
                },
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                },
                {
                    "ex_id": 71,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students are attending English courses?"
                }
            ],
            "example_quality": 0.6228274949638329,
            "example_similarity": 0.3595523592057345,
            "db_id": "flight_2"
        },
        {
            "index": 215,
            "question": "Give the number of Jetblue Airways flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the number of Jetblue Airways flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                },
                {
                    "ex_id": 513,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students are affected by food related allergies?"
                },
                {
                    "ex_id": 822,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
                    "question": "Hom many albums does the artist \"Metallica\" have?"
                }
            ],
            "example_quality": 0.6245817856849314,
            "example_similarity": 0.35896131861630604,
            "db_id": "flight_2"
        },
        {
            "index": 216,
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts does the customer with first name Art and last name Turcotte have? */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Return the number of accounts that the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many cards does customer Art Turcotte have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights go to Airport 'ASY'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 676,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many accounts does the customer with first name Art and last name Turcotte have?"
                },
                {
                    "ex_id": 677,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has."
                },
                {
                    "ex_id": 706,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many cards does customer Art Turcotte have?"
                }
            ],
            "example_quality": 0.625917256483894,
            "example_similarity": 0.3586571440865542,
            "db_id": "flight_2"
        },
        {
            "index": 217,
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights arriving in ASY Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                }
            ],
            "example_quality": 0.6234453114389235,
            "example_similarity": 0.3587412416625737,
            "db_id": "flight_2"
        },
        {
            "index": 218,
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts does the customer with first name Art and last name Turcotte have? */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: Return the number of accounts that the customer with the first name Art and last name Turcotte has. */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many cards does customer Art Turcotte have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights depart from Airport 'AHD'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 676,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many accounts does the customer with first name Art and last name Turcotte have?"
                },
                {
                    "ex_id": 677,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has."
                },
                {
                    "ex_id": 706,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many cards does customer Art Turcotte have?"
                }
            ],
            "example_quality": 0.6247737433968223,
            "example_similarity": 0.35844086725214863,
            "db_id": "flight_2"
        },
        {
            "index": 219,
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of United Airlines flights leaving from AHD Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                }
            ],
            "example_quality": 0.6223102800203607,
            "example_similarity": 0.3587414327253459,
            "db_id": "flight_2"
        },
        {
            "index": 220,
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many United Airlines flights go to City 'Aberdeen'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                },
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                }
            ],
            "example_quality": 0.6197732761327405,
            "example_similarity": 0.35895702475476704,
            "db_id": "flight_2"
        },
        {
            "index": 221,
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights that arrive in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                },
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                }
            ],
            "example_quality": 0.6172592315563203,
            "example_similarity": 0.35886079673238475,
            "db_id": "flight_2"
        },
        {
            "index": 222,
            "question": "Which city has most number of arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Return the hometown that is most common among gymnasts. */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which city does has most number of customers? */\nSELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of arriving flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                },
                {
                    "ex_id": 1764,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Return the hometown that is most common among gymnasts."
                },
                {
                    "ex_id": 6689,
                    "db_id": "driving_school",
                    "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city does has most number of customers?"
                }
            ],
            "example_quality": 0.6182625683511116,
            "example_similarity": 0.3593045399672469,
            "db_id": "flight_2"
        },
        {
            "index": 223,
            "question": "Which city has the most frequent destination airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Return the hometown that is most common among gymnasts. */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which city does has most number of customers? */\nSELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has the most frequent destination airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                },
                {
                    "ex_id": 1764,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Return the hometown that is most common among gymnasts."
                },
                {
                    "ex_id": 6689,
                    "db_id": "driving_school",
                    "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city does has most number of customers?"
                }
            ],
            "example_quality": 0.6192569066096268,
            "example_similarity": 0.35941420877349556,
            "db_id": "flight_2"
        },
        {
            "index": 224,
            "question": "Which city has most number of departing flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Return the hometown that is most common among gymnasts. */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which city does has most number of customers? */\nSELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of departing flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                },
                {
                    "ex_id": 1764,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Return the hometown that is most common among gymnasts."
                },
                {
                    "ex_id": 6689,
                    "db_id": "driving_school",
                    "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city does has most number of customers?"
                }
            ],
            "example_quality": 0.6202423668479768,
            "example_similarity": 0.35985151942572,
            "db_id": "flight_2"
        },
        {
            "index": 225,
            "question": "Which city is the most frequent source airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which student visited restaurant most often? List student's first name and last name. */\nSELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: What are the names of the cameras that have taken picture of the most mountains? */\nSELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city is the most frequent source airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2842,
                    "db_id": "restaurant_1",
                    "query": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which student visited restaurant most often? List student's first name and last name."
                },
                {
                    "ex_id": 3720,
                    "db_id": "mountain_photos",
                    "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the names of the cameras that have taken picture of the most mountains?"
                },
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                }
            ],
            "example_quality": 0.6208132353633432,
            "example_similarity": 0.35992859259474413,
            "db_id": "flight_2"
        },
        {
            "index": 226,
            "question": "What is the code of airport that has the highest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has the highest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6189454173798778,
            "example_similarity": 0.35927010816340066,
            "db_id": "flight_2"
        },
        {
            "index": 227,
            "question": "What is the airport code of the airport with the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport code of the airport with the most flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6170940559425222,
            "example_similarity": 0.35898249306788554,
            "db_id": "flight_2"
        },
        {
            "index": 228,
            "question": "What is the code of airport that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type has least number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which allergy type is the least common? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: List three countries which are the origins of the least players. */\nSELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has fewest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 458,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type has least number of allergies?"
                },
                {
                    "ex_id": 459,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type is the least common?"
                },
                {
                    "ex_id": 3650,
                    "db_id": "baseball_1",
                    "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
                    "question": "List three countries which are the origins of the least players."
                }
            ],
            "example_quality": 0.6151797134766666,
            "example_similarity": 0.3586915993709156,
            "db_id": "flight_2"
        },
        {
            "index": 229,
            "question": "Give the code of the airport with the least flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type has least number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which allergy type is the least common? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: List three countries which are the origins of the least players. */\nSELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the code of the airport with the least flights. */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 458,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type has least number of allergies?"
                },
                {
                    "ex_id": 459,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type is the least common?"
                },
                {
                    "ex_id": 3650,
                    "db_id": "baseball_1",
                    "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
                    "question": "List three countries which are the origins of the least players."
                }
            ],
            "example_quality": 0.6132820901589843,
            "example_similarity": 0.35851414939792275,
            "db_id": "flight_2"
        },
        {
            "index": 230,
            "question": "Which airline has most number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has most number of flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6117634723756843,
            "example_similarity": 0.3582666413639635,
            "db_id": "flight_2"
        },
        {
            "index": 231,
            "question": "What airline serves the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What airline serves the most flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6102580027983003,
            "example_similarity": 0.3583075460234945,
            "db_id": "flight_2"
        },
        {
            "index": 232,
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and hours of project that has the most number of scientists. */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and hours for the project which has the most scientists assigned to it? */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the full name of employee who supported the most number of customers. */\nSELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the abbreviation and country of the airline that has fewest number of flights? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6484,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and hours of project that has the most number of scientists."
                },
                {
                    "ex_id": 6485,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and hours for the project which has the most scientists assigned to it?"
                },
                {
                    "ex_id": 594,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the full name of employee who supported the most number of customers."
                }
            ],
            "example_quality": 0.6114405777199258,
            "example_similarity": 0.35894797077239515,
            "db_id": "flight_2"
        },
        {
            "index": 233,
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and hours of project that has the most number of scientists. */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and hours for the project which has the most scientists assigned to it? */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the full name of employee who supported the most number of customers. */\nSELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of the airilne has the fewest flights and what country is it in? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6484,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and hours of project that has the most number of scientists."
                },
                {
                    "ex_id": 6485,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and hours for the project which has the most scientists assigned to it?"
                },
                {
                    "ex_id": 594,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the full name of employee who supported the most number of customers."
                }
            ],
            "example_quality": 0.6126130017838547,
            "example_similarity": 0.35891066793756266,
            "db_id": "flight_2"
        },
        {
            "index": 234,
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the highest point in the state with capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: what is the highest point in the state with the capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: what are the highest points of states surrounding mississippi */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have some flight departing from airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7332,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with capital des moines"
                },
                {
                    "ex_id": 7333,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with the capital des moines"
                },
                {
                    "ex_id": 7186,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
                    "question": "what are the highest points of states surrounding mississippi"
                }
            ],
            "example_quality": 0.610407085414815,
            "example_similarity": 0.35843547383404845,
            "db_id": "flight_2"
        },
        {
            "index": 235,
            "question": "Which airlines have a flight with source airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with source airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                },
                {
                    "ex_id": 331,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "What are the names of catalog entries with level number 8?"
                },
                {
                    "ex_id": 414,
                    "db_id": "flight_1",
                    "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
                    "question": "Show all flight numbers with aircraft Airbus A340-300."
                }
            ],
            "example_quality": 0.6116169992730723,
            "example_similarity": 0.35822853105845087,
            "db_id": "flight_2"
        },
        {
            "index": 236,
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: What are the titles of albums by the artist \"AC/DC\"? */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: Find all the policy type codes associated with the customer \"Dayana Robel\" */\nSELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have flights arriving at airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 820,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "Find the title of all the albums of the artist \"AC/DC\"."
                },
                {
                    "ex_id": 821,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "What are the titles of albums by the artist \"AC/DC\"?"
                },
                {
                    "ex_id": 1510,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
                    "question": "Find all the policy type codes associated with the customer \"Dayana Robel\""
                }
            ],
            "example_quality": 0.6122215277265156,
            "example_similarity": 0.35765305193929303,
            "db_id": "flight_2"
        },
        {
            "index": 237,
            "question": "Which airlines have a flight with destination airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with destination airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                },
                {
                    "ex_id": 331,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "What are the names of catalog entries with level number 8?"
                },
                {
                    "ex_id": 414,
                    "db_id": "flight_1",
                    "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
                    "question": "Show all flight numbers with aircraft Airbus A340-300."
                }
            ],
            "example_quality": 0.6134135754665104,
            "example_similarity": 0.3574511568744379,
            "db_id": "flight_2"
        },
        {
            "index": 238,
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids and details of the investors who have at least two transactions with type code \"SALE\". */\nSELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: What is the id, first name, and last name of the driver who was in the first position for laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from both airports 'APG' and 'CVO'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5882,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
                    "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\"."
                },
                {
                    "ex_id": 2170,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
                    "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?"
                },
                {
                    "ex_id": 2171,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
                    "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?"
                }
            ],
            "example_quality": 0.6116961733210516,
            "example_similarity": 0.3565475624554648,
            "db_id": "flight_2"
        },
        {
            "index": 239,
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name and age of the student who has allergy to both milk and cat. */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: What are the last names and ages of the students who are allergic to milk and cat? */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: Find the first name and age of the students who are playing both Football and Lacrosse. */\nSELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departing flights from both APG and CVO airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 520,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the last name and age of the student who has allergy to both milk and cat."
                },
                {
                    "ex_id": 521,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "What are the last names and ages of the students who are allergic to milk and cat?"
                },
                {
                    "ex_id": 6052,
                    "db_id": "game_1",
                    "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
                    "question": "Find the first name and age of the students who are playing both Football and Lacrosse."
                }
            ],
            "example_quality": 0.6096024581423611,
            "example_similarity": 0.3563484477873886,
            "db_id": "flight_2"
        },
        {
            "index": 240,
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of instructors who didn't each any courses in any Spring semester. */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: What are the names of instructors who didn't teach courses in the Spring? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: List the project details of the projects which did not hire any staff for a researcher role. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from airport 'CVO' but not from 'APG'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1445,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "Find the names of instructors who didn't each any courses in any Spring semester."
                },
                {
                    "ex_id": 1446,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "What are the names of instructors who didn't teach courses in the Spring?"
                },
                {
                    "ex_id": 4339,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
                    "question": "List the project details of the projects which did not hire any staff for a researcher role."
                }
            ],
            "example_quality": 0.6072961494378964,
            "example_similarity": 0.35580700980796265,
            "db_id": "flight_2"
        },
        {
            "index": 241,
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which states does not border texas */\nSELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );\n\n/* Answer the following: which rivers do not run through tennessee */\nSELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );\n\n/* Answer the following: what rivers do not run through tennessee */\nSELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departures from CVO but not from APG airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7552,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
                    "question": "which states does not border texas"
                },
                {
                    "ex_id": 7429,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
                    "question": "which rivers do not run through tennessee"
                },
                {
                    "ex_id": 7430,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
                    "question": "what rivers do not run through tennessee"
                }
            ],
            "example_quality": 0.6050447851204275,
            "example_similarity": 0.3551478677818409,
            "db_id": "flight_2"
        },
        {
            "index": 242,
            "question": "Find all airlines that have at least 10 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have at least 10 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.6033543504544736,
            "example_similarity": 0.355223428592494,
            "db_id": "flight_2"
        },
        {
            "index": 243,
            "question": "Which airlines have at least 10 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have at least 10 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.6016778288310378,
            "example_similarity": 0.3552202435863378,
            "db_id": "flight_2"
        },
        {
            "index": 244,
            "question": "Find all airlines that have fewer than 200 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the ids and names of stations from which at least 200 trips started. */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: What are the ids and names of all start stations that were the beginning of at least 200 trips? */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: Show the number of cities in counties that have a population more than 20000. */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have fewer than 200 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 180,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
                    "question": "Find the ids and names of stations from which at least 200 trips started."
                },
                {
                    "ex_id": 181,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
                    "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?"
                },
                {
                    "ex_id": 2557,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "Show the number of cities in counties that have a population more than 20000."
                }
            ],
            "example_quality": 0.5998026580185655,
            "example_similarity": 0.3549104459881545,
            "db_id": "flight_2"
        },
        {
            "index": 245,
            "question": "Which airlines have less than 200 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of people who have been on the negative side of debates at least twice. */\nSELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\n\n/* Answer the following: What are the hometowns that are shared by at least two gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n\n/* Answer the following: Give the hometowns from which two or more gymnasts are from. */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have less than 200 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1506,
                    "db_id": "debate",
                    "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
                    "question": "Show the names of people who have been on the negative side of debates at least twice."
                },
                {
                    "ex_id": 1765,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
                    "question": "What are the hometowns that are shared by at least two gymnasts?"
                },
                {
                    "ex_id": 1766,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
                    "question": "Give the hometowns from which two or more gymnasts are from."
                }
            ],
            "example_quality": 0.6004157083939998,
            "example_similarity": 0.3541760570068697,
            "db_id": "flight_2"
        },
        {
            "index": 246,
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the highest points of states surrounding mississippi */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );\n\n/* Answer the following: what are the high points of states surrounding mississippi */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );\n\n/* Answer the following: what are the lakes in states bordering texas */\nSELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of Airline \"United Airlines\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7186,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
                    "question": "what are the highest points of states surrounding mississippi"
                },
                {
                    "ex_id": 7187,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
                    "question": "what are the high points of states surrounding mississippi"
                },
                {
                    "ex_id": 7482,
                    "db_id": "geo",
                    "query": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
                    "question": "what are the lakes in states bordering texas"
                }
            ],
            "example_quality": 0.5983669801949534,
            "example_similarity": 0.3543816905343293,
            "db_id": "flight_2"
        },
        {
            "index": 247,
            "question": "Which flight numbers correspond to United Airlines flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of tracks whose genre is Rock? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: What is the name of all tracks in the Rock genre? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which flight numbers correspond to United Airlines flights? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 622,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of tracks whose genre is Rock?"
                },
                {
                    "ex_id": 623,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of all tracks in the Rock genre?"
                },
                {
                    "ex_id": 820,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "Find the title of all the albums of the artist \"AC/DC\"."
                }
            ],
            "example_quality": 0.5991216155170868,
            "example_similarity": 0.3541558987148021,
            "db_id": "flight_2"
        },
        {
            "index": 248,
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6007380606158083,
            "example_similarity": 0.35424963083948735,
            "db_id": "flight_2"
        },
        {
            "index": 249,
            "question": "Give the flight numbers of flights leaving from APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6023415222197608,
            "example_similarity": 0.35377314779696895,
            "db_id": "flight_2"
        },
        {
            "index": 250,
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6039321561308817,
            "example_similarity": 0.3538676610683281,
            "db_id": "flight_2"
        },
        {
            "index": 251,
            "question": "Give the flight numbers of flights landing at APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights landing at APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6055101156682089,
            "example_similarity": 0.3533964964953563,
            "db_id": "flight_2"
        },
        {
            "index": 252,
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the instructor who advises of all students from History department? */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Give id of the instructor who advises students in the History department. */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Find all the instruments ever used by the musician with last name \"Heilo\"? */\nSELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from City \"Aberdeen \"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1415,
                    "db_id": "college_2",
                    "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
                    "question": "What is the id of the instructor who advises of all students from History department?"
                },
                {
                    "ex_id": 1416,
                    "db_id": "college_2",
                    "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
                    "question": "Give id of the instructor who advises students in the History department."
                },
                {
                    "ex_id": 5217,
                    "db_id": "music_2",
                    "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
                    "question": "Find all the instruments ever used by the musician with last name \"Heilo\"?"
                }
            ],
            "example_quality": 0.6064549526003049,
            "example_similarity": 0.353331258500292,
            "db_id": "flight_2"
        },
        {
            "index": 253,
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6046677224093382,
            "example_similarity": 0.3528659387167035,
            "db_id": "flight_2"
        },
        {
            "index": 254,
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the instructor who advises of all students from History department? */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Give id of the instructor who advises students in the History department. */\nSELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'\n\n/* Answer the following: Find all the instruments ever used by the musician with last name \"Heilo\"? */\nSELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at City \"Aberdeen\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1415,
                    "db_id": "college_2",
                    "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
                    "question": "What is the id of the instructor who advises of all students from History department?"
                },
                {
                    "ex_id": 1416,
                    "db_id": "college_2",
                    "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
                    "question": "Give id of the instructor who advises students in the History department."
                },
                {
                    "ex_id": 5217,
                    "db_id": "music_2",
                    "query": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
                    "question": "Find all the instruments ever used by the musician with last name \"Heilo\"?"
                }
            ],
            "example_quality": 0.6056084361894446,
            "example_similarity": 0.352712689543501,
            "db_id": "flight_2"
        },
        {
            "index": 255,
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi river run */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi runs */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights arriving in Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7286,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi river run"
                },
                {
                    "ex_id": 7287,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi runs"
                }
            ],
            "example_quality": 0.6036116524060686,
            "example_similarity": 0.35232911805817085,
            "db_id": "flight_2"
        },
        {
            "index": 256,
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Answer the following: How many classes are professor whose last name is Graztevski has? */\nSELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'\n\n/* Answer the following: How many classes does the professor whose last name is Graztevski teach? */\nSELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the number of flights landing in the city of Aberdeen or Abilene. */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                },
                {
                    "ex_id": 3182,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
                    "question": "How many classes are professor whose last name is Graztevski has?"
                },
                {
                    "ex_id": 3183,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
                    "question": "How many classes does the professor whose last name is Graztevski teach?"
                }
            ],
            "example_quality": 0.6037334139540749,
            "example_similarity": 0.35155471077790335,
            "db_id": "flight_2"
        },
        {
            "index": 257,
            "question": "How many flights land in Aberdeen or Abilene?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border colorado and border new mexico */\nSELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights land in Aberdeen or Abilene? */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7495,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
                    "question": "how many states border colorado and border new mexico"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.6020683840487724,
            "example_similarity": 0.3513920572233308,
            "db_id": "flight_2"
        },
        {
            "index": 258,
            "question": "Find the name of airports which do not have any flight in and out.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that have not been on the affirmative side of debates. */\nSELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n\n/* Answer the following: List the names of aircrafts and that did not win any match. */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Answer the following: What are the names of all aicrafts that have never won any match? */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the name of airports which do not have any flight in and out. */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1507,
                    "db_id": "debate",
                    "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
                    "question": "List the names of people that have not been on the affirmative side of debates."
                },
                {
                    "ex_id": 4832,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "List the names of aircrafts and that did not win any match."
                },
                {
                    "ex_id": 4833,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "What are the names of all aicrafts that have never won any match?"
                }
            ],
            "example_quality": 0.6006923780002477,
            "example_similarity": 0.3512607394716693,
            "db_id": "flight_2"
        },
        {
            "index": 259,
            "question": "Which airports do not have departing or arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and director of the films without any schedule? */\nSELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\n\n/* Answer the following: Which engineers have never visited to maintain the assets? List the engineer first name and last name. */\nSELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)\n\n/* Answer the following: Find the market shares and names of furnitures which no any company is producing in our records. */\nSELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airports do not have departing or arriving flights? */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1955,
                    "db_id": "cinema",
                    "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
                    "question": "What are the title and director of the films without any schedule?"
                },
                {
                    "ex_id": 3141,
                    "db_id": "assets_maintenance",
                    "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
                    "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name."
                },
                {
                    "ex_id": 3404,
                    "db_id": "manufacturer",
                    "query": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
                    "question": "Find the market shares and names of furnitures which no any company is producing in our records."
                }
            ],
            "example_quality": 0.5991046610358086,
            "example_similarity": 0.3505201360159657,
            "db_id": "flight_2"
        },
        {
            "index": 260,
            "question": "How many employees are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many employees are there? */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6006465661856708,
            "example_similarity": 0.3518526343273263,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 261,
            "question": "Count the number of employees",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6021766559704,
            "example_similarity": 0.35148976161780726,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 262,
            "question": "Sort employee names by their age in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Answer the following: What is the list of school locations sorted in ascending order of school enrollment? */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort employee names by their age in ascending order. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                },
                {
                    "ex_id": 4864,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "What is the list of school locations sorted in ascending order of school enrollment?"
                }
            ],
            "example_quality": 0.6032179664437954,
            "example_similarity": 0.35169500358832984,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 263,
            "question": "List the names of employees and sort in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Answer the following: What is the list of school locations sorted in ascending order of school enrollment? */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: List the names of employees and sort in ascending order of age. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                },
                {
                    "ex_id": 4864,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "What is the list of school locations sorted in ascending order of school enrollment?"
                }
            ],
            "example_quality": 0.6042513582063666,
            "example_similarity": 0.3530396298307001,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 264,
            "question": "What is the number of employees from each city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the number of employees from each city? */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.605225930567473,
            "example_similarity": 0.35256441474044703,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 265,
            "question": "Count the number of employees for each city.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees for each city. */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6061931476654767,
            "example_similarity": 0.35233245382158435,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 266,
            "question": "Which cities do more than one employee under age 30 come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the locations that have more than one movie theater with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: In which locations are there more than one movie theater with capacity above 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: Show all the locations with at least two cinemas with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which cities do more than one employee under age 30 come from? */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1957,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
                    "question": "Find the locations that have more than one movie theater with capacity above 300."
                },
                {
                    "ex_id": 1958,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
                    "question": "In which locations are there more than one movie theater with capacity above 300?"
                },
                {
                    "ex_id": 1944,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Show all the locations with at least two cinemas with capacity above 300."
                }
            ],
            "example_quality": 0.6072036997419223,
            "example_similarity": 0.3520688485017106,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 267,
            "question": "Find the cities that have more than one employee under age 30.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the locations that have more than one movie theater with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: In which locations are there more than one movie theater with capacity above 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1\n\n/* Answer the following: Show all the locations with at least two cinemas with capacity above 300. */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the cities that have more than one employee under age 30. */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1957,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
                    "question": "Find the locations that have more than one movie theater with capacity above 300."
                },
                {
                    "ex_id": 1958,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
                    "question": "In which locations are there more than one movie theater with capacity above 300?"
                },
                {
                    "ex_id": 1944,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Show all the locations with at least two cinemas with capacity above 300."
                }
            ],
            "example_quality": 0.6082066821398926,
            "example_similarity": 0.35225523281689897,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 268,
            "question": "Find the number of shops in each location.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of shops in each location. */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                },
                {
                    "ex_id": 1411,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "Find the total number of students in each department."
                },
                {
                    "ex_id": 1412,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "How many students are in each department?"
                }
            ],
            "example_quality": 0.6096685975050423,
            "example_similarity": 0.35334752054888197,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 269,
            "question": "How many shops are there in each location?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many shops are there in each location? */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                },
                {
                    "ex_id": 1411,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "Find the total number of students in each department."
                },
                {
                    "ex_id": 1412,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "How many students are in each department?"
                }
            ],
            "example_quality": 0.6111196436109715,
            "example_similarity": 0.3537963181456299,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 270,
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the manager name and district of the shop whose number of products is the largest. */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 34,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "What is the official name and status of the city with the most residents?"
                },
                {
                    "ex_id": 356,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "Show the id and name of the aircraft with the maximum distance."
                }
            ],
            "example_quality": 0.6119901406574265,
            "example_similarity": 0.3543559562642082,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 271,
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the manager name and district of the shop that sells the largest number of products? */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 34,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "What is the official name and status of the city with the most residents?"
                },
                {
                    "ex_id": 356,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "Show the id and name of the aircraft with the maximum distance."
                }
            ],
            "example_quality": 0.6128542133714354,
            "example_similarity": 0.35473549838225665,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 272,
            "question": "find the minimum and maximum number of products of all stores.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the minimum and maximum vote percents of elections? */\nSELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election\n\n/* Answer the following: What is the minimum and maximum number of bathrooms of all the apartments? */\nSELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n\n/* Answer the following: Give me the minimum and maximum bathroom count among all the apartments. */\nSELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the minimum and maximum number of products of all stores. */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1178,
                    "db_id": "election_representative",
                    "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
                    "question": "What are the minimum and maximum vote percents of elections?"
                },
                {
                    "ex_id": 1207,
                    "db_id": "apartment_rentals",
                    "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
                    "question": "What is the minimum and maximum number of bathrooms of all the apartments?"
                },
                {
                    "ex_id": 1208,
                    "db_id": "apartment_rentals",
                    "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
                    "question": "Give me the minimum and maximum bathroom count among all the apartments."
                }
            ],
            "example_quality": 0.6142775434693347,
            "example_similarity": 0.3548850915374738,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 273,
            "question": "What are the minimum and maximum number of products across all the shops?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the minimum and maximum vote percents of elections? */\nSELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election\n\n/* Answer the following: What is the minimum and maximum number of bathrooms of all the apartments? */\nSELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n\n/* Answer the following: Give me the minimum and maximum bathroom count among all the apartments. */\nSELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the minimum and maximum number of products across all the shops? */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1178,
                    "db_id": "election_representative",
                    "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
                    "question": "What are the minimum and maximum vote percents of elections?"
                },
                {
                    "ex_id": 1207,
                    "db_id": "apartment_rentals",
                    "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
                    "question": "What is the minimum and maximum number of bathrooms of all the apartments?"
                },
                {
                    "ex_id": 1208,
                    "db_id": "apartment_rentals",
                    "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
                    "question": "Give me the minimum and maximum bathroom count among all the apartments."
                }
            ],
            "example_quality": 0.6156904462405093,
            "example_similarity": 0.35570331235208014,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 274,
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name, phone, and payment method code for all customers in descending order of customer number. */\nSELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC\n\n/* Answer the following: Show card number, name, and hometown for all members in a descending order of level. */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Answer the following: What are the card numbers, names, and hometowns of every member ordered by descending level? */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Return the name, location and district of all shops in descending order of number of products. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5661,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",
                    "question": "Show the name, phone, and payment method code for all customers in descending order of customer number."
                },
                {
                    "ex_id": 5417,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
                    "question": "Show card number, name, and hometown for all members in a descending order of level."
                },
                {
                    "ex_id": 5418,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
                    "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?"
                }
            ],
            "example_quality": 0.616531553539463,
            "example_similarity": 0.35619324281298465,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 275,
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name, phone, and payment method code for all customers in descending order of customer number. */\nSELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC\n\n/* Answer the following: Show card number, name, and hometown for all members in a descending order of level. */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Answer the following: What are the card numbers, names, and hometowns of every member ordered by descending level? */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort all the shops by number products in descending order, and return the name, location and district of each shop. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5661,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",
                    "question": "Show the name, phone, and payment method code for all customers in descending order of customer number."
                },
                {
                    "ex_id": 5417,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
                    "question": "Show card number, name, and hometown for all members in a descending order of level."
                },
                {
                    "ex_id": 5418,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
                    "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?"
                }
            ],
            "example_quality": 0.6173665436944245,
            "example_similarity": 0.3568783599709997,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 276,
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: What are the names of all aircrafts that can cover more distances than average? */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: Show names for all employees with salary more than the average. */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of stores whose number products is more than the average number of products. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 360,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "Show names for all aircrafts with distances more than the average."
                },
                {
                    "ex_id": 361,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "What are the names of all aircrafts that can cover more distances than average?"
                },
                {
                    "ex_id": 378,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
                    "question": "Show names for all employees with salary more than the average."
                }
            ],
            "example_quality": 0.6176380695951971,
            "example_similarity": 0.3569080737576242,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 277,
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all aircrafts with distances more than the average. */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: What are the names of all aircrafts that can cover more distances than average? */\nSELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\n\n/* Answer the following: Show names for all employees with salary more than the average. */\nSELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops' number products is above the average? Give me the shop names. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 360,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "Show names for all aircrafts with distances more than the average."
                },
                {
                    "ex_id": 361,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
                    "question": "What are the names of all aircrafts that can cover more distances than average?"
                },
                {
                    "ex_id": 378,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
                    "question": "Show names for all employees with salary more than the average."
                }
            ],
            "example_quality": 0.617907635020152,
            "example_similarity": 0.35656478894917853,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 278,
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is detail of the student who registered the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the details of the student who registered for the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of route that has the highest number of deliveries. */\nSELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the name of employee who was awarded the most times in the evaluation. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 78,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is detail of the student who registered the most number of courses?"
                },
                {
                    "ex_id": 79,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the details of the student who registered for the most number of courses?"
                },
                {
                    "ex_id": 2857,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of route that has the highest number of deliveries."
                }
            ],
            "example_quality": 0.6189823077958589,
            "example_similarity": 0.3564804326801428,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 279,
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the artist with the greatest number of albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the customer that has been involved in the most policies. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the most awards in evaluations? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                },
                {
                    "ex_id": 827,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the artist with the greatest number of albums?"
                },
                {
                    "ex_id": 1540,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the customer that has been involved in the most policies."
                }
            ],
            "example_quality": 0.6197744859041175,
            "example_similarity": 0.35639451672581585,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 280,
            "question": "Find the name of the employee who got the highest one time bonus.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: Which company was started by the entrepreneur with the greatest height? */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the employee who got the highest one time bonus. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                },
                {
                    "ex_id": 2302,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Show the company of the tallest entrepreneur."
                },
                {
                    "ex_id": 2303,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Which company was started by the entrepreneur with the greatest height?"
                }
            ],
            "example_quality": 0.6211324341687456,
            "example_similarity": 0.3567245703225433,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 281,
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: Which company was started by the entrepreneur with the greatest height? */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the biggest bonus? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                },
                {
                    "ex_id": 2302,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Show the company of the tallest entrepreneur."
                },
                {
                    "ex_id": 2303,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Which company was started by the entrepreneur with the greatest height?"
                }
            ],
            "example_quality": 0.62248071732117,
            "example_similarity": 0.3566617051405807,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 282,
            "question": "Find the names of employees who never won any award in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of employees who never won any award in the evaluation. */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.6238194381817334,
            "example_similarity": 0.3563799011594302,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 283,
            "question": "What are the names of the employees who never received any evaluation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the names of the employees who never received any evaluation? */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.6251486981174869,
            "example_similarity": 0.3559964235952178,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 284,
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of track with most number of races. */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the track that has had the greatest number of races? */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the claim processing stage that most of the claims are on? */\nSELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the name of the shop that is hiring the largest number of employees? */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 782,
                    "db_id": "race_track",
                    "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the name of track with most number of races."
                },
                {
                    "ex_id": 783,
                    "db_id": "race_track",
                    "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the track that has had the greatest number of races?"
                },
                {
                    "ex_id": 1528,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the claim processing stage that most of the claims are on?"
                }
            ],
            "example_quality": 0.6264685970677775,
            "example_similarity": 0.3564531766308484,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 285,
            "question": "Which shop has the most employees? Give me the shop name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the artist with the greatest number of albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the customer that has been involved in the most policies. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shop has the most employees? Give me the shop name. */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                },
                {
                    "ex_id": 827,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the artist with the greatest number of albums?"
                },
                {
                    "ex_id": 1540,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the customer that has been involved in the most policies."
                }
            ],
            "example_quality": 0.6274868359084753,
            "example_similarity": 0.3566314635804417,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 286,
            "question": "Find the name of the shops that do not hire any employee.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the shops that do not hire any employee. */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.6287893294892148,
            "example_similarity": 0.3569951582817274,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 287,
            "question": "Which shops run with no employees? Find the shop names",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops run with no employees? Find the shop names */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.6300827464596357,
            "example_similarity": 0.3564626398441641,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 288,
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: List the name and the number of enrolled student for each course. */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of employees hired in each shop; show the shop name as well. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                },
                {
                    "ex_id": 3827,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "What is the name of each course and the corresponding number of student enrollment?"
                },
                {
                    "ex_id": 3828,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "List the name and the number of enrolled student for each course."
                }
            ],
            "example_quality": 0.6303310261649401,
            "example_similarity": 0.35624491181578155,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 289,
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: List the name and the number of enrolled student for each course. */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: For each shop, return the number of employees working there and the name of the shop. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                },
                {
                    "ex_id": 3827,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "What is the name of each course and the corresponding number of student enrollment?"
                },
                {
                    "ex_id": 3828,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "List the name and the number of enrolled student for each course."
                }
            ],
            "example_quality": 0.6305775876715918,
            "example_similarity": 0.356237633277116,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 290,
            "question": "What is total bonus given in all evaluations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total checking balance in all accounts? */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: Find the total balance across checking accounts. */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: What is the total amount of all payments? */\nSELECT sum(amount) FROM payment\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is total bonus given in all evaluations? */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1781,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "What is the total checking balance in all accounts?"
                },
                {
                    "ex_id": 1782,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "Find the total balance across checking accounts."
                },
                {
                    "ex_id": 2959,
                    "db_id": "sakila_1",
                    "query": "SELECT sum(amount) FROM payment",
                    "question": "What is the total amount of all payments?"
                }
            ],
            "example_quality": 0.6318514580589312,
            "example_similarity": 0.3568229311829674,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 291,
            "question": "Find the total amount of bonus given in all the evaluations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total checking balance in all accounts? */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: Find the total balance across checking accounts. */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: What is the total amount of all payments? */\nSELECT sum(amount) FROM payment\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the total amount of bonus given in all the evaluations. */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1781,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "What is the total checking balance in all accounts?"
                },
                {
                    "ex_id": 1782,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "Find the total balance across checking accounts."
                },
                {
                    "ex_id": 2959,
                    "db_id": "sakila_1",
                    "query": "SELECT sum(amount) FROM payment",
                    "question": "What is the total amount of all payments?"
                }
            ],
            "example_quality": 0.6331165733233335,
            "example_similarity": 0.35697539697337116,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 292,
            "question": "Give me all the information about hiring.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all information regarding the basketball match. */\nSELECT * FROM basketball_match\n\n/* Answer the following: What is all the information about the basketball match? */\nSELECT * FROM basketball_match\n\n/* Answer the following: Find the details for all chip models. */\nSELECT * FROM chip_model\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Give me all the information about hiring. */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1020,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "List all information regarding the basketball match."
                },
                {
                    "ex_id": 1021,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "What is all the information about the basketball match?"
                },
                {
                    "ex_id": 1046,
                    "db_id": "phone_1",
                    "query": "SELECT * FROM chip_model",
                    "question": "Find the details for all chip models."
                }
            ],
            "example_quality": 0.6343730234146919,
            "example_similarity": 0.3570913421578165,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 293,
            "question": "What is all the information about hiring?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all information regarding the basketball match. */\nSELECT * FROM basketball_match\n\n/* Answer the following: What is all the information about the basketball match? */\nSELECT * FROM basketball_match\n\n/* Answer the following: Find the details for all chip models. */\nSELECT * FROM chip_model\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is all the information about hiring? */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1020,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "List all information regarding the basketball match."
                },
                {
                    "ex_id": 1021,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "What is all the information about the basketball match?"
                },
                {
                    "ex_id": 1046,
                    "db_id": "phone_1",
                    "query": "SELECT * FROM chip_model",
                    "question": "Find the details for all chip models."
                }
            ],
            "example_quality": 0.6356208970549148,
            "example_similarity": 0.3574244804258815,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 294,
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address has both members younger than 30 and members older than 40? */\nSELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n\n/* Answer the following: Show the country where people older than 30 and younger than 25 are from. */\nSELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n\n/* Answer the following: Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. */\nSELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which district has both stores with less than 3000 products and stores with more than 10000 products? */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 796,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
                    "question": "Which address has both members younger than 30 and members older than 40?"
                },
                {
                    "ex_id": 1638,
                    "db_id": "wedding",
                    "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
                    "question": "Show the country where people older than 30 and younger than 25 are from."
                },
                {
                    "ex_id": 1987,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
                    "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64."
                }
            ],
            "example_quality": 0.6368602817588096,
            "example_similarity": 0.35732792607562774,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 295,
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address has both members younger than 30 and members older than 40? */\nSELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n\n/* Answer the following: Show the country where people older than 30 and younger than 25 are from. */\nSELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n\n/* Answer the following: Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. */\nSELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 796,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
                    "question": "Which address has both members younger than 30 and members older than 40?"
                },
                {
                    "ex_id": 1638,
                    "db_id": "wedding",
                    "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
                    "question": "Show the country where people older than 30 and younger than 25 are from."
                },
                {
                    "ex_id": 1987,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
                    "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64."
                }
            ],
            "example_quality": 0.6380912638545425,
            "example_similarity": 0.35737068391340887,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 296,
            "question": "How many different store locations are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many different store locations are there? */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6393139285036825,
            "example_similarity": 0.3574115392699983,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 297,
            "question": "Count the number of distinct store locations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of distinct store locations. */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6405283597208419,
            "example_similarity": 0.35692963413537104,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 298,
            "question": "How many documents do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents do we have? */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6417346403929196,
            "example_similarity": 0.3568193805781184,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 299,
            "question": "Count the number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents. */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6429328522979599,
            "example_similarity": 0.35694352777999555,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 300,
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List document IDs, document names, and document descriptions for all documents. */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 1631,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date ,  organized_by FROM Church",
                    "question": "Show the name, open date, and organizer for all churches."
                }
            ],
            "example_quality": 0.6441230761236334,
            "example_similarity": 0.3576200922008306,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 301,
            "question": "What are the ids, names, and descriptions for all documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, names, and descriptions for all documents? */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 1631,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date ,  organized_by FROM Church",
                    "question": "Show the name, open date, and organizer for all churches."
                }
            ],
            "example_quality": 0.6453053914853489,
            "example_similarity": 0.3573026057044607,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 302,
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document name and template id for document with description with the letter 'w' in it? */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                },
                {
                    "ex_id": 4758,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "What are the names and ids of customers whose address contains TN?"
                },
                {
                    "ex_id": 4759,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "Return the names and ids of customers who have TN in their address."
                }
            ],
            "example_quality": 0.6464798769440068,
            "example_similarity": 0.35710295650348084,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 303,
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Answer the following: What are the names and ids of customers whose address contains TN? */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the names and template ids for documents that contain the letter w in their description. */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                },
                {
                    "ex_id": 4758,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "What are the names and ids of customers whose address contains TN?"
                },
                {
                    "ex_id": 4759,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "Return the names and ids of customers who have TN in their address."
                }
            ],
            "example_quality": 0.6476466100233994,
            "example_similarity": 0.35723097882461374,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 304,
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id, template id and description for document named \"Robbin CV\"? */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                },
                {
                    "ex_id": 471,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "What are the full names and ages for all female students whose sex is F?"
                },
                {
                    "ex_id": 942,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
                    "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?"
                }
            ],
            "example_quality": 0.6488056672272698,
            "example_similarity": 0.3574212695688728,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 305,
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the document id, template id, and description for the document with the name Robbin CV. */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                },
                {
                    "ex_id": 471,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "What are the full names and ages for all female students whose sex is F?"
                },
                {
                    "ex_id": 942,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
                    "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?"
                }
            ],
            "example_quality": 0.6499571240560329,
            "example_similarity": 0.3574042235119986,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 306,
            "question": "How many different templates do all document use?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many different templates do all document use? */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6511010550231701,
            "example_similarity": 0.3574057634935785,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 307,
            "question": "Count the number of different templates used for documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of different templates used for documents. */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.652237533671303,
            "example_similarity": 0.35721877403594465,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 308,
            "question": "How many documents are using the template with type code 'PPT'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: how many states border colorado and border new mexico */\nSELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents are using the template with type code 'PPT'? */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                },
                {
                    "ex_id": 7495,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
                    "question": "how many states border colorado and border new mexico"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                }
            ],
            "example_quality": 0.6504245105109804,
            "example_similarity": 0.3569383420164195,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 309,
            "question": "Count the number of documents that use the PPT template type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products have the characteristic named \"hot\"? */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\n\n/* Answer the following: Count the number of products with the 'hot' charactersitic. */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\n\n/* Answer the following: How many customers are living in city \"Lake Geovannyton\"? */\nSELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents that use the PPT template type. */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5571,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
                    "question": "How many products have the characteristic named \"hot\"?"
                },
                {
                    "ex_id": 5572,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
                    "question": "Count the number of products with the 'hot' charactersitic."
                },
                {
                    "ex_id": 6080,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
                    "question": "How many customers are living in city \"Lake Geovannyton\"?"
                }
            ],
            "example_quality": 0.6499281251051789,
            "example_similarity": 0.3568379782103014,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 310,
            "question": "Show all template ids and number of documents using each template.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template ids and number of documents using each template. */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6510573892177429,
            "example_similarity": 0.3564791912970027,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 311,
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are all different template ids used for documents, and how many times were each of them used? */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.652179391181673,
            "example_similarity": 0.3560036702076399,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 312,
            "question": "What is the id and type code for the template used by the most documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the id and type code for the template used by the most documents? */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.65304765250185,
            "example_similarity": 0.35592207596123365,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 313,
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and type code of the template that is used for the greatest number of documents. */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.653910365826371,
            "example_similarity": 0.35568465461759485,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 314,
            "question": "Show ids for all templates that are used by more than one document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates that are used by more than one document. */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                },
                {
                    "ex_id": 229,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
                    "question": "List the writers who have written more than one book."
                },
                {
                    "ex_id": 267,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
                    "question": "List the nominees that have been nominated more than two musicals."
                }
            ],
            "example_quality": 0.6550125621135481,
            "example_similarity": 0.3556700426322779,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 315,
            "question": "What are the template ids of any templates used in more than a single document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids of any templates used in more than a single document? */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                },
                {
                    "ex_id": 229,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
                    "question": "List the writers who have written more than one book."
                },
                {
                    "ex_id": 267,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
                    "question": "List the nominees that have been nominated more than two musicals."
                }
            ],
            "example_quality": 0.6561077603290608,
            "example_similarity": 0.3552130374409551,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 316,
            "question": "Show ids for all templates not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all employees who don't have a certificate. */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates not used by any document. */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 422,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "Show ids for all employees who don't have a certificate."
                },
                {
                    "ex_id": 423,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "What are the ids of all employees that don't have certificates?"
                },
                {
                    "ex_id": 508,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
                    "question": "What are the student ids of students who don't have any allergies?"
                }
            ],
            "example_quality": 0.6571960269102979,
            "example_similarity": 0.3549359299136848,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 317,
            "question": "What are the ids for templates that are not used in any documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id of students who never attends courses? */\nSELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\n\n/* Answer the following: What are the  ids of every student who has never attended a course? */\nSELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\n\n/* Answer the following: what states have no bordering state */\nSELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids for templates that are not used in any documents? */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 63,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
                    "question": "List the id of students who never attends courses?"
                },
                {
                    "ex_id": 64,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
                    "question": "What are the  ids of every student who has never attended a course?"
                },
                {
                    "ex_id": 7204,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
                    "question": "what states have no bordering state"
                }
            ],
            "example_quality": 0.6555901976397549,
            "example_similarity": 0.35456263457386095,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 318,
            "question": "How many templates do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates do we have? */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6566732473327116,
            "example_similarity": 0.35446675859744653,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 319,
            "question": "Count the number of templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates. */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6577495067454617,
            "example_similarity": 0.3545904972662301,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 320,
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show template ids, version numbers, and template type codes for all templates. */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 1631,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date ,  organized_by FROM Church",
                    "question": "Show the name, open date, and organizer for all churches."
                }
            ],
            "example_quality": 0.6588190395368821,
            "example_similarity": 0.35497393461334525,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 321,
            "question": "What are the ids, version numbers, and type codes for each template?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, version numbers, and type codes for each template? */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 1631,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date ,  organized_by FROM Church",
                    "question": "Show the name, open date, and organizer for all churches."
                }
            ],
            "example_quality": 0.6598819085725929,
            "example_similarity": 0.35491780560127606,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 322,
            "question": "Show all distinct template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the catalog entries. */\nSELECT distinct(catalog_entry_name) FROM catalog_contents\n\n/* Answer the following: What are all the catalog entry names? */\nSELECT distinct(catalog_entry_name) FROM catalog_contents\n\n/* Answer the following: What are the distinct billing countries of the invoices? */\nSELECT distinct(BillingCountry) FROM INVOICE\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all distinct template type codes for all templates. */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 302,
                    "db_id": "product_catalog",
                    "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
                    "question": "Find the names of all the catalog entries."
                },
                {
                    "ex_id": 303,
                    "db_id": "product_catalog",
                    "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
                    "question": "What are all the catalog entry names?"
                },
                {
                    "ex_id": 816,
                    "db_id": "chinook_1",
                    "query": "SELECT distinct(BillingCountry) FROM INVOICE",
                    "question": "What are the distinct billing countries of the invoices?"
                }
            ],
            "example_quality": 0.6592128481249899,
            "example_similarity": 0.3546461984952482,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 323,
            "question": "What are the different template type codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergy types. */\nSELECT DISTINCT allergytype FROM Allergy_type\n\n/* Answer the following: What are the different allergy types? */\nSELECT DISTINCT allergytype FROM Allergy_type\n\n/* Answer the following: Show all majors. */\nSELECT DISTINCT Major FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes? */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 444,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT allergytype FROM Allergy_type",
                    "question": "Show all allergy types."
                },
                {
                    "ex_id": 445,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT allergytype FROM Allergy_type",
                    "question": "What are the different allergy types?"
                },
                {
                    "ex_id": 466,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT Major FROM Student",
                    "question": "Show all majors."
                }
            ],
            "example_quality": 0.6602679167066463,
            "example_similarity": 0.3547326677184077,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 324,
            "question": "What are the ids of templates with template type code PP or PPT?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". */\nSELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of templates with template type code PP or PPT? */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1983,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
                    "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.6613164725192802,
            "example_similarity": 0.35499702630443736,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 325,
            "question": "Return the ids of templates that have the code PP or PPT.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what states border states that border colorado */\nSELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: what is the highest point in the state with capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: what is the highest point in the state with the capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids of templates that have the code PP or PPT. */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7413,
                    "db_id": "geo",
                    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "what states border states that border colorado"
                },
                {
                    "ex_id": 7332,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with capital des moines"
                },
                {
                    "ex_id": 7333,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with the capital des moines"
                }
            ],
            "example_quality": 0.6601287114273656,
            "example_similarity": 0.3546617485189829,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 326,
            "question": "How many templates have template type code CV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates have template type code CV? */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6611712613923122,
            "example_similarity": 0.3553957290264074,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 327,
            "question": "Count the number of templates of the type CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates of the type CV. */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                },
                {
                    "ex_id": 513,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students are affected by food related allergies?"
                },
                {
                    "ex_id": 822,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
                    "question": "Hom many albums does the artist \"Metallica\" have?"
                }
            ],
            "example_quality": 0.6596724276619962,
            "example_similarity": 0.3547194707090768,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 328,
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the component amounts and names of all furnitures that have more than 10 components. */\nSELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10\n\n/* Answer the following: Find the name and training hours of players whose hours are below 1500. */\nSELECT pName ,  HS FROM Player WHERE HS  <  1500\n\n/* Answer the following: What are the names and number of hours spent training for each player who trains for less than 1500 hours? */\nSELECT pName ,  HS FROM Player WHERE HS  <  1500\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the version number and template type code for the template with version number later than 5? */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3393,
                    "db_id": "manufacturer",
                    "query": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",
                    "question": "Find the component amounts and names of all furnitures that have more than 10 components."
                },
                {
                    "ex_id": 4957,
                    "db_id": "soccer_2",
                    "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
                    "question": "Find the name and training hours of players whose hours are below 1500."
                },
                {
                    "ex_id": 4958,
                    "db_id": "soccer_2",
                    "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
                    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?"
                }
            ],
            "example_quality": 0.6600325049489346,
            "example_similarity": 0.354328170263771,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 329,
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the component amounts and names of all furnitures that have more than 10 components. */\nSELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10\n\n/* Answer the following: Find the name and training hours of players whose hours are below 1500. */\nSELECT pName ,  HS FROM Player WHERE HS  <  1500\n\n/* Answer the following: What are the names and number of hours spent training for each player who trains for less than 1500 hours? */\nSELECT pName ,  HS FROM Player WHERE HS  <  1500\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the version numbers and template type codes of templates with a version number greater than 5. */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3393,
                    "db_id": "manufacturer",
                    "query": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",
                    "question": "Find the component amounts and names of all furnitures that have more than 10 components."
                },
                {
                    "ex_id": 4957,
                    "db_id": "soccer_2",
                    "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
                    "question": "Find the name and training hours of players whose hours are below 1500."
                },
                {
                    "ex_id": 4958,
                    "db_id": "soccer_2",
                    "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
                    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?"
                }
            ],
            "example_quality": 0.6603903933161954,
            "example_similarity": 0.35408486662856575,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 330,
            "question": "Show all template type codes and number of templates for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and number of templates for each. */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6614195133364493,
            "example_similarity": 0.35382114439700785,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 331,
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many templates correspond to each? */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6624424151088468,
            "example_similarity": 0.35343195664958477,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 332,
            "question": "Which template type code has most number of templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code has most number of templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6634591548223744,
            "example_similarity": 0.35315627232806424,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 333,
            "question": "Return the type code of the template type that the most templates belong to.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type that the most templates belong to. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6644697879910759,
            "example_similarity": 0.35277102143478994,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 334,
            "question": "Show all template type codes with less than three templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Report all majors that have less than 3 students. */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: What are the majors only less than three students are studying? */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: Show the document type code with fewer than 3 documents. */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes with less than three templates. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5505,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "Report all majors that have less than 3 students."
                },
                {
                    "ex_id": 5506,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "What are the majors only less than three students are studying?"
                },
                {
                    "ex_id": 6422,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "Show the document type code with fewer than 3 documents."
                }
            ],
            "example_quality": 0.6654743694641566,
            "example_similarity": 0.35306133409437274,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 335,
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Report all majors that have less than 3 students. */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: What are the majors only less than three students are studying? */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: Show the document type code with fewer than 3 documents. */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that have fewer than 3 templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5505,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "Report all majors that have less than 3 students."
                },
                {
                    "ex_id": 5506,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "What are the majors only less than three students are studying?"
                },
                {
                    "ex_id": 6422,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "Show the document type code with fewer than 3 documents."
                }
            ],
            "example_quality": 0.6664729534359054,
            "example_similarity": 0.3530926368531495,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 336,
            "question": "What the smallest version number and its template type code?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return the smallest salary for every departments. */\nSELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n\n/* Answer the following: What is the minimum salary in each department? */\nSELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n\n/* Answer the following: What is minimum age for different job title? */\nSELECT min(age) ,  job FROM Person GROUP BY job\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What the smallest version number and its template type code? */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3472,
                    "db_id": "hr_1",
                    "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
                    "question": "return the smallest salary for every departments."
                },
                {
                    "ex_id": 3473,
                    "db_id": "hr_1",
                    "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
                    "question": "What is the minimum salary in each department?"
                },
                {
                    "ex_id": 4427,
                    "db_id": "network_2",
                    "query": "SELECT min(age) ,  job FROM Person GROUP BY job",
                    "question": "What is minimum age for different job title?"
                }
            ],
            "example_quality": 0.6660156545055025,
            "example_similarity": 0.3528850198783882,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 337,
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return the smallest salary for every departments. */\nSELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n\n/* Answer the following: What is the minimum salary in each department? */\nSELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n\n/* Answer the following: What is minimum age for different job title? */\nSELECT min(age) ,  job FROM Person GROUP BY job\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the lowest version number, along with its corresponding template type code. */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3472,
                    "db_id": "hr_1",
                    "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
                    "question": "return the smallest salary for every departments."
                },
                {
                    "ex_id": 3473,
                    "db_id": "hr_1",
                    "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
                    "question": "What is the minimum salary in each department?"
                },
                {
                    "ex_id": 4427,
                    "db_id": "network_2",
                    "query": "SELECT min(age) ,  job FROM Person GROUP BY job",
                    "question": "What is minimum age for different job title?"
                }
            ],
            "example_quality": 0.6655610695153392,
            "example_similarity": 0.35237137070199037,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 338,
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code of the template used by document with the name \"Data base\"? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                },
                {
                    "ex_id": 825,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Find the name of the artist who made the album \"Balls to the Wall\"."
                },
                {
                    "ex_id": 2979,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
                    "question": "Which language does the film AIRPORT POLLOCK use? List the language name."
                }
            ],
            "example_quality": 0.6659588178303827,
            "example_similarity": 0.3526289833461988,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 339,
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type code of the template that is used by a document named Data base. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                },
                {
                    "ex_id": 825,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Find the name of the artist who made the album \"Balls to the Wall\"."
                },
                {
                    "ex_id": 2979,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
                    "question": "Which language does the film AIRPORT POLLOCK use? List the language name."
                }
            ],
            "example_quality": 0.666354219547697,
            "example_similarity": 0.35269953470423304,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 340,
            "question": "Show all document names using templates with template type code BK.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist does the album \"Balls to the Wall\" belong to? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Find the name of the artist who made the album \"Balls to the Wall\". */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"\n\n/* Answer the following: Which language does the film AIRPORT POLLOCK use? List the language name. */\nSELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document names using templates with template type code BK. */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 824,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Which artist does the album \"Balls to the Wall\" belong to?"
                },
                {
                    "ex_id": 825,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
                    "question": "Find the name of the artist who made the album \"Balls to the Wall\"."
                },
                {
                    "ex_id": 2979,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
                    "question": "Which language does the film AIRPORT POLLOCK use? List the language name."
                }
            ],
            "example_quality": 0.6673355306666744,
            "example_similarity": 0.3526302896724355,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 341,
            "question": "What are the names of documents that use templates with the code BK?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: What are the titles of albums by the artist \"AC/DC\"? */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: Find all the policy type codes associated with the customer \"Dayana Robel\" */\nSELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the names of documents that use templates with the code BK? */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 820,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "Find the title of all the albums of the artist \"AC/DC\"."
                },
                {
                    "ex_id": 821,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "What are the titles of albums by the artist \"AC/DC\"?"
                },
                {
                    "ex_id": 1510,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
                    "question": "Find all the policy type codes associated with the customer \"Dayana Robel\""
                }
            ],
            "example_quality": 0.6675905165423902,
            "example_similarity": 0.3525470408002067,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 342,
            "question": "Show all template type codes and the number of documents using each type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many companies operates airlines in each airport? */\nSELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id\n\n/* Answer the following: What is the paper with the most citation about Artificial Intelligence ? */\nSELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;\n\n/* Answer the following: Fetch me the most cited publications for Artificial Intelligence */\nSELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and the number of documents using each type. */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6382,
                    "db_id": "flight_company",
                    "query": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
                    "question": "How many companies operates airlines in each airport?"
                },
                {
                    "ex_id": 7967,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
                    "question": "What is the paper with the most citation about Artificial Intelligence ?"
                },
                {
                    "ex_id": 7968,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
                    "question": "Fetch me the most cited publications for Artificial Intelligence"
                }
            ],
            "example_quality": 0.6662448600226855,
            "example_similarity": 0.3519609863011313,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 343,
            "question": "What are the different template type codes, and how many documents use each type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all product names and the number of customers having an order on each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Answer the following: What are teh names of the different products, as well as the number of customers who have ordered each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Answer the following: Show the id, name of each festival and the number of artworks it has nominated. */\nSELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many documents use each type? */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1622,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "Show all product names and the number of customers having an order on each product."
                },
                {
                    "ex_id": 1623,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "What are teh names of the different products, as well as the number of customers who have ordered each product."
                },
                {
                    "ex_id": 4613,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
                    "question": "Show the id, name of each festival and the number of artworks it has nominated."
                }
            ],
            "example_quality": 0.6654995047887091,
            "example_similarity": 0.3518650289621998,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 344,
            "question": "Which template type code is used by most number of documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the artist with the greatest number of albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the customer that has been involved in the most policies. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code is used by most number of documents? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                },
                {
                    "ex_id": 827,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the artist with the greatest number of albums?"
                },
                {
                    "ex_id": 1540,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the customer that has been involved in the most policies."
                }
            ],
            "example_quality": 0.6660067736701373,
            "example_similarity": 0.35171375170092656,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 345,
            "question": "Return the code of the template type that is most commonly used in documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which song has the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the song with the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the code of the template type that is most commonly used in documents. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5219,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which song has the most vocals?"
                },
                {
                    "ex_id": 5220,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the song with the most vocals?"
                },
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                }
            ],
            "example_quality": 0.6664347165256543,
            "example_similarity": 0.3514457676648638,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 346,
            "question": "Show all template type codes that are not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find names of the document without any images. */\nSELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id\n\n/* Answer the following: What are the names of documents that do not have any images? */\nSELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id\n\n/* Answer the following: Show all cities where at least one customer lives in but no performer lives in. */\nSELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes that are not used by any document. */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4526,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                    "question": "Find names of the document without any images."
                },
                {
                    "ex_id": 4527,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                    "question": "What are the names of documents that do not have any images?"
                },
                {
                    "ex_id": 5159,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
                    "question": "Show all cities where at least one customer lives in but no performer lives in."
                }
            ],
            "example_quality": 0.6656542307279876,
            "example_similarity": 0.35126901884986295,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 347,
            "question": "What are the codes of template types that are not used for any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and director of the films without any schedule? */\nSELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\n\n/* Answer the following: Which engineers have never visited to maintain the assets? List the engineer first name and last name. */\nSELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)\n\n/* Answer the following: Find the market shares and names of furnitures which no any company is producing in our records. */\nSELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that are not used for any document? */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1955,
                    "db_id": "cinema",
                    "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
                    "question": "What are the title and director of the films without any schedule?"
                },
                {
                    "ex_id": 3141,
                    "db_id": "assets_maintenance",
                    "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
                    "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name."
                },
                {
                    "ex_id": 3404,
                    "db_id": "manufacturer",
                    "query": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
                    "question": "Find the market shares and names of furnitures which no any company is producing in our records."
                }
            ],
            "example_quality": 0.6639197099195614,
            "example_similarity": 0.35109083745630143,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 348,
            "question": "Show all template type codes and descriptions.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and descriptions. */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6648854578795627,
            "example_similarity": 0.3512040137580827,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 349,
            "question": "What are the type codes and descriptions for all template types?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the type codes and descriptions for all template types? */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6658456714673003,
            "example_similarity": 0.35162301629011083,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 350,
            "question": "What is the template type descriptions for template type code \"AD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type descriptions for template type code \"AD\". */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6668003981202509,
            "example_similarity": 0.3514797547620861,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 351,
            "question": "Return the template type description of the template type with the code AD.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type description of the template type with the code AD. */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.667749684735293,
            "example_similarity": 0.351237138939699,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 352,
            "question": "What is the template type code for template type description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code for template type description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6686935776763858,
            "example_similarity": 0.35109578764010185,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 353,
            "question": "Return the type code of the template type with the description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type with the description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6696321227821185,
            "example_similarity": 0.3511398977789873,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 354,
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the largest state that borders the state with the highest population */\nSELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );\n\n/* Answer the following: what is the population of the largest city in the state with the largest area */\nSELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Answer the following: what is the capital of the state that borders the state that borders texas */\nSELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the distinct template type descriptions for the templates ever used by any document? */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7474,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
                    "question": "what is the largest state that borders the state with the highest population"
                },
                {
                    "ex_id": 7375,
                    "db_id": "geo",
                    "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the population of the largest city in the state with the largest area"
                },
                {
                    "ex_id": 7466,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
                    "question": "what is the capital of the state that borders the state that borders texas"
                }
            ],
            "example_quality": 0.6678065684918019,
            "example_similarity": 0.3511237355548051,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 355,
            "question": "Return the different descriptions for templates that have been used in a document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of address of students? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: What are the different cities where students live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. */\nSELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different descriptions for templates that have been used in a document. */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 94,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
                    "question": "Find distinct cities of address of students?"
                },
                {
                    "ex_id": 95,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
                    "question": "What are the different cities where students live?"
                },
                {
                    "ex_id": 2481,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
                    "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars."
                }
            ],
            "example_quality": 0.6681299976135308,
            "example_similarity": 0.350570685097501,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 356,
            "question": "What are the template ids with template type description \"Presentation\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: What are the titles of albums by the artist \"AC/DC\"? */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: Find all the policy type codes associated with the customer \"Dayana Robel\" */\nSELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids with template type description \"Presentation\". */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 820,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "Find the title of all the albums of the artist \"AC/DC\"."
                },
                {
                    "ex_id": 821,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "What are the titles of albums by the artist \"AC/DC\"?"
                },
                {
                    "ex_id": 1510,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
                    "question": "Find all the policy type codes associated with the customer \"Dayana Robel\""
                }
            ],
            "example_quality": 0.6683720080536211,
            "example_similarity": 0.35100159094895367,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 357,
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids corresponding to templates with the description 'Presentation'. */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                },
                {
                    "ex_id": 331,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "What are the names of catalog entries with level number 8?"
                },
                {
                    "ex_id": 414,
                    "db_id": "flight_1",
                    "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
                    "question": "Show all flight numbers with aircraft Airbus A340-300."
                }
            ],
            "example_quality": 0.6687407139134148,
            "example_similarity": 0.35062869581577555,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 358,
            "question": "How many paragraphs in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs in total? */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6696660191818131,
            "example_similarity": 0.35066503008343075,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 359,
            "question": "Count the number of paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs. */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6705861695462092,
            "example_similarity": 0.35078557148692924,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 360,
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: Hom many albums does the artist \"Metallica\" have? */\nSELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs for the document with name 'Summer Show'? */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                },
                {
                    "ex_id": 513,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students are affected by food related allergies?"
                },
                {
                    "ex_id": 822,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
                    "question": "Hom many albums does the artist \"Metallica\" have?"
                }
            ],
            "example_quality": 0.6715012079641364,
            "example_similarity": 0.35081697685298774,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 361,
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many students are attending English courses? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many tracks belong to rock genre? */\nSELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs in the document named 'Summer Show'. */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                },
                {
                    "ex_id": 71,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students are attending English courses?"
                },
                {
                    "ex_id": 842,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
                    "question": "How many tracks belong to rock genre?"
                }
            ],
            "example_quality": 0.6721195892221451,
            "example_similarity": 0.3504164488012875,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 362,
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show paragraph details for paragraph with text 'Korea ' . */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6708823594846319,
            "example_similarity": 0.3498014248481839,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 363,
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: What are the daily hire costs for the products with substring 'Book' in its name? */\nSELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the details for the paragraph that includes the text 'Korea ' ? */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                },
                {
                    "ex_id": 329,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names."
                },
                {
                    "ex_id": 1974,
                    "db_id": "products_for_hire",
                    "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
                    "question": "What are the daily hire costs for the products with substring 'Book' in its name?"
                }
            ],
            "example_quality": 0.6699524723602481,
            "example_similarity": 0.3495211831630414,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 364,
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi river run */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi runs */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph ids and texts for the document with name 'Welcome to NY'. */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7286,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi river run"
                },
                {
                    "ex_id": 7287,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi runs"
                }
            ],
            "example_quality": 0.6683476755999532,
            "example_similarity": 0.3489272604986741,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 365,
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi river run */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi runs */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7286,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi river run"
                },
                {
                    "ex_id": 7287,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi runs"
                }
            ],
            "example_quality": 0.6667516722465641,
            "example_similarity": 0.34888453741054987,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 366,
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: What are the titles of albums by the artist \"AC/DC\"? */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: Find all the policy type codes associated with the customer \"Dayana Robel\" */\nSELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph texts for the document \"Customer reviews\". */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 820,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "Find the title of all the albums of the artist \"AC/DC\"."
                },
                {
                    "ex_id": 821,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "What are the titles of albums by the artist \"AC/DC\"?"
                },
                {
                    "ex_id": 1510,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
                    "question": "Find all the policy type codes associated with the customer \"Dayana Robel\""
                }
            ],
            "example_quality": 0.6672348890506893,
            "example_similarity": 0.3492381928823438,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 367,
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title of all the albums of the artist \"AC/DC\". */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: What are the titles of albums by the artist \"AC/DC\"? */\nSELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"\n\n/* Answer the following: Find all the policy type codes associated with the customer \"Dayana Robel\" */\nSELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the paragraph texts for the document with the name 'Customer reviews'? */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 820,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "Find the title of all the albums of the artist \"AC/DC\"."
                },
                {
                    "ex_id": 821,
                    "db_id": "chinook_1",
                    "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                    "question": "What are the titles of albums by the artist \"AC/DC\"?"
                },
                {
                    "ex_id": 1510,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
                    "question": "Find all the policy type codes associated with the customer \"Dayana Robel\""
                }
            ],
            "example_quality": 0.667715472520732,
            "example_similarity": 0.34918889602179054,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 368,
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all locations and the number of gas stations in each location ordered by the count. */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: For each location, how many gas stations are there in order? */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. */\nSELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids and the number of paragraphs in each document. Order by document id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2018,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
                    "question": "Show all locations and the number of gas stations in each location ordered by the count."
                },
                {
                    "ex_id": 2019,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
                    "question": "For each location, how many gas stations are there in order?"
                },
                {
                    "ex_id": 1255,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
                    "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order."
                }
            ],
            "example_quality": 0.6678962150797212,
            "example_similarity": 0.3494455467490041,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 369,
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all locations and the number of gas stations in each location ordered by the count. */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: For each location, how many gas stations are there in order? */\nSELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)\n\n/* Answer the following: Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. */\nSELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2018,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
                    "question": "Show all locations and the number of gas stations in each location ordered by the count."
                },
                {
                    "ex_id": 2019,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
                    "question": "For each location, how many gas stations are there in order?"
                },
                {
                    "ex_id": 1255,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
                    "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order."
                }
            ],
            "example_quality": 0.6680759780042443,
            "example_similarity": 0.3493644102343442,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 370,
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids, names and the number of paragraphs in each document. */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                },
                {
                    "ex_id": 1962,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "How many bookings did each customer make? List the customer id, first name, and the count."
                },
                {
                    "ex_id": 2141,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
                    "question": "How many events have each participants attended? List the participant id, type and the number."
                }
            ],
            "example_quality": 0.668727369709884,
            "example_similarity": 0.34964227375545,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 371,
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and names of each document, as well as the number of paragraphs in each? */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                },
                {
                    "ex_id": 1962,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "How many bookings did each customer make? List the customer id, first name, and the count."
                },
                {
                    "ex_id": 2141,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
                    "question": "How many events have each participants attended? List the participant id, type and the number."
                }
            ],
            "example_quality": 0.6693752498699407,
            "example_similarity": 0.3495027870884717,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 372,
            "question": "List all document ids with at least two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List all document ids with at least two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.6702640260799677,
            "example_similarity": 0.34990690190767876,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 373,
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that have 2 or more paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.6711480367339088,
            "example_similarity": 0.3500059239005889,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 374,
            "question": "What is the document id and name with greatest number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id and name with greatest number of paragraphs? */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.6718216433818848,
            "example_similarity": 0.3499714199577407,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 375,
            "question": "Return the id and name of the document with the most paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and name of the document with the most paragraphs. */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.6724916574610715,
            "example_similarity": 0.3499344591341497,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 376,
            "question": "What is the document id with least number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is id of students who registered some courses but the least number of courses in these students? */\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What are the ids of the students who registered for some courses but had the least number of courses for all students? */\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: Which destination has least number of flights? */\nSELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with least number of paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 59,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
                    "question": "what is id of students who registered some courses but the least number of courses in these students?"
                },
                {
                    "ex_id": 60,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
                    "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?"
                },
                {
                    "ex_id": 410,
                    "db_id": "flight_1",
                    "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
                    "question": "Which destination has least number of flights?"
                }
            ],
            "example_quality": 0.6731581076355818,
            "example_similarity": 0.35017535903143343,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 377,
            "question": "Return the id of the document with the fewest paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type has least number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which allergy type is the least common? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: List three countries which are the origins of the least players. */\nSELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id of the document with the fewest paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 458,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type has least number of allergies?"
                },
                {
                    "ex_id": 459,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type is the least common?"
                },
                {
                    "ex_id": 3650,
                    "db_id": "baseball_1",
                    "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
                    "question": "List three countries which are the origins of the least players."
                }
            ],
            "example_quality": 0.6740250622572381,
            "example_similarity": 0.34988038616460015,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 378,
            "question": "What is the document id with 1 to 2 paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which major has between 2 and 30 number of students? List major and the number of students. */\nSELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;\n\n/* Answer the following: Show the number of cities in counties that have a population more than 20000. */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with 1 to 2 paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2834,
                    "db_id": "restaurant_1",
                    "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;",
                    "question": "Which major has between 2 and 30 number of students? List major and the number of students."
                },
                {
                    "ex_id": 2557,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "Show the number of cities in counties that have a population more than 20000."
                },
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                }
            ],
            "example_quality": 0.6730783268665579,
            "example_similarity": 0.34966518316673884,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 379,
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which cities have 2 to 4 parks? */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Find all the cities that have 2 to 4 parks. */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Which major has between 2 and 30 number of students? List major and the number of students. */\nSELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Give the ids of documents that have between one and two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3708,
                    "db_id": "baseball_1",
                    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "Which cities have 2 to 4 parks?"
                },
                {
                    "ex_id": 3709,
                    "db_id": "baseball_1",
                    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "Find all the cities that have 2 to 4 parks."
                },
                {
                    "ex_id": 2834,
                    "db_id": "restaurant_1",
                    "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;",
                    "question": "Which major has between 2 and 30 number of students? List major and the number of students."
                }
            ],
            "example_quality": 0.6736784608340052,
            "example_similarity": 0.3494285995699928,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 380,
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what states border states that border colorado */\nSELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: what is the highest point in the state with capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: what is the highest point in the state with the capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show the document id with paragraph text 'Brazil' and 'Ireland'. */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7413,
                    "db_id": "geo",
                    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "what states border states that border colorado"
                },
                {
                    "ex_id": 7332,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with capital des moines"
                },
                {
                    "ex_id": 7333,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with the capital des moines"
                }
            ],
            "example_quality": 0.6724110662297025,
            "example_similarity": 0.34919384341381193,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 381,
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: What is the membership card held by both members living in Hartford and ones living in Waterbury address? */\nSELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 271,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                    "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"."
                },
                {
                    "ex_id": 272,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                    "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?"
                },
                {
                    "ex_id": 797,
                    "db_id": "coffee_shop",
                    "query": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
                    "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?"
                }
            ],
            "example_quality": 0.6732708797041652,
            "example_similarity": 0.3490461379379239,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 382,
            "question": "How many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: How many teachers are there? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6741261915374005,
            "example_similarity": 0.34995693259507515,
            "db_id": "course_teach"
        },
        {
            "index": 383,
            "question": "What is the total count of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the total count of teachers? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6749770369903054,
            "example_similarity": 0.3496814430698777,
            "db_id": "course_teach"
        },
        {
            "index": 384,
            "question": "List the names of teachers in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Answer the following: What is the list of school locations sorted in ascending order of school enrollment? */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers in ascending order of age. */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                },
                {
                    "ex_id": 4864,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "What is the list of school locations sorted in ascending order of school enrollment?"
                }
            ],
            "example_quality": 0.6758234509564764,
            "example_similarity": 0.35090478421929056,
            "db_id": "course_teach"
        },
        {
            "index": 385,
            "question": "What are the names of the teachers ordered by ascending age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Answer the following: What is the list of school locations sorted in ascending order of school enrollment? */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers ordered by ascending age? */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                },
                {
                    "ex_id": 4864,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "What is the list of school locations sorted in ascending order of school enrollment?"
                }
            ],
            "example_quality": 0.676665467966979,
            "example_similarity": 0.35096904450661726,
            "db_id": "course_teach"
        },
        {
            "index": 386,
            "question": "What are the age and hometown of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the age and hometown of teachers? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6775031221950438,
            "example_similarity": 0.351606452544187,
            "db_id": "course_teach"
        },
        {
            "index": 387,
            "question": "What is the age and hometown of every teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the age and hometown of every teacher? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6783364474606898,
            "example_similarity": 0.3518873595410172,
            "db_id": "course_teach"
        },
        {
            "index": 388,
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the name of teachers whose hometown is not `` Little Lever Urban District '' . */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.6777596665511144,
            "example_similarity": 0.35187410869618474,
            "db_id": "course_teach"
        },
        {
            "index": 389,
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.677185851096087,
            "example_similarity": 0.352359213070089,
            "db_id": "course_teach"
        },
        {
            "index": 390,
            "question": "Show the name of teachers aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". */\nSELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of teachers aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1983,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
                    "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.6772809789504194,
            "example_similarity": 0.3528131939717192,
            "db_id": "course_teach"
        },
        {
            "index": 391,
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". */\nSELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who are aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1983,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
                    "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.6773756202172615,
            "example_similarity": 0.35297753169341867,
            "db_id": "course_teach"
        },
        {
            "index": 392,
            "question": "What is the hometown of the youngest teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the hometown of the youngest teacher? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                },
                {
                    "ex_id": 326,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Find the name of the product that has the smallest capacity."
                },
                {
                    "ex_id": 327,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Which catalog content has the smallest capacity? Return the catalog entry name."
                }
            ],
            "example_quality": 0.6781986415942584,
            "example_similarity": 0.3527916007263247,
            "db_id": "course_teach"
        },
        {
            "index": 393,
            "question": "Where is the youngest teacher from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Where is the youngest teacher from? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                },
                {
                    "ex_id": 326,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Find the name of the product that has the smallest capacity."
                },
                {
                    "ex_id": 327,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Which catalog content has the smallest capacity? Return the catalog entry name."
                }
            ],
            "example_quality": 0.6790174745673009,
            "example_similarity": 0.352241082425486,
            "db_id": "course_teach"
        },
        {
            "index": 394,
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show different hometown of teachers and the number of teachers from each hometown. */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.67983215102779,
            "example_similarity": 0.3522669524255073,
            "db_id": "course_teach"
        },
        {
            "index": 395,
            "question": "For each hometown, how many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: For each hometown, how many teachers are there? */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6806427025441755,
            "example_similarity": 0.3519942931651049,
            "db_id": "course_teach"
        },
        {
            "index": 396,
            "question": "List the most common hometown of teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the most common hometown of teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6814491603660335,
            "example_similarity": 0.35222281980481635,
            "db_id": "course_teach"
        },
        {
            "index": 397,
            "question": "What is the most commmon hometowns for teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the most commmon hometowns for teachers? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6822515554280839,
            "example_similarity": 0.35222921548480896,
            "db_id": "course_teach"
        },
        {
            "index": 398,
            "question": "Show the hometowns shared by at least two teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the hometowns shared by at least two teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.6830499183541439,
            "example_similarity": 0.3522737736618908,
            "db_id": "course_teach"
        },
        {
            "index": 399,
            "question": "What are the towns from which at least two teachers come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the towns from which at least two teachers come from? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.6838442794610257,
            "example_similarity": 0.3519381255282774,
            "db_id": "course_teach"
        },
        {
            "index": 400,
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: For each journal_committee, find the editor name and the journal theme. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: Show the names of members and the location of the performances they attended. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 659,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "Show the names of editors and the theme of journals for which they serve on committees."
                },
                {
                    "ex_id": 660,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "For each journal_committee, find the editor name and the journal theme."
                },
                {
                    "ex_id": 1318,
                    "db_id": "performance_attendance",
                    "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",
                    "question": "Show the names of members and the location of the performances they attended."
                }
            ],
            "example_quality": 0.6842500533777578,
            "example_similarity": 0.35208208973826627,
            "db_id": "course_teach"
        },
        {
            "index": 401,
            "question": "What is the name of each teacher and what course they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of players and names of their coaches. */\nSELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID\n\n/* Answer the following: Show the names of phones and the districts of markets they are on. */\nSELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID\n\n/* Answer the following: Show the names of pilots and models of aircrafts they have flied with. */\nSELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the name of each teacher and what course they teach? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1729,
                    "db_id": "riding_club",
                    "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
                    "question": "Show the names of players and names of their coaches."
                },
                {
                    "ex_id": 1988,
                    "db_id": "phone_market",
                    "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
                    "question": "Show the names of phones and the districts of markets they are on."
                },
                {
                    "ex_id": 2093,
                    "db_id": "pilot_record",
                    "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
                    "question": "Show the names of pilots and models of aircrafts they have flied with."
                }
            ],
            "example_quality": 0.6850374597284367,
            "example_similarity": 0.3520047095433552,
            "db_id": "course_teach"
        },
        {
            "index": 402,
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of members and the location of performances they attended in ascending alphabetical order of their names. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC\n\n/* Answer the following: Show the names of journalists and the names of the events they reported in ascending order */\nSELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC\n\n/* Answer the following: Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme. */\nSELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1319,
                    "db_id": "performance_attendance",
                    "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
                    "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names."
                },
                {
                    "ex_id": 2814,
                    "db_id": "news_report",
                    "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
                    "question": "Show the names of journalists and the names of the events they reported in ascending order"
                },
                {
                    "ex_id": 661,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
                    "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme."
                }
            ],
            "example_quality": 0.6850569833228946,
            "example_similarity": 0.35263133168388383,
            "db_id": "course_teach"
        },
        {
            "index": 403,
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of members and the location of performances they attended in ascending alphabetical order of their names. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC\n\n/* Answer the following: Show the names of journalists and the names of the events they reported in ascending order */\nSELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC\n\n/* Answer the following: Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme. */\nSELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1319,
                    "db_id": "performance_attendance",
                    "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
                    "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names."
                },
                {
                    "ex_id": 2814,
                    "db_id": "news_report",
                    "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
                    "question": "Show the names of journalists and the names of the events they reported in ascending order"
                },
                {
                    "ex_id": 661,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC",
                    "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme."
                }
            ],
            "example_quality": 0.6850764100260646,
            "example_similarity": 0.35302752420766453,
            "db_id": "course_teach"
        },
        {
            "index": 404,
            "question": "Show the name of the teacher for the math course.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of students who took some course offered by Statistics department. */\nSELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'\n\n/* Answer the following: What are the names of students who have taken Statistics courses? */\nSELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'\n\n/* Answer the following: What is the first name of each student enrolled in class ACCT-211? */\nSELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of the teacher for the math course. */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1461,
                    "db_id": "college_2",
                    "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
                    "question": "Find the name of students who took some course offered by Statistics department."
                },
                {
                    "ex_id": 1462,
                    "db_id": "college_2",
                    "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
                    "question": "What are the names of students who have taken Statistics courses?"
                },
                {
                    "ex_id": 3244,
                    "db_id": "college_1",
                    "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
                    "question": "What is the first name of each student enrolled in class ACCT-211?"
                }
            ],
            "example_quality": 0.6855023170733834,
            "example_similarity": 0.35301328946569793,
            "db_id": "course_teach"
        },
        {
            "index": 405,
            "question": "What are the names of the people who teach math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the instructors who taught C Programming course before. */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the names of instructors who have taught C Programming courses? */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the last names of the author of the paper titled \"Binders Unbound\"? */\nSELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the people who teach math courses? */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1431,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
                    "question": "Find the name of the instructors who taught C Programming course before."
                },
                {
                    "ex_id": 1432,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
                    "question": "What are the names of instructors who have taught C Programming courses?"
                },
                {
                    "ex_id": 2879,
                    "db_id": "icfp_1",
                    "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
                    "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?"
                }
            ],
            "example_quality": 0.6857679988788217,
            "example_similarity": 0.3532950582068434,
            "db_id": "course_teach"
        },
        {
            "index": 406,
            "question": "Show names of teachers and the number of courses they teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: List the name and the number of enrolled student for each course. */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the number of courses they teach. */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                },
                {
                    "ex_id": 3827,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "What is the name of each course and the corresponding number of student enrollment?"
                },
                {
                    "ex_id": 3828,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "List the name and the number of enrolled student for each course."
                }
            ],
            "example_quality": 0.6860728161464201,
            "example_similarity": 0.35328138952076404,
            "db_id": "course_teach"
        },
        {
            "index": 407,
            "question": "What are the names of the teachers and how many courses do they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergy type with number of students affected. */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: How many students are affected by each allergy type? */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: Show the card type codes and the number of transactions. */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and how many courses do they teach? */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 518,
                    "db_id": "allergy_1",
                    "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
                    "question": "Show all allergy type with number of students affected."
                },
                {
                    "ex_id": 519,
                    "db_id": "allergy_1",
                    "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
                    "question": "How many students are affected by each allergy type?"
                },
                {
                    "ex_id": 740,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
                    "question": "Show the card type codes and the number of transactions."
                }
            ],
            "example_quality": 0.6868441360084683,
            "example_similarity": 0.3531896138970412,
            "db_id": "course_teach"
        },
        {
            "index": 408,
            "question": "Show names of teachers that teach at least two courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers that teach at least two courses. */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                },
                {
                    "ex_id": 260,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "What are the names of musicals who have at 3 or more actors?"
                },
                {
                    "ex_id": 418,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
                    "question": "Show names for all aircraft with at least two flights."
                }
            ],
            "example_quality": 0.6873888584915134,
            "example_similarity": 0.35346190826073887,
            "db_id": "course_teach"
        },
        {
            "index": 409,
            "question": "What are the names of the teachers who teach at least two courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals which have at least three actors. */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: Show names for all aircraft with at least two flights. */\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who teach at least two courses? */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 259,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "Show names of musicals which have at least three actors."
                },
                {
                    "ex_id": 260,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "What are the names of musicals who have at 3 or more actors?"
                },
                {
                    "ex_id": 418,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
                    "question": "Show names for all aircraft with at least two flights."
                }
            ],
            "example_quality": 0.6879309172949349,
            "example_similarity": 0.3535652079984257,
            "db_id": "course_teach"
        },
        {
            "index": 410,
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers who have not been arranged to teach courses. */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.6886920613990937,
            "example_similarity": 0.35368198746292145,
            "db_id": "course_teach"
        },
        {
            "index": 411,
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose courses have not been arranged? */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.6894495016389985,
            "example_similarity": 0.3535527972144025,
            "db_id": "course_teach"
        },
        {
            "index": 412,
            "question": "How many visitors below age 30 are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many churches opened before 1850 are there? */\nSELECT count(*) FROM Church WHERE Open_Date  <  1850\n\n/* Answer the following: How many clubs have total medals less than 10? */\nSELECT count(*) FROM club_rank WHERE Total  <  10\n\n/* Answer the following: What is the total number of clubs that have less than 10 medals in total? */\nSELECT count(*) FROM club_rank WHERE Total  <  10\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many visitors below age 30 are there? */\nSELECT ",
            "response": "count(*) FROM visitor WHERE age < 30",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1630,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850",
                    "question": "How many churches opened before 1850 are there?"
                },
                {
                    "ex_id": 3350,
                    "db_id": "sports_competition",
                    "query": "SELECT count(*) FROM club_rank WHERE Total  <  10",
                    "question": "How many clubs have total medals less than 10?"
                },
                {
                    "ex_id": 3351,
                    "db_id": "sports_competition",
                    "query": "SELECT count(*) FROM club_rank WHERE Total  <  10",
                    "question": "What is the total number of clubs that have less than 10 medals in total?"
                }
            ],
            "example_quality": 0.690203264984535,
            "example_similarity": 0.3536087937663661,
            "db_id": "museum_visit"
        },
        {
            "index": 413,
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List names of all pilot aged 30 or younger in descending alphabetical order. */\nSELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\n\n/* Answer the following: What are the names of all pilots 30 years old or young in descending alphabetical order? */\nSELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\n\n/* Answer the following: List the name of the colleges whose enrollment is greater 18000 sorted by the college's name. */\nSELECT cName FROM College WHERE enr  >  18000 ORDER BY cName\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. */\nSELECT ",
            "response": "name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4814,
                    "db_id": "aircraft",
                    "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
                    "question": "List names of all pilot aged 30 or younger in descending alphabetical order."
                },
                {
                    "ex_id": 4815,
                    "db_id": "aircraft",
                    "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
                    "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?"
                },
                {
                    "ex_id": 4979,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
                    "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name."
                }
            ],
            "example_quality": 0.6903059222911117,
            "example_similarity": 0.3533285729181807,
            "db_id": "museum_visit"
        },
        {
            "index": 414,
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average enrollment size of the universities that are founded before 1850? */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: Return the average enrollment of universities founded before 1850. */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: What is the average number of working horses of farms with more than 5000 total number of horses? */\nSELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the average age of the visitors whose membership level is not higher than 4? */\nSELECT ",
            "response": "avg(age) FROM visitor WHERE Level_of_membership <= 4",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 996,
                    "db_id": "university_basketball",
                    "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
                    "question": "What are the average enrollment size of the universities that are founded before 1850?"
                },
                {
                    "ex_id": 997,
                    "db_id": "university_basketball",
                    "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
                    "question": "Return the average enrollment of universities founded before 1850."
                },
                {
                    "ex_id": 25,
                    "db_id": "farm",
                    "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
                    "question": "What is the average number of working horses of farms with more than 5000 total number of horses?"
                }
            ],
            "example_quality": 0.6905172069662003,
            "example_similarity": 0.353329900051354,
            "db_id": "museum_visit"
        },
        {
            "index": 415,
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the names of the companies with more than 200 sales in the descending order of sales and profits. */\nSELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC\n\n/* Answer the following: Show names and seatings, ordered by seating for all tracks opened after 2000. */\nSELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\n\n/* Answer the following: What are the names and seatings for all tracks opened after 2000, ordered by seating? */\nSELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. */\nSELECT ",
            "response": "name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4112,
                    "db_id": "company_employee",
                    "query": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
                    "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits."
                },
                {
                    "ex_id": 752,
                    "db_id": "race_track",
                    "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
                    "question": "Show names and seatings, ordered by seating for all tracks opened after 2000."
                },
                {
                    "ex_id": 753,
                    "db_id": "race_track",
                    "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
                    "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?"
                }
            ],
            "example_quality": 0.6910076416941073,
            "example_similarity": 0.35311946055753185,
            "db_id": "museum_visit"
        },
        {
            "index": 416,
            "question": "Find the id and name of the museum that has the most staff members?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the id and name of the museum that has the most staff members? */\nSELECT ",
            "response": "museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 34,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "What is the official name and status of the city with the most residents?"
                },
                {
                    "ex_id": 356,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "Show the id and name of the aircraft with the maximum distance."
                }
            ],
            "example_quality": 0.6913805893009817,
            "example_similarity": 0.3531894884942952,
            "db_id": "museum_visit"
        },
        {
            "index": 417,
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of rooms of apartments with type code \"Studio\"? */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average room count of the apartments that have the \"Studio\" type code. */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average number of customers in all banks of Utah state. */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the average number of staff working for the museums that were open before 2009. */\nSELECT ",
            "response": "avg(num_of_staff) FROM museum WHERE open_year < 2009",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1213,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "What is the average number of rooms of apartments with type code \"Studio\"?"
                },
                {
                    "ex_id": 1214,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "Find the average room count of the apartments that have the \"Studio\" type code."
                },
                {
                    "ex_id": 3013,
                    "db_id": "loan_1",
                    "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
                    "question": "Find the average number of customers in all banks of Utah state."
                }
            ],
            "example_quality": 0.6905219627878698,
            "example_similarity": 0.35321839858555437,
            "db_id": "museum_visit"
        },
        {
            "index": 418,
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the opening year and staff number of the museum named Plaza Museum? */\nSELECT ",
            "response": "Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.6912623408673246,
            "example_similarity": 0.3532815833488177,
            "db_id": "museum_visit"
        },
        {
            "index": 419,
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of instructors who earn more than at least one instructor from the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of the songs whose rating is below the rating of all songs in English? */\nSELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. */\nSELECT ",
            "response": "name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1489,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department."
                },
                {
                    "ex_id": 1490,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?"
                },
                {
                    "ex_id": 3614,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
                    "question": "What are the names of the songs whose rating is below the rating of all songs in English?"
                }
            ],
            "example_quality": 0.6909314798603557,
            "example_similarity": 0.35324226108678125,
            "db_id": "museum_visit"
        },
        {
            "index": 420,
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title, credit, and department name of courses that have more than one prerequisites? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: What is the title, credit value, and department name for courses with more than one prerequisite? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Answer the following: Find the name and email for the users who have more than one follower. */\nSELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the id, name and age for visitors who visited some museums more than once. */\nSELECT ",
            "response": "t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1345,
                    "db_id": "college_2",
                    "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
                    "question": "Find the title, credit, and department name of courses that have more than one prerequisites?"
                },
                {
                    "ex_id": 1346,
                    "db_id": "college_2",
                    "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
                    "question": "What is the title, credit value, and department name for courses with more than one prerequisite?"
                },
                {
                    "ex_id": 287,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
                    "question": "Find the name and email for the users who have more than one follower."
                }
            ],
            "example_quality": 0.6912687751812758,
            "example_similarity": 0.35350010918309477,
            "db_id": "museum_visit"
        },
        {
            "index": 421,
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Answer the following: What is the full name and id of the customer who has the lowest total amount of payment? */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Answer the following: List the top 10 customers by total gross sales. List customers' first and last name and total gross sales. */\nSELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? */\nSELECT ",
            "response": "t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2961,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id."
                },
                {
                    "ex_id": 2962,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "What is the full name and id of the customer who has the lowest total amount of payment?"
                },
                {
                    "ex_id": 548,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
                    "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales."
                }
            ],
            "example_quality": 0.691077068225795,
            "example_similarity": 0.35335120651106183,
            "db_id": "museum_visit"
        },
        {
            "index": 422,
            "question": "What are the id and name of the museum visited most times?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id and name of the museum visited most times? */\nSELECT ",
            "response": "t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.6914580511253827,
            "example_similarity": 0.3536274085497067,
            "db_id": "museum_visit"
        },
        {
            "index": 423,
            "question": "What is the name of the museum that had no visitor yet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the museum that had no visitor yet? */\nSELECT ",
            "response": "name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.6916808791031342,
            "example_similarity": 0.35342620549998754,
            "db_id": "museum_visit"
        },
        {
            "index": 424,
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out 5 customers who most recently purchased something. List customers' first and last name. */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: What are the first and last names of the 5 customers who purchased something most recently? */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;\n\n/* Answer the following: List the customers first and last name of 10 least expensive invoices. */\nSELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and age of the visitor who bought the most tickets at once. */\nSELECT ",
            "response": "t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 544,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "Find out 5 customers who most recently purchased something. List customers' first and last name."
                },
                {
                    "ex_id": 545,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
                    "question": "What are the first and last names of the 5 customers who purchased something most recently?"
                },
                {
                    "ex_id": 558,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
                    "question": "List the customers first and last name of 10 least expensive invoices."
                }
            ],
            "example_quality": 0.6917822606775765,
            "example_similarity": 0.3532177752036064,
            "db_id": "museum_visit"
        },
        {
            "index": 425,
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average and maximum salary of all employees. */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: What is the average and largest salary of all employees? */\nSELECT avg(salary) ,  max(salary) FROM Employee\n\n/* Answer the following: Find the average and maximum rating of all reviews. */\nSELECT avg(rating) ,  max(rating) FROM review\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the average and maximum number of tickets bought in all visits? */\nSELECT ",
            "response": "avg(num_of_ticket) , max(num_of_ticket) FROM visit",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 372,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is average and maximum salary of all employees."
                },
                {
                    "ex_id": 373,
                    "db_id": "flight_1",
                    "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                    "question": "What is the average and largest salary of all employees?"
                },
                {
                    "ex_id": 1694,
                    "db_id": "epinions_1",
                    "query": "SELECT avg(rating) ,  max(rating) FROM review",
                    "question": "Find the average and maximum rating of all reviews."
                }
            ],
            "example_quality": 0.6913310082995117,
            "example_similarity": 0.3534016687890558,
            "db_id": "museum_visit"
        },
        {
            "index": 426,
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total money requested by entrepreneurs with height more than 1.85? */\nSELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85\n\n/* Answer the following: Give the total money requested by entrepreneurs who are taller than 1.85. */\nSELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85\n\n/* Answer the following: What is the total kills of the perpetrators with height more than 1.84. */\nSELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the total ticket expense of the visitors whose membership level is 1? */\nSELECT ",
            "response": "sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2282,
                    "db_id": "entrepreneur",
                    "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
                    "question": "What is the total money requested by entrepreneurs with height more than 1.85?"
                },
                {
                    "ex_id": 2283,
                    "db_id": "entrepreneur",
                    "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
                    "question": "Give the total money requested by entrepreneurs who are taller than 1.85."
                },
                {
                    "ex_id": 2313,
                    "db_id": "perpetrator",
                    "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
                    "question": "What is the total kills of the perpetrators with height more than 1.84."
                }
            ],
            "example_quality": 0.6913848925858642,
            "example_similarity": 0.3532495528731197,
            "db_id": "museum_visit"
        },
        {
            "index": 427,
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin? */\nSELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\n\n/* Answer the following: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin? */\nSELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"\n\n/* Answer the following: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured. */\nSELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? */\nSELECT ",
            "response": "t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5399,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
                    "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?"
                },
                {
                    "ex_id": 5400,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
                    "question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?"
                },
                {
                    "ex_id": 1289,
                    "db_id": "game_injury",
                    "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
                    "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured."
                }
            ],
            "example_quality": 0.6909469387094299,
            "example_similarity": 0.35346694276352236,
            "db_id": "museum_visit"
        },
        {
            "index": 428,
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers do not traverse the state with the capital albany */\nSELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );\n\n/* Answer the following: How many airports haven't the pilot 'Thompson' driven an aircraft? */\nSELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );\n\n/* Answer the following: What is the total number of people who has no friend living in the city of Austin. */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the number of visitors who did not visit any museum opened after 2010. */\nSELECT ",
            "response": "count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7457,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );",
                    "question": "how many rivers do not traverse the state with the capital albany"
                },
                {
                    "ex_id": 6379,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
                    "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?"
                },
                {
                    "ex_id": 4481,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who has no friend living in the city of Austin."
                }
            ],
            "example_quality": 0.6896303360334155,
            "example_similarity": 0.3532802710013913,
            "db_id": "museum_visit"
        },
        {
            "index": 429,
            "question": "How many museums were opened after 2013 or before 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many project staff worked as leaders or started working before '1989-04-24 23:51:54'? */\nSELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'\n\n/* Answer the following: How many project members were leaders or started working before '1989-04-24 23:51:54'? */\nSELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'\n\n/* Answer the following: count the states which have elevations lower than what alabama has */\nSELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many museums were opened after 2013 or before 2008? */\nSELECT ",
            "response": "count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4377,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
                    "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?"
                },
                {
                    "ex_id": 4378,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
                    "question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?"
                },
                {
                    "ex_id": 7208,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );",
                    "question": "count the states which have elevations lower than what alabama has"
                }
            ],
            "example_quality": 0.6889161366845612,
            "example_similarity": 0.3534085998180159,
            "db_id": "museum_visit"
        },
        {
            "index": 430,
            "question": "Find the total number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of players. */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6896395875294808,
            "example_similarity": 0.3532004144437621,
            "db_id": "wta_1"
        },
        {
            "index": 431,
            "question": "How many players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there? */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6903596812939136,
            "example_similarity": 0.35399802298790584,
            "db_id": "wta_1"
        },
        {
            "index": 432,
            "question": "Find the total number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6910764412909184,
            "example_similarity": 0.3537894370293433,
            "db_id": "wta_1"
        },
        {
            "index": 433,
            "question": "Count the number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Count the number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6917898906181912,
            "example_similarity": 0.3538821621030385,
            "db_id": "wta_1"
        },
        {
            "index": 434,
            "question": "List the first name and birth date of all players from the country with code USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first name and birth date of all players from the country with code USA. */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.6925000521605456,
            "example_similarity": 0.35404755841248087,
            "db_id": "wta_1"
        },
        {
            "index": 435,
            "question": "What are the first names and birth dates of players from the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and birth dates of players from the USA? */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.6932069485923604,
            "example_similarity": 0.35430679098047557,
            "db_id": "wta_1"
        },
        {
            "index": 436,
            "question": "Find the average age of losers and winners of all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What is the average high temperature for each day of week? */\nSELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average age of losers and winners of all matches. */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                },
                {
                    "ex_id": 497,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "What are the average ages for male and female students?"
                },
                {
                    "ex_id": 3166,
                    "db_id": "station_weather",
                    "query": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
                    "question": "What is the average high temperature for each day of week?"
                }
            ],
            "example_quality": 0.69235802651549,
            "example_similarity": 0.35419441735629603,
            "db_id": "wta_1"
        },
        {
            "index": 437,
            "question": "What are the average ages of losers and winners across matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average age for male and female students. */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What are the average ages for male and female students? */\nSELECT avg(age) ,  sex FROM Student GROUP BY sex\n\n/* Answer the following: What is the average high temperature for each day of week? */\nSELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the average ages of losers and winners across matches? */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 496,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "Show the average age for male and female students."
                },
                {
                    "ex_id": 497,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
                    "question": "What are the average ages for male and female students?"
                },
                {
                    "ex_id": 3166,
                    "db_id": "station_weather",
                    "query": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
                    "question": "What is the average high temperature for each day of week?"
                }
            ],
            "example_quality": 0.6915129896655162,
            "example_similarity": 0.3543291484273911,
            "db_id": "wta_1"
        },
        {
            "index": 438,
            "question": "Find the average rank of winners in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average rank of winners in all matches. */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.692217297908289,
            "example_similarity": 0.3545781000596801,
            "db_id": "wta_1"
        },
        {
            "index": 439,
            "question": "What is the average rank for winners in all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the average rank for winners in all matches? */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.6929183974574729,
            "example_similarity": 0.35508875263073914,
            "db_id": "wta_1"
        },
        {
            "index": 440,
            "question": "Find the highest rank of losers in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the highest rank of losers in all matches. */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 940,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
                },
                {
                    "ex_id": 941,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum OMIM value in the database?"
                },
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                }
            ],
            "example_quality": 0.6927072192814332,
            "example_similarity": 0.3547896190885289,
            "db_id": "wta_1"
        },
        {
            "index": 441,
            "question": "What is the best rank of losers across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum snatch score? */\nSELECT min(snatch) FROM body_builder\n\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Answer the following: what is the area of the smallest state */\nSELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the best rank of losers across all matches? */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1174,
                    "db_id": "body_builder",
                    "query": "SELECT min(snatch) FROM body_builder",
                    "question": "What is the minimum snatch score?"
                },
                {
                    "ex_id": 1695,
                    "db_id": "epinions_1",
                    "query": "SELECT min(rank) FROM review",
                    "question": "Find the highest rank of all reviews."
                },
                {
                    "ex_id": 7524,
                    "db_id": "geo",
                    "query": "SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
                    "question": "what is the area of the smallest state"
                }
            ],
            "example_quality": 0.6927583359329902,
            "example_similarity": 0.35489462879830297,
            "db_id": "wta_1"
        },
        {
            "index": 442,
            "question": "find the number of distinct country codes of all players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of distinct country codes of all players. */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6934534528200196,
            "example_similarity": 0.3544704798971295,
            "db_id": "wta_1"
        },
        {
            "index": 443,
            "question": "How many distinct countries do players come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many distinct countries do players come from? */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6941454314818255,
            "example_similarity": 0.3543045498769632,
            "db_id": "wta_1"
        },
        {
            "index": 444,
            "question": "Find the number of distinct name of losers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of distinct name of losers. */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6948342931226322,
            "example_similarity": 0.3538947389196919,
            "db_id": "wta_1"
        },
        {
            "index": 445,
            "question": "How many different loser names are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different loser names are there? */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6955200587560645,
            "example_similarity": 0.35403868044559983,
            "db_id": "wta_1"
        },
        {
            "index": 446,
            "question": "Find the name of tourney that has more than 10 matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of tourney that has more than 10 matches. */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                },
                {
                    "ex_id": 229,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
                    "question": "List the writers who have written more than one book."
                },
                {
                    "ex_id": 267,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
                    "question": "List the nominees that have been nominated more than two musicals."
                }
            ],
            "example_quality": 0.6962027492072841,
            "example_similarity": 0.354115354467286,
            "db_id": "wta_1"
        },
        {
            "index": 447,
            "question": "What are the names of tournaments that have more than 10 matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of tournaments that have more than 10 matches? */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                },
                {
                    "ex_id": 229,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
                    "question": "List the writers who have written more than one book."
                },
                {
                    "ex_id": 267,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
                    "question": "List the nominees that have been nominated more than two musicals."
                }
            ],
            "example_quality": 0.6968823851150977,
            "example_similarity": 0.35414136204284186,
            "db_id": "wta_1"
        },
        {
            "index": 448,
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers with a book published in 1989 and a book in 1990. */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: What are the publishers who have published a book in both 1989 and 1990? */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: Show all director names who have a movie in both year 1999 and 2000. */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the names of all winners who played in both 2013 and 2016. */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6979,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "Show publishers with a book published in 1989 and a book in 1990."
                },
                {
                    "ex_id": 6980,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "What are the publishers who have published a book in both 1989 and 1990?"
                },
                {
                    "ex_id": 6989,
                    "db_id": "culture_company",
                    "query": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999",
                    "question": "Show all director names who have a movie in both year 1999 and 2000."
                }
            ],
            "example_quality": 0.6975589869340373,
            "example_similarity": 0.35422884073110433,
            "db_id": "wta_1"
        },
        {
            "index": 449,
            "question": "What are the names of players who won in both 2013 and 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers with a book published in 1989 and a book in 1990. */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: What are the publishers who have published a book in both 1989 and 1990? */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: Show all director names who have a movie in both year 1999 and 2000. */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of players who won in both 2013 and 2016? */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6979,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "Show publishers with a book published in 1989 and a book in 1990."
                },
                {
                    "ex_id": 6980,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "What are the publishers who have published a book in both 1989 and 1990?"
                },
                {
                    "ex_id": 6989,
                    "db_id": "culture_company",
                    "query": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999",
                    "question": "Show all director names who have a movie in both year 1999 and 2000."
                }
            ],
            "example_quality": 0.6982325749364114,
            "example_similarity": 0.3543378001032038,
            "db_id": "wta_1"
        },
        {
            "index": 450,
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many movies were made before 2000? */\nSELECT count(*) FROM Movie WHERE YEAR  <  2000\n\n/* Answer the following: How many movies were made before 2000? */\nSELECT count(*) FROM Movie WHERE YEAR  <  2000\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the number of all matches who played in years of 2013 or 2016. */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                },
                {
                    "ex_id": 2439,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
                    "question": "How many movies were made before 2000?"
                },
                {
                    "ex_id": 2440,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
                    "question": "How many movies were made before 2000?"
                }
            ],
            "example_quality": 0.6977293800405413,
            "example_similarity": 0.3538396243922161,
            "db_id": "wta_1"
        },
        {
            "index": 451,
            "question": "How many matches were played in 2013 or 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many movies were made before 2000? */\nSELECT count(*) FROM Movie WHERE YEAR  <  2000\n\n/* Answer the following: How many movies were made before 2000? */\nSELECT count(*) FROM Movie WHERE YEAR  <  2000\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in 2013 or 2016? */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                },
                {
                    "ex_id": 2439,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
                    "question": "How many movies were made before 2000?"
                },
                {
                    "ex_id": 2440,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
                    "question": "How many movies were made before 2000?"
                }
            ],
            "example_quality": 0.697228416607624,
            "example_similarity": 0.35422529657267193,
            "db_id": "wta_1"
        },
        {
            "index": 452,
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes? */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome. */\nSELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 968,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes."
                },
                {
                    "ex_id": 969,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?"
                },
                {
                    "ex_id": 4631,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
                    "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome."
                }
            ],
            "example_quality": 0.6972250948685803,
            "example_similarity": 0.3544316933525223,
            "db_id": "wta_1"
        },
        {
            "index": 453,
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes? */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 968,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes."
                },
                {
                    "ex_id": 969,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?"
                },
                {
                    "ex_id": 4736,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
                    "question": "Find the name and address of the customers who have both New and Pending orders."
                }
            ],
            "example_quality": 0.6973936107210487,
            "example_similarity": 0.35454057950959644,
            "db_id": "wta_1"
        },
        {
            "index": 454,
            "question": "Find the first name and country code of the oldest player.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the oldest player. */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                },
                {
                    "ex_id": 117,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "What is the station station and end station for the trips with the three smallest ids?"
                },
                {
                    "ex_id": 292,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
                    "question": "Find the name and email of the user followed by the least number of people."
                }
            ],
            "example_quality": 0.6980601446181389,
            "example_similarity": 0.3548336793535412,
            "db_id": "wta_1"
        },
        {
            "index": 455,
            "question": "What is the first name and country code of the oldest player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the start station and end station for the trips with the three oldest id. */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the oldest player? */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 116,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "Give me the start station and end station for the trips with the three oldest id."
                },
                {
                    "ex_id": 117,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "What is the station station and end station for the trips with the three smallest ids?"
                },
                {
                    "ex_id": 292,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
                    "question": "Find the name and email of the user followed by the least number of people."
                }
            ],
            "example_quality": 0.6987237486959013,
            "example_similarity": 0.35507102011536124,
            "db_id": "wta_1"
        },
        {
            "index": 456,
            "question": "List the first and last name of all players in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and star rating of each hotel, ordered by its price from low to high. */\nSELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC\n\n/* Answer the following: Find the id and star rating of each hotel and sort them in increasing order of price. */\nSELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC\n\n/* Answer the following: List the method, date and amount of all the payments, in ascending order of date. */\nSELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5940,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
                    "question": "Show the id and star rating of each hotel, ordered by its price from low to high."
                },
                {
                    "ex_id": 5941,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
                    "question": "Find the id and star rating of each hotel and sort them in increasing order of price."
                },
                {
                    "ex_id": 3855,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
                    "question": "List the method, date and amount of all the payments, in ascending order of date."
                }
            ],
            "example_quality": 0.6990098077265389,
            "example_similarity": 0.3553702482626678,
            "db_id": "wta_1"
        },
        {
            "index": 457,
            "question": "What are the full names of all players, sorted by birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all schools and their nicknames in the order of founded year. */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all players, sorted by birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 978,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "List all schools and their nicknames in the order of founded year."
                },
                {
                    "ex_id": 979,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "What are the different schools and their nicknames, ordered by their founding years?"
                },
                {
                    "ex_id": 1385,
                    "db_id": "college_2",
                    "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
                    "question": "Find the name of the students and their department names sorted by their total credits in ascending order."
                }
            ],
            "example_quality": 0.6996684295914698,
            "example_similarity": 0.355275271377992,
            "db_id": "wta_1"
        },
        {
            "index": 458,
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names and decor of rooms that have a king bed. Sort the list by their price. */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: What are the names and decor of rooms with a king bed? Sort them by their price */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: List the order id, customer id for orders in Cancelled status, ordered by their order dates. */\nSELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players who are left / L hand in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2591,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
                    "question": "List the names and decor of rooms that have a king bed. Sort the list by their price."
                },
                {
                    "ex_id": 2592,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
                    "question": "What are the names and decor of rooms with a king bed? Sort them by their price"
                },
                {
                    "ex_id": 4784,
                    "db_id": "department_store",
                    "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
                    "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates."
                }
            ],
            "example_quality": 0.700324175378388,
            "example_similarity": 0.35521010928870106,
            "db_id": "wta_1"
        },
        {
            "index": 459,
            "question": "What are the full names of all left handed players, in order of birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names and decor of rooms that have a king bed. Sort the list by their price. */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: What are the names and decor of rooms with a king bed? Sort them by their price */\nSELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;\n\n/* Answer the following: List the order id, customer id for orders in Cancelled status, ordered by their order dates. */\nSELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all left handed players, in order of birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2591,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
                    "question": "List the names and decor of rooms that have a king bed. Sort the list by their price."
                },
                {
                    "ex_id": 2592,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
                    "question": "What are the names and decor of rooms with a king bed? Sort them by their price"
                },
                {
                    "ex_id": 4784,
                    "db_id": "department_store",
                    "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
                    "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates."
                }
            ],
            "example_quality": 0.7009770638851889,
            "example_similarity": 0.35497341495709944,
            "db_id": "wta_1"
        },
        {
            "index": 460,
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Answer the following: What is the full name and id of the customer who has the lowest total amount of payment? */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Answer the following: What is the effective date of the claim that has the largest amount of total settlement? */\nSELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the player who did the most number of tours. */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2961,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id."
                },
                {
                    "ex_id": 2962,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "What is the full name and id of the customer who has the lowest total amount of payment?"
                },
                {
                    "ex_id": 906,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
                    "question": "What is the effective date of the claim that has the largest amount of total settlement?"
                }
            ],
            "example_quality": 0.7005847645505355,
            "example_similarity": 0.355010159366877,
            "db_id": "wta_1"
        },
        {
            "index": 461,
            "question": "What is the first name and country code of the player with the most tours?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the game name that has most number of hours played. */\nSELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1\n\n/* Answer the following: What is the name of the game that has been played the most? */\nSELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1\n\n/* Answer the following: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the player with the most tours? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6044,
                    "db_id": "game_1",
                    "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
                    "question": "Show the game name that has most number of hours played."
                },
                {
                    "ex_id": 6045,
                    "db_id": "game_1",
                    "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
                    "question": "What is the name of the game that has been played the most?"
                },
                {
                    "ex_id": 2961,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id."
                }
            ],
            "example_quality": 0.7000551549290899,
            "example_similarity": 0.3550380502746883,
            "db_id": "wta_1"
        },
        {
            "index": 462,
            "question": "Find the year that has the most number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the year and semester when offers the largest number of courses. */\nSELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the year that has the most number of matches. */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                },
                {
                    "ex_id": 1406,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which year had the greatest number of courses?"
                },
                {
                    "ex_id": 1407,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year and semester when offers the largest number of courses."
                }
            ],
            "example_quality": 0.7004518609429518,
            "example_similarity": 0.3550837336958463,
            "db_id": "wta_1"
        },
        {
            "index": 463,
            "question": "Which year had the most matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which year had the greatest number of courses? */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the year and semester when offers the largest number of courses. */\nSELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Which year had the most matches? */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                },
                {
                    "ex_id": 1406,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which year had the greatest number of courses?"
                },
                {
                    "ex_id": 1407,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year and semester when offers the largest number of courses."
                }
            ],
            "example_quality": 0.7008468533239246,
            "example_similarity": 0.3550815261169133,
            "db_id": "wta_1"
        },
        {
            "index": 464,
            "question": "Find the name and rank points of the winner who won the most times.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the role description and the id of the project staff involved in most number of project outcomes? */\nSELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: For each staff id, what is the description of the role that is involved with the most number of projects? */\nSELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which service id and type has the least number of participants? */\nSELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank points of the winner who won the most times. */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4363,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the role description and the id of the project staff involved in most number of project outcomes?"
                },
                {
                    "ex_id": 4364,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "For each staff id, what is the description of the role that is involved with the most number of projects?"
                },
                {
                    "ex_id": 2148,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which service id and type has the least number of participants?"
                }
            ],
            "example_quality": 0.6995695801279581,
            "example_similarity": 0.35497831618611514,
            "db_id": "wta_1"
        },
        {
            "index": 465,
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name of the band mate that has performed in most songs. */\nSELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the first name of the band mate who perfomed in the most songs? */\nSELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the role description and the id of the project staff involved in most number of project outcomes? */\nSELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner who has won the most matches, and how many rank points does this player have? */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5259,
                    "db_id": "music_2",
                    "query": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the first name of the band mate that has performed in most songs."
                },
                {
                    "ex_id": 5260,
                    "db_id": "music_2",
                    "query": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the first name of the band mate who perfomed in the most songs?"
                },
                {
                    "ex_id": 4363,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the role description and the id of the project staff involved in most number of project outcomes?"
                }
            ],
            "example_quality": 0.69836655281307,
            "example_similarity": 0.35505261246361813,
            "db_id": "wta_1"
        },
        {
            "index": 466,
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the biggest city in wyoming */\nSELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";\n\n/* Answer the following: what wyoming city has the largest population */\nSELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";\n\n/* Answer the following: what is the largest city in wyoming */\nSELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7001,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
                    "question": "what is the biggest city in wyoming"
                },
                {
                    "ex_id": 7002,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
                    "question": "what wyoming city has the largest population"
                },
                {
                    "ex_id": 7003,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
                    "question": "what is the largest city in wyoming"
                }
            ],
            "example_quality": 0.6971320257106319,
            "example_similarity": 0.35459392520044747,
            "db_id": "wta_1"
        },
        {
            "index": 467,
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: Find the name and budget of the latest movie by \" Quentin Tarantino \" */\nSELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner with the most rank points who participated in the Australian Open tournament? */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8407,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in PVLDB with the most citations ."
                },
                {
                    "ex_id": 8408,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in VLDB conference with the most citations ."
                },
                {
                    "ex_id": 8531,
                    "db_id": "imdb",
                    "query": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
                    "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \""
                }
            ],
            "example_quality": 0.6959744007026805,
            "example_similarity": 0.35435873886117863,
            "db_id": "wta_1"
        },
        {
            "index": 468,
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the population of the capital of the largest state */\nSELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Answer the following: what states border the most populous state */\nSELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: what are the states that border the state with the greatest population */\nSELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the names of loser and winner who played in the match with greatest number of minutes. */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7530,
                    "db_id": "geo",
                    "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the population of the capital of the largest state"
                },
                {
                    "ex_id": 7418,
                    "db_id": "geo",
                    "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "what states border the most populous state"
                },
                {
                    "ex_id": 7419,
                    "db_id": "geo",
                    "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "what are the states that border the state with the greatest population"
                }
            ],
            "example_quality": 0.6945756932446508,
            "example_similarity": 0.3542228543566992,
            "db_id": "wta_1"
        },
        {
            "index": 469,
            "question": "What are the names of the winner and loser who played in the longest match?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cell phone number of the student whose address has the lowest monthly rental? */\nSELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1\n\n/* Answer the following: What is the party of the representative that has the smallest number of votes. */\nSELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1\n\n/* Answer the following: What is the department name of the students with lowest gpa belongs to? */\nSELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of the winner and loser who played in the longest match? */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3118,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
                    "question": "What is the cell phone number of the student whose address has the lowest monthly rental?"
                },
                {
                    "ex_id": 1185,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1",
                    "question": "What is the party of the representative that has the smallest number of votes."
                },
                {
                    "ex_id": 3300,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
                    "question": "What is the department name of the students with lowest gpa belongs to?"
                }
            ],
            "example_quality": 0.6934170264418447,
            "example_similarity": 0.354282254851524,
            "db_id": "wta_1"
        },
        {
            "index": 470,
            "question": "Find the average ranking for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of countries and the average speed of roller coasters from each country. */\nSELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name\n\n/* Answer the following: What is the average rating star for each reviewer? */\nSELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\n\n/* Answer the following: What is the average number of stars that each reviewer awards for a movie? */\nSELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average ranking for each player and their first name. */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6218,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
                    "question": "Show the names of countries and the average speed of roller coasters from each country."
                },
                {
                    "ex_id": 2457,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
                    "question": "What is the average rating star for each reviewer?"
                },
                {
                    "ex_id": 2458,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
                    "question": "What is the average number of stars that each reviewer awards for a movie?"
                }
            ],
            "example_quality": 0.6933439921496085,
            "example_similarity": 0.35444360528601926,
            "db_id": "wta_1"
        },
        {
            "index": 471,
            "question": "What are the first names of all players, and their average rankings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average rating star for each reviewer? */\nSELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\n\n/* Answer the following: What is the average number of stars that each reviewer awards for a movie? */\nSELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\n\n/* Answer the following: Show the names of countries and the average speed of roller coasters from each country. */\nSELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their average rankings? */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2457,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
                    "question": "What is the average rating star for each reviewer?"
                },
                {
                    "ex_id": 2458,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
                    "question": "What is the average number of stars that each reviewer awards for a movie?"
                },
                {
                    "ex_id": 6218,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
                    "question": "Show the names of countries and the average speed of roller coasters from each country."
                }
            ],
            "example_quality": 0.6932712679817556,
            "example_similarity": 0.35450943871462015,
            "db_id": "wta_1"
        },
        {
            "index": 472,
            "question": "Find the total ranking points for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount of loans offered by each bank branch. */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: What are the names of the different bank branches, and what are their total loan amounts? */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: Find the total credits of all classes offered by each department. */\nSELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total ranking points for each player and their first name. */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3061,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "Find the total amount of loans offered by each bank branch."
                },
                {
                    "ex_id": 3062,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "What are the names of the different bank branches, and what are their total loan amounts?"
                },
                {
                    "ex_id": 3238,
                    "db_id": "college_1",
                    "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
                    "question": "Find the total credits of all classes offered by each department."
                }
            ],
            "example_quality": 0.6938107709450712,
            "example_similarity": 0.35467588409576534,
            "db_id": "wta_1"
        },
        {
            "index": 473,
            "question": "What are the first names of all players, and their total ranking points?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total saving balance for each account name. */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of customers with accounts, and what are the total savings balances for each? */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: Find the total credits of all classes offered by each department. */\nSELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their total ranking points? */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1807,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "Find the total saving balance for each account name."
                },
                {
                    "ex_id": 1808,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "What are the names of customers with accounts, and what are the total savings balances for each?"
                },
                {
                    "ex_id": 3238,
                    "db_id": "college_1",
                    "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
                    "question": "Find the total credits of all classes offered by each department."
                }
            ],
            "example_quality": 0.6941277672010012,
            "example_similarity": 0.35468796385537177,
            "db_id": "wta_1"
        },
        {
            "index": 474,
            "question": "find the number of players for each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of players for each country. */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                },
                {
                    "ex_id": 1411,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "Find the total number of students in each department."
                },
                {
                    "ex_id": 1412,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "How many students are in each department?"
                }
            ],
            "example_quality": 0.6947730672701975,
            "example_similarity": 0.35501203409681037,
            "db_id": "wta_1"
        },
        {
            "index": 475,
            "question": "How many players are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are from each country? */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6951241523107622,
            "example_similarity": 0.35476735912608426,
            "db_id": "wta_1"
        },
        {
            "index": 476,
            "question": "find the code of the country where has the greatest number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the code of the country where has the greatest number of players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.695764647789101,
            "example_similarity": 0.3543397204761086,
            "db_id": "wta_1"
        },
        {
            "index": 477,
            "question": "What is the code of the country with the most players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the code of the country with the most players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.6964024577518072,
            "example_similarity": 0.3542518348999608,
            "db_id": "wta_1"
        },
        {
            "index": 478,
            "question": "Find the codes of countries that have more than 50 players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the codes of countries that have more than 50 players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                },
                {
                    "ex_id": 229,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
                    "question": "List the writers who have written more than one book."
                },
                {
                    "ex_id": 267,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
                    "question": "List the nominees that have been nominated more than two musicals."
                }
            ],
            "example_quality": 0.6970375990535818,
            "example_similarity": 0.35451316299989116,
            "db_id": "wta_1"
        },
        {
            "index": 479,
            "question": "What are the codes of countries with more than 50 players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the codes of countries with more than 50 players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                },
                {
                    "ex_id": 229,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
                    "question": "List the writers who have written more than one book."
                },
                {
                    "ex_id": 267,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
                    "question": "List the nominees that have been nominated more than two musicals."
                }
            ],
            "example_quality": 0.6976700884083759,
            "example_similarity": 0.35431322583994823,
            "db_id": "wta_1"
        },
        {
            "index": 480,
            "question": "Find the total number of tours for each ranking date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all the ranks and the number of male and female faculty for each rank. */\nSELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex\n\n/* Answer the following: How many faculty members do we have for each rank and gender? */\nSELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex\n\n/* Answer the following: Show the product ids and the number of unique orders containing each product. */\nSELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of tours for each ranking date. */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6744,
                    "db_id": "activity_1",
                    "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
                    "question": "Show all the ranks and the number of male and female faculty for each rank."
                },
                {
                    "ex_id": 6745,
                    "db_id": "activity_1",
                    "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
                    "question": "How many faculty members do we have for each rank and gender?"
                },
                {
                    "ex_id": 1620,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
                    "question": "Show the product ids and the number of unique orders containing each product."
                }
            ],
            "example_quality": 0.6970482987353687,
            "example_similarity": 0.35438798178284703,
            "db_id": "wta_1"
        },
        {
            "index": 481,
            "question": "How many total tours were there for each ranking date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the transaction types and the total amount of transactions. */\nSELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type\n\n/* Answer the following: What are total transaction amounts for each transaction type? */\nSELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type\n\n/* Answer the following: Show order ids and the total quantity in each order. */\nSELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many total tours were there for each ranking date? */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1588,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
                    "question": "Show the transaction types and the total amount of transactions."
                },
                {
                    "ex_id": 1589,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
                    "question": "What are total transaction amounts for each transaction type?"
                },
                {
                    "ex_id": 1626,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
                    "question": "Show order ids and the total quantity in each order."
                }
            ],
            "example_quality": 0.6964947039994723,
            "example_similarity": 0.35435553266568315,
            "db_id": "wta_1"
        },
        {
            "index": 482,
            "question": "Find the number of matches happened in each year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of courses provided in each semester and year. */\nSELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\n\n/* Answer the following: How many courses are provided in each semester and year? */\nSELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\n\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of matches happened in each year. */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1403,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
                    "question": "Find the number of courses provided in each semester and year."
                },
                {
                    "ex_id": 1404,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
                    "question": "How many courses are provided in each semester and year?"
                },
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                }
            ],
            "example_quality": 0.696031624941985,
            "example_similarity": 0.3543079227701635,
            "db_id": "wta_1"
        },
        {
            "index": 483,
            "question": "How many matches were played in each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of courses provided in each semester and year. */\nSELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\n\n/* Answer the following: How many courses are provided in each semester and year? */\nSELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\n\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in each year? */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1403,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
                    "question": "Find the number of courses provided in each semester and year."
                },
                {
                    "ex_id": 1404,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
                    "question": "How many courses are provided in each semester and year?"
                },
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                }
            ],
            "example_quality": 0.6955704633961229,
            "example_similarity": 0.3544534244180573,
            "db_id": "wta_1"
        },
        {
            "index": 484,
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name, gpa and phone number of the top 5 students with highest gpa? */\nSELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\n\n/* Answer the following: What is the first name, GPA, and phone number of the students with the top 5 GPAs? */\nSELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank of the 3 youngest winners across all matches. */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3298,
                    "db_id": "college_1",
                    "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
                    "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?"
                },
                {
                    "ex_id": 3299,
                    "db_id": "college_1",
                    "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
                    "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?"
                },
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                }
            ],
            "example_quality": 0.6955676777738629,
            "example_similarity": 0.3543041899644882,
            "db_id": "wta_1"
        },
        {
            "index": 485,
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts. */\nSELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3\n\n/* Answer the following: What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets? */\nSELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3\n\n/* Answer the following: Find the name of instructor who is the advisor of the student who has the highest number of total credits. */\nSELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names and ranks of the three youngest winners across all matches? */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2038,
                    "db_id": "gas_company",
                    "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
                    "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts."
                },
                {
                    "ex_id": 2039,
                    "db_id": "gas_company",
                    "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
                    "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?"
                },
                {
                    "ex_id": 1439,
                    "db_id": "college_2",
                    "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
                    "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits."
                }
            ],
            "example_quality": 0.6942832851351393,
            "example_similarity": 0.3542486624601529,
            "db_id": "wta_1"
        },
        {
            "index": 486,
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Target are there in \" Los Angeles \" ? */\nSELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";\n\n/* Answer the following: How many Starbucks are there in Dallas Texas ? */\nSELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";\n\n/* Answer the following: How many actors were born in \" Los Angeles \" after 2000 ? */\nSELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different winners both participated in the WTA Championships and were left handed? */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8220,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";",
                    "question": "How many Target are there in \" Los Angeles \" ?"
                },
                {
                    "ex_id": 8212,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";",
                    "question": "How many Starbucks are there in Dallas Texas ?"
                },
                {
                    "ex_id": 8511,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;",
                    "question": "How many actors were born in \" Los Angeles \" after 2000 ?"
                }
            ],
            "example_quality": 0.6944681487133119,
            "example_similarity": 0.3540102574723415,
            "db_id": "wta_1"
        },
        {
            "index": 487,
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many times does ROY SWEAZY has reserved a room. */\nSELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of left handed winners who participated in the WTA Championships. */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                },
                {
                    "ex_id": 2581,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
                    "question": "How many times does ROY SWEAZY has reserved a room."
                }
            ],
            "example_quality": 0.6943305364580321,
            "example_similarity": 0.3537396454903084,
            "db_id": "wta_1"
        },
        {
            "index": 488,
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the longest river in the state with the most major cities */\nSELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;\n\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7350,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
                    "question": "what is the longest river in the state with the most major cities"
                },
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                },
                {
                    "ex_id": 2556,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "What are the names of cities that are in the county with the most police officers?"
                }
            ],
            "example_quality": 0.6930719134289679,
            "example_similarity": 0.35370007249562174,
            "db_id": "wta_1"
        },
        {
            "index": 489,
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the longest river in the state with the most major cities */\nSELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;\n\n/* Answer the following: Show the name of cities in the county that has the largest number of police officers. */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Answer the following: What are the names of cities that are in the county with the most police officers? */\nSELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7350,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
                    "question": "what is the longest river in the state with the most major cities"
                },
                {
                    "ex_id": 2555,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "Show the name of cities in the county that has the largest number of police officers."
                },
                {
                    "ex_id": 2556,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
                    "question": "What are the names of cities that are in the county with the most police officers?"
                }
            ],
            "example_quality": 0.6918184381423538,
            "example_similarity": 0.3537116919737759,
            "db_id": "wta_1"
        },
        {
            "index": 490,
            "question": "Find the number of players for each hand type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of players for each hand type. */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6921648055370397,
            "example_similarity": 0.3536550974843537,
            "db_id": "wta_1"
        },
        {
            "index": 491,
            "question": "How many players are there for each hand type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there for each hand type? */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.6925097620665742,
            "example_similarity": 0.3534329212054987,
            "db_id": "wta_1"
        },
        {
            "index": 492,
            "question": "How many ships ended up being 'Captured'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many ships ended up being 'Captured'? */\nSELECT ",
            "response": "count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6931347422249755,
            "example_similarity": 0.3532972670703068,
            "db_id": "battle_death"
        },
        {
            "index": 493,
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the height and weight of people in descending order of height. */\nSELECT Height ,  Weight FROM people ORDER BY Height DESC\n\n/* Answer the following: List the name and number of followers for each user, and sort the results by the number of followers in descending order. */\nSELECT name ,  followers FROM user_profiles ORDER BY followers DESC\n\n/* Answer the following: Show all the cinema names and opening years in descending order of opening year. */\nSELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and tonnage ordered by in descending alphaetical order for the names. */\nSELECT ",
            "response": "name , tonnage FROM ship ORDER BY name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1167,
                    "db_id": "body_builder",
                    "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
                    "question": "List the height and weight of people in descending order of height."
                },
                {
                    "ex_id": 293,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
                    "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order."
                },
                {
                    "ex_id": 1939,
                    "db_id": "cinema",
                    "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
                    "question": "Show all the cinema names and opening years in descending order of opening year."
                }
            ],
            "example_quality": 0.6935113205952856,
            "example_similarity": 0.3535841062744421,
            "db_id": "battle_death"
        },
        {
            "index": 494,
            "question": "List the name, date and result of each battle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show name, class, and date for all races. */\nSELECT name ,  CLASS ,  date FROM race\n\n/* Answer the following: What are the names, classes, and dates for all races? */\nSELECT name ,  CLASS ,  date FROM race\n\n/* Answer the following: List the dates and vote percents of elections. */\nSELECT Date ,  Vote_Percent FROM election\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name, date and result of each battle. */\nSELECT ",
            "response": "name , date FROM battle",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 766,
                    "db_id": "race_track",
                    "query": "SELECT name ,  CLASS ,  date FROM race",
                    "question": "Show name, class, and date for all races."
                },
                {
                    "ex_id": 767,
                    "db_id": "race_track",
                    "query": "SELECT name ,  CLASS ,  date FROM race",
                    "question": "What are the names, classes, and dates for all races?"
                },
                {
                    "ex_id": 1177,
                    "db_id": "election_representative",
                    "query": "SELECT Date ,  Vote_Percent FROM election",
                    "question": "List the dates and vote percents of elections."
                }
            ],
            "example_quality": 0.6934891108016509,
            "example_similarity": 0.35401316219340795,
            "db_id": "battle_death"
        },
        {
            "index": 495,
            "question": "What is maximum and minimum death toll caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is maximum and minimum death toll caused each time? */\nSELECT ",
            "response": "max(killed) , min(killed) FROM death",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                },
                {
                    "ex_id": 27,
                    "db_id": "farm",
                    "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
                    "question": "What are the maximum and minimum number of cows across all farms."
                },
                {
                    "ex_id": 28,
                    "db_id": "farm",
                    "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
                    "question": "Return the maximum and minimum number of cows across all farms."
                }
            ],
            "example_quality": 0.6941083247192232,
            "example_similarity": 0.35402376036929856,
            "db_id": "battle_death"
        },
        {
            "index": 496,
            "question": "What is the average number of injuries caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the average number of injuries caused each time? */\nSELECT ",
            "response": "avg(injured) FROM death",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.6947250418064829,
            "example_similarity": 0.35407824019039674,
            "db_id": "battle_death"
        },
        {
            "index": 497,
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and last name of the instructor of course that has course name */\nSELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"\n\n/* Answer the following: What is the full name of the instructor who has a course named COMPUTER LITERACY? */\nSELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"\n\n/* Answer the following: Find out the first name and last name of staff lived in city Damianfort. */\nSELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the death and injury situations caused by the ship with tonnage 't'? */\nSELECT ",
            "response": "T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4686,
                    "db_id": "college_3",
                    "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
                    "question": "Find the first name and last name of the instructor of course that has course name"
                },
                {
                    "ex_id": 4687,
                    "db_id": "college_3",
                    "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
                    "question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?"
                },
                {
                    "ex_id": 6653,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
                    "question": "Find out the first name and last name of staff lived in city Damianfort."
                }
            ],
            "example_quality": 0.6946685863233042,
            "example_similarity": 0.35401973266486275,
            "db_id": "battle_death"
        },
        {
            "index": 498,
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the name and results of the battles when the bulgarian commander is not 'Boril' */\nSELECT ",
            "response": "name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                },
                {
                    "ex_id": 1657,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "What are the names and year of joining for artists that do not have the country \"United States\"?"
                },
                {
                    "ex_id": 1723,
                    "db_id": "riding_club",
                    "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
                    "question": "List the name and residence for players whose occupation is not \"Researcher\"."
                }
            ],
            "example_quality": 0.6952817016118116,
            "example_similarity": 0.3541487309317309,
            "db_id": "battle_death"
        },
        {
            "index": 499,
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision. */\nSELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Answer the following: How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges? */\nSELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Answer the following: Find the distinct ages of students who have secretary votes in the fall election cycle. */\nSELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the different ids and names of the battles that lost any 'Brig' type shipes? */\nSELECT ",
            "response": "DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5023,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                    "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision."
                },
                {
                    "ex_id": 5024,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                    "question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?"
                },
                {
                    "ex_id": 5477,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
                    "question": "Find the distinct ages of students who have secretary votes in the fall election cycle."
                }
            ],
            "example_quality": 0.6955973973056032,
            "example_similarity": 0.3540522611192746,
            "db_id": "battle_death"
        },
        {
            "index": 500,
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations . */\nSELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;\n\n/* Answer the following: Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10. */\nSELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10\n\n/* Answer the following: Find the name and account balance of the customers who have loans with a total amount of more than 5000. */\nSELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the ids and names of the battles that led to more than 10 people killed in total. */\nSELECT ",
            "response": "T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8424,
                    "db_id": "academic",
                    "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
                    "question": "return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations ."
                },
                {
                    "ex_id": 1907,
                    "db_id": "school_finance",
                    "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
                    "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10."
                },
                {
                    "ex_id": 3065,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
                    "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000."
                }
            ],
            "example_quality": 0.6951540428188324,
            "example_similarity": 0.3540940539697782,
            "db_id": "battle_death"
        },
        {
            "index": 501,
            "question": "What is the ship id and name that caused most total injuries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Answer the following: What is the full name and id of the customer who has the lowest total amount of payment? */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Answer the following: Find the name of customer who has the highest amount of loans. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the ship id and name that caused most total injuries? */\nSELECT ",
            "response": "T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2961,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id."
                },
                {
                    "ex_id": 2962,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "What is the full name and id of the customer who has the lowest total amount of payment?"
                },
                {
                    "ex_id": 3053,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
                    "question": "Find the name of customer who has the highest amount of loans."
                }
            ],
            "example_quality": 0.6947414756068873,
            "example_similarity": 0.3539739925725198,
            "db_id": "battle_death"
        },
        {
            "index": 502,
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all allergies with type food. */\nSELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"\n\n/* Answer the following: What are all the different food allergies? */\nSELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"\n\n/* Answer the following: What are the distinct secretary votes in the fall election cycle? */\nSELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? */\nSELECT ",
            "response": "name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 448,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
                    "question": "Show all allergies with type food."
                },
                {
                    "ex_id": 449,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
                    "question": "What are all the different food allergies?"
                },
                {
                    "ex_id": 5465,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
                    "question": "What are the distinct secretary votes in the fall election cycle?"
                }
            ],
            "example_quality": 0.6941584274125534,
            "example_similarity": 0.3537607248188832,
            "db_id": "battle_death"
        },
        {
            "index": 503,
            "question": "How many different results are there for the battles?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many different results are there for the battles? */\nSELECT ",
            "response": "count(DISTINCT RESULT) FROM battle",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6947664623481149,
            "example_similarity": 0.35380689460449993,
            "db_id": "battle_death"
        },
        {
            "index": 504,
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of people who has no friend living in the city of Austin. */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Answer the following: What is the total number of people who have no friends living in Austin? */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Answer the following: How many airports haven't the pilot 'Thompson' driven an aircraft? */\nSELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many battles did not lose any ship with tonnage '225'? */\nSELECT ",
            "response": "count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4481,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who has no friend living in the city of Austin."
                },
                {
                    "ex_id": 4482,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who have no friends living in Austin?"
                },
                {
                    "ex_id": 6379,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
                    "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?"
                }
            ],
            "example_quality": 0.6947486825074392,
            "example_similarity": 0.3535697494054547,
            "db_id": "battle_death"
        },
        {
            "index": 505,
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the dates of performances with attending members whose roles are \"Violin\". */\nSELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"\n\n/* Answer the following: Show the name and date for each race and its track name. */\nSELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id\n\n/* Answer the following: What are the names and dates of races, and the names of the tracks where they are held? */\nSELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' */\nSELECT ",
            "response": "T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1320,
                    "db_id": "performance_attendance",
                    "query": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"",
                    "question": "Show the dates of performances with attending members whose roles are \"Violin\"."
                },
                {
                    "ex_id": 784,
                    "db_id": "race_track",
                    "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
                    "question": "Show the name and date for each race and its track name."
                },
                {
                    "ex_id": 785,
                    "db_id": "race_track",
                    "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
                    "question": "What are the names and dates of races, and the names of the tracks where they are held?"
                }
            ],
            "example_quality": 0.6938459150093927,
            "example_similarity": 0.35336584752401984,
            "db_id": "battle_death"
        },
        {
            "index": 506,
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and office of history professor who did not get a Ph.D. degree. */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: What are the first names and offices of history professors who don't have Ph.D.s? */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: Find names of all students who took some course and got A or C. */\nSELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. */\nSELECT ",
            "response": "name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3328,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "Find the first name and office of history professor who did not get a Ph.D. degree."
                },
                {
                    "ex_id": 3329,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "What are the first names and offices of history professors who don't have Ph.D.s?"
                },
                {
                    "ex_id": 3320,
                    "db_id": "college_1",
                    "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
                    "question": "Find names of all students who took some course and got A or C."
                }
            ],
            "example_quality": 0.6929577738077098,
            "example_similarity": 0.3530041816261973,
            "db_id": "battle_death"
        },
        {
            "index": 507,
            "question": "What are the notes of the death events which has substring 'East'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all artists that have \"a\" in their names. */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: What are the names of artist who have the letter 'a' in their names? */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: Find the names of all the tracks that contain the word \"you\". */\nSELECT Name FROM TRACK WHERE Name LIKE '%you%'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the notes of the death events which has substring 'East'? */\nSELECT ",
            "response": "note FROM death WHERE note LIKE '%East%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 818,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "Find the names of all artists that have \"a\" in their names."
                },
                {
                    "ex_id": 819,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "What are the names of artist who have the letter 'a' in their names?"
                },
                {
                    "ex_id": 828,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
                    "question": "Find the names of all the tracks that contain the word \"you\"."
                }
            ],
            "example_quality": 0.6935633797765309,
            "example_similarity": 0.3529481638608659,
            "db_id": "battle_death"
        },
        {
            "index": 508,
            "question": "what are all the addresses including line 1 and line 2?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: what are all the addresses including line 1 and line 2? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6941666014698843,
            "example_similarity": 0.35322201293213085,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 509,
            "question": "What is the first and second line for all addresses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first and second line for all addresses? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6947674529404739,
            "example_similarity": 0.35356075362507566,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 510,
            "question": "How many courses in total are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses in total are listed? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6953659481307866,
            "example_similarity": 0.35364399017877435,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 511,
            "question": "How many courses are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses are there? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.6959621008741705,
            "example_similarity": 0.3543158604464669,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 512,
            "question": "How is the math course described?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How is the math course described? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6965559248959008,
            "example_similarity": 0.3541746391995219,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 513,
            "question": "What are the descriptions for all the math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: What are the daily hire costs for the products with substring 'Book' in its name? */\nSELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the descriptions for all the math courses? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                },
                {
                    "ex_id": 329,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names."
                },
                {
                    "ex_id": 1974,
                    "db_id": "products_for_hire",
                    "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
                    "question": "What are the daily hire costs for the products with substring 'Book' in its name?"
                }
            ],
            "example_quality": 0.6962180621246267,
            "example_similarity": 0.35399511968597075,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 514,
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code of the address in the city Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6968090775679641,
            "example_similarity": 0.3541357162094675,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 515,
            "question": "What is the zip code for Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code for Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6973977978056961,
            "example_similarity": 0.3542463480442279,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 516,
            "question": "Which department offers the most number of degrees? List department name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the title and id of the film that has the greatest number of copies in inventory? */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: what is the full name and id of the college with the largest number of baseball players? */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which department offers the most number of degrees? List department name and id. */\nSELECT ",
            "response": "T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2967,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which film has the most copies in the inventory? List both title and id."
                },
                {
                    "ex_id": 2968,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the title and id of the film that has the greatest number of copies in inventory?"
                },
                {
                    "ex_id": 3630,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
                    "question": "what is the full name and id of the college with the largest number of baseball players?"
                }
            ],
            "example_quality": 0.6978351604515706,
            "example_similarity": 0.3543899274730828,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 517,
            "question": "What is the name and id of the department with the most number of degrees ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which film has the most copies in the inventory? List both title and id. */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the title and id of the film that has the greatest number of copies in inventory? */\nSELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: what is the full name and id of the college with the largest number of baseball players? */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name and id of the department with the most number of degrees ? */\nSELECT ",
            "response": "t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2967,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which film has the most copies in the inventory? List both title and id."
                },
                {
                    "ex_id": 2968,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the title and id of the film that has the greatest number of copies in inventory?"
                },
                {
                    "ex_id": 3630,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
                    "question": "what is the full name and id of the college with the largest number of baseball players?"
                }
            ],
            "example_quality": 0.6972375854582192,
            "example_similarity": 0.35469948276700336,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 518,
            "question": "How many departments offer any degree?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many departments offer any degree? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6978220688839756,
            "example_similarity": 0.3545614852775241,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 519,
            "question": "How many different departments offer degrees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different departments offer degrees? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.698404299965124,
            "example_similarity": 0.35458870181588514,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 520,
            "question": "How many different degree names are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degree names are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.6989842916959602,
            "example_similarity": 0.35452989532010326,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 521,
            "question": "How many different degrees are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degrees are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.699562056971016,
            "example_similarity": 0.3545318639577913,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 522,
            "question": "How many degrees does the engineering department offer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department offer? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.6985617330637784,
            "example_similarity": 0.35435555770499855,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 523,
            "question": "How many degrees does the engineering department have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department have? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.6975652344869699,
            "example_similarity": 0.35417992566349765,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 524,
            "question": "What are the names and descriptions of all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions of all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.69814240007001,
            "example_similarity": 0.35433281678206896,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 525,
            "question": "What are the names and descriptions for all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions for all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.6987173669270196,
            "example_similarity": 0.35453539000854833,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 526,
            "question": "What are the names and id of courses having at most 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and name of the mountains that have at least 2 photos? */\nSELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and names of the architects who built at least 3 bridges ? */\nSELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3\n\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and id of courses having at most 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3719,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
                    "question": "What are the id and name of the mountains that have at least 2 photos?"
                },
                {
                    "ex_id": 6954,
                    "db_id": "architecture",
                    "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
                    "question": "What are the ids and names of the architects who built at least 3 bridges ?"
                },
                {
                    "ex_id": 870,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
                    "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
                }
            ],
            "example_quality": 0.6988132194660731,
            "example_similarity": 0.35467991503810536,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 527,
            "question": "What are the names and ids of every course with less than 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and name of the mountains that have at least 2 photos? */\nSELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and names of the architects who built at least 3 bridges ? */\nSELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3\n\n/* Answer the following: Please show the employee first names and ids of employees who serve at least 10 customers. */\nSELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and ids of every course with less than 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3719,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
                    "question": "What are the id and name of the mountains that have at least 2 photos?"
                },
                {
                    "ex_id": 6954,
                    "db_id": "architecture",
                    "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
                    "question": "What are the ids and names of the architects who built at least 3 bridges ?"
                },
                {
                    "ex_id": 870,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
                    "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
                }
            ],
            "example_quality": 0.6989087082383748,
            "example_similarity": 0.3547015102772373,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 528,
            "question": "List the section_name in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: Sort the names of all counties in descending alphabetical order. */\nSELECT County_name FROM county ORDER BY County_name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List the section_name in reversed lexicographical order. */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                },
                {
                    "ex_id": 1740,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
                    "question": "What are the total points for all gymnasts, ordered by total points descending?"
                },
                {
                    "ex_id": 2782,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                    "question": "Sort the names of all counties in descending alphabetical order."
                }
            ],
            "example_quality": 0.6994789568970144,
            "example_similarity": 0.35448982047165406,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 529,
            "question": "What are the names of the sections in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: Sort the names of all counties in descending alphabetical order. */\nSELECT County_name FROM county ORDER BY County_name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of the sections in reverse alphabetical order? */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                },
                {
                    "ex_id": 1740,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
                    "question": "What are the total points for all gymnasts, ordered by total points descending?"
                },
                {
                    "ex_id": 2782,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                    "question": "Sort the names of all counties in descending alphabetical order."
                }
            ],
            "example_quality": 0.7000470496060938,
            "example_similarity": 0.3544355062094346,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 530,
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the semester which most student registered in? Show both the name and the id. */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.7002086859006375,
            "example_similarity": 0.3544084076318192,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 531,
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: For each semester, what is the name and id of the one with the most students registered? */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.7003697133955784,
            "example_similarity": 0.35435817332393965,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 532,
            "question": "What is the description of the department whose name has the substring the computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: What are the daily hire costs for the products with substring 'Book' in its name? */\nSELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description of the department whose name has the substring the computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                },
                {
                    "ex_id": 329,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names."
                },
                {
                    "ex_id": 1974,
                    "db_id": "products_for_hire",
                    "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
                    "question": "What are the daily hire costs for the products with substring 'Book' in its name?"
                }
            ],
            "example_quality": 0.7009329282200228,
            "example_similarity": 0.35412128452696484,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 533,
            "question": "What is the department description for the one whose name has the word computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: What are the daily hire costs for the products with substring 'Book' in its name? */\nSELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the department description for the one whose name has the word computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                },
                {
                    "ex_id": 329,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names."
                },
                {
                    "ex_id": 1974,
                    "db_id": "products_for_hire",
                    "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
                    "question": "What are the daily hire costs for the products with substring 'Book' in its name?"
                }
            ],
            "example_quality": 0.7014940296680152,
            "example_similarity": 0.3539125504189645,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 534,
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1\n\n/* Answer the following: Find the title, credit, and department name of courses that have more than one prerequisites? */\nSELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3895,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
                    "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement."
                },
                {
                    "ex_id": 3896,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
                    "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled."
                },
                {
                    "ex_id": 1345,
                    "db_id": "college_2",
                    "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
                    "question": "Find the title, credit, and department name of courses that have more than one prerequisites?"
                }
            ],
            "example_quality": 0.7016560943951312,
            "example_similarity": 0.3539074922516792,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 535,
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the keywords, which have been contained by more than 100 papers in VLDB conference . */\nSELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;\n\n/* Answer the following: return me the keywords, which have been contained by more than 100 papers in PVLDB . */\nSELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;\n\n/* Answer the following: Show the authors who have submissions to more than one workshop. */\nSELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8419,
                    "db_id": "academic",
                    "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;",
                    "question": "return me the keywords, which have been contained by more than 100 papers in VLDB conference ."
                },
                {
                    "ex_id": 8420,
                    "db_id": "academic",
                    "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;",
                    "question": "return me the keywords, which have been contained by more than 100 papers in PVLDB ."
                },
                {
                    "ex_id": 5839,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                    "question": "Show the authors who have submissions to more than one workshop."
                }
            ],
            "example_quality": 0.7008204370364871,
            "example_similarity": 0.3535199525492495,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 536,
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display those employees who contain a letter z to their first name and also display their last name, city. */\nSELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n\n/* Answer the following: What are the full names and cities of employees who have the letter Z in their first names? */\nSELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n\n/* Answer the following: Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to. */\nSELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3520,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
                    "question": "display those employees who contain a letter z to their first name and also display their last name, city."
                },
                {
                    "ex_id": 3521,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
                    "question": "What are the full names and cities of employees who have the letter Z in their first names?"
                },
                {
                    "ex_id": 6486,
                    "db_id": "scientist_1",
                    "query": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'",
                    "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to."
                }
            ],
            "example_quality": 0.7006780831309484,
            "example_similarity": 0.3534573876540195,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 537,
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display those employees who contain a letter z to their first name and also display their last name, city. */\nSELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n\n/* Answer the following: What are the full names and cities of employees who have the letter Z in their first names? */\nSELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'\n\n/* Answer the following: Find the first names of all the authors who have written a paper with title containing the word \"Functional\". */\nSELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names for everybody enrolled in a Bachelors program? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3520,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
                    "question": "display those employees who contain a letter z to their first name and also display their last name, city."
                },
                {
                    "ex_id": 3521,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
                    "question": "What are the full names and cities of employees who have the letter Z in their first names?"
                },
                {
                    "ex_id": 2909,
                    "db_id": "icfp_1",
                    "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"",
                    "question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\"."
                }
            ],
            "example_quality": 0.7005141532817979,
            "example_similarity": 0.35327440739060767,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 538,
            "question": "Find the kind of program which most number of students are enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the kind of program which most number of students are enrolled in? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                },
                {
                    "ex_id": 911,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer uses the most policies? Give me the customer name."
                },
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.7010708184243968,
            "example_similarity": 0.3530279588861446,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 539,
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the degree summary name that has the most number of students enrolled? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                },
                {
                    "ex_id": 911,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer uses the most policies? Give me the customer name."
                },
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.7016254180191567,
            "example_similarity": 0.3533237801749055,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 540,
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the program which most number of students are enrolled in. List both the id and the summary. */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.7021779635413434,
            "example_similarity": 0.3531763353708686,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 541,
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which skill is used in fixing the most number of faults? List the skill id and description. */\nSELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the program id and the summary of the degree that has the most students enrolled? */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                },
                {
                    "ex_id": 3149,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
                }
            ],
            "example_quality": 0.702728466381378,
            "example_similarity": 0.35322166268570704,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 542,
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. */\nSELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\n\n/* Answer the following: What are the top 10 customers' first and last names by total number of orders and how many orders did they make? */\nSELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\n\n/* Answer the following: Which city lives most of staffs? List the city name and number of staffs. */\nSELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 546,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
                    "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders."
                },
                {
                    "ex_id": 547,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
                    "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?"
                },
                {
                    "ex_id": 6655,
                    "db_id": "driving_school",
                    "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city lives most of staffs? List the city name and number of staffs."
                }
            ],
            "example_quality": 0.7025304716260261,
            "example_similarity": 0.35318341530527503,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 543,
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders. */\nSELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\n\n/* Answer the following: What are the top 10 customers' first and last names by total number of orders and how many orders did they make? */\nSELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;\n\n/* Answer the following: Which city lives most of staffs? List the city name and number of staffs. */\nSELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 546,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
                    "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders."
                },
                {
                    "ex_id": 547,
                    "db_id": "store_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
                    "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?"
                },
                {
                    "ex_id": 6655,
                    "db_id": "driving_school",
                    "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city lives most of staffs? List the city name and number of staffs."
                }
            ],
            "example_quality": 0.702333206133125,
            "example_similarity": 0.35298297698839426,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 544,
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which semesters do not have any student enrolled? List the semester name. */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7020761597983216,
            "example_similarity": 0.35308257398416937,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 545,
            "question": "What is the name of the semester with no students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the delegates and the names of the party they belong to. */\nSELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID\n\n/* Answer the following: For each delegate, find the names of the party they are part of. */\nSELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID\n\n/* Answer the following: List all country and league names. */\nSELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the semester with no students enrolled? */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2767,
                    "db_id": "election",
                    "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
                    "question": "Show the delegates and the names of the party they belong to."
                },
                {
                    "ex_id": 2768,
                    "db_id": "election",
                    "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
                    "question": "For each delegate, find the names of the party they are part of."
                },
                {
                    "ex_id": 1294,
                    "db_id": "soccer_1",
                    "query": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
                    "question": "List all country and league names."
                }
            ],
            "example_quality": 0.7008842402390586,
            "example_similarity": 0.3527985813628506,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 546,
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the highest point in the state with capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: what is the highest point in the state with the capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are all the course names of the courses which ever have students enrolled in? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7332,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with capital des moines"
                },
                {
                    "ex_id": 7333,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with the capital des moines"
                },
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.699727215371499,
            "example_similarity": 0.35277455930849105,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 547,
            "question": "What are the names of all courses that have some students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of actors and names of musicals they are in. */\nSELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID\n\n/* Answer the following: What are the names of actors and the musicals that they are in? */\nSELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID\n\n/* Answer the following: Show names of climbers and the names of mountains they climb. */\nSELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of all courses that have some students enrolled? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 251,
                    "db_id": "musical",
                    "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
                    "question": "Show names of actors and names of musicals they are in."
                },
                {
                    "ex_id": 252,
                    "db_id": "musical",
                    "query": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
                    "question": "What are the names of actors and the musicals that they are in?"
                },
                {
                    "ex_id": 1129,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show names of climbers and the names of mountains they climb."
                }
            ],
            "example_quality": 0.6996163042346759,
            "example_similarity": 0.3526183626811942,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 548,
            "question": "What's the name of the course with most number of enrollments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What's the name of the course with most number of enrollments? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                },
                {
                    "ex_id": 911,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer uses the most policies? Give me the customer name."
                },
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.7001644496649045,
            "example_similarity": 0.3526319547816866,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 549,
            "question": "What is the name of the course with the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the course with the most students enrolled? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                },
                {
                    "ex_id": 911,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer uses the most policies? Give me the customer name."
                },
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.70071059820832,
            "example_similarity": 0.3530066385313253,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 550,
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and office of history professor who did not get a Ph.D. degree. */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: What are the first names and offices of history professors who don't have Ph.D.s? */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'? */\nSELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3328,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "Find the first name and office of history professor who did not get a Ph.D. degree."
                },
                {
                    "ex_id": 3329,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "What are the first names and offices of history professors who don't have Ph.D.s?"
                },
                {
                    "ex_id": 1285,
                    "db_id": "game_injury",
                    "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
                    "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?"
                }
            ],
            "example_quality": 0.6999466910294803,
            "example_similarity": 0.35281417381972474,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 551,
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the trains that do not pass any station located in London. */\nSELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")\n\n/* Answer the following: List the first and last name of the students who do not have any food type allergy. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What is the full name of each student who is not allergic to any type of food. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the last name of the students who live in North Carolina but have not registered in any degree programs? */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6621,
                    "db_id": "train_station",
                    "query": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")",
                    "question": "Find the names of the trains that do not pass any station located in London."
                },
                {
                    "ex_id": 528,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "List the first and last name of the students who do not have any food type allergy."
                },
                {
                    "ex_id": 529,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "What is the full name of each student who is not allergic to any type of food."
                }
            ],
            "example_quality": 0.6991029874168088,
            "example_similarity": 0.3528324326322869,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 552,
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the addresses and author IDs of the course authors that teach at least two courses. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Answer the following: Which course authors teach two or more courses? Give me their addresses and author IDs. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Answer the following: Show the names and ids of tourist attractions that are visited at least two times. */\nSELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date and id of the transcript with at least 2 course results. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3809,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Find the addresses and author IDs of the course authors that teach at least two courses."
                },
                {
                    "ex_id": 3810,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Which course authors teach two or more courses? Give me their addresses and author IDs."
                },
                {
                    "ex_id": 5954,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
                    "question": "Show the names and ids of tourist attractions that are visited at least two times."
                }
            ],
            "example_quality": 0.6992300304998051,
            "example_similarity": 0.35298103254574215,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 553,
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the addresses and author IDs of the course authors that teach at least two courses. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Answer the following: Which course authors teach two or more courses? Give me their addresses and author IDs. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Answer the following: Show the names and ids of tourist attractions that are visited at least two times. */\nSELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with at least 2 courses listed? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3809,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Find the addresses and author IDs of the course authors that teach at least two courses."
                },
                {
                    "ex_id": 3810,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Which course authors teach two or more courses? Give me their addresses and author IDs."
                },
                {
                    "ex_id": 5954,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
                    "question": "Show the names and ids of tourist attractions that are visited at least two times."
                }
            ],
            "example_quality": 0.699356614114147,
            "example_similarity": 0.3529746227091579,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 554,
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the phone number of the man with the first name Timmothy and the last name Ward? */\nSELECT ",
            "response": "cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                },
                {
                    "ex_id": 582,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "What country does Roberto Almeida live?"
                },
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                }
            ],
            "example_quality": 0.6998992917059986,
            "example_similarity": 0.3530190290897835,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 555,
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the mobile phone number of the student named Timmothy Ward ? */\nSELECT ",
            "response": "cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                },
                {
                    "ex_id": 582,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "What country does Roberto Almeida live?"
                },
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                }
            ],
            "example_quality": 0.6995391128020239,
            "example_similarity": 0.3529850314279955,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 556,
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the first student to register? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                },
                {
                    "ex_id": 6831,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "What is the name, city, and country of the airport with the lowest altitude?"
                },
                {
                    "ex_id": 3051,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
                    "question": "Find the name, account type, and account balance of the customer who has the highest credit score."
                }
            ],
            "example_quality": 0.6999139282608988,
            "example_similarity": 0.3531802714102085,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 557,
            "question": "What is the first, middle, and last name of the first student to register?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the first student to register? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                },
                {
                    "ex_id": 6831,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "What is the name, city, and country of the airport with the lowest altitude?"
                },
                {
                    "ex_id": 3051,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
                    "question": "Find the name, account type, and account balance of the customer who has the highest credit score."
                }
            ],
            "example_quality": 0.7002873978832966,
            "example_similarity": 0.353538571862234,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 558,
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the earliest graduate of the school? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                },
                {
                    "ex_id": 6831,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "What is the name, city, and country of the airport with the lowest altitude?"
                },
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                }
            ],
            "example_quality": 0.7006595289048972,
            "example_similarity": 0.3537542534339663,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 559,
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the earliest school graduate? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                },
                {
                    "ex_id": 6831,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "What is the name, city, and country of the airport with the lowest altitude?"
                },
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                }
            ],
            "example_quality": 0.701030328509605,
            "example_similarity": 0.35409624499532216,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 560,
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Whose permanent address is different from his or her current address? List his or her first name. */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                },
                {
                    "ex_id": 1657,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "What are the names and year of joining for artists that do not have the country \"United States\"?"
                },
                {
                    "ex_id": 1723,
                    "db_id": "riding_club",
                    "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
                    "question": "List the name and residence for players whose occupation is not \"Researcher\"."
                }
            ],
            "example_quality": 0.7010880124467902,
            "example_similarity": 0.35395649326467926,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 561,
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first name of the student whose permanent address is different from his or her current one? */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                },
                {
                    "ex_id": 1657,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "What are the names and year of joining for artists that do not have the country \"United States\"?"
                },
                {
                    "ex_id": 1723,
                    "db_id": "riding_club",
                    "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
                    "question": "List the name and residence for players whose occupation is not \"Researcher\"."
                }
            ],
            "example_quality": 0.7011454907371406,
            "example_similarity": 0.3538680164275842,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 562,
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id, name and IATA code of the airport that had most number of flights? */\nSELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which organisation hired the most number of research staff? List the organisation id, type and detail. */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids, types, and details of the organization with the most research staff? */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which address holds the most number of students currently? List the address id and all lines. */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6376,
                    "db_id": "flight_company",
                    "query": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id, name and IATA code of the airport that had most number of flights?"
                },
                {
                    "ex_id": 4361,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail."
                },
                {
                    "ex_id": 4362,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the ids, types, and details of the organization with the most research staff?"
                }
            ],
            "example_quality": 0.7016348946258477,
            "example_similarity": 0.3540969182177678,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 563,
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name, phone number and email address of the customer who made the largest number of orders? */\nSELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the name, phone number and email address for the customer with the most orders. */\nSELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id, name and IATA code of the airport that had most number of flights? */\nSELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id, line 1, and line 2 of the address with the most students? */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4724,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the name, phone number and email address of the customer who made the largest number of orders?"
                },
                {
                    "ex_id": 4725,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name, phone number and email address for the customer with the most orders."
                },
                {
                    "ex_id": 6376,
                    "db_id": "flight_company",
                    "query": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id, name and IATA code of the airport that had most number of flights?"
                }
            ],
            "example_quality": 0.7019592313195885,
            "example_similarity": 0.3542656383528318,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 564,
            "question": "On average, when were the transcripts printed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: On average, when were the transcripts printed? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.702487672398809,
            "example_similarity": 0.35406106964810846,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 565,
            "question": "What is the average transcript date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the average transcript date? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.7030142428901386,
            "example_similarity": 0.35441948484619257,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 566,
            "question": "When is the first transcript released? List the date and details.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: Which model has the least amount of RAM? List the model name and the amount of RAM. */\nSELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When is the first transcript released? List the date and details. */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3859,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                    "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount."
                },
                {
                    "ex_id": 3860,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                    "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount."
                },
                {
                    "ex_id": 1025,
                    "db_id": "phone_1",
                    "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",
                    "question": "Which model has the least amount of RAM? List the model name and the amount of RAM."
                }
            ],
            "example_quality": 0.703448348377467,
            "example_similarity": 0.3543609610172461,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 567,
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: Which model has the least amount of RAM? List the model name and the amount of RAM. */\nSELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the earliest date of a transcript release, and what details can you tell me? */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3859,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                    "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount."
                },
                {
                    "ex_id": 3860,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                    "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount."
                },
                {
                    "ex_id": 1025,
                    "db_id": "phone_1",
                    "query": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",
                    "question": "Which model has the least amount of RAM? List the model name and the amount of RAM."
                }
            ],
            "example_quality": 0.7038809226285084,
            "example_similarity": 0.35403885809599134,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 568,
            "question": "How many transcripts are released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are released? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7044022590323314,
            "example_similarity": 0.3543072641671137,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 569,
            "question": "How many transcripts are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are listed? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7049217629707631,
            "example_similarity": 0.35457472680740615,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 570,
            "question": "What is the last transcript release date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the last transcript release date? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 940,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
                },
                {
                    "ex_id": 941,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum OMIM value in the database?"
                },
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                }
            ],
            "example_quality": 0.7039242925732069,
            "example_similarity": 0.35468123863391604,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 571,
            "question": "When was the last transcript released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the highest acc percent score in the competition? */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: Return the highest acc percent across all basketball matches. */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: what are the top 3 highest support rates? */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When was the last transcript released? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 988,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "What is the highest acc percent score in the competition?"
                },
                {
                    "ex_id": 989,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "Return the highest acc percent across all basketball matches."
                },
                {
                    "ex_id": 2399,
                    "db_id": "candidate_poll",
                    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                    "question": "what are the top 3 highest support rates?"
                }
            ],
            "example_quality": 0.7044428139522381,
            "example_similarity": 0.3545465565658668,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 572,
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many engineer visits are required at most for a single fault log? List the number and the log entry id. */\nSELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: How many problems does the product with the most problems have? List the number of the problems and product name. */\nSELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which product has the most problems? Give me the number of problems and the product name. */\nSELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3138,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id."
                },
                {
                    "ex_id": 5367,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many problems does the product with the most problems have? List the number of the problems and product name."
                },
                {
                    "ex_id": 5368,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which product has the most problems? Give me the number of problems and the product name."
                }
            ],
            "example_quality": 0.7036662710262032,
            "example_similarity": 0.3544120931411598,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 573,
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name, address, and number of students in the departments that have the 3 most students? */\nSELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Find the name, address, number of students in the departments that have the top 3 highest number of students. */\nSELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: What are the first name, last name and id of the player with the most all star game experiences? Also list the count. */\nSELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3307,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "What is the name, address, and number of students in the departments that have the 3 most students?"
                },
                {
                    "ex_id": 3306,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students."
                },
                {
                    "ex_id": 3636,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
                    "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count."
                }
            ],
            "example_quality": 0.7027787937690754,
            "example_similarity": 0.35423838900531257,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 574,
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the code and description of the least frequent detention type ? */\nSELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What are the name and code of the location with the smallest number of documents? */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date of the transcript which shows the least number of results, also list the id. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3112,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What are the code and description of the least frequent detention type ?"
                },
                {
                    "ex_id": 4233,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the location name and code with the least documents."
                },
                {
                    "ex_id": 4234,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What are the name and code of the location with the smallest number of documents?"
                }
            ],
            "example_quality": 0.7031721607286613,
            "example_similarity": 0.3541040673944743,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 575,
            "question": "What is the date and id of the transcript with the least number of results?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the description of the color used by least products? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Give the color description that is least common across products. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What is the name of department where has the smallest number of professors? */\nSELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with the least number of results? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5593,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the description of the color used by least products?"
                },
                {
                    "ex_id": 5594,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
                    "question": "Give the color description that is least common across products."
                },
                {
                    "ex_id": 3270,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
                    "question": "What is the name of department where has the smallest number of professors?"
                }
            ],
            "example_quality": 0.7033437194644696,
            "example_similarity": 0.35418444115425146,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 576,
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name and age of the student who has allergy to both milk and cat. */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: What are the last names and ages of the students who are allergic to milk and cat? */\nSELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")\n\n/* Answer the following: Find the first name and age of the students who are playing both Football and Lacrosse. */\nSELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the semester when both Master students and Bachelor students got enrolled in. */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 520,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "Find the last name and age of the student who has allergy to both milk and cat."
                },
                {
                    "ex_id": 521,
                    "db_id": "allergy_1",
                    "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
                    "question": "What are the last names and ages of the students who are allergic to milk and cat?"
                },
                {
                    "ex_id": 6052,
                    "db_id": "game_1",
                    "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
                    "question": "Find the first name and age of the students who are playing both Football and Lacrosse."
                }
            ],
            "example_quality": 0.7023455898345513,
            "example_similarity": 0.35427019497790485,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 577,
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border the mississippi river */\nSELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: how many states border colorado and border new mexico */\nSELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";\n\n/* Answer the following: List from which date and to which date these staff work: project staff of the project which hires the most staffs */\nSELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id of the semester that had both Masters and Bachelors students enrolled? */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7527,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "how many states border the mississippi river"
                },
                {
                    "ex_id": 7495,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
                    "question": "how many states border colorado and border new mexico"
                },
                {
                    "ex_id": 4327,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'",
                    "question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs"
                }
            ],
            "example_quality": 0.70126900598904,
            "example_similarity": 0.3540419214874362,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 578,
            "question": "How many different addresses do the students currently live?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different addresses do the students currently live? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7017858416188167,
            "example_similarity": 0.35404354161458307,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 579,
            "question": "What are the different addresses that have students living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the unique first names, last names, and phone numbers for all customers with any account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: What are the distinct first names, last names, and phone numbers for customers with accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Answer the following: Show distinct first and last names for all customers with an account. */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the different addresses that have students living there? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1562,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show the unique first names, last names, and phone numbers for all customers with any account."
                },
                {
                    "ex_id": 1563,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?"
                },
                {
                    "ex_id": 688,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "Show distinct first and last names for all customers with an account."
                }
            ],
            "example_quality": 0.7006445730966894,
            "example_similarity": 0.3536985555134857,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 580,
            "question": "List all the student details in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: List the method, date and amount of all the payments, in ascending order of date. */\nSELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List all the student details in reversed lexicographical order. */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5299,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
                },
                {
                    "ex_id": 5300,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?"
                },
                {
                    "ex_id": 3855,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
                    "question": "List the method, date and amount of all the payments, in ascending order of date."
                }
            ],
            "example_quality": 0.7001575874847864,
            "example_similarity": 0.3534781190567866,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 581,
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order. */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: What are the names, headquarters and revenues for manufacturers, sorted by revenue descending? */\nSELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC\n\n/* Answer the following: List the names and buildings of all departments sorted by the budget from large to small. */\nSELECT dept_name ,  building FROM department ORDER BY budget DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What other details can you tell me about students in reverse alphabetical order? */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5299,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
                },
                {
                    "ex_id": 5300,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
                    "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?"
                },
                {
                    "ex_id": 1379,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
                    "question": "List the names and buildings of all departments sorted by the budget from large to small."
                }
            ],
            "example_quality": 0.6997992831426612,
            "example_similarity": 0.3531483886658192,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 582,
            "question": "Describe the section h.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Describe the section h. */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7003150919345122,
            "example_similarity": 0.35272898757896354,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 583,
            "question": "What is the description for the section named h?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description for the section named h? */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.700829131227935,
            "example_similarity": 0.35286851179297946,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 584,
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                },
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                },
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                }
            ],
            "example_quality": 0.6996869874471148,
            "example_similarity": 0.35290763126887215,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 585,
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                },
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                },
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                }
            ],
            "example_quality": 0.6985487484313572,
            "example_similarity": 0.3530240723111913,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 586,
            "question": "List the title of all cartoons in alphabetical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the total number of horses on farms in ascending order. */\nSELECT Total_Horses FROM farm ORDER BY Total_Horses ASC\n\n/* Answer the following: What is the total horses record for each farm, sorted ascending? */\nSELECT Total_Horses FROM farm ORDER BY Total_Horses ASC\n\n/* Answer the following: List the writers of the books in ascending alphabetical order. */\nSELECT Writer FROM book ORDER BY Writer ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoons in alphabetical order. */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 19,
                    "db_id": "farm",
                    "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
                    "question": "List the total number of horses on farms in ascending order."
                },
                {
                    "ex_id": 20,
                    "db_id": "farm",
                    "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
                    "question": "What is the total horses record for each farm, sorted ascending?"
                },
                {
                    "ex_id": 215,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book ORDER BY Writer ASC",
                    "question": "List the writers of the books in ascending alphabetical order."
                }
            ],
            "example_quality": 0.6984943421484823,
            "example_similarity": 0.3532586322398006,
            "db_id": "tvshow"
        },
        {
            "index": 587,
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the total number of horses on farms in ascending order. */\nSELECT Total_Horses FROM farm ORDER BY Total_Horses ASC\n\n/* Answer the following: What is the total horses record for each farm, sorted ascending? */\nSELECT Total_Horses FROM farm ORDER BY Total_Horses ASC\n\n/* Answer the following: List the writers of the books in ascending alphabetical order. */\nSELECT Writer FROM book ORDER BY Writer ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of the cartoons sorted alphabetically? */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 19,
                    "db_id": "farm",
                    "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
                    "question": "List the total number of horses on farms in ascending order."
                },
                {
                    "ex_id": 20,
                    "db_id": "farm",
                    "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
                    "question": "What is the total horses record for each farm, sorted ascending?"
                },
                {
                    "ex_id": 215,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book ORDER BY Writer ASC",
                    "question": "List the writers of the books in ascending alphabetical order."
                }
            ],
            "example_quality": 0.6984401212362474,
            "example_similarity": 0.3531608965793653,
            "db_id": "tvshow"
        },
        {
            "index": 588,
            "question": "List all cartoon directed by \"Ben Jones\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List all cartoon directed by \"Ben Jones\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6989529781729205,
            "example_similarity": 0.3529430446100448,
            "db_id": "tvshow"
        },
        {
            "index": 589,
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the names of all cartoons directed by Ben Jones? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.6994640936598935,
            "example_similarity": 0.35292385585327574,
            "db_id": "tvshow"
        },
        {
            "index": 590,
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons were written by \"Joseph Kuhr\"? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.6999734765519954,
            "example_similarity": 0.35310794840528453,
            "db_id": "tvshow"
        },
        {
            "index": 591,
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the number of cartoones written by Joseph Kuhr? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.700481135644124,
            "example_similarity": 0.35296168566122593,
            "db_id": "tvshow"
        },
        {
            "index": 592,
            "question": "list all cartoon titles and their directors ordered by their air date",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all schools and their nicknames in the order of founded year. */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: list all cartoon titles and their directors ordered by their air date */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 978,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "List all schools and their nicknames in the order of founded year."
                },
                {
                    "ex_id": 979,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "What are the different schools and their nicknames, ordered by their founding years?"
                },
                {
                    "ex_id": 1385,
                    "db_id": "college_2",
                    "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
                    "question": "Find the name of the students and their department names sorted by their total credits in ascending order."
                }
            ],
            "example_quality": 0.7009870796717521,
            "example_similarity": 0.352977355660585,
            "db_id": "tvshow"
        },
        {
            "index": 593,
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all schools and their nicknames in the order of founded year. */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name and directors of all the cartoons that are ordered by air date? */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 978,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "List all schools and their nicknames in the order of founded year."
                },
                {
                    "ex_id": 979,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "What are the different schools and their nicknames, ordered by their founding years?"
                },
                {
                    "ex_id": 1385,
                    "db_id": "college_2",
                    "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
                    "question": "Find the name of the students and their department names sorted by their total credits in ascending order."
                }
            ],
            "example_quality": 0.7014913173114288,
            "example_similarity": 0.35293375498191476,
            "db_id": "tvshow"
        },
        {
            "index": 594,
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". */\nSELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1983,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
                    "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.7019938571812748,
            "example_similarity": 0.3531190377486565,
            "db_id": "tvshow"
        },
        {
            "index": 595,
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". */\nSELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1983,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
                    "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.7024947078414744,
            "example_similarity": 0.35319505522536954,
            "db_id": "tvshow"
        },
        {
            "index": 596,
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Which country has the most of TV Channels? List the country and number of TV Channels it has. */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 538,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices."
                },
                {
                    "ex_id": 539,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "What are the top 5 countries by number of invoices and how many do they have?"
                },
                {
                    "ex_id": 680,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the customer id and number of accounts with most accounts."
                }
            ],
            "example_quality": 0.7029938777947605,
            "example_similarity": 0.3533035015832057,
            "db_id": "tvshow"
        },
        {
            "index": 597,
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: A list of the top 5 countries by number of invoices. List country name and number of invoices. */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: What are the top 5 countries by number of invoices and how many do they have? */\nSELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;\n\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the country with the most number of TV Channels and how many does it have? */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 538,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices."
                },
                {
                    "ex_id": 539,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
                    "question": "What are the top 5 countries by number of invoices and how many do they have?"
                },
                {
                    "ex_id": 680,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the customer id and number of accounts with most accounts."
                }
            ],
            "example_quality": 0.7034913754868966,
            "example_similarity": 0.3532790241537372,
            "db_id": "tvshow"
        },
        {
            "index": 598,
            "question": "List the number of different series names and contents in the TV Channel table.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the numbers of different majors and cities. */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many different majors are there and how many different city codes are there for each student? */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many different locations does each school have? */\nSELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the number of different series names and contents in the TV Channel table. */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5701,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "Find the numbers of different majors and cities."
                },
                {
                    "ex_id": 5702,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "How many different majors are there and how many different city codes are there for each student?"
                },
                {
                    "ex_id": 3192,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
                    "question": "How many different locations does each school have?"
                }
            ],
            "example_quality": 0.7036098831773181,
            "example_similarity": 0.35309232345504843,
            "db_id": "tvshow"
        },
        {
            "index": 599,
            "question": "How many different series and contents are listed in the TV Channel table?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the numbers of different majors and cities. */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many different majors are there and how many different city codes are there for each student? */\nSELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student\n\n/* Answer the following: How many different locations does each school have? */\nSELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many different series and contents are listed in the TV Channel table? */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5701,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "Find the numbers of different majors and cities."
                },
                {
                    "ex_id": 5702,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
                    "question": "How many different majors are there and how many different city codes are there for each student?"
                },
                {
                    "ex_id": 3192,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
                    "question": "How many different locations does each school have?"
                }
            ],
            "example_quality": 0.7037279951826299,
            "example_similarity": 0.3530297652652969,
            "db_id": "tvshow"
        },
        {
            "index": 600,
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the names of entrepreneurs? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                },
                {
                    "ex_id": 1157,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of body builders?"
                },
                {
                    "ex_id": 2274,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of entrepreneurs?"
                }
            ],
            "example_quality": 0.7027986617675386,
            "example_similarity": 0.3529512507442408,
            "db_id": "tvshow"
        },
        {
            "index": 601,
            "question": "What is the content of the series Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of the series Sky Radio? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7032931731456292,
            "example_similarity": 0.35317162946246805,
            "db_id": "tvshow"
        },
        {
            "index": 602,
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the Package Option of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.703786041628776,
            "example_similarity": 0.35324695652070065,
            "db_id": "tvshow"
        },
        {
            "index": 603,
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the Package Options of the TV Channels whose series names are Sky Radio? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7042772753905857,
            "example_similarity": 0.35322529399451036,
            "db_id": "tvshow"
        },
        {
            "index": 604,
            "question": "How many TV Channel using language English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channel using language English? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.704766882550535,
            "example_similarity": 0.3536338613885592,
            "db_id": "tvshow"
        },
        {
            "index": 605,
            "question": "How many TV Channels use the English language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channels use the English language? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.7052548711744184,
            "example_similarity": 0.3539509203704864,
            "db_id": "tvshow"
        },
        {
            "index": 606,
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. */\nSELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n\n/* Answer the following: Which major has least number of students? List the major and the number of students. */\nSELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;\n\n/* Answer the following: Which Advisor has most of students? List advisor and the number of students. */\nSELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the language used least number of TV Channel. List language and number of TV Channel. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1034,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
                    "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company."
                },
                {
                    "ex_id": 2833,
                    "db_id": "restaurant_1",
                    "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
                    "question": "Which major has least number of students? List the major and the number of students."
                },
                {
                    "ex_id": 2832,
                    "db_id": "restaurant_1",
                    "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
                    "question": "Which Advisor has most of students? List advisor and the number of students."
                }
            ],
            "example_quality": 0.7054979712705197,
            "example_similarity": 0.3542419304528834,
            "db_id": "tvshow"
        },
        {
            "index": 607,
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which major has least number of students? List the major and the number of students. */\nSELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;\n\n/* Answer the following: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. */\nSELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n\n/* Answer the following: Which Advisor has most of students? List advisor and the number of students. */\nSELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the languages used by the least number of TV Channels and how many channels use it? */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2833,
                    "db_id": "restaurant_1",
                    "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
                    "question": "Which major has least number of students? List the major and the number of students."
                },
                {
                    "ex_id": 1034,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
                    "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company."
                },
                {
                    "ex_id": 2832,
                    "db_id": "restaurant_1",
                    "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
                    "question": "Which Advisor has most of students? List advisor and the number of students."
                }
            ],
            "example_quality": 0.7057402703778364,
            "example_similarity": 0.35425661902666256,
            "db_id": "tvshow"
        },
        {
            "index": 608,
            "question": "List each language and the number of TV Channels using it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List each language and the number of TV Channels using it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.706224250196294,
            "example_similarity": 0.35415648037643466,
            "db_id": "tvshow"
        },
        {
            "index": 609,
            "question": "For each language, list the number of TV Channels that use it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: For each language, list the number of TV Channels that use it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7067066405900604,
            "example_similarity": 0.3540049997221298,
            "db_id": "tvshow"
        },
        {
            "index": 610,
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                },
                {
                    "ex_id": 571,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "What are the titles of all the Aerosmith albums?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                }
            ],
            "example_quality": 0.7071874493759783,
            "example_similarity": 0.3538769663459828,
            "db_id": "tvshow"
        },
        {
            "index": 611,
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                },
                {
                    "ex_id": 627,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "What is the name of all tracks in the album named Balls to the Wall?"
                },
                {
                    "ex_id": 852,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
                    "question": "What city does the employee who helps the customer with postal code 70174 live in?"
                }
            ],
            "example_quality": 0.7073393520774905,
            "example_similarity": 0.35392497438231213,
            "db_id": "tvshow"
        },
        {
            "index": 612,
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                },
                {
                    "ex_id": 571,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "What are the titles of all the Aerosmith albums?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                }
            ],
            "example_quality": 0.7074907583649457,
            "example_similarity": 0.3537914297192964,
            "db_id": "tvshow"
        },
        {
            "index": 613,
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                },
                {
                    "ex_id": 571,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "What are the titles of all the Aerosmith albums?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                }
            ],
            "example_quality": 0.7076416706677762,
            "example_similarity": 0.35372259248141585,
            "db_id": "tvshow"
        },
        {
            "index": 614,
            "question": "List the Episode of all TV series sorted by rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all TV series sorted by rating. */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                },
                {
                    "ex_id": 1049,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
                    "question": "List all the model names sorted by their launch year."
                },
                {
                    "ex_id": 2034,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
                    "question": "order all gas station locations by the opening year."
                }
            ],
            "example_quality": 0.7081178242986104,
            "example_similarity": 0.35404000049221346,
            "db_id": "tvshow"
        },
        {
            "index": 615,
            "question": "What are all of the episodes ordered by ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are all of the episodes ordered by ratings? */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                },
                {
                    "ex_id": 1049,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
                    "question": "List all the model names sorted by their launch year."
                },
                {
                    "ex_id": 2034,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
                    "question": "order all gas station locations by the opening year."
                }
            ],
            "example_quality": 0.7085924294623525,
            "example_similarity": 0.3539950393351348,
            "db_id": "tvshow"
        },
        {
            "index": 616,
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                },
                {
                    "ex_id": 189,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids of the trips that lasted the longest and how long did they last?"
                },
                {
                    "ex_id": 1636,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
                    "question": "Show the name and opening year for three churches that opened most recently."
                }
            ],
            "example_quality": 0.7090654937002382,
            "example_similarity": 0.3538283981771582,
            "db_id": "tvshow"
        },
        {
            "index": 617,
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are 3 most highly rated episodes in the TV series table and what were those ratings? */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                },
                {
                    "ex_id": 189,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids of the trips that lasted the longest and how long did they last?"
                },
                {
                    "ex_id": 1636,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
                    "question": "Show the name and opening year for three churches that opened most recently."
                }
            ],
            "example_quality": 0.7095370245046138,
            "example_similarity": 0.3537714974340512,
            "db_id": "tvshow"
        },
        {
            "index": 618,
            "question": "What is minimum and maximum share of TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the minimum and maximum vote percents of elections? */\nSELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election\n\n/* Answer the following: What is the minimum and maximum number of bathrooms of all the apartments? */\nSELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n\n/* Answer the following: Give me the minimum and maximum bathroom count among all the apartments. */\nSELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is minimum and maximum share of TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1178,
                    "db_id": "election_representative",
                    "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
                    "question": "What are the minimum and maximum vote percents of elections?"
                },
                {
                    "ex_id": 1207,
                    "db_id": "apartment_rentals",
                    "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
                    "question": "What is the minimum and maximum number of bathrooms of all the apartments?"
                },
                {
                    "ex_id": 1208,
                    "db_id": "apartment_rentals",
                    "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
                    "question": "Give me the minimum and maximum bathroom count among all the apartments."
                }
            ],
            "example_quality": 0.7100070293193312,
            "example_similarity": 0.35411757439422836,
            "db_id": "tvshow"
        },
        {
            "index": 619,
            "question": "What is the maximum and minimum share for the TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the maximum and minimum share for the TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                },
                {
                    "ex_id": 27,
                    "db_id": "farm",
                    "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
                    "question": "What are the maximum and minimum number of cows across all farms."
                },
                {
                    "ex_id": 28,
                    "db_id": "farm",
                    "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
                    "question": "Return the maximum and minimum number of cows across all farms."
                }
            ],
            "example_quality": 0.7104755155401401,
            "example_similarity": 0.3542805935874953,
            "db_id": "tvshow"
        },
        {
            "index": 620,
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the names of entrepreneurs? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the air date of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                },
                {
                    "ex_id": 1157,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of body builders?"
                },
                {
                    "ex_id": 2274,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of entrepreneurs?"
                }
            ],
            "example_quality": 0.7095652775249591,
            "example_similarity": 0.3541259042522601,
            "db_id": "tvshow"
        },
        {
            "index": 621,
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: When did the episode \"A Love of a Lifetime\" air? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7100329662890091,
            "example_similarity": 0.3541336824142429,
            "db_id": "tvshow"
        },
        {
            "index": 622,
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the names of entrepreneurs? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                },
                {
                    "ex_id": 1157,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of body builders?"
                },
                {
                    "ex_id": 2274,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of entrepreneurs?"
                }
            ],
            "example_quality": 0.7091263665781392,
            "example_similarity": 0.3538989561905735,
            "db_id": "tvshow"
        },
        {
            "index": 623,
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the weekly rank for the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7095932584455901,
            "example_similarity": 0.35404717910209,
            "db_id": "tvshow"
        },
        {
            "index": 624,
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                },
                {
                    "ex_id": 571,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "What are the titles of all the Aerosmith albums?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                }
            ],
            "example_quality": 0.7100586538647478,
            "example_similarity": 0.3539377724704358,
            "db_id": "tvshow"
        },
        {
            "index": 625,
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi river run */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi runs */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name of the series that has the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7286,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi river run"
                },
                {
                    "ex_id": 7287,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi runs"
                }
            ],
            "example_quality": 0.7090768457328498,
            "example_similarity": 0.35376702759003864,
            "db_id": "tvshow"
        },
        {
            "index": 626,
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                },
                {
                    "ex_id": 627,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "What is the name of all tracks in the album named Balls to the Wall?"
                },
                {
                    "ex_id": 852,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
                    "question": "What city does the employee who helps the customer with postal code 70174 live in?"
                }
            ],
            "example_quality": 0.70954157920612,
            "example_similarity": 0.35382742385838534,
            "db_id": "tvshow"
        },
        {
            "index": 627,
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What city does the employee who helps the customer with postal code 70174 live in? */\nSELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the episode for the TV series named \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                },
                {
                    "ex_id": 627,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "What is the name of all tracks in the album named Balls to the Wall?"
                },
                {
                    "ex_id": 852,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
                    "question": "What city does the employee who helps the customer with postal code 70174 live in?"
                }
            ],
            "example_quality": 0.7100048302759667,
            "example_similarity": 0.35396961689232787,
            "db_id": "tvshow"
        },
        {
            "index": 628,
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the number of cartoons directed by each of the listed directors. */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7102461258671491,
            "example_similarity": 0.35381244100220427,
            "db_id": "tvshow"
        },
        {
            "index": 629,
            "question": "How many cartoons did each director create?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons did each director create? */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7104866542227475,
            "example_similarity": 0.35350815358331517,
            "db_id": "tvshow"
        },
        {
            "index": 630,
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the production code and channel of the most recently aired cartoon . */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 34,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "What is the official name and status of the city with the most residents?"
                },
                {
                    "ex_id": 356,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "Show the id and name of the aircraft with the maximum distance."
                }
            ],
            "example_quality": 0.7098879981578436,
            "example_similarity": 0.35374404749248894,
            "db_id": "tvshow"
        },
        {
            "index": 631,
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the official name and status of the city with the most residents? */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: Show the id and name of the aircraft with the maximum distance. */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the produdction code and channel of the most recent cartoon ? */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 34,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "What is the official name and status of the city with the most residents?"
                },
                {
                    "ex_id": 356,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "Show the id and name of the aircraft with the maximum distance."
                }
            ],
            "example_quality": 0.7092912395765052,
            "example_similarity": 0.35378632836876595,
            "db_id": "tvshow"
        },
        {
            "index": 632,
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the color code and description of the product named \"chervil\"? */\nSELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\n\n/* Answer the following: Return the color code and description for the product with the name 'chervil'. */\nSELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\n\n/* Answer the following: What is the name of tracks whose genre is Rock? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the package choice and series name of the TV channel that has high definition TV. */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5547,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
                    "question": "What is the color code and description of the product named \"chervil\"?"
                },
                {
                    "ex_id": 5548,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
                    "question": "Return the color code and description for the product with the name 'chervil'."
                },
                {
                    "ex_id": 622,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of tracks whose genre is Rock?"
                }
            ],
            "example_quality": 0.708354864851598,
            "example_similarity": 0.3537455438937908,
            "db_id": "tvshow"
        },
        {
            "index": 633,
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the players and years played for players from team \"Columbus Crew\". */\nSELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Answer the following: What are the players who played for Columbus Crew, and how many years did each play for? */\nSELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Answer the following: List first name and last name of customers lived in city Lockmanfurt. */\nSELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options and the name of the series for the TV Channel that supports high definition TV? */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1089,
                    "db_id": "match_season",
                    "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
                    "question": "Show the players and years played for players from team \"Columbus Crew\"."
                },
                {
                    "ex_id": 1090,
                    "db_id": "match_season",
                    "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
                    "question": "What are the players who played for Columbus Crew, and how many years did each play for?"
                },
                {
                    "ex_id": 6683,
                    "db_id": "driving_school",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
                    "question": "List first name and last name of customers lived in city Lockmanfurt."
                }
            ],
            "example_quality": 0.7074219378324186,
            "example_similarity": 0.35369979473248353,
            "db_id": "tvshow"
        },
        {
            "index": 634,
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct ages of students who have secretary votes in the fall election cycle. */\nSELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\n\n/* Answer the following: What are the distinct ages of students who have secretary votes in the fall election cycle? */\nSELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\n\n/* Answer the following: Find the distinct Advisor of students who have treasurer votes in the spring election cycle. */\nSELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are playing some cartoon written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5477,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
                    "question": "Find the distinct ages of students who have secretary votes in the fall election cycle."
                },
                {
                    "ex_id": 5478,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
                    "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?"
                },
                {
                    "ex_id": 5479,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
                    "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle."
                }
            ],
            "example_quality": 0.7076509751212434,
            "example_similarity": 0.35367702248067884,
            "db_id": "tvshow"
        },
        {
            "index": 635,
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that have cartoons on TV that were written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                },
                {
                    "ex_id": 571,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "What are the titles of all the Aerosmith albums?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                }
            ],
            "example_quality": 0.7081113672864068,
            "example_similarity": 0.35359367579913326,
            "db_id": "tvshow"
        },
        {
            "index": 636,
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are not playing any cartoon written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                },
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                },
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                }
            ],
            "example_quality": 0.7071377470373541,
            "example_similarity": 0.35354609053581615,
            "db_id": "tvshow"
        },
        {
            "index": 637,
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the movies that are not reviewed by Brittany Harris. */\nSELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n\n/* Answer the following: What are the ids of all moviest hat have not been reviewed by Britanny Harris? */\nSELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n\n/* Answer the following: Find the name of customers who do not have a loan with a type of Mortgages. */\nSELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that are not playing cartoons written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2517,
                    "db_id": "movie_1",
                    "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"",
                    "question": "What are the ids of the movies that are not reviewed by Brittany Harris."
                },
                {
                    "ex_id": 2518,
                    "db_id": "movie_1",
                    "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"",
                    "question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?"
                },
                {
                    "ex_id": 3041,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
                    "question": "Find the name of customers who do not have a loan with a type of Mortgages."
                }
            ],
            "example_quality": 0.7074666778374001,
            "example_similarity": 0.3534348973785899,
            "db_id": "tvshow"
        },
        {
            "index": 638,
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: where can we find some restaurants in the bay area ? */\nSELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );\n\n/* Answer the following: give me some restaurants in the bay area ? */\nSELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );\n\n/* Answer the following: give me a restaurant in the bay area ? */\nSELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8652,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
                    "question": "where can we find some restaurants in the bay area ?"
                },
                {
                    "ex_id": 8653,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
                    "question": "give me some restaurants in the bay area ?"
                },
                {
                    "ex_id": 8654,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
                    "question": "give me a restaurant in the bay area ?"
                }
            ],
            "example_quality": 0.7066842127753571,
            "example_similarity": 0.35309969075355696,
            "db_id": "tvshow"
        },
        {
            "index": 639,
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes? */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: Find the name and address of the customers who have both New and Pending orders. */\nSELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 968,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes."
                },
                {
                    "ex_id": 969,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?"
                },
                {
                    "ex_id": 4736,
                    "db_id": "department_store",
                    "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
                    "question": "Find the name and address of the customers who have both New and Pending orders."
                }
            ],
            "example_quality": 0.7067888740637163,
            "example_similarity": 0.3530454085072936,
            "db_id": "tvshow"
        },
        {
            "index": 640,
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the pixel aspect ratio and nation of the tv channels that do not use English. */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                },
                {
                    "ex_id": 1657,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "What are the names and year of joining for artists that do not have the country \"United States\"?"
                },
                {
                    "ex_id": 1723,
                    "db_id": "riding_club",
                    "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
                    "question": "List the name and residence for players whose occupation is not \"Researcher\"."
                }
            ],
            "example_quality": 0.7072470164479917,
            "example_similarity": 0.3531749619251878,
            "db_id": "tvshow"
        },
        {
            "index": 641,
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all artist names and the year joined who are not from United States. */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: What are the names and year of joining for artists that do not have the country \"United States\"? */\nSELECT name ,  year_join FROM artist WHERE country != 'United States'\n\n/* Answer the following: List the name and residence for players whose occupation is not \"Researcher\". */\nSELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1656,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "Show all artist names and the year joined who are not from United States."
                },
                {
                    "ex_id": 1657,
                    "db_id": "theme_gallery",
                    "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
                    "question": "What are the names and year of joining for artists that do not have the country \"United States\"?"
                },
                {
                    "ex_id": 1723,
                    "db_id": "riding_club",
                    "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
                    "question": "List the name and residence for players whose occupation is not \"Researcher\"."
                }
            ],
            "example_quality": 0.7077037293708497,
            "example_similarity": 0.35331201446668625,
            "db_id": "tvshow"
        },
        {
            "index": 642,
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display those departments where more than ten employees work who got a commission percentage. */\nSELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10\n\n/* Answer the following: What are the department ids for which more than 10 employees had a commission? */\nSELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10\n\n/* Answer the following: List the countries having more than 4 addresses listed. */\nSELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find id of the tv channels that from the countries where have more than two tv channels. */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3450,
                    "db_id": "hr_1",
                    "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
                    "question": "display those departments where more than ten employees work who got a commission percentage."
                },
                {
                    "ex_id": 3451,
                    "db_id": "hr_1",
                    "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
                    "question": "What are the department ids for which more than 10 employees had a commission?"
                },
                {
                    "ex_id": 6094,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
                    "question": "List the countries having more than 4 addresses listed."
                }
            ],
            "example_quality": 0.7076123504489924,
            "example_similarity": 0.3532406894714442,
            "db_id": "tvshow"
        },
        {
            "index": 643,
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show publishers that have more than one publication. */\nSELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1\n\n/* Answer the following: List the writers who have written more than one book. */\nSELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1\n\n/* Answer the following: List the nominees that have been nominated more than two musicals. */\nSELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of all tv channels that have more than 2 TV channels? */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 226,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
                    "question": "Show publishers that have more than one publication."
                },
                {
                    "ex_id": 229,
                    "db_id": "book_2",
                    "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
                    "question": "List the writers who have written more than one book."
                },
                {
                    "ex_id": 267,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
                    "question": "List the nominees that have been nominated more than two musicals."
                }
            ],
            "example_quality": 0.7078078729729183,
            "example_similarity": 0.3531759486857094,
            "db_id": "tvshow"
        },
        {
            "index": 644,
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of instructors who didn't each any courses in any Spring semester. */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: What are the names of instructors who didn't teach courses in the Spring? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: List the project details of the projects which did not hire any staff for a researcher role. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the id of tv channels that do not play any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1445,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "Find the names of instructors who didn't each any courses in any Spring semester."
                },
                {
                    "ex_id": 1446,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "What are the names of instructors who didn't teach courses in the Spring?"
                },
                {
                    "ex_id": 4339,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
                    "question": "List the project details of the projects which did not hire any staff for a researcher role."
                }
            ],
            "example_quality": 0.707011608962736,
            "example_similarity": 0.3532347416960468,
            "db_id": "tvshow"
        },
        {
            "index": 645,
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of instructors who didn't each any courses in any Spring semester. */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: What are the names of instructors who didn't teach courses in the Spring? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: List the project details of the projects which did not hire any staff for a researcher role. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1445,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "Find the names of instructors who didn't each any courses in any Spring semester."
                },
                {
                    "ex_id": 1446,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "What are the names of instructors who didn't teach courses in the Spring?"
                },
                {
                    "ex_id": 4339,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
                    "question": "List the project details of the projects which did not hire any staff for a researcher role."
                }
            ],
            "example_quality": 0.7062178139882441,
            "example_similarity": 0.35330602327943195,
            "db_id": "tvshow"
        },
        {
            "index": 646,
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show company name and main industry without a gas station. */\nSELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\n\n/* Answer the following: What are the main industries of the companies without gas stations and what are the companies? */\nSELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\n\n/* Answer the following: Show the school name and type for schools without a school bus. */\nSELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2026,
                    "db_id": "gas_company",
                    "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
                    "question": "Show company name and main industry without a gas station."
                },
                {
                    "ex_id": 2027,
                    "db_id": "gas_company",
                    "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
                    "question": "What are the main industries of the companies without gas stations and what are the companies?"
                },
                {
                    "ex_id": 6362,
                    "db_id": "school_bus",
                    "query": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
                    "question": "Show the school name and type for schools without a school bus."
                }
            ],
            "example_quality": 0.7056982635568291,
            "example_similarity": 0.3532321061467325,
            "db_id": "tvshow"
        },
        {
            "index": 647,
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                },
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                },
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                }
            ],
            "example_quality": 0.7060704487099302,
            "example_similarity": 0.35330897334600275,
            "db_id": "tvshow"
        },
        {
            "index": 648,
            "question": "How many poker players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many poker players are there? */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7065240436964889,
            "example_similarity": 0.35368844460504656,
            "db_id": "poker_player"
        },
        {
            "index": 649,
            "question": "Count the number of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of poker players. */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7069762408556622,
            "example_similarity": 0.35366930962302007,
            "db_id": "poker_player"
        },
        {
            "index": 650,
            "question": "List the earnings of poker players in descending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: Sort the names of all counties in descending alphabetical order. */\nSELECT County_name FROM county ORDER BY County_name DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the earnings of poker players in descending order. */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                },
                {
                    "ex_id": 1740,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
                    "question": "What are the total points for all gymnasts, ordered by total points descending?"
                },
                {
                    "ex_id": 2782,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                    "question": "Sort the names of all counties in descending alphabetical order."
                }
            ],
            "example_quality": 0.7074270466389613,
            "example_similarity": 0.3539713568389846,
            "db_id": "poker_player"
        },
        {
            "index": 651,
            "question": "What are the earnings of poker players, ordered descending by value?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: What are the total points for all gymnasts, ordered by total points descending? */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: Sort the names of all counties in descending alphabetical order. */\nSELECT County_name FROM county ORDER BY County_name DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the earnings of poker players, ordered descending by value? */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                },
                {
                    "ex_id": 1740,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
                    "question": "What are the total points for all gymnasts, ordered by total points descending?"
                },
                {
                    "ex_id": 2782,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                    "question": "Sort the names of all counties in descending alphabetical order."
                }
            ],
            "example_quality": 0.7078764674582562,
            "example_similarity": 0.3540119417852577,
            "db_id": "poker_player"
        },
        {
            "index": 652,
            "question": "List the final tables made and the best finishes of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the final tables made and the best finishes of poker players. */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7083245096860808,
            "example_similarity": 0.35396004530797426,
            "db_id": "poker_player"
        },
        {
            "index": 653,
            "question": "What are the final tables made and best finishes for all poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the final tables made and best finishes for all poker players? */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7087711796559337,
            "example_similarity": 0.3541709283422142,
            "db_id": "poker_player"
        },
        {
            "index": 654,
            "question": "What is the average earnings of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players? */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.7092164836625761,
            "example_similarity": 0.35470114466115943,
            "db_id": "poker_player"
        },
        {
            "index": 655,
            "question": "Return the average earnings across all poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the average earnings across all poker players. */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.7096604279623279,
            "example_similarity": 0.3548139237205645,
            "db_id": "poker_player"
        },
        {
            "index": 656,
            "question": "What is the money rank of the poker player with the highest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the poker player with the highest earnings? */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.710103018773361,
            "example_similarity": 0.3549520042283717,
            "db_id": "poker_player"
        },
        {
            "index": 657,
            "question": "Return the money rank of the player with the greatest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the player with the greatest earnings. */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7105442622759891,
            "example_similarity": 0.3550236222014356,
            "db_id": "poker_player"
        },
        {
            "index": 658,
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the maximum share count of transactions where the amount is smaller than 10000 */\nSELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\n\n/* Answer the following: What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8? */\nSELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n\n/* Answer the following: What is the id of every song that has a resolution higher than that of a song with a rating below 8? */\nSELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the maximum number of final tables made among poker players with earnings less than 200000? */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5856,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
                    "question": "Show the maximum share count of transactions where the amount is smaller than 10000"
                },
                {
                    "ex_id": 3616,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
                    "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?"
                },
                {
                    "ex_id": 3617,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
                    "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?"
                }
            ],
            "example_quality": 0.7101731093860545,
            "example_similarity": 0.3551678720357167,
            "db_id": "poker_player"
        },
        {
            "index": 659,
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the maximum share count of transactions where the amount is smaller than 10000 */\nSELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\n\n/* Answer the following: What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8? */\nSELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n\n/* Answer the following: What is the id of every song that has a resolution higher than that of a song with a rating below 8? */\nSELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the maximum final tables made across all poker players who have earnings below 200000. */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5856,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
                    "question": "Show the maximum share count of transactions where the amount is smaller than 10000"
                },
                {
                    "ex_id": 3616,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
                    "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?"
                },
                {
                    "ex_id": 3617,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
                    "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?"
                }
            ],
            "example_quality": 0.7098030829085324,
            "example_similarity": 0.355007730741631,
            "db_id": "poker_player"
        },
        {
            "index": 660,
            "question": "What are the names of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the names of entrepreneurs? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: Return the names of entrepreneurs. */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1157,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of body builders?"
                },
                {
                    "ex_id": 2274,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of entrepreneurs?"
                },
                {
                    "ex_id": 2275,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "Return the names of entrepreneurs."
                }
            ],
            "example_quality": 0.7100407550051356,
            "example_similarity": 0.3556188301394973,
            "db_id": "poker_player"
        },
        {
            "index": 661,
            "question": "Return the names of all the poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the names of entrepreneurs? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: Return the names of entrepreneurs. */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of all the poker players. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1157,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of body builders?"
                },
                {
                    "ex_id": 2274,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of entrepreneurs?"
                },
                {
                    "ex_id": 2275,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "Return the names of entrepreneurs."
                }
            ],
            "example_quality": 0.7102777079728536,
            "example_similarity": 0.35579523466609747,
            "db_id": "poker_player"
        },
        {
            "index": 662,
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders whose total score is higher than 300? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300\n\n/* Answer the following: Find the names of reviewers who had given higher than 3 star ratings. */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\n\n/* Answer the following: What are the names of the reviewers who have rated a movie more than 3 stars before? */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players whose earnings is higher than 300000? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1158,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300",
                    "question": "What are the names of body builders whose total score is higher than 300?"
                },
                {
                    "ex_id": 2513,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
                    "question": "Find the names of reviewers who had given higher than 3 star ratings."
                },
                {
                    "ex_id": 2514,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
                    "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?"
                }
            ],
            "example_quality": 0.7104132401360366,
            "example_similarity": 0.3562299986961432,
            "db_id": "poker_player"
        },
        {
            "index": 663,
            "question": "Give the names of poker players who have earnings above 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders whose total score is higher than 300? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300\n\n/* Answer the following: Find the names of reviewers who had given higher than 3 star ratings. */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\n\n/* Answer the following: What are the names of the reviewers who have rated a movie more than 3 stars before? */\nSELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the names of poker players who have earnings above 300000. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1158,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300",
                    "question": "What are the names of body builders whose total score is higher than 300?"
                },
                {
                    "ex_id": 2513,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
                    "question": "Find the names of reviewers who had given higher than 3 star ratings."
                },
                {
                    "ex_id": 2514,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
                    "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?"
                }
            ],
            "example_quality": 0.7105483634540818,
            "example_similarity": 0.3563503069903558,
            "db_id": "poker_player"
        },
        {
            "index": 664,
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of members in ascending order of their rank in rounds. */\nSELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC\n\n/* Answer the following: Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names. */\nSELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC\n\n/* Answer the following: What are the names of body builders in descending order of total scores? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of poker players ordered by the final tables made in ascending order. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4498,
                    "db_id": "decoration_competition",
                    "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
                    "question": "Show the names of members in ascending order of their rank in rounds."
                },
                {
                    "ex_id": 4494,
                    "db_id": "decoration_competition",
                    "query": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",
                    "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names."
                },
                {
                    "ex_id": 1163,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
                    "question": "What are the names of body builders in descending order of total scores?"
                }
            ],
            "example_quality": 0.7105605090375752,
            "example_similarity": 0.3565277833011421,
            "db_id": "poker_player"
        },
        {
            "index": 665,
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of members in ascending order of their rank in rounds. */\nSELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC\n\n/* Answer the following: Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names. */\nSELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC\n\n/* Answer the following: What are the names of body builders in descending order of total scores? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players, ordered ascending by the number of final tables they have made? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4498,
                    "db_id": "decoration_competition",
                    "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
                    "question": "Show the names of members in ascending order of their rank in rounds."
                },
                {
                    "ex_id": 4494,
                    "db_id": "decoration_competition",
                    "query": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",
                    "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names."
                },
                {
                    "ex_id": 1163,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
                    "question": "What are the names of body builders in descending order of total scores?"
                }
            ],
            "example_quality": 0.710572618092998,
            "example_similarity": 0.3565647507113827,
            "db_id": "poker_player"
        },
        {
            "index": 666,
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cell phone number of the student whose address has the lowest monthly rental? */\nSELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1\n\n/* Answer the following: What is the level name of the cheapest catalog (in USD)? */\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n\n/* Answer the following: Find the level name of the catalog with the lowest price (in USD). */\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the birth date of the poker player with the lowest earnings? */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3118,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
                    "question": "What is the cell phone number of the student whose address has the lowest monthly rental?"
                },
                {
                    "ex_id": 320,
                    "db_id": "product_catalog",
                    "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
                    "question": "What is the level name of the cheapest catalog (in USD)?"
                },
                {
                    "ex_id": 321,
                    "db_id": "product_catalog",
                    "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
                    "question": "Find the level name of the catalog with the lowest price (in USD)."
                }
            ],
            "example_quality": 0.7106886934230067,
            "example_similarity": 0.3567396744686689,
            "db_id": "poker_player"
        },
        {
            "index": 667,
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cell phone number of the student whose address has the lowest monthly rental? */\nSELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1\n\n/* Answer the following: What is the level name of the cheapest catalog (in USD)? */\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n\n/* Answer the following: Find the level name of the catalog with the lowest price (in USD). */\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the birth date of the poker player with the lowest earnings. */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3118,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
                    "question": "What is the cell phone number of the student whose address has the lowest monthly rental?"
                },
                {
                    "ex_id": 320,
                    "db_id": "product_catalog",
                    "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
                    "question": "What is the level name of the cheapest catalog (in USD)?"
                },
                {
                    "ex_id": 321,
                    "db_id": "product_catalog",
                    "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
                    "question": "Find the level name of the catalog with the lowest price (in USD)."
                }
            ],
            "example_quality": 0.7108044207010513,
            "example_similarity": 0.3567665080619084,
            "db_id": "poker_player"
        },
        {
            "index": 668,
            "question": "What is the money rank of the tallest poker player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: Which company was started by the entrepreneur with the greatest height? */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the tallest poker player? */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                },
                {
                    "ex_id": 2302,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Show the company of the tallest entrepreneur."
                },
                {
                    "ex_id": 2303,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Which company was started by the entrepreneur with the greatest height?"
                }
            ],
            "example_quality": 0.7109651653080584,
            "example_similarity": 0.3568149717796199,
            "db_id": "poker_player"
        },
        {
            "index": 669,
            "question": "Return the money rank of the poker player with the greatest height.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Answer the following: Which company was started by the entrepreneur with the greatest height? */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the poker player with the greatest height. */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                },
                {
                    "ex_id": 2302,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Show the company of the tallest entrepreneur."
                },
                {
                    "ex_id": 2303,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Which company was started by the entrepreneur with the greatest height?"
                }
            ],
            "example_quality": 0.7111254293631761,
            "example_similarity": 0.3569091582314605,
            "db_id": "poker_player"
        },
        {
            "index": 670,
            "question": "What is the average earnings of poker players with height higher than 200?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average total score of body builders with height bigger than 200? */\nSELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200\n\n/* Answer the following: What is the average number of cities of markets with low film market estimate bigger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Answer the following: Give the average number of cities within markets that had a low market estimation larger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players with height higher than 200? */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1162,
                    "db_id": "body_builder",
                    "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
                    "question": "What is the average total score of body builders with height bigger than 200?"
                },
                {
                    "ex_id": 4135,
                    "db_id": "film_rank",
                    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
                    "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?"
                },
                {
                    "ex_id": 4136,
                    "db_id": "film_rank",
                    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
                    "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?"
                }
            ],
            "example_quality": 0.7114570829511914,
            "example_similarity": 0.35734723211512565,
            "db_id": "poker_player"
        },
        {
            "index": 671,
            "question": "Give average earnings of poker players who are taller than 200.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average total score of body builders with height bigger than 200? */\nSELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200\n\n/* Answer the following: What is the average number of cities of markets with low film market estimate bigger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Answer the following: Give the average number of cities within markets that had a low market estimation larger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give average earnings of poker players who are taller than 200. */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1162,
                    "db_id": "body_builder",
                    "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
                    "question": "What is the average total score of body builders with height bigger than 200?"
                },
                {
                    "ex_id": 4135,
                    "db_id": "film_rank",
                    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
                    "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?"
                },
                {
                    "ex_id": 4136,
                    "db_id": "film_rank",
                    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
                    "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?"
                }
            ],
            "example_quality": 0.7117877480039219,
            "example_similarity": 0.35732037791412113,
            "db_id": "poker_player"
        },
        {
            "index": 672,
            "question": "What are the names of poker players in descending order of earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders in descending order of total scores? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC\n\n/* Answer the following: What are the weights of entrepreneurs in descending order of money requested? */\nSELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC\n\n/* Answer the following: Return the weights of entrepreneurs, ordered descending by amount of money requested. */\nSELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players in descending order of earnings? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1163,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
                    "question": "What are the names of body builders in descending order of total scores?"
                },
                {
                    "ex_id": 2286,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
                    "question": "What are the weights of entrepreneurs in descending order of money requested?"
                },
                {
                    "ex_id": 2287,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
                    "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested."
                }
            ],
            "example_quality": 0.711919016236059,
            "example_similarity": 0.35795413928634734,
            "db_id": "poker_player"
        },
        {
            "index": 673,
            "question": "Return the names of poker players sorted by their earnings descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders in descending order of total scores? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC\n\n/* Answer the following: What are the weights of entrepreneurs in descending order of money requested? */\nSELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC\n\n/* Answer the following: Return the weights of entrepreneurs, ordered descending by amount of money requested. */\nSELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of poker players sorted by their earnings descending. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1163,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
                    "question": "What are the names of body builders in descending order of total scores?"
                },
                {
                    "ex_id": 2286,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
                    "question": "What are the weights of entrepreneurs in descending order of money requested?"
                },
                {
                    "ex_id": 2287,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
                    "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested."
                }
            ],
            "example_quality": 0.7120498943694378,
            "example_similarity": 0.3581069117101519,
            "db_id": "poker_player"
        },
        {
            "index": 674,
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are different nationalities of people and the corresponding number of people from each nation? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7124771200454475,
            "example_similarity": 0.35795775569511573,
            "db_id": "poker_player"
        },
        {
            "index": 675,
            "question": "How many people are there of each nationality?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many people are there of each nationality? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7129030798676024,
            "example_similarity": 0.35781564537312155,
            "db_id": "poker_player"
        },
        {
            "index": 676,
            "question": "What is the most common nationality of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the most common nationality of people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.713327779453597,
            "example_similarity": 0.357978194666503,
            "db_id": "poker_player"
        },
        {
            "index": 677,
            "question": "Give the nationality that is most common across all people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the nationality that is most common across all people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7137512243879345,
            "example_similarity": 0.35805652902898877,
            "db_id": "poker_player"
        },
        {
            "index": 678,
            "question": "What are the nationalities that are shared by at least two people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the nationalities that are shared by at least two people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.7141734202221705,
            "example_similarity": 0.3579775211160945,
            "db_id": "poker_player"
        },
        {
            "index": 679,
            "question": "Return the nationalities for which there are two or more people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the nationalities for which there are two or more people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.7145943724751569,
            "example_similarity": 0.3578194847000674,
            "db_id": "poker_player"
        },
        {
            "index": 680,
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the customers in increasing order of IDs. */\nSELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n\n/* Answer the following: What is the ordered list of customer ids? */\nSELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\n\n/* Answer the following: List the snatch score and clean jerk score of body builders in ascending order of snatch score. */\nSELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names and birth dates of people in ascending alphabetical order of name. */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 930,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
                    "question": "List all the customers in increasing order of IDs."
                },
                {
                    "ex_id": 931,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
                    "question": "What is the ordered list of customer ids?"
                },
                {
                    "ex_id": 1153,
                    "db_id": "body_builder",
                    "query": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
                    "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score."
                }
            ],
            "example_quality": 0.7150140866332817,
            "example_similarity": 0.3579741074622187,
            "db_id": "poker_player"
        },
        {
            "index": 681,
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and urls of images, sorted alphabetically? */\nSELECT image_name ,  image_url FROM images ORDER BY image_name\n\n/* Answer the following: Show all region code and region name sorted by the codes. */\nSELECT region_code ,  region_name FROM region ORDER BY region_code\n\n/* Answer the following: What are the codes and names for all regions, sorted by codes? */\nSELECT region_code ,  region_name FROM region ORDER BY region_code\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names and birth dates of people, ordered by their names in alphabetical order? */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4539,
                    "db_id": "document_management",
                    "query": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
                    "question": "What are the names and urls of images, sorted alphabetically?"
                },
                {
                    "ex_id": 2693,
                    "db_id": "storm_record",
                    "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
                    "question": "Show all region code and region name sorted by the codes."
                },
                {
                    "ex_id": 2694,
                    "db_id": "storm_record",
                    "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
                    "question": "What are the codes and names for all regions, sorted by codes?"
                }
            ],
            "example_quality": 0.7152857252725867,
            "example_similarity": 0.3579987287446944,
            "db_id": "poker_player"
        },
        {
            "index": 682,
            "question": "Show names of people whose nationality is not \"Russia\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Show names of people whose nationality is not \"Russia\". */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.715703194883624,
            "example_similarity": 0.35798830517012714,
            "db_id": "poker_player"
        },
        {
            "index": 683,
            "question": "What are the names of people who are not from Russia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who are not from Russia? */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7161194420360638,
            "example_similarity": 0.35822924325861577,
            "db_id": "poker_player"
        },
        {
            "index": 684,
            "question": "List the names of people that are not poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of people that are not poker players. */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7165344720915666,
            "example_similarity": 0.3585365870271739,
            "db_id": "poker_player"
        },
        {
            "index": 685,
            "question": "What are the names of people who do not play poker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who do not play poker? */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.716948290380484,
            "example_similarity": 0.35847286424451835,
            "db_id": "poker_player"
        },
        {
            "index": 686,
            "question": "How many distinct nationalities are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many distinct nationalities are there? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7173609022020868,
            "example_similarity": 0.3584343299410108,
            "db_id": "poker_player"
        },
        {
            "index": 687,
            "question": "Count the number of different nationalities.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of different nationalities. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7177723128247911,
            "example_similarity": 0.3584724391909007,
            "db_id": "poker_player"
        },
        {
            "index": 688,
            "question": "How many states are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many states are there? */\nSELECT ",
            "response": "count(*) FROM area_code_state",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7173750339463315,
            "example_similarity": 0.3584883868729553,
            "db_id": "voter_1"
        },
        {
            "index": 689,
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name and number of followers for each user, and sort the results by the number of followers in descending order. */\nSELECT name ,  followers FROM user_profiles ORDER BY followers DESC\n\n/* Answer the following: Show all the cinema names and opening years in descending order of opening year. */\nSELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC\n\n/* Answer the following: List the name and cost of all procedures sorted by the cost from the highest to the lowest. */\nSELECT name ,  cost FROM procedures ORDER BY cost DESC\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the contestant numbers and names, ordered by contestant name descending. */\nSELECT ",
            "response": "contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 293,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
                    "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order."
                },
                {
                    "ex_id": 1939,
                    "db_id": "cinema",
                    "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
                    "question": "Show all the cinema names and opening years in descending order of opening year."
                },
                {
                    "ex_id": 3969,
                    "db_id": "hospital_1",
                    "query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC",
                    "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest."
                }
            ],
            "example_quality": 0.7177852298332018,
            "example_similarity": 0.3585233406434524,
            "db_id": "voter_1"
        },
        {
            "index": 690,
            "question": "List the vote ids, phone numbers and states of all votes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the vote ids, phone numbers and states of all votes. */\nSELECT ",
            "response": "vote_id , phone_number , state FROM votes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 1631,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date ,  organized_by FROM Church",
                    "question": "Show the name, open date, and organizer for all churches."
                }
            ],
            "example_quality": 0.718194236746487,
            "example_similarity": 0.35896803069632305,
            "db_id": "voter_1"
        },
        {
            "index": 691,
            "question": "What are the maximum and minimum values of area codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Answer the following: Return the maximum and minimum number of cows across all farms. */\nSELECT max(Cows) ,  min(Cows) FROM farm\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the maximum and minimum values of area codes? */\nSELECT ",
            "response": "max(area_code) , min(area_code) FROM area_code_state",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                },
                {
                    "ex_id": 27,
                    "db_id": "farm",
                    "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
                    "question": "What are the maximum and minimum number of cows across all farms."
                },
                {
                    "ex_id": 28,
                    "db_id": "farm",
                    "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
                    "question": "Return the maximum and minimum number of cows across all farms."
                }
            ],
            "example_quality": 0.7186020598481563,
            "example_similarity": 0.35935101634091754,
            "db_id": "voter_1"
        },
        {
            "index": 692,
            "question": "What is last date created of votes from the state 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum point for climbers whose country is United Kingdom? */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Answer the following: Return the maximum number of points for climbers from the United Kingdom. */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Answer the following: What is the maximum elevation of all airports in the country of Iceland? */\nSELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is last date created of votes from the state 'CA'? */\nSELECT ",
            "response": "max(created) FROM votes WHERE state = 'CA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1117,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "What is the maximum point for climbers whose country is United Kingdom?"
                },
                {
                    "ex_id": 1118,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "Return the maximum number of points for climbers from the United Kingdom."
                },
                {
                    "ex_id": 6812,
                    "db_id": "flight_4",
                    "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
                    "question": "What is the maximum elevation of all airports in the country of Iceland?"
                }
            ],
            "example_quality": 0.719008704270341,
            "example_similarity": 0.3594313071853696,
            "db_id": "voter_1"
        },
        {
            "index": 693,
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all regions except for Denmark. */\nSELECT region_name FROM region WHERE region_name != 'Denmark'\n\n/* Answer the following: Return the names of all regions other than Denmark. */\nSELECT region_name FROM region WHERE region_name != 'Denmark'\n\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the names of the contestants whose names are not 'Jessie Alloway' */\nSELECT ",
            "response": "contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2697,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                    "question": "Show names for all regions except for Denmark."
                },
                {
                    "ex_id": 2698,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                    "question": "Return the names of all regions other than Denmark."
                },
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                }
            ],
            "example_quality": 0.7193072861197719,
            "example_similarity": 0.35930775482840593,
            "db_id": "voter_1"
        },
        {
            "index": 694,
            "question": "What are the distinct states and create time of all votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each classroom report the grade that is taught in it. Report just the classroom number and the grade number. */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: What are the grade number and classroom number of each class in the list? */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: Report the first name and last name of all the teachers. */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the distinct states and create time of all votes? */\nSELECT ",
            "response": "DISTINCT state , created FROM votes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4037,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT classroom ,  grade FROM list",
                    "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number."
                },
                {
                    "ex_id": 4038,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT classroom ,  grade FROM list",
                    "question": "What are the grade number and classroom number of each class in the list?"
                },
                {
                    "ex_id": 4055,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT firstname ,  lastname FROM teachers",
                    "question": "Report the first name and last name of all the teachers."
                }
            ],
            "example_quality": 0.7197117424798299,
            "example_similarity": 0.35929198862990946,
            "db_id": "voter_1"
        },
        {
            "index": 695,
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code. */\nSELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1\n\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Answer the following: Show the account id and name with at least 4 transactions. */\nSELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the contestant numbers and names of the contestants who had at least two votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2648,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
                    "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code."
                },
                {
                    "ex_id": 4849,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
                    "question": "What are the id and details of the customers who have at least 3 events?"
                },
                {
                    "ex_id": 1594,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
                    "question": "Show the account id and name with at least 4 transactions."
                }
            ],
            "example_quality": 0.7200750669111139,
            "example_similarity": 0.3593869691566509,
            "db_id": "voter_1"
        },
        {
            "index": 696,
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the code and description of the least frequent detention type ? */\nSELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What are the name and code of the location with the smallest number of documents? */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3112,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What are the code and description of the least frequent detention type ?"
                },
                {
                    "ex_id": 4233,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the location name and code with the least documents."
                },
                {
                    "ex_id": 4234,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What are the name and code of the location with the smallest number of documents?"
                }
            ],
            "example_quality": 0.72023516283725,
            "example_similarity": 0.3593425672543424,
            "db_id": "voter_1"
        },
        {
            "index": 697,
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border colorado and border new mexico */\nSELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the number of votes from state 'NY' or 'CA'? */\nSELECT ",
            "response": "count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7495,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
                    "question": "how many states border colorado and border new mexico"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.7200296742705252,
            "example_similarity": 0.35921189149500826,
            "db_id": "voter_1"
        },
        {
            "index": 698,
            "question": "How many contestants did not get voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists do not have any album? */\nSELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\n\n/* Answer the following: How many departments are led by heads who are not mentioned? */\nSELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);\n\n/* Answer the following: Show the number of all customers without an account. */\nSELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many contestants did not get voted? */\nSELECT ",
            "response": "count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 888,
                    "db_id": "chinook_1",
                    "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
                    "question": "How many artists do not have any album?"
                },
                {
                    "ex_id": 12,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
                    "question": "How many departments are led by heads who are not mentioned?"
                },
                {
                    "ex_id": 684,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
                    "question": "Show the number of all customers without an account."
                }
            ],
            "example_quality": 0.7198636814229552,
            "example_similarity": 0.35916060325277,
            "db_id": "voter_1"
        },
        {
            "index": 699,
            "question": "What is the area code in which the most voters voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which song has the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the song with the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is the area code in which the most voters voted? */\nSELECT ",
            "response": "T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5219,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which song has the most vocals?"
                },
                {
                    "ex_id": 5220,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the song with the most vocals?"
                },
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                }
            ],
            "example_quality": 0.7199978493448445,
            "example_similarity": 0.35938043144957643,
            "db_id": "voter_1"
        },
        {
            "index": 700,
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name, last name, and phone of the customer with account name 162? */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n\n/* Answer the following: Give the full name and phone of the customer who has the account name 162. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n\n/* Answer the following: What is the first name, last name, and phone of the customer with card 4560596484842. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? */\nSELECT ",
            "response": "T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 674,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
                    "question": "What is the first name, last name, and phone of the customer with account name 162?"
                },
                {
                    "ex_id": 675,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
                    "question": "Give the full name and phone of the customer who has the account name 162."
                },
                {
                    "ex_id": 704,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
                    "question": "What is the first name, last name, and phone of the customer with card 4560596484842."
                }
            ],
            "example_quality": 0.7203978524172089,
            "example_similarity": 0.35932383097752,
            "db_id": "voter_1"
        },
        {
            "index": 701,
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks? */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: Find the titles of albums that contain tracks of both the Reggae and Rock genres. */\nSELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'\n\n/* Answer the following: For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date. */\nSELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. */\nSELECT ",
            "response": "T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 890,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
                    "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?"
                },
                {
                    "ex_id": 891,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
                    "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres."
                },
                {
                    "ex_id": 4367,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'",
                    "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date."
                }
            ],
            "example_quality": 0.7205964990226152,
            "example_similarity": 0.35950752770664657,
            "db_id": "voter_1"
        },
        {
            "index": 702,
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all artists that have \"a\" in their names. */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: What are the names of artist who have the letter 'a' in their names? */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Answer the following: Find the names of all the tracks that contain the word \"you\". */\nSELECT Name FROM TRACK WHERE Name LIKE '%you%'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Return the names of the contestants whose names contain the substring 'Al' . */\nSELECT ",
            "response": "contestant_name from contestants where contestant_name like \"%al%\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 818,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "Find the names of all artists that have \"a\" in their names."
                },
                {
                    "ex_id": 819,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "What are the names of artist who have the letter 'a' in their names?"
                },
                {
                    "ex_id": 828,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
                    "question": "Find the names of all the tracks that contain the word \"you\"."
                }
            ],
            "example_quality": 0.7200448420914339,
            "example_similarity": 0.3593959957885632,
            "db_id": "voter_1"
        },
        {
            "index": 703,
            "question": "What are the names of all the countries that became independent after 1950?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Name all the products with next entry ID greater than 8. */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: What are the catalog entry names of the products with next entry ID above 8? */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: Show ids for all aircrafts with more than 1000 distance. */\nSELECT aid FROM Aircraft WHERE distance  >  1000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of all the countries that became independent after 1950? */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 342,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
                    "question": "Name all the products with next entry ID greater than 8."
                },
                {
                    "ex_id": 343,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
                    "question": "What are the catalog entry names of the products with next entry ID above 8?"
                },
                {
                    "ex_id": 348,
                    "db_id": "flight_1",
                    "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
                    "question": "Show ids for all aircrafts with more than 1000 distance."
                }
            ],
            "example_quality": 0.7204430713345471,
            "example_similarity": 0.3593544065060172,
            "db_id": "world_1"
        },
        {
            "index": 704,
            "question": "Give the names of the nations that were founded after 1950.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Name all the products with next entry ID greater than 8. */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: What are the catalog entry names of the products with next entry ID above 8? */\nSELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8\n\n/* Answer the following: Show ids for all aircrafts with more than 1000 distance. */\nSELECT aid FROM Aircraft WHERE distance  >  1000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of the nations that were founded after 1950. */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 342,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
                    "question": "Name all the products with next entry ID greater than 8."
                },
                {
                    "ex_id": 343,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
                    "question": "What are the catalog entry names of the products with next entry ID above 8?"
                },
                {
                    "ex_id": 348,
                    "db_id": "flight_1",
                    "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
                    "question": "Show ids for all aircrafts with more than 1000 distance."
                }
            ],
            "example_quality": 0.7208401692445833,
            "example_similarity": 0.3591126110916374,
            "db_id": "world_1"
        },
        {
            "index": 705,
            "question": "How many countries have a republic as their form of government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers have email that contains \"gmail.com\"? */\nSELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\n\n/* Answer the following: Count the number of customers that have an email containing \"gmail.com\". */\nSELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\n\n/* Answer the following: Find how many school locations have the word 'NY'. */\nSELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have a republic as their form of government? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 848,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
                    "question": "How many customers have email that contains \"gmail.com\"?"
                },
                {
                    "ex_id": 849,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
                    "question": "Count the number of customers that have an email containing \"gmail.com\"."
                },
                {
                    "ex_id": 1010,
                    "db_id": "university_basketball",
                    "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
                    "question": "Find how many school locations have the word 'NY'."
                }
            ],
            "example_quality": 0.7206154217171344,
            "example_similarity": 0.3590563441885917,
            "db_id": "world_1"
        },
        {
            "index": 706,
            "question": "How many countries have governments that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers have email that contains \"gmail.com\"? */\nSELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\n\n/* Answer the following: Count the number of customers that have an email containing \"gmail.com\". */\nSELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"\n\n/* Answer the following: Find how many school locations have the word 'NY'. */\nSELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have governments that are republics? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 848,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
                    "question": "How many customers have email that contains \"gmail.com\"?"
                },
                {
                    "ex_id": 849,
                    "db_id": "chinook_1",
                    "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
                    "question": "Count the number of customers that have an email containing \"gmail.com\"."
                },
                {
                    "ex_id": 1010,
                    "db_id": "university_basketball",
                    "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
                    "question": "Find how many school locations have the word 'NY'."
                }
            ],
            "example_quality": 0.7203913108682336,
            "example_similarity": 0.35915090601476096,
            "db_id": "world_1"
        },
        {
            "index": 707,
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the countries in the Caribbean region? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                },
                {
                    "ex_id": 2590,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "Find the total number of king beds available."
                },
                {
                    "ex_id": 2599,
                    "db_id": "inn_1",
                    "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
                    "question": "What is the total number of people who could stay in the modern rooms in this inn?"
                }
            ],
            "example_quality": 0.7207867969914752,
            "example_similarity": 0.3590667651288324,
            "db_id": "world_1"
        },
        {
            "index": 708,
            "question": "How much surface area do the countires in the Carribean cover together?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How much surface area do the countires in the Carribean cover together? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                },
                {
                    "ex_id": 2590,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "Find the total number of king beds available."
                },
                {
                    "ex_id": 2599,
                    "db_id": "inn_1",
                    "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
                    "question": "What is the total number of people who could stay in the modern rooms in this inn?"
                }
            ],
            "example_quality": 0.7211811659222781,
            "example_similarity": 0.35886464386774747,
            "db_id": "world_1"
        },
        {
            "index": 709,
            "question": "Which continent is Anguilla in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent is Anguilla in? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7215744223878321,
            "example_similarity": 0.3587055001472454,
            "db_id": "world_1"
        },
        {
            "index": 710,
            "question": "What is the continent name which Anguilla belongs to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List Aerosmith's albums. */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What are the titles of all the Aerosmith albums? */\nSELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the continent name which Anguilla belongs to? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 570,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "List Aerosmith's albums."
                },
                {
                    "ex_id": 571,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
                    "question": "What are the titles of all the Aerosmith albums?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                }
            ],
            "example_quality": 0.720724116360324,
            "example_similarity": 0.3587554067585016,
            "db_id": "world_1"
        },
        {
            "index": 711,
            "question": "Which region is the city Kabul located in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of swimmers who has a result of \"win\". */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'\n\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which region is the city Kabul located in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5620,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'",
                    "question": "Find the names of swimmers who has a result of \"win\"."
                },
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                },
                {
                    "ex_id": 627,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "What is the name of all tracks in the album named Balls to the Wall?"
                }
            ],
            "example_quality": 0.7207301045018448,
            "example_similarity": 0.3586881223317488,
            "db_id": "world_1"
        },
        {
            "index": 712,
            "question": "What region is Kabul in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region is Kabul in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7199964675106929,
            "example_similarity": 0.3586083280531821,
            "db_id": "world_1"
        },
        {
            "index": 713,
            "question": "Which language is the most popular in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the lowest point of all states through which the mississippi river runs through */\nSELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;\n\n/* Answer the following: which is the lowest point of the states that the mississippi runs through */\nSELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;\n\n/* Answer the following: what is the highest point in states bordering colorado */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7361,
                    "db_id": "geo",
                    "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
                    "question": "what is the lowest point of all states through which the mississippi river runs through"
                },
                {
                    "ex_id": 7362,
                    "db_id": "geo",
                    "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
                    "question": "which is the lowest point of the states that the mississippi runs through"
                },
                {
                    "ex_id": 7188,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
                    "question": "what is the highest point in states bordering colorado"
                }
            ],
            "example_quality": 0.7192214017585014,
            "example_similarity": 0.3585457127854174,
            "db_id": "world_1"
        },
        {
            "index": 714,
            "question": "What language is predominantly spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: how many people live in the capital of texas */\nSELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What language is predominantly spoken in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                },
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                },
                {
                    "ex_id": 7238,
                    "db_id": "geo",
                    "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
                    "question": "how many people live in the capital of texas"
                }
            ],
            "example_quality": 0.7183040422075909,
            "example_similarity": 0.3583125444090562,
            "db_id": "world_1"
        },
        {
            "index": 715,
            "question": "What are the population and life expectancies in Brazil?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population and life expectancies in Brazil? */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.7186980225681399,
            "example_similarity": 0.3583430985149998,
            "db_id": "world_1"
        },
        {
            "index": 716,
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give me Brazil\u2019s population and life expectancies. */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.7190909024248883,
            "example_similarity": 0.35828005070370866,
            "db_id": "world_1"
        },
        {
            "index": 717,
            "question": "What are the region and population of Angola?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the region and population of Angola? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.7194826863824547,
            "example_similarity": 0.3583753188360428,
            "db_id": "world_1"
        },
        {
            "index": 718,
            "question": "What region does Angola belong to and what is its population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the id and salary of Mark Young. */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: Show the date valid from and the date valid to for the card with card number '4560596484842'. */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region does Angola belong to and what is its population? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 380,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "Show the id and salary of Mark Young."
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 702,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
                }
            ],
            "example_quality": 0.7198733790198051,
            "example_similarity": 0.3582322892134267,
            "db_id": "world_1"
        },
        {
            "index": 719,
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of rooms of apartments with type code \"Studio\"? */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average room count of the apartments that have the \"Studio\" type code. */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average number of customers in all banks of Utah state. */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average expected life expectancy for countries in the region of Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1213,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "What is the average number of rooms of apartments with type code \"Studio\"?"
                },
                {
                    "ex_id": 1214,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "Find the average room count of the apartments that have the \"Studio\" type code."
                },
                {
                    "ex_id": 3013,
                    "db_id": "loan_1",
                    "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
                    "question": "Find the average number of customers in all banks of Utah state."
                }
            ],
            "example_quality": 0.7202629848904312,
            "example_similarity": 0.3583078215591196,
            "db_id": "world_1"
        },
        {
            "index": 720,
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of rooms of apartments with type code \"Studio\"? */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average room count of the apartments that have the \"Studio\" type code. */\nSELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"\n\n/* Answer the following: Find the average number of customers in all banks of Utah state. */\nSELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How long is the people\u2019s average life expectancy in Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1213,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "What is the average number of rooms of apartments with type code \"Studio\"?"
                },
                {
                    "ex_id": 1214,
                    "db_id": "apartment_rentals",
                    "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
                    "question": "Find the average room count of the apartments that have the \"Studio\" type code."
                },
                {
                    "ex_id": 3013,
                    "db_id": "loan_1",
                    "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
                    "question": "Find the average number of customers in all banks of Utah state."
                }
            ],
            "example_quality": 0.7206515085225277,
            "example_similarity": 0.3582789802618737,
            "db_id": "world_1"
        },
        {
            "index": 721,
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: Give the name of the lowest earning instructor in the Statistics department. */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the name of country that has the shortest life expectancy in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1361,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?"
                },
                {
                    "ex_id": 1362,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "Give the name of the lowest earning instructor in the Statistics department."
                },
                {
                    "ex_id": 1333,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "What is the name of the student who has the highest total credits in the History department."
                }
            ],
            "example_quality": 0.7210059315012628,
            "example_similarity": 0.35849535575982633,
            "db_id": "world_1"
        },
        {
            "index": 722,
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: Give the name of the lowest earning instructor in the Statistics department. */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the country in Asia with the lowest life expectancy. */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1361,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?"
                },
                {
                    "ex_id": 1362,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "Give the name of the lowest earning instructor in the Statistics department."
                },
                {
                    "ex_id": 1333,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "What is the name of the student who has the highest total credits in the History department."
                }
            ],
            "example_quality": 0.7213593726988933,
            "example_similarity": 0.3588518345134457,
            "db_id": "world_1"
        },
        {
            "index": 723,
            "question": "What is the total population and maximum GNP in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum price and score of wines produced by St. Helena appelation? */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: Give the maximum price and score for wines produced in the appelation St. Helena. */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: Find the maximum and total number of followers of all users. */\nSELECT max(followers) ,  sum(followers) FROM user_profiles\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and maximum GNP in Asia? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6574,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "What are the maximum price and score of wines produced by St. Helena appelation?"
                },
                {
                    "ex_id": 6575,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "Give the maximum price and score for wines produced in the appelation St. Helena."
                },
                {
                    "ex_id": 301,
                    "db_id": "twitter_1",
                    "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
                    "question": "Find the maximum and total number of followers of all users."
                }
            ],
            "example_quality": 0.721283725802583,
            "example_similarity": 0.3588929830473352,
            "db_id": "world_1"
        },
        {
            "index": 724,
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum price and score of wines produced by St. Helena appelation? */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: Give the maximum price and score for wines produced in the appelation St. Helena. */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: Find the maximum and total number of followers of all users. */\nSELECT max(followers) ,  sum(followers) FROM user_profiles\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Asia, and what is the largest GNP among them? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6574,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "What are the maximum price and score of wines produced by St. Helena appelation?"
                },
                {
                    "ex_id": 6575,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "Give the maximum price and score for wines produced in the appelation St. Helena."
                },
                {
                    "ex_id": 301,
                    "db_id": "twitter_1",
                    "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
                    "question": "Find the maximum and total number of followers of all users."
                }
            ],
            "example_quality": 0.7212082878755998,
            "example_similarity": 0.35867304539072026,
            "db_id": "world_1"
        },
        {
            "index": 725,
            "question": "What is the average life expectancy in African countries that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for flights from Los Angeles to Honolulu. */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average price for flights from LA to Honolulu? */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average life expectancy in African countries that are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 394,
                    "db_id": "flight_1",
                    "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                    "question": "What is the average price for flights from Los Angeles to Honolulu."
                },
                {
                    "ex_id": 395,
                    "db_id": "flight_1",
                    "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                    "question": "What is the average price for flights from LA to Honolulu?"
                },
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                }
            ],
            "example_quality": 0.72129996619581,
            "example_similarity": 0.3589355923734132,
            "db_id": "world_1"
        },
        {
            "index": 726,
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for flights from Los Angeles to Honolulu. */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average price for flights from LA to Honolulu? */\nSELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"\n\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the average life expectancy for countries in Africa which are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 394,
                    "db_id": "flight_1",
                    "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                    "question": "What is the average price for flights from Los Angeles to Honolulu."
                },
                {
                    "ex_id": 395,
                    "db_id": "flight_1",
                    "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                    "question": "What is the average price for flights from LA to Honolulu?"
                },
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                }
            ],
            "example_quality": 0.7213913919586643,
            "example_similarity": 0.35904129061342216,
            "db_id": "world_1"
        },
        {
            "index": 727,
            "question": "What is the total surface area of the continents Asia and Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total budgets of the Marketing or Finance department. */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: What is the sum of budgets of the Marketing and Finance departments? */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: Find the total account balance of each customer from Utah or Texas. */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the continents Asia and Europe? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1353,
                    "db_id": "college_2",
                    "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
                    "question": "Find the total budgets of the Marketing or Finance department."
                },
                {
                    "ex_id": 1354,
                    "db_id": "college_2",
                    "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
                    "question": "What is the sum of budgets of the Marketing and Finance departments?"
                },
                {
                    "ex_id": 3035,
                    "db_id": "loan_1",
                    "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
                    "question": "Find the total account balance of each customer from Utah or Texas."
                }
            ],
            "example_quality": 0.7217746225061764,
            "example_similarity": 0.35931669359642876,
            "db_id": "world_1"
        },
        {
            "index": 728,
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total budgets of the Marketing or Finance department. */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: What is the sum of budgets of the Marketing and Finance departments? */\nSELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'\n\n/* Answer the following: Find the total account balance of each customer from Utah or Texas. */\nSELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total surface area covered by countries in Asia or Europe. */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1353,
                    "db_id": "college_2",
                    "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
                    "question": "Find the total budgets of the Marketing or Finance department."
                },
                {
                    "ex_id": 1354,
                    "db_id": "college_2",
                    "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
                    "question": "What is the sum of budgets of the Marketing and Finance departments?"
                },
                {
                    "ex_id": 3035,
                    "db_id": "loan_1",
                    "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
                    "question": "Find the total account balance of each customer from Utah or Texas."
                }
            ],
            "example_quality": 0.7221568002225142,
            "example_similarity": 0.35940348705888847,
            "db_id": "world_1"
        },
        {
            "index": 729,
            "question": "How many people live in Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                },
                {
                    "ex_id": 2590,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "Find the total number of king beds available."
                },
                {
                    "ex_id": 2599,
                    "db_id": "inn_1",
                    "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
                    "question": "What is the total number of people who could stay in the modern rooms in this inn?"
                }
            ],
            "example_quality": 0.7225379294403159,
            "example_similarity": 0.35930893658346635,
            "db_id": "world_1"
        },
        {
            "index": 730,
            "question": "What is the total population of Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many king beds are there? */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: What is the total number of people who could stay in the modern rooms in this inn? */\nSELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population of Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2589,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "How many king beds are there?"
                },
                {
                    "ex_id": 2590,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "Find the total number of king beds available."
                },
                {
                    "ex_id": 2599,
                    "db_id": "inn_1",
                    "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
                    "question": "What is the total number of people who could stay in the modern rooms in this inn?"
                }
            ],
            "example_quality": 0.7229180144684798,
            "example_similarity": 0.35928999157762764,
            "db_id": "world_1"
        },
        {
            "index": 731,
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average and total capacity of dorms for the students with gender X. */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: What is the average and total capacity for all dorms who are of gender X? */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average GNP and total population in all nations whose government is US territory? */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5689,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "Find the average and total capacity of dorms for the students with gender X."
                },
                {
                    "ex_id": 5690,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "What is the average and total capacity for all dorms who are of gender X?"
                },
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                }
            ],
            "example_quality": 0.7229101535966648,
            "example_similarity": 0.3594330817244283,
            "db_id": "world_1"
        },
        {
            "index": 732,
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average and total capacity of dorms for the students with gender X. */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: What is the average and total capacity for all dorms who are of gender X? */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean GNP and total population of nations which are considered US territory. */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5689,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "Find the average and total capacity of dorms for the students with gender X."
                },
                {
                    "ex_id": 5690,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "What is the average and total capacity for all dorms who are of gender X?"
                },
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                }
            ],
            "example_quality": 0.7229023142026417,
            "example_similarity": 0.3593839271188053,
            "db_id": "world_1"
        },
        {
            "index": 733,
            "question": "How many unique languages are spoken in the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many unique languages are spoken in the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7232803465161443,
            "example_similarity": 0.3592241218188433,
            "db_id": "world_1"
        },
        {
            "index": 734,
            "question": "What is the number of distinct languages used around the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct languages used around the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.723657348768847,
            "example_similarity": 0.35893150645457295,
            "db_id": "world_1"
        },
        {
            "index": 735,
            "question": "How many type of governments are in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different courses offered by Physics department? */\nSELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n\n/* Answer the following: How many professors are teaching class with code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: How many professors teach a class with the code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many type of governments are in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1341,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
                    "question": "How many different courses offered by Physics department?"
                },
                {
                    "ex_id": 3176,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
                    "question": "How many professors are teaching class with code ACCT-211?"
                },
                {
                    "ex_id": 3177,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
                    "question": "How many professors teach a class with the code ACCT-211?"
                }
            ],
            "example_quality": 0.7240333251650799,
            "example_similarity": 0.35893238559847795,
            "db_id": "world_1"
        },
        {
            "index": 736,
            "question": "How many different forms of governments are there in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different courses offered by Physics department? */\nSELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n\n/* Answer the following: How many professors are teaching class with code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: How many professors teach a class with the code ACCT-211? */\nSELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many different forms of governments are there in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1341,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
                    "question": "How many different courses offered by Physics department?"
                },
                {
                    "ex_id": 3176,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
                    "question": "How many professors are teaching class with code ACCT-211?"
                },
                {
                    "ex_id": 3177,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
                    "question": "How many professors teach a class with the code ACCT-211?"
                }
            ],
            "example_quality": 0.724408279886323,
            "example_similarity": 0.3589178354820755,
            "db_id": "world_1"
        },
        {
            "index": 737,
            "question": "What is the total number of languages used in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border the mississippi river */\nSELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: How many Starbucks are there in Dallas Texas ? */\nSELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of languages used in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7527,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "how many states border the mississippi river"
                },
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 8212,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";",
                    "question": "How many Starbucks are there in Dallas Texas ?"
                }
            ],
            "example_quality": 0.7235966302610103,
            "example_similarity": 0.35867205521382006,
            "db_id": "world_1"
        },
        {
            "index": 738,
            "question": "How many languages are spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many languages are spoken in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.7228133888943962,
            "example_similarity": 0.3584920031753103,
            "db_id": "world_1"
        },
        {
            "index": 739,
            "question": "How many official languages does Afghanistan have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages does Afghanistan have? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                }
            ],
            "example_quality": 0.721964943322039,
            "example_similarity": 0.3583383922711131,
            "db_id": "world_1"
        },
        {
            "index": 740,
            "question": "How many official languages are spoken in Afghanistan?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages are spoken in Afghanistan? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                }
            ],
            "example_quality": 0.7211187908458234,
            "example_similarity": 0.35816432980012874,
            "db_id": "world_1"
        },
        {
            "index": 741,
            "question": "What is name of the country that speaks the largest number of languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations. */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is name of the country that speaks the largest number of languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2577,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
                },
                {
                    "ex_id": 2578,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which room has the largest number of reservations?"
                },
                {
                    "ex_id": 4682,
                    "db_id": "college_3",
                    "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which building does the instructor who teaches the most number of courses live in?"
                }
            ],
            "example_quality": 0.7212792243264634,
            "example_similarity": 0.3582042699610639,
            "db_id": "world_1"
        },
        {
            "index": 742,
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Return the hometown that is most common among gymnasts. */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which city does has most number of customers? */\nSELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the nation that uses the greatest amount of languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                },
                {
                    "ex_id": 1764,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Return the hometown that is most common among gymnasts."
                },
                {
                    "ex_id": 6689,
                    "db_id": "driving_school",
                    "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which city does has most number of customers?"
                }
            ],
            "example_quality": 0.7214392253718455,
            "example_similarity": 0.35800169646629443,
            "db_id": "world_1"
        },
        {
            "index": 743,
            "question": "Which continent has the most diverse languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the business which has the most number of categories */\nSELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;\n\n/* Answer the following: which neighbourhood has the most number of businesses in Madison */\nSELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;\n\n/* Answer the following: What are the first and last names of the instructors who teach the top 3 number of courses? */\nSELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent has the most diverse languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8244,
                    "db_id": "yelp",
                    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
                    "question": "Find the business which has the most number of categories"
                },
                {
                    "ex_id": 8235,
                    "db_id": "yelp",
                    "query": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
                    "question": "which neighbourhood has the most number of businesses in Madison"
                },
                {
                    "ex_id": 4680,
                    "db_id": "college_3",
                    "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the first and last names of the instructors who teach the top 3 number of courses?"
                }
            ],
            "example_quality": 0.7212848133363574,
            "example_similarity": 0.35804651833891865,
            "db_id": "world_1"
        },
        {
            "index": 744,
            "question": "Which continent speaks the most languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which neighbourhood has the most number of businesses in Madison */\nSELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;\n\n/* Answer the following: Find the business which has the most number of categories */\nSELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;\n\n/* Answer the following: Which organisation hired the most number of research staff? List the organisation id, type and detail. */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent speaks the most languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8235,
                    "db_id": "yelp",
                    "query": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
                    "question": "which neighbourhood has the most number of businesses in Madison"
                },
                {
                    "ex_id": 8244,
                    "db_id": "yelp",
                    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
                    "question": "Find the business which has the most number of categories"
                },
                {
                    "ex_id": 4361,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail."
                }
            ],
            "example_quality": 0.7211602997277877,
            "example_similarity": 0.3580730388489171,
            "db_id": "world_1"
        },
        {
            "index": 745,
            "question": "How many countries speak both English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many female students have milk or egg allergies? */\nSELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"\n\n/* Answer the following: How many students who are female are allergic to milk or eggs? */\nSELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"\n\n/* Answer the following: How many accounts does the customer with first name Art and last name Turcotte have? */\nSELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries speak both English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 510,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
                    "question": "How many female students have milk or egg allergies?"
                },
                {
                    "ex_id": 511,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
                    "question": "How many students who are female are allergic to milk or eggs?"
                },
                {
                    "ex_id": 676,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many accounts does the customer with first name Art and last name Turcotte have?"
                }
            ],
            "example_quality": 0.7205085974941157,
            "example_similarity": 0.35810450456745824,
            "db_id": "world_1"
        },
        {
            "index": 746,
            "question": "What is the number of nations that use English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border colorado and border new mexico */\nSELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of nations that use English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7495,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
                    "question": "how many states border colorado and border new mexico"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.7196352622173146,
            "example_similarity": 0.35786878969347635,
            "db_id": "world_1"
        },
        {
            "index": 747,
            "question": "What are the names of nations speak both English and French?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261. */\nSELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations speak both English and French? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1107,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "What are the names of countries that have both players with position forward and players with position defender?"
                },
                {
                    "ex_id": 1108,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position."
                },
                {
                    "ex_id": 3292,
                    "db_id": "college_1",
                    "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'",
                    "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261."
                }
            ],
            "example_quality": 0.7199423339462803,
            "example_similarity": 0.35776979823608074,
            "db_id": "world_1"
        },
        {
            "index": 748,
            "question": "Give the names of nations that speak both English and French.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of countries that have both players with position forward and players with position defender? */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261. */\nSELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of nations that speak both English and French. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1107,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "What are the names of countries that have both players with position forward and players with position defender?"
                },
                {
                    "ex_id": 1108,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position."
                },
                {
                    "ex_id": 3292,
                    "db_id": "college_1",
                    "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'",
                    "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261."
                }
            ],
            "example_quality": 0.7202485846278422,
            "example_similarity": 0.3576696000461754,
            "db_id": "world_1"
        },
        {
            "index": 749,
            "question": "What are the names of nations where both English and French are official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes? */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations where both English and French are official languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 968,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes."
                },
                {
                    "ex_id": 969,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?"
                },
                {
                    "ex_id": 5387,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
                    "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?"
                }
            ],
            "example_quality": 0.7201027251163928,
            "example_similarity": 0.3577430697559915,
            "db_id": "world_1"
        },
        {
            "index": 750,
            "question": "Give the names of countries with English and French as official languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes. */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes? */\nSELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'\n\n/* Answer the following: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries with English and French as official languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 968,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes."
                },
                {
                    "ex_id": 969,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
                    "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?"
                },
                {
                    "ex_id": 5387,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
                    "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?"
                }
            ],
            "example_quality": 0.7199572545636406,
            "example_similarity": 0.3577501194003572,
            "db_id": "world_1"
        },
        {
            "index": 751,
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Count the number of different official languages corresponding to countries that players who play Defender are from. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: How many distinct colleges are associated with players from the team with name \"Columbus Crew\". */\nSELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct continents where Chinese is spoken? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1081,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "How many distinct official languages are there among countries of players whose positions are defenders."
                },
                {
                    "ex_id": 1082,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "Count the number of different official languages corresponding to countries that players who play Defender are from."
                },
                {
                    "ex_id": 1087,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
                    "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\"."
                }
            ],
            "example_quality": 0.7201170984323974,
            "example_similarity": 0.35750478538451685,
            "db_id": "world_1"
        },
        {
            "index": 752,
            "question": "How many continents speak Chinese?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many instrument does the musician with last name \"Heilo\" use? */\nSELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: How many different instruments does the musician with the last name \"Heilo\" use? */\nSELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"\n\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many continents speak Chinese? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5215,
                    "db_id": "music_2",
                    "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
                    "question": "How many instrument does the musician with last name \"Heilo\" use?"
                },
                {
                    "ex_id": 5216,
                    "db_id": "music_2",
                    "query": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
                    "question": "How many different instruments does the musician with the last name \"Heilo\" use?"
                },
                {
                    "ex_id": 1081,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "How many distinct official languages are there among countries of players whose positions are defenders."
                }
            ],
            "example_quality": 0.7204183611561132,
            "example_similarity": 0.35740600827745167,
            "db_id": "world_1"
        },
        {
            "index": 753,
            "question": "What are the regions that use English or Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi river run */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the populations of states through which the mississippi runs */\nSELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the regions that use English or Dutch? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7271,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7286,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi river run"
                },
                {
                    "ex_id": 7287,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "what are the populations of states through which the mississippi runs"
                }
            ],
            "example_quality": 0.7195664858145463,
            "example_similarity": 0.3573740392536215,
            "db_id": "world_1"
        },
        {
            "index": 754,
            "question": "Which regions speak Dutch or English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision. */\nSELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Answer the following: How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges? */\nSELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Answer the following: Find the distinct ages of students who have secretary votes in the fall election cycle. */\nSELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which regions speak Dutch or English? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5023,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                    "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision."
                },
                {
                    "ex_id": 5024,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                    "question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?"
                },
                {
                    "ex_id": 5477,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
                    "question": "Find the distinct ages of students who have secretary votes in the fall election cycle."
                }
            ],
            "example_quality": 0.7193878426837809,
            "example_similarity": 0.3571115331597101,
            "db_id": "world_1"
        },
        {
            "index": 755,
            "question": "What are the countries where either English or Dutch is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which country does customer with first name as Carole and last name as Bernhard lived in? */\nSELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is the country in which the customer Carole Bernhard lived? */\nSELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is zip code of customer with first name as Carole and last name as Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries where either English or Dutch is the official language ? */\nSELECT ",
            "response": "t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6685,
                    "db_id": "driving_school",
                    "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?"
                },
                {
                    "ex_id": 6686,
                    "db_id": "driving_school",
                    "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "What is the country in which the customer Carole Bernhard lived?"
                },
                {
                    "ex_id": 6687,
                    "db_id": "driving_school",
                    "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "What is zip code of customer with first name as Carole and last name as Bernhard?"
                }
            ],
            "example_quality": 0.71861455488626,
            "example_similarity": 0.35708594884368416,
            "db_id": "world_1"
        },
        {
            "index": 756,
            "question": "Which countries have either English or Dutch as an official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: which rivers run through states that border the state with the capital atlanta */\nSELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have either English or Dutch as an official language? */\nSELECT ",
            "response": "* FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                },
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                },
                {
                    "ex_id": 7432,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
                    "question": "which rivers run through states that border the state with the capital atlanta"
                }
            ],
            "example_quality": 0.7177328974286015,
            "example_similarity": 0.3568855118155252,
            "db_id": "world_1"
        },
        {
            "index": 757,
            "question": "Which language is the most popular on the Asian continent?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which vocal type has the band mate with last name \"Heilo\" played the most? */\nSELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of vocals that the band member with the last name \"Heilo\" played the most? */\nSELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which vocal type has the band mate with first name \"Solveig\" played the most? */\nSELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular on the Asian continent? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5223,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type has the band mate with last name \"Heilo\" played the most?"
                },
                {
                    "ex_id": 5224,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?"
                },
                {
                    "ex_id": 5255,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?"
                }
            ],
            "example_quality": 0.7177147562166747,
            "example_similarity": 0.3568309147795147,
            "db_id": "world_1"
        },
        {
            "index": 758,
            "question": "What is the language that is used by the largest number of Asian nations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which vocal type has the band mate with last name \"Heilo\" played the most? */\nSELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of vocals that the band member with the last name \"Heilo\" played the most? */\nSELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which vocal type has the band mate with first name \"Solveig\" played the most? */\nSELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language that is used by the largest number of Asian nations? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5223,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type has the band mate with last name \"Heilo\" played the most?"
                },
                {
                    "ex_id": 5224,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?"
                },
                {
                    "ex_id": 5255,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?"
                }
            ],
            "example_quality": 0.7176966628707425,
            "example_similarity": 0.3566114494440222,
            "db_id": "world_1"
        },
        {
            "index": 759,
            "question": "Which languages are spoken by only one country in republic governments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which languages are spoken by only one country in republic governments? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                },
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                }
            ],
            "example_quality": 0.7168328297269054,
            "example_similarity": 0.35642462910854233,
            "db_id": "world_1"
        },
        {
            "index": 760,
            "question": "What languages are only used by a single country with a republic government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What languages are only used by a single country with a republic government? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                },
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                }
            ],
            "example_quality": 0.7159712698281838,
            "example_similarity": 0.35621083274647763,
            "db_id": "world_1"
        },
        {
            "index": 761,
            "question": "Find the city with the largest population that uses English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: What is the name and job title of the staff who was assigned the latest? */\nSELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the city with the largest population that uses English. */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8407,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in PVLDB with the most citations ."
                },
                {
                    "ex_id": 8408,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in VLDB conference with the most citations ."
                },
                {
                    "ex_id": 4730,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
                    "question": "What is the name and job title of the staff who was assigned the latest?"
                }
            ],
            "example_quality": 0.7159729337814847,
            "example_similarity": 0.35612572501654455,
            "db_id": "world_1"
        },
        {
            "index": 762,
            "question": "What is the most populace city that speaks English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the paper in PVLDB with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: return me the paper in VLDB conference with the most citations . */\nSELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;\n\n/* Answer the following: What is the name and job title of the staff who was assigned the latest? */\nSELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the most populace city that speaks English? */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8407,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in PVLDB with the most citations ."
                },
                {
                    "ex_id": 8408,
                    "db_id": "academic",
                    "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
                    "question": "return me the paper in VLDB conference with the most citations ."
                },
                {
                    "ex_id": 4730,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
                    "question": "What is the name and job title of the staff who was assigned the latest?"
                }
            ],
            "example_quality": 0.7159745933674542,
            "example_similarity": 0.355959719642021,
            "db_id": "world_1"
        },
        {
            "index": 763,
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the most expensive hardware product. */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: What is the name of the hardware product with the greatest price? */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the name, population and expected life length of asian country with the largest area? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4796,
                    "db_id": "department_store",
                    "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
                    "question": "Find the name of the most expensive hardware product."
                },
                {
                    "ex_id": 4797,
                    "db_id": "department_store",
                    "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
                    "question": "What is the name of the hardware product with the greatest price?"
                },
                {
                    "ex_id": 1333,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "What is the name of the student who has the highest total credits in the History department."
                }
            ],
            "example_quality": 0.7159649831209812,
            "example_similarity": 0.35588041830919953,
            "db_id": "world_1"
        },
        {
            "index": 764,
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the most expensive hardware product. */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: What is the name of the hardware product with the greatest price? */\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1\n\n/* Answer the following: What is the name of the student who has the highest total credits in the History department. */\nSELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, population, and life expectancy of the largest Asian country by land? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4796,
                    "db_id": "department_store",
                    "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
                    "question": "Find the name of the most expensive hardware product."
                },
                {
                    "ex_id": 4797,
                    "db_id": "department_store",
                    "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
                    "question": "What is the name of the hardware product with the greatest price?"
                },
                {
                    "ex_id": 1333,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
                    "question": "What is the name of the student who has the highest total credits in the History department."
                }
            ],
            "example_quality": 0.7159553980322216,
            "example_similarity": 0.3557821417164509,
            "db_id": "world_1"
        },
        {
            "index": 765,
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average bike availability in stations that are not located in Palo Alto? */\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n\n/* Answer the following: What is the average bike availablility for stations not in Palo Alto? */\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is average life expectancy in the countries where English is not the official language? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 150,
                    "db_id": "bike_1",
                    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
                    "question": "What is the average bike availability in stations that are not located in Palo Alto?"
                },
                {
                    "ex_id": 151,
                    "db_id": "bike_1",
                    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
                    "question": "What is the average bike availablility for stations not in Palo Alto?"
                },
                {
                    "ex_id": 299,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who do not have any tweet."
                }
            ],
            "example_quality": 0.7152153394806248,
            "example_similarity": 0.3559335901738676,
            "db_id": "world_1"
        },
        {
            "index": 766,
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average bike availability in stations that are not located in Palo Alto? */\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n\n/* Answer the following: What is the average bike availablility for stations not in Palo Alto? */\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean life expectancy of countries in which English is not the official language. */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 150,
                    "db_id": "bike_1",
                    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
                    "question": "What is the average bike availability in stations that are not located in Palo Alto?"
                },
                {
                    "ex_id": 151,
                    "db_id": "bike_1",
                    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
                    "question": "What is the average bike availablility for stations not in Palo Alto?"
                },
                {
                    "ex_id": 299,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who do not have any tweet."
                }
            ],
            "example_quality": 0.7144772131967867,
            "example_similarity": 0.35592480787495434,
            "db_id": "world_1"
        },
        {
            "index": 767,
            "question": "What is the total number of people living in the nations that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of enrollment of schools that do not have any goalie player? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Answer the following: What is the total number of students enrolled in schools without any goalies? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of people living in the nations that do not use English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5045,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of enrollment of schools that do not have any goalie player?"
                },
                {
                    "ex_id": 5046,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of students enrolled in schools without any goalies?"
                },
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                }
            ],
            "example_quality": 0.7137760023814667,
            "example_similarity": 0.35593631326685155,
            "db_id": "world_1"
        },
        {
            "index": 768,
            "question": "How many people live in countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of enrollment of schools that do not have any goalie player? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Answer the following: What is the total number of students enrolled in schools without any goalies? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in countries that do not speak English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5045,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of enrollment of schools that do not have any goalie player?"
                },
                {
                    "ex_id": 5046,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of students enrolled in schools without any goalies?"
                },
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                }
            ],
            "example_quality": 0.7130766176359783,
            "example_similarity": 0.35570946498641387,
            "db_id": "world_1"
        },
        {
            "index": 769,
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the title, phone and hire date of Nancy Edwards? */\nSELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language spoken in the country whose head of state is Beatrix? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                },
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                },
                {
                    "ex_id": 588,
                    "db_id": "store_1",
                    "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is the title, phone and hire date of Nancy Edwards?"
                }
            ],
            "example_quality": 0.7122780072531821,
            "example_similarity": 0.3559404058048393,
            "db_id": "world_1"
        },
        {
            "index": 770,
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of routes whose source and destination airports are in the United States. */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the id of the routes whose source and destination airports are in the United States? */\nSELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: What is the title, phone and hire date of Nancy Edwards? */\nSELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language used in the country the name of whose head of state is Beatrix. */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6878,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the id of routes whose source and destination airports are in the United States."
                },
                {
                    "ex_id": 6879,
                    "db_id": "flight_4",
                    "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "What is the id of the routes whose source and destination airports are in the United States?"
                },
                {
                    "ex_id": 588,
                    "db_id": "store_1",
                    "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is the title, phone and hire date of Nancy Edwards?"
                }
            ],
            "example_quality": 0.7114814711830685,
            "example_similarity": 0.3562258826489338,
            "db_id": "world_1"
        },
        {
            "index": 771,
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border the mississippi river */\nSELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );\n\n/* Answer the following: how many major cities are in states bordering nebraska */\nSELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );\n\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of unique official languages spoken in the countries that are founded before 1930? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7527,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
                    "question": "how many states border the mississippi river"
                },
                {
                    "ex_id": 7496,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );",
                    "question": "how many major cities are in states bordering nebraska"
                },
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                }
            ],
            "example_quality": 0.7107141423787987,
            "example_similarity": 0.3560085019765974,
            "db_id": "world_1"
        },
        {
            "index": 772,
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many Bars in \" Dallas \" have a rating above 3.5 ? */\nSELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";\n\n/* Answer the following: How many Bars in Dallas have a rating above 3.5 ? */\nSELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";\n\n/* Answer the following: What is the number of restaurant in Pittsburgh rated 4.5 */\nSELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: For the countries founded before 1930, what is the total number of distinct official languages? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8207,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
                    "question": "How many Bars in \" Dallas \" have a rating above 3.5 ?"
                },
                {
                    "ex_id": 8208,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
                    "question": "How many Bars in Dallas have a rating above 3.5 ?"
                },
                {
                    "ex_id": 8198,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";",
                    "question": "What is the number of restaurant in Pittsburgh rated 4.5"
                }
            ],
            "example_quality": 0.7104925988519901,
            "example_similarity": 0.35577050538371985,
            "db_id": "world_1"
        },
        {
            "index": 773,
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: Find names of all colleges whose enrollment is greater than that of all colleges in the FL state. */\nSELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries that have greater surface area than any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1491,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department."
                },
                {
                    "ex_id": 1492,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
                },
                {
                    "ex_id": 5043,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
                    "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state."
                }
            ],
            "example_quality": 0.710705415671069,
            "example_similarity": 0.35584928437632396,
            "db_id": "world_1"
        },
        {
            "index": 774,
            "question": "Which countries have greater area than that of any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: Find names of all colleges whose enrollment is greater than that of all colleges in the FL state. */\nSELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have greater area than that of any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1491,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department."
                },
                {
                    "ex_id": 1492,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
                },
                {
                    "ex_id": 5043,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
                    "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state."
                }
            ],
            "example_quality": 0.7109176825758868,
            "example_similarity": 0.35584560169001445,
            "db_id": "world_1"
        },
        {
            "index": 775,
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01. */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\n\n/* Answer the following: Which customers made orders between 2009-01-01 and 2010-01-01? Find their names. */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\n\n/* Answer the following: What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'? */\nSELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the African countries that have a  population less than any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6906,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
                    "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01."
                },
                {
                    "ex_id": 6907,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
                    "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names."
                },
                {
                    "ex_id": 3721,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'",
                    "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?"
                }
            ],
            "example_quality": 0.7100816285061717,
            "example_similarity": 0.35564867687479573,
            "db_id": "world_1"
        },
        {
            "index": 776,
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01. */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\n\n/* Answer the following: Which customers made orders between 2009-01-01 and 2010-01-01? Find their names. */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\n\n/* Answer the following: What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'? */\nSELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which African countries have a smaller population than that of any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6906,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
                    "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01."
                },
                {
                    "ex_id": 6907,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
                    "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names."
                },
                {
                    "ex_id": 3721,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'",
                    "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?"
                }
            ],
            "example_quality": 0.7092477292149868,
            "example_similarity": 0.35543940971377674,
            "db_id": "world_1"
        },
        {
            "index": 777,
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: Find names of all colleges whose enrollment is greater than that of all colleges in the FL state. */\nSELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which Asian countries have a population that is larger than any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1491,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department."
                },
                {
                    "ex_id": 1492,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
                },
                {
                    "ex_id": 5043,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
                    "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state."
                }
            ],
            "example_quality": 0.7091290539354785,
            "example_similarity": 0.3553605108387141,
            "db_id": "world_1"
        },
        {
            "index": 778,
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department. */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: What are the names of all instructors with a higher salary than any of the instructors in the Biology department? */\nSELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')\n\n/* Answer the following: Find names of all colleges whose enrollment is greater than that of all colleges in the FL state. */\nSELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the Asian countries which have a population larger than that of any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1491,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department."
                },
                {
                    "ex_id": 1492,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
                    "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
                },
                {
                    "ex_id": 5043,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
                    "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state."
                }
            ],
            "example_quality": 0.7090106837338095,
            "example_similarity": 0.3553662570062555,
            "db_id": "world_1"
        },
        {
            "index": 779,
            "question": "What are the country codes for countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of instructors who didn't each any courses in any Spring semester. */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: What are the names of instructors who didn't teach courses in the Spring? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')\n\n/* Answer the following: List the project details of the projects which did not hire any staff for a researcher role. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes for countries that do not speak English? */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1445,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "Find the names of instructors who didn't each any courses in any Spring semester."
                },
                {
                    "ex_id": 1446,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
                    "question": "What are the names of instructors who didn't teach courses in the Spring?"
                },
                {
                    "ex_id": 4339,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
                    "question": "List the project details of the projects which did not hire any staff for a researcher role."
                }
            ],
            "example_quality": 0.708284557562123,
            "example_similarity": 0.3552951835056056,
            "db_id": "world_1"
        },
        {
            "index": 780,
            "question": "Return the country codes for countries that do not speak English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country codes for countries that do not speak English. */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7078016016516182,
            "example_similarity": 0.355227807248216,
            "db_id": "world_1"
        },
        {
            "index": 781,
            "question": "What are the country codes of countries where people use languages other than English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of countries where people use languages other than English? */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7078933885630594,
            "example_similarity": 0.3553724346629838,
            "db_id": "world_1"
        },
        {
            "index": 782,
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the country codes for countries in which people speak langauges that are not English. */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7079849407253664,
            "example_similarity": 0.3552864289179275,
            "db_id": "world_1"
        },
        {
            "index": 783,
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: What are the first name and major of the students who are able to consume soy? */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: Find the name and flag of ships that are not steered by any captain with Midshipman rank. */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of the countries that do not speak English and whose government forms are not Republic? */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                },
                {
                    "ex_id": 537,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "What are the first name and major of the students who are able to consume soy?"
                },
                {
                    "ex_id": 6265,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank."
                }
            ],
            "example_quality": 0.7072661599378768,
            "example_similarity": 0.3554470699743138,
            "db_id": "world_1"
        },
        {
            "index": 784,
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries that do not speak English and do not have Republics for governments. */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                },
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                },
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                }
            ],
            "example_quality": 0.7065820965737872,
            "example_similarity": 0.3554897253555823,
            "db_id": "world_1"
        },
        {
            "index": 785,
            "question": "Which cities are in European countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and office of history professor who did not get a Ph.D. degree. */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: What are the first names and offices of history professors who don't have Ph.D.s? */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: Find the product names that are colored 'white' but do not have unit of measurement \"Handful\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which cities are in European countries where English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3328,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "Find the first name and office of history professor who did not get a Ph.D. degree."
                },
                {
                    "ex_id": 3329,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "What are the first names and offices of history professors who don't have Ph.D.s?"
                },
                {
                    "ex_id": 5589,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
                    "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\"."
                }
            ],
            "example_quality": 0.7061385156109212,
            "example_similarity": 0.355309614322139,
            "db_id": "world_1"
        },
        {
            "index": 786,
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and office of history professor who did not get a Ph.D. degree. */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: What are the first names and offices of history professors who don't have Ph.D.s? */\nSELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'\n\n/* Answer the following: Find the product names that are colored 'white' but do not have unit of measurement \"Handful\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of cities in Europe for which English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3328,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "Find the first name and office of history professor who did not get a Ph.D. degree."
                },
                {
                    "ex_id": 3329,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
                    "question": "What are the first names and offices of history professors who don't have Ph.D.s?"
                },
                {
                    "ex_id": 5589,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
                    "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\"."
                }
            ],
            "example_quality": 0.7056960633527953,
            "example_similarity": 0.3551757102963615,
            "db_id": "world_1"
        },
        {
            "index": 787,
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the clubs having \"Davis Steven\" as a member. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Answer the following: What are the names of the clubs that have \"Davis Steven\" as a member? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Answer the following: What is the name of the institution that \"Matthias Blume\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which unique cities are in Asian countries where Chinese is the official language ? */\nSELECT ",
            "response": "distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4311,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
                    "question": "List the clubs having \"Davis Steven\" as a member."
                },
                {
                    "ex_id": 4312,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
                    "question": "What are the names of the clubs that have \"Davis Steven\" as a member?"
                },
                {
                    "ex_id": 2871,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
                    "question": "What is the name of the institution that \"Matthias Blume\" belongs to?"
                }
            ],
            "example_quality": 0.7052439798281447,
            "example_similarity": 0.3550835529867701,
            "db_id": "world_1"
        },
        {
            "index": 788,
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the clubs having \"Davis Steven\" as a member. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Answer the following: What are the names of the clubs that have \"Davis Steven\" as a member? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Answer the following: What is the name of the institution that \"Matthias Blume\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the different names of cities that are in Asia and for which Chinese is the official language. */\nSELECT ",
            "response": "DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4311,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
                    "question": "List the clubs having \"Davis Steven\" as a member."
                },
                {
                    "ex_id": 4312,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
                    "question": "What are the names of the clubs that have \"Davis Steven\" as a member?"
                },
                {
                    "ex_id": 2871,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
                    "question": "What is the name of the institution that \"Matthias Blume\" belongs to?"
                }
            ],
            "example_quality": 0.7051651276924893,
            "example_similarity": 0.3550277503955573,
            "db_id": "world_1"
        },
        {
            "index": 789,
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, independence year, and surface area of the country with the smallest population? */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                },
                {
                    "ex_id": 6831,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "What is the name, city, and country of the airport with the lowest altitude?"
                },
                {
                    "ex_id": 3051,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
                    "question": "Find the name, account type, and account balance of the customer who has the highest credit score."
                }
            ],
            "example_quality": 0.70550863257018,
            "example_similarity": 0.35530202266556116,
            "db_id": "world_1"
        },
        {
            "index": 790,
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, city, and country of the airport that has the lowest altitude. */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: What is the name, city, and country of the airport with the lowest altitude? */\nSELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1\n\n/* Answer the following: Find the name, account type, and account balance of the customer who has the highest credit score. */\nSELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, year of independence, and surface area of the country that has the lowest population. */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6830,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "Find the name, city, and country of the airport that has the lowest altitude."
                },
                {
                    "ex_id": 6831,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",
                    "question": "What is the name, city, and country of the airport with the lowest altitude?"
                },
                {
                    "ex_id": 3051,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
                    "question": "Find the name, account type, and account balance of the customer who has the highest credit score."
                }
            ],
            "example_quality": 0.7058512678152691,
            "example_similarity": 0.3555956564688614,
            "db_id": "world_1"
        },
        {
            "index": 791,
            "question": "What are the population, name and leader of the country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, headquarter and founder of the manufacturer that has the highest revenue. */\nSELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population, name and leader of the country with the largest area? */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                },
                {
                    "ex_id": 755,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "Return the name, location, and seating of the track that was opened in the most recent year."
                },
                {
                    "ex_id": 5297,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
                    "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue."
                }
            ],
            "example_quality": 0.7062231372617732,
            "example_similarity": 0.3557004033487369,
            "db_id": "world_1"
        },
        {
            "index": 792,
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Return the name, location, and seating of the track that was opened in the most recent year. */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Answer the following: Find the name, headquarter and founder of the manufacturer that has the highest revenue. */\nSELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, population, and head of state for the country that has the largest area. */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                },
                {
                    "ex_id": 755,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "Return the name, location, and seating of the track that was opened in the most recent year."
                },
                {
                    "ex_id": 5297,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
                    "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue."
                }
            ],
            "example_quality": 0.7065940676440184,
            "example_similarity": 0.35586193865213045,
            "db_id": "world_1"
        },
        {
            "index": 793,
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of playlist which has number of tracks greater than 100. */\nSELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n\n/* Answer the following: What are the names of all playlists that have more than 100 tracks? */\nSELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n\n/* Answer the following: Show the names and heights of buildings with at least two institutions founded after 1880. */\nSELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 638,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
                    "question": "List the name of playlist which has number of tracks greater than 100."
                },
                {
                    "ex_id": 639,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
                    "question": "What are the names of all playlists that have more than 100 tracks?"
                },
                {
                    "ex_id": 1924,
                    "db_id": "protein_institute",
                    "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
                    "question": "Show the names and heights of buildings with at least two institutions founded after 1880."
                }
            ],
            "example_quality": 0.7063841524248873,
            "example_similarity": 0.3558836593092565,
            "db_id": "world_1"
        },
        {
            "index": 794,
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List roles that have more than one employee. List the role description and number of employees. */\nSELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;\n\n/* Answer the following: List the name of playlist which has number of tracks greater than 100. */\nSELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n\n/* Answer the following: What are the names of all playlists that have more than 100 tracks? */\nSELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2111,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
                    "question": "List roles that have more than one employee. List the role description and number of employees."
                },
                {
                    "ex_id": 638,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
                    "question": "List the name of playlist which has number of tracks greater than 100."
                },
                {
                    "ex_id": 639,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
                    "question": "What are the names of all playlists that have more than 100 tracks?"
                }
            ],
            "example_quality": 0.7060815456333874,
            "example_similarity": 0.35590523640460486,
            "db_id": "world_1"
        },
        {
            "index": 795,
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students whose age is older than the average age for each gender. */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: How many students are older than average for each gender? */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: How many accounts have a savings balance above the average savings balance? */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the number of cities in each district whose population is greater than the average population of cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5735,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "Find the number of students whose age is older than the average age for each gender."
                },
                {
                    "ex_id": 5736,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "How many students are older than average for each gender?"
                },
                {
                    "ex_id": 1785,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "How many accounts have a savings balance above the average savings balance?"
                }
            ],
            "example_quality": 0.7062470368449473,
            "example_similarity": 0.35596896020354957,
            "db_id": "world_1"
        },
        {
            "index": 796,
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students whose age is older than the average age for each gender. */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: How many students are older than average for each gender? */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Answer the following: Find the count of universities whose campus fee is greater than the average campus fee. */\nSELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many cities in each district have a population that is above the average population across all cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5735,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "Find the number of students whose age is older than the average age for each gender."
                },
                {
                    "ex_id": 5736,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "How many students are older than average for each gender?"
                },
                {
                    "ex_id": 2341,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
                    "question": "Find the count of universities whose campus fee is greater than the average campus fee."
                }
            ],
            "example_quality": 0.7064121122494429,
            "example_similarity": 0.35589293488005164,
            "db_id": "world_1"
        },
        {
            "index": 797,
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: What are the positions of players whose average number of points scored by that position is larger than 20? */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: For each account type, find the average account balance of customers with credit score lower than 50. */\nSELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the government form name and total population for each government form whose average life expectancy is longer than 72. */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3364,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "List the position of players with average number of points scored by players of that position bigger than 20."
                },
                {
                    "ex_id": 3365,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
                },
                {
                    "ex_id": 3057,
                    "db_id": "loan_1",
                    "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
                    "question": "For each account type, find the average account balance of customers with credit score lower than 50."
                }
            ],
            "example_quality": 0.7060924494572518,
            "example_similarity": 0.35600404091463683,
            "db_id": "world_1"
        },
        {
            "index": 798,
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: What are the positions of players whose average number of points scored by that position is larger than 20? */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: For each account type, find the average account balance of customers with credit score lower than 50. */\nSELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3364,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "List the position of players with average number of points scored by players of that position bigger than 20."
                },
                {
                    "ex_id": 3365,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
                },
                {
                    "ex_id": 3057,
                    "db_id": "loan_1",
                    "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
                    "question": "For each account type, find the average account balance of customers with credit score lower than 50."
                }
            ],
            "example_quality": 0.7057735878249408,
            "example_similarity": 0.3560796862864468,
            "db_id": "world_1"
        },
        {
            "index": 799,
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: What are the positions of players whose average number of points scored by that position is larger than 20? */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: For each account type, find the average account balance of customers with credit score lower than 50. */\nSELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3364,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "List the position of players with average number of points scored by players of that position bigger than 20."
                },
                {
                    "ex_id": 3365,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
                },
                {
                    "ex_id": 3057,
                    "db_id": "loan_1",
                    "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
                    "question": "For each account type, find the average account balance of customers with credit score lower than 50."
                }
            ],
            "example_quality": 0.7052347962342438,
            "example_similarity": 0.3561224437893463,
            "db_id": "world_1"
        },
        {
            "index": 800,
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the position of players with average number of points scored by players of that position bigger than 20. */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: What are the positions of players whose average number of points scored by that position is larger than 20? */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: For each account type, find the average account balance of customers with credit score lower than 50. */\nSELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3364,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "List the position of players with average number of points scored by players of that position bigger than 20."
                },
                {
                    "ex_id": 3365,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
                },
                {
                    "ex_id": 3057,
                    "db_id": "loan_1",
                    "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
                    "question": "For each account type, find the average account balance of customers with credit score lower than 50."
                }
            ],
            "example_quality": 0.7046973516225236,
            "example_similarity": 0.35610312963742224,
            "db_id": "world_1"
        },
        {
            "index": 801,
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names and areas of countries with the top 5 largest area? */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                },
                {
                    "ex_id": 189,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids of the trips that lasted the longest and how long did they last?"
                },
                {
                    "ex_id": 1636,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
                    "question": "Show the name and opening year for three churches that opened most recently."
                }
            ],
            "example_quality": 0.7050660190986502,
            "example_similarity": 0.35628729949855625,
            "db_id": "world_1"
        },
        {
            "index": 802,
            "question": "Return the names and surface areas of the 5 largest countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names and surface areas of the 5 largest countries. */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                },
                {
                    "ex_id": 189,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids of the trips that lasted the longest and how long did they last?"
                },
                {
                    "ex_id": 1636,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
                    "question": "Show the name and opening year for three churches that opened most recently."
                }
            ],
            "example_quality": 0.7054337672045122,
            "example_similarity": 0.35630789765073245,
            "db_id": "world_1"
        },
        {
            "index": 803,
            "question": "What are names of countries with the top 3 largest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are names of countries with the top 3 largest population? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7058005993748678,
            "example_similarity": 0.3562444586213656,
            "db_id": "world_1"
        },
        {
            "index": 804,
            "question": "Return the names of the 3 most populated countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 most populated countries. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7061665190273866,
            "example_similarity": 0.3563023358839979,
            "db_id": "world_1"
        },
        {
            "index": 805,
            "question": "What are the names of the nations with the 3 lowest populations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the nations with the 3 lowest populations? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                },
                {
                    "ex_id": 326,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Find the name of the product that has the smallest capacity."
                },
                {
                    "ex_id": 327,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Which catalog content has the smallest capacity? Return the catalog entry name."
                }
            ],
            "example_quality": 0.7065315295627563,
            "example_similarity": 0.3562792971500969,
            "db_id": "world_1"
        },
        {
            "index": 806,
            "question": "Return the names of the 3 countries with the fewest people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Answer the following: Which catalog content has the smallest capacity? Return the catalog entry name. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 countries with the fewest people. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                },
                {
                    "ex_id": 326,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Find the name of the product that has the smallest capacity."
                },
                {
                    "ex_id": 327,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Which catalog content has the smallest capacity? Return the catalog entry name."
                }
            ],
            "example_quality": 0.7068956343647878,
            "example_similarity": 0.35634085540777416,
            "db_id": "world_1"
        },
        {
            "index": 807,
            "question": "how many countries are in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: how many countries are in Asia? */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.707258836800519,
            "example_similarity": 0.35667793861466285,
            "db_id": "world_1"
        },
        {
            "index": 808,
            "question": "Count the number of countries in Asia.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries in Asia. */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                }
            ],
            "example_quality": 0.7076211402203203,
            "example_similarity": 0.3564501807359932,
            "db_id": "world_1"
        },
        {
            "index": 809,
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all actors who were born in \" New York City \" in 1984 */\nSELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;\n\n/* Answer the following: What was the budget of the movie Juno from 2007 ? */\nSELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";\n\n/* Answer the following: which states have a major city named austin */\nSELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the countries that are in the continent of Europe and have a population of 80000? */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8469,
                    "db_id": "imdb",
                    "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;",
                    "question": "Find all actors who were born in \" New York City \" in 1984"
                },
                {
                    "ex_id": 8462,
                    "db_id": "imdb",
                    "query": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";",
                    "question": "What was the budget of the movie Juno from 2007 ?"
                },
                {
                    "ex_id": 7454,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;",
                    "question": "which states have a major city named austin"
                }
            ],
            "example_quality": 0.7077380458593531,
            "example_similarity": 0.35627138639089995,
            "db_id": "world_1"
        },
        {
            "index": 810,
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all actors who were born in \" New York City \" in 1984 */\nSELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;\n\n/* Answer the following: What was the budget of the movie Juno from 2007 ? */\nSELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";\n\n/* Answer the following: which states have a major city named austin */\nSELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries that are in Europe and have a population equal to 80000. */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8469,
                    "db_id": "imdb",
                    "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;",
                    "question": "Find all actors who were born in \" New York City \" in 1984"
                },
                {
                    "ex_id": 8462,
                    "db_id": "imdb",
                    "query": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";",
                    "question": "What was the budget of the movie Juno from 2007 ?"
                },
                {
                    "ex_id": 7454,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;",
                    "question": "which states have a major city named austin"
                }
            ],
            "example_quality": 0.707854662842487,
            "example_similarity": 0.3560679789844465,
            "db_id": "world_1"
        },
        {
            "index": 811,
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average and total capacity of dorms for the students with gender X. */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: What is the average and total capacity for all dorms who are of gender X? */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: Show the average price range of hotels that have 5 star ratings and allow pets. */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5689,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "Find the average and total capacity of dorms for the students with gender X."
                },
                {
                    "ex_id": 5690,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "What is the average and total capacity for all dorms who are of gender X?"
                },
                {
                    "ex_id": 5898,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
                    "question": "Show the average price range of hotels that have 5 star ratings and allow pets."
                }
            ],
            "example_quality": 0.7073205222800014,
            "example_similarity": 0.35608398347281045,
            "db_id": "world_1"
        },
        {
            "index": 812,
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average and total capacity of dorms for the students with gender X. */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: What is the average and total capacity for all dorms who are of gender X? */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: Show the average price range of hotels that have 5 star ratings and allow pets. */\nSELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5689,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "Find the average and total capacity of dorms for the students with gender X."
                },
                {
                    "ex_id": 5690,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "What is the average and total capacity for all dorms who are of gender X?"
                },
                {
                    "ex_id": 5898,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
                    "question": "Show the average price range of hotels that have 5 star ratings and allow pets."
                }
            ],
            "example_quality": 0.7067876973346647,
            "example_similarity": 0.35603629520635516,
            "db_id": "world_1"
        },
        {
            "index": 813,
            "question": "What are the cities whose population is between 160000 and 900000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened. */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: What are the years of opening for tracks with seating between 4000 and 5000? */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: the names of models that launched between 2002 and 2004. */\nSELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the cities whose population is between 160000 and 900000? */\nSELECT ",
            "response": "name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 778,
                    "db_id": "race_track",
                    "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
                    "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened."
                },
                {
                    "ex_id": 779,
                    "db_id": "race_track",
                    "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
                    "question": "What are the years of opening for tracks with seating between 4000 and 5000?"
                },
                {
                    "ex_id": 1024,
                    "db_id": "phone_1",
                    "query": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
                    "question": "the names of models that launched between 2002 and 2004."
                }
            ],
            "example_quality": 0.7071483520734906,
            "example_similarity": 0.3560872558767796,
            "db_id": "world_1"
        },
        {
            "index": 814,
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened. */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: What are the years of opening for tracks with seating between 4000 and 5000? */\nSELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000\n\n/* Answer the following: the names of models that launched between 2002 and 2004. */\nSELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of cities that have a population between 160000 and 900000 . */\nSELECT ",
            "response": "name from city where population between 160000 and 900000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 778,
                    "db_id": "race_track",
                    "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
                    "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened."
                },
                {
                    "ex_id": 779,
                    "db_id": "race_track",
                    "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
                    "question": "What are the years of opening for tracks with seating between 4000 and 5000?"
                },
                {
                    "ex_id": 1024,
                    "db_id": "phone_1",
                    "query": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
                    "question": "the names of models that launched between 2002 and 2004."
                }
            ],
            "example_quality": 0.7066891198637361,
            "example_similarity": 0.3562200433329638,
            "db_id": "world_1"
        },
        {
            "index": 815,
            "question": "Which language is spoken by the largest number of countries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is spoken by the largest number of countries? */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.70704901051421,
            "example_similarity": 0.356083697315642,
            "db_id": "world_1"
        },
        {
            "index": 816,
            "question": "Give the language that is spoken in the most countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the language that is spoken in the most countries. */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7074080190797563,
            "example_similarity": 0.35597922383036956,
            "db_id": "world_1"
        },
        {
            "index": 817,
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and revenue of the company that earns the highest revenue in each city. */\nSELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter\n\n/* Answer the following: What are the names and revenues of the companies with the highest revenues in each headquarter city? */\nSELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter\n\n/* Answer the following: display the department ID, full name (first and last name), salary for those employees who is highest salary in every department. */\nSELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language spoken by the largest percentage of people in each country? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5309,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
                    "question": "Find the name and revenue of the company that earns the highest revenue in each city."
                },
                {
                    "ex_id": 5310,
                    "db_id": "manufactory_1",
                    "query": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
                    "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?"
                },
                {
                    "ex_id": 3516,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
                    "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department."
                }
            ],
            "example_quality": 0.7071716132495269,
            "example_similarity": 0.3559268398409638,
            "db_id": "world_1"
        },
        {
            "index": 818,
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Select the name of each manufacturer along with the name and price of its most expensive product. */\nSELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: For each manufacturer name, what are the names and prices of their most expensive product? */\nSELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5349,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Select the name of each manufacturer along with the name and price of its most expensive product."
                },
                {
                    "ex_id": 5350,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "For each manufacturer name, what are the names and prices of their most expensive product?"
                },
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                }
            ],
            "example_quality": 0.706442949908146,
            "example_similarity": 0.35599227784629894,
            "db_id": "world_1"
        },
        {
            "index": 819,
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers run through the states bordering colorado */\nSELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7514,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
                    "question": "how many rivers run through the states bordering colorado"
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                }
            ],
            "example_quality": 0.7057210382310543,
            "example_similarity": 0.3558370549604054,
            "db_id": "world_1"
        },
        {
            "index": 820,
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many buttercup kitchen are there in san francisco ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";\n\n/* Answer the following: how many french restaurants are there in palo alto ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";\n\n/* Answer the following: how many french restaurant are there in palo alto ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8535,
                    "db_id": "restaurants",
                    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";",
                    "question": "how many buttercup kitchen are there in san francisco ?"
                },
                {
                    "ex_id": 8566,
                    "db_id": "restaurants",
                    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
                    "question": "how many french restaurants are there in palo alto ?"
                },
                {
                    "ex_id": 8567,
                    "db_id": "restaurants",
                    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
                    "question": "how many french restaurant are there in palo alto ?"
                }
            ],
            "example_quality": 0.7049554530337854,
            "example_similarity": 0.35543845551197367,
            "db_id": "world_1"
        },
        {
            "index": 821,
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name of female (sex is F) students in the descending order of age. */\nSELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC\n\n/* Answer the following: What are the last names of female students, ordered by age descending? */\nSELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC\n\n/* Answer the following: Find the name of players whose card is yes in the descending order of training hours. */\nSELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4666,
                    "db_id": "college_3",
                    "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
                    "question": "Find the last name of female (sex is F) students in the descending order of age."
                },
                {
                    "ex_id": 4667,
                    "db_id": "college_3",
                    "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
                    "question": "What are the last names of female students, ordered by age descending?"
                },
                {
                    "ex_id": 4981,
                    "db_id": "soccer_2",
                    "query": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
                    "question": "Find the name of players whose card is yes in the descending order of training hours."
                }
            ],
            "example_quality": 0.7046046081028134,
            "example_similarity": 0.3554803590617049,
            "db_id": "world_1"
        },
        {
            "index": 822,
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Eduardo Martins is a customer at which company? */\nSELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 574,
                    "db_id": "store_1",
                    "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                    "question": "Eduardo Martins is a customer at which company?"
                },
                {
                    "ex_id": 582,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "What country does Roberto Almeida live?"
                },
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                }
            ],
            "example_quality": 0.7040505087597406,
            "example_similarity": 0.3554112132890466,
            "db_id": "world_1"
        },
        {
            "index": 823,
            "question": "How many conductors are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many conductors are there? */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.70441010716951,
            "example_similarity": 0.35582622967261973,
            "db_id": "orchestra"
        },
        {
            "index": 824,
            "question": "Count the number of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of conductors. */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7047688327676053,
            "example_similarity": 0.3558724835127493,
            "db_id": "orchestra"
        },
        {
            "index": 825,
            "question": "List the names of conductors in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Answer the following: What is the list of school locations sorted in ascending order of school enrollment? */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of conductors in ascending order of age. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                },
                {
                    "ex_id": 4864,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "What is the list of school locations sorted in ascending order of school enrollment?"
                }
            ],
            "example_quality": 0.705126688727887,
            "example_similarity": 0.3564343889199392,
            "db_id": "orchestra"
        },
        {
            "index": 826,
            "question": "What are the names of conductors, ordered by age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: order all gas station locations by the opening year. */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, ordered by age? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                },
                {
                    "ex_id": 1049,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
                    "question": "List all the model names sorted by their launch year."
                },
                {
                    "ex_id": 2034,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
                    "question": "order all gas station locations by the opening year."
                }
            ],
            "example_quality": 0.7053323464897177,
            "example_similarity": 0.35637378136558046,
            "db_id": "orchestra"
        },
        {
            "index": 827,
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors whose nationalities are not \"USA\"? */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7056886556233455,
            "example_similarity": 0.35667036831288995,
            "db_id": "orchestra"
        },
        {
            "index": 828,
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the names of conductors that do not have the nationality \"USA\". */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7060441041068921,
            "example_similarity": 0.3567656698691081,
            "db_id": "orchestra"
        },
        {
            "index": 829,
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: List all church names in descending order of opening date. */\nSELECT name FROM church ORDER BY open_date DESC\n\n/* Answer the following: List the total points of gymnasts in descending order of floor exercise points. */\nSELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies of orchestras in descending order of years in which they were founded? */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1022,
                    "db_id": "university_basketball",
                    "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                    "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order."
                },
                {
                    "ex_id": 1632,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church ORDER BY open_date DESC",
                    "question": "List all church names in descending order of opening date."
                },
                {
                    "ex_id": 1741,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
                    "question": "List the total points of gymnasts in descending order of floor exercise points."
                }
            ],
            "example_quality": 0.7063986950548935,
            "example_similarity": 0.35677189760554795,
            "db_id": "orchestra"
        },
        {
            "index": 830,
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: List all church names in descending order of opening date. */\nSELECT name FROM church ORDER BY open_date DESC\n\n/* Answer the following: List the total points of gymnasts in descending order of floor exercise points. */\nSELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the record companies of orchestras, sorted descending by the years in which they were founded. */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1022,
                    "db_id": "university_basketball",
                    "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                    "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order."
                },
                {
                    "ex_id": 1632,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church ORDER BY open_date DESC",
                    "question": "List all church names in descending order of opening date."
                },
                {
                    "ex_id": 1741,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
                    "question": "List the total points of gymnasts in descending order of floor exercise points."
                }
            ],
            "example_quality": 0.7067524315668755,
            "example_similarity": 0.3567738795908105,
            "db_id": "orchestra"
        },
        {
            "index": 831,
            "question": "What is the average attendance of shows?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the average attendance of shows? */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.7071053167274449,
            "example_similarity": 0.35708059575454604,
            "db_id": "orchestra"
        },
        {
            "index": 832,
            "question": "Return the average attendance across all shows.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the average attendance across all shows. */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.7074573536063783,
            "example_similarity": 0.3570759010519259,
            "db_id": "orchestra"
        },
        {
            "index": 833,
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum sales of the companies whose industries are not \"Banking\". */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: What is the maximum level of managers in countries that are not \"Australia\"? */\nSELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the maximum and minimum share of performances whose type is not \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4554,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\"."
                },
                {
                    "ex_id": 4555,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry."
                },
                {
                    "ex_id": 5636,
                    "db_id": "railway",
                    "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"",
                    "question": "What is the maximum level of managers in countries that are not \"Australia\"?"
                }
            ],
            "example_quality": 0.7076804940382234,
            "example_similarity": 0.3574586603828846,
            "db_id": "orchestra"
        },
        {
            "index": 834,
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum sales of the companies whose industries are not \"Banking\". */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: What is the maximum level of managers in countries that are not \"Australia\"? */\nSELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the maximum and minimum shares for performances that do not have the type \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4554,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\"."
                },
                {
                    "ex_id": 4555,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry."
                },
                {
                    "ex_id": 5636,
                    "db_id": "railway",
                    "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"",
                    "question": "What is the maximum level of managers in countries that are not \"Australia\"?"
                }
            ],
            "example_quality": 0.7079030993611192,
            "example_similarity": 0.3576395652665182,
            "db_id": "orchestra"
        },
        {
            "index": 835,
            "question": "How many different nationalities do conductors have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many different nationalities do conductors have? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7082529160085909,
            "example_similarity": 0.3577716720361975,
            "db_id": "orchestra"
        },
        {
            "index": 836,
            "question": "Count the number of different nationalities of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of different nationalities of conductors. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7086018957741309,
            "example_similarity": 0.35773927509678555,
            "db_id": "orchestra"
        },
        {
            "index": 837,
            "question": "List names of conductors in descending order of years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: List all church names in descending order of opening date. */\nSELECT name FROM church ORDER BY open_date DESC\n\n/* Answer the following: List the total points of gymnasts in descending order of floor exercise points. */\nSELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List names of conductors in descending order of years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1022,
                    "db_id": "university_basketball",
                    "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                    "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order."
                },
                {
                    "ex_id": 1632,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church ORDER BY open_date DESC",
                    "question": "List all church names in descending order of opening date."
                },
                {
                    "ex_id": 1741,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
                    "question": "List the total points of gymnasts in descending order of floor exercise points."
                }
            ],
            "example_quality": 0.7089500416573159,
            "example_similarity": 0.3580552642809259,
            "db_id": "orchestra"
        },
        {
            "index": 838,
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List names of all teams in the basketball competition, ordered by all home scores in descending order. */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: List all church names in descending order of opening date. */\nSELECT name FROM church ORDER BY open_date DESC\n\n/* Answer the following: List the total points of gymnasts in descending order of floor exercise points. */\nSELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, sorted descending by the number of years they have worked? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1022,
                    "db_id": "university_basketball",
                    "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                    "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order."
                },
                {
                    "ex_id": 1632,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church ORDER BY open_date DESC",
                    "question": "List all church names in descending order of opening date."
                },
                {
                    "ex_id": 1741,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
                    "question": "List the total points of gymnasts in descending order of floor exercise points."
                }
            ],
            "example_quality": 0.709297356643405,
            "example_similarity": 0.35791274092218395,
            "db_id": "orchestra"
        },
        {
            "index": 839,
            "question": "List the name of the conductor with the most years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the name of the conductor with the most years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7096438437034248,
            "example_similarity": 0.35803444809945983,
            "db_id": "orchestra"
        },
        {
            "index": 840,
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has worked the greatest number of years? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.709989505794254,
            "example_similarity": 0.35807779333320383,
            "db_id": "orchestra"
        },
        {
            "index": 841,
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors and the orchestras they have conducted. */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7103343458587079,
            "example_similarity": 0.35828079203638996,
            "db_id": "orchestra"
        },
        {
            "index": 842,
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors as well as the corresonding orchestras that they have conducted? */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7106783668256216,
            "example_similarity": 0.35820706065643226,
            "db_id": "orchestra"
        },
        {
            "index": 843,
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the authors who have submissions to more than one workshop. */\nSELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\n\n/* Answer the following: Which authors have submitted to more than one workshop? */\nSELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\n\n/* Answer the following: papers with more than 10 citations */\nSELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors that have conducted more than one orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5839,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                    "question": "Show the authors who have submissions to more than one workshop."
                },
                {
                    "ex_id": 5840,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                    "question": "Which authors have submitted to more than one workshop?"
                },
                {
                    "ex_id": 8089,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;",
                    "question": "papers with more than 10 citations"
                }
            ],
            "example_quality": 0.7105645130714192,
            "example_similarity": 0.358249562301813,
            "db_id": "orchestra"
        },
        {
            "index": 844,
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: List the name of staff who has been assigned multiple jobs. */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted at more than one orchestra? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                },
                {
                    "ex_id": 4762,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                    "question": "List the name of staff who has been assigned multiple jobs."
                },
                {
                    "ex_id": 4763,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                    "question": "What are the names of staff who have been assigned multiple jobs?"
                }
            ],
            "example_quality": 0.7109074461128038,
            "example_similarity": 0.3583342556450244,
            "db_id": "orchestra"
        },
        {
            "index": 845,
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is detail of the student who registered the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the details of the student who registered for the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of route that has the highest number of deliveries. */\nSELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the name of the conductor that has conducted the most number of orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 78,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is detail of the student who registered the most number of courses?"
                },
                {
                    "ex_id": 79,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the details of the student who registered for the most number of courses?"
                },
                {
                    "ex_id": 2857,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of route that has the highest number of deliveries."
                }
            ],
            "example_quality": 0.7111509481489622,
            "example_similarity": 0.3584409996602764,
            "db_id": "orchestra"
        },
        {
            "index": 846,
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer who has the most policies listed? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which customer uses the most policies? Give me the customer name. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has conducted the most orchestras? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 910,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the customer who has the most policies listed?"
                },
                {
                    "ex_id": 911,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer uses the most policies? Give me the customer name."
                },
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.7113938745301889,
            "example_similarity": 0.3587056709859457,
            "db_id": "orchestra"
        },
        {
            "index": 847,
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds? */\nSELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\n\n/* Answer the following: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds? */\nSELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\n\n/* Answer the following: List the name and country of origin for all singers who have produced songs with rating above 9. */\nSELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the name of the conductor that has conducted orchestras founded after 2008. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2164,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
                    "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?"
                },
                {
                    "ex_id": 2165,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
                    "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?"
                },
                {
                    "ex_id": 3538,
                    "db_id": "music_1",
                    "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
                    "question": "List the name and country of origin for all singers who have produced songs with rating above 9."
                }
            ],
            "example_quality": 0.7112010713625827,
            "example_similarity": 0.3585666484668069,
            "db_id": "orchestra"
        },
        {
            "index": 848,
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds? */\nSELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\n\n/* Answer the following: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds? */\nSELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\n\n/* Answer the following: List the name and country of origin for all singers who have produced songs with rating above 9. */\nSELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted orchestras founded after the year 2008? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2164,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
                    "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?"
                },
                {
                    "ex_id": 2165,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
                    "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?"
                },
                {
                    "ex_id": 3538,
                    "db_id": "music_1",
                    "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
                    "question": "List the name and country of origin for all singers who have produced songs with rating above 9."
                }
            ],
            "example_quality": 0.7110087229194285,
            "example_similarity": 0.3585680923638089,
            "db_id": "orchestra"
        },
        {
            "index": 849,
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the different record companies and the corresponding number of orchestras. */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7113491131162255,
            "example_similarity": 0.3585103252462116,
            "db_id": "orchestra"
        },
        {
            "index": 850,
            "question": "How many orchestras does each record company manage?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many orchestras does each record company manage? */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7116887023949122,
            "example_similarity": 0.3583500392241311,
            "db_id": "orchestra"
        },
        {
            "index": 851,
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the different statuses, ordered by the number of cities that have each. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Answer the following: Return the different statuses of cities, ascending by frequency. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Answer the following: Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order. */\nSELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the record formats of orchestras in ascending order of count. */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 45,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
                    "question": "Please show the different statuses, ordered by the number of cities that have each."
                },
                {
                    "ex_id": 46,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
                    "question": "Return the different statuses of cities, ascending by frequency."
                },
                {
                    "ex_id": 1255,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
                    "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order."
                }
            ],
            "example_quality": 0.711911993463437,
            "example_similarity": 0.35832489995564104,
            "db_id": "orchestra"
        },
        {
            "index": 852,
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the industries of companies in descending order of the number of companies. */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Answer the following: Sort all the industries in descending order of the count of companies in each industry */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Answer the following: Please show the software platforms of devices in descending order of the count. */\nSELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the major record formats of orchestras, sorted by their frequency? */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4572,
                    "db_id": "company_office",
                    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
                    "question": "Please show the industries of companies in descending order of the number of companies."
                },
                {
                    "ex_id": 4573,
                    "db_id": "company_office",
                    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
                    "question": "Sort all the industries in descending order of the count of companies in each industry"
                },
                {
                    "ex_id": 5079,
                    "db_id": "device",
                    "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
                    "question": "Please show the software platforms of devices in descending order of the count."
                }
            ],
            "example_quality": 0.7120545067731434,
            "example_similarity": 0.3581523973230697,
            "db_id": "orchestra"
        },
        {
            "index": 853,
            "question": "List the record company shared by the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the record company shared by the most number of orchestras. */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7123920747605137,
            "example_similarity": 0.3580451455872475,
            "db_id": "orchestra"
        },
        {
            "index": 854,
            "question": "What is the record company used by the greatest number of orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the record company used by the greatest number of orchestras? */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7127288521905366,
            "example_similarity": 0.35788690796562095,
            "db_id": "orchestra"
        },
        {
            "index": 855,
            "question": "List the names of orchestras that have no performance.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of orchestras that have no performance. */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7130648418370974,
            "example_similarity": 0.35815808537120924,
            "db_id": "orchestra"
        },
        {
            "index": 856,
            "question": "What are the orchestras that do not have any performances?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the orchestras that do not have any performances? */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7134000464611194,
            "example_similarity": 0.3581947493879019,
            "db_id": "orchestra"
        },
        {
            "index": 857,
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address has both members younger than 30 and members older than 40? */\nSELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n\n/* Answer the following: Show the country where people older than 30 and younger than 25 are from. */\nSELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n\n/* Answer the following: Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. */\nSELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the record companies shared by orchestras founded before 2003 and after 2003. */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 796,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
                    "question": "Which address has both members younger than 30 and members older than 40?"
                },
                {
                    "ex_id": 1638,
                    "db_id": "wedding",
                    "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
                    "question": "Show the country where people older than 30 and younger than 25 are from."
                },
                {
                    "ex_id": 1987,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
                    "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64."
                }
            ],
            "example_quality": 0.7137344688106397,
            "example_similarity": 0.35816868618658415,
            "db_id": "orchestra"
        },
        {
            "index": 858,
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address has both members younger than 30 and members older than 40? */\nSELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n\n/* Answer the following: Show the country where people older than 30 and younger than 25 are from. */\nSELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n\n/* Answer the following: Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. */\nSELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 796,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
                    "question": "Which address has both members younger than 30 and members older than 40?"
                },
                {
                    "ex_id": 1638,
                    "db_id": "wedding",
                    "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
                    "question": "Show the country where people older than 30 and younger than 25 are from."
                },
                {
                    "ex_id": 1987,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
                    "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64."
                }
            ],
            "example_quality": 0.7140681116208837,
            "example_similarity": 0.3580806942789609,
            "db_id": "orchestra"
        },
        {
            "index": 859,
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: Give the number of students living in either HKG or CHI. */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who has a either Ph.D. or MA degree? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Find the number of orchestras whose record format is \"CD\" or \"DVD\". */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                },
                {
                    "ex_id": 483,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "Give the number of students living in either HKG or CHI."
                },
                {
                    "ex_id": 3288,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
                    "question": "How many professors who has a either Ph.D. or MA degree?"
                }
            ],
            "example_quality": 0.7144009776143401,
            "example_similarity": 0.3579269935010479,
            "db_id": "orchestra"
        },
        {
            "index": 860,
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: Give the number of students living in either HKG or CHI. */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who has a either Ph.D. or MA degree? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of orchestras that have CD or DVD as their record format. */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                },
                {
                    "ex_id": 483,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "Give the number of students living in either HKG or CHI."
                },
                {
                    "ex_id": 3288,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
                    "question": "How many professors who has a either Ph.D. or MA degree?"
                }
            ],
            "example_quality": 0.714733069500835,
            "example_similarity": 0.35779996700921685,
            "db_id": "orchestra"
        },
        {
            "index": 861,
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the ids and names of stations from which at least 200 trips started. */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: What are the ids and names of all start stations that were the beginning of at least 200 trips? */\nSELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200\n\n/* Answer the following: Show the number of cities in counties that have a population more than 20000. */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the years in which orchestras that have given more than one performance are founded. */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 180,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
                    "question": "Find the ids and names of stations from which at least 200 trips started."
                },
                {
                    "ex_id": 181,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
                    "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?"
                },
                {
                    "ex_id": 2557,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "Show the number of cities in counties that have a population more than 20000."
                }
            ],
            "example_quality": 0.7140931383137141,
            "example_similarity": 0.3578037014559779,
            "db_id": "orchestra"
        },
        {
            "index": 862,
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of customers who have more than one loan. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: What are the names of customers who have taken out more than one loan? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are years of founding for orchestras that have had more than a single performance? */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3063,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "Find the name of customers who have more than one loan."
                },
                {
                    "ex_id": 3064,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                    "question": "What are the names of customers who have taken out more than one loan?"
                },
                {
                    "ex_id": 6216,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                    "question": "Show the names of countries that have more than one roller coaster."
                }
            ],
            "example_quality": 0.714164980473871,
            "example_similarity": 0.35775449753791483,
            "db_id": "orchestra"
        },
        {
            "index": 863,
            "question": "How many high schoolers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there? */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7144961913887332,
            "example_similarity": 0.3580342795213081,
            "db_id": "network_1"
        },
        {
            "index": 864,
            "question": "Count the number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers. */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7148266356116629,
            "example_similarity": 0.35801487623629485,
            "db_id": "network_1"
        },
        {
            "index": 865,
            "question": "Show the names and grades of each high schooler.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names and grades of each high schooler. */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7151563158017072,
            "example_similarity": 0.3580551563133132,
            "db_id": "network_1"
        },
        {
            "index": 866,
            "question": "What are the names and grades for each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names and grades for each high schooler? */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7154852346056314,
            "example_similarity": 0.3582529032798151,
            "db_id": "network_1"
        },
        {
            "index": 867,
            "question": "Show all the grades of the high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id of students who attended some courses? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: What are the ids of all students who have attended at least one course? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: List every album's title. */\nSELECT title FROM albums;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show all the grades of the high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 65,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance",
                    "question": "List the id of students who attended some courses?"
                },
                {
                    "ex_id": 66,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance",
                    "question": "What are the ids of all students who have attended at least one course?"
                },
                {
                    "ex_id": 552,
                    "db_id": "store_1",
                    "query": "SELECT title FROM albums;",
                    "question": "List every album's title."
                }
            ],
            "example_quality": 0.7158133946579893,
            "example_similarity": 0.3581832001714724,
            "db_id": "network_1"
        },
        {
            "index": 868,
            "question": "What is the grade of each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id of students who attended some courses? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: What are the ids of all students who have attended at least one course? */\nSELECT student_id FROM student_course_attendance\n\n/* Answer the following: List every album's title. */\nSELECT title FROM albums;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the grade of each high schooler? */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 65,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance",
                    "question": "List the id of students who attended some courses?"
                },
                {
                    "ex_id": 66,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance",
                    "question": "What are the ids of all students who have attended at least one course?"
                },
                {
                    "ex_id": 552,
                    "db_id": "store_1",
                    "query": "SELECT title FROM albums;",
                    "question": "List every album's title."
                }
            ],
            "example_quality": 0.7161407985811944,
            "example_similarity": 0.3581317126868187,
            "db_id": "network_1"
        },
        {
            "index": 869,
            "question": "What grade is Kyle in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What grade is Kyle in? */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7164674489855889,
            "example_similarity": 0.35806697492307354,
            "db_id": "network_1"
        },
        {
            "index": 870,
            "question": "Return the grade for the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade for the high schooler named Kyle. */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7167933484695135,
            "example_similarity": 0.3579015678922719,
            "db_id": "network_1"
        },
        {
            "index": 871,
            "question": "Show the names of all high schoolers in grade 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of students who registered course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: What are the ids of the students who registered for course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: Find the last names of students studying in room 111. */\nSELECT lastname FROM list WHERE classroom  =  111\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all high schoolers in grade 10. */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 88,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
                    "question": "What are the id of students who registered course 301?"
                },
                {
                    "ex_id": 89,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
                    "question": "What are the ids of the students who registered for course 301?"
                },
                {
                    "ex_id": 4031,
                    "db_id": "student_1",
                    "query": "SELECT lastname FROM list WHERE classroom  =  111",
                    "question": "Find the last names of students studying in room 111."
                }
            ],
            "example_quality": 0.7171184996193763,
            "example_similarity": 0.35788252369203677,
            "db_id": "network_1"
        },
        {
            "index": 872,
            "question": "What are the names of all high schoolers in grade 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of students who registered course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: What are the ids of the students who registered for course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: Find the last names of students studying in room 111. */\nSELECT lastname FROM list WHERE classroom  =  111\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of all high schoolers in grade 10? */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 88,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
                    "question": "What are the id of students who registered course 301?"
                },
                {
                    "ex_id": 89,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
                    "question": "What are the ids of the students who registered for course 301?"
                },
                {
                    "ex_id": 4031,
                    "db_id": "student_1",
                    "query": "SELECT lastname FROM list WHERE classroom  =  111",
                    "question": "Find the last names of students studying in room 111."
                }
            ],
            "example_quality": 0.7174429050097211,
            "example_similarity": 0.3579907863732378,
            "db_id": "network_1"
        },
        {
            "index": 873,
            "question": "Show the ID of the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ID of the high schooler named Kyle. */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7177665672032952,
            "example_similarity": 0.3579042074740788,
            "db_id": "network_1"
        },
        {
            "index": 874,
            "question": "What is Kyle's id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of candidates whose assessment code is \"Pass\"? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What are the ids of the candidates that have an outcome code of Pass? */\nSELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is Kyle's id? */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 84,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "Find id of candidates whose assessment code is \"Pass\"?"
                },
                {
                    "ex_id": 85,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
                    "question": "What are the ids of the candidates that have an outcome code of Pass?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7180894887511176,
            "example_similarity": 0.35784010036712016,
            "db_id": "network_1"
        },
        {
            "index": 875,
            "question": "How many high schoolers are there in grade 9 or 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of cities in counties that have a population more than 20000. */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many students are age 18? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there in grade 9 or 10? */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2557,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "Show the number of cities in counties that have a population more than 20000."
                },
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                },
                {
                    "ex_id": 474,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE age  =  18",
                    "question": "How many students are age 18?"
                }
            ],
            "example_quality": 0.7176490126023929,
            "example_similarity": 0.35795422827550294,
            "db_id": "network_1"
        },
        {
            "index": 876,
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of cities in counties that have a population more than 20000. */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many students are age 18? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers in grades 9 or 10. */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2557,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "Show the number of cities in counties that have a population more than 20000."
                },
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                },
                {
                    "ex_id": 474,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE age  =  18",
                    "question": "How many students are age 18?"
                }
            ],
            "example_quality": 0.7172095421069761,
            "example_similarity": 0.3579273739333635,
            "db_id": "network_1"
        },
        {
            "index": 877,
            "question": "Show the number of high schoolers for each grade.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the number of high schoolers for each grade. */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7175319941684276,
            "example_similarity": 0.3579579267820395,
            "db_id": "network_1"
        },
        {
            "index": 878,
            "question": "How many high schoolers are in each grade?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are in each grade? */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7178537117149328,
            "example_similarity": 0.357803381542513,
            "db_id": "network_1"
        },
        {
            "index": 879,
            "question": "Which grade has the most high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grade has the most high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7181746972533686,
            "example_similarity": 0.35777693211476763,
            "db_id": "network_1"
        },
        {
            "index": 880,
            "question": "Return the grade that has the greatest number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade that has the greatest number of high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7184949532792171,
            "example_similarity": 0.35756152043541306,
            "db_id": "network_1"
        },
        {
            "index": 881,
            "question": "Show me all grades that have at least 4 students.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For which countries are there more than four distinct addresses listed? */\nSELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\n\n/* Answer the following: display those departments where more than ten employees work who got a commission percentage. */\nSELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10\n\n/* Answer the following: What are the department ids for which more than 10 employees had a commission? */\nSELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show me all grades that have at least 4 students. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6095,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
                    "question": "For which countries are there more than four distinct addresses listed?"
                },
                {
                    "ex_id": 3450,
                    "db_id": "hr_1",
                    "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
                    "question": "display those departments where more than ten employees work who got a commission percentage."
                },
                {
                    "ex_id": 3451,
                    "db_id": "hr_1",
                    "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
                    "question": "What are the department ids for which more than 10 employees had a commission?"
                }
            ],
            "example_quality": 0.7184161150366055,
            "example_similarity": 0.35730983920134524,
            "db_id": "network_1"
        },
        {
            "index": 882,
            "question": "Which grades have 4 or more high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show card type codes with at least 5 cards. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: What are the codes of card types that have 5 or more cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5\n\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grades have 4 or more high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 724,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "Show card type codes with at least 5 cards."
                },
                {
                    "ex_id": 725,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
                    "question": "What are the codes of card types that have 5 or more cards?"
                },
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.7187353711420063,
            "example_similarity": 0.3572779308424624,
            "db_id": "network_1"
        },
        {
            "index": 883,
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the student IDs and numbers of friends corresponding to each. */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7190539041305204,
            "example_similarity": 0.35720555755689687,
            "db_id": "network_1"
        },
        {
            "index": 884,
            "question": "How many friends does each student have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does each student have? */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7193717164561646,
            "example_similarity": 0.35711940393028724,
            "db_id": "network_1"
        },
        {
            "index": 885,
            "question": "Show the names of high school students and their corresponding number of friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of trains for each station, as well as the station network name and services. */\nSELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id\n\n/* Answer the following: Show the country names and the corresponding number of players. */\nSELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\n\n/* Answer the following: How many players are from each country? */\nSELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high school students and their corresponding number of friends. */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3165,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
                    "question": "Find the number of trains for each station, as well as the station network name and services."
                },
                {
                    "ex_id": 1093,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
                    "question": "Show the country names and the corresponding number of players."
                },
                {
                    "ex_id": 1094,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
                    "question": "How many players are from each country?"
                }
            ],
            "example_quality": 0.7193492079171765,
            "example_similarity": 0.35714588545754744,
            "db_id": "network_1"
        },
        {
            "index": 886,
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of each county along with the corresponding number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: For each county, find the name of the county and the number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: How many patients do each physician take care of? List their names and number of patients they take care of. */\nSELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of the high schoolers and how many friends does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2775,
                    "db_id": "election",
                    "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
                    "question": "Show the name of each county along with the corresponding number of delegates from that county."
                },
                {
                    "ex_id": 2776,
                    "db_id": "election",
                    "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
                    "question": "For each county, find the name of the county and the number of delegates from that county."
                },
                {
                    "ex_id": 3929,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
                    "question": "How many patients do each physician take care of? List their names and number of patients they take care of."
                }
            ],
            "example_quality": 0.7195531027163671,
            "example_similarity": 0.35710867319876444,
            "db_id": "network_1"
        },
        {
            "index": 887,
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course with the most registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the nurse has the most appointments? */\nSELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 57,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "which course has most number of registered students?"
                },
                {
                    "ex_id": 58,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the course with the most registered students?"
                },
                {
                    "ex_id": 3927,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the nurse has the most appointments?"
                }
            ],
            "example_quality": 0.7197753277039096,
            "example_similarity": 0.3572370167829874,
            "db_id": "network_1"
        },
        {
            "index": 888,
            "question": "Return the name of the high school student with the most friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organisation type hires most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the type of the organization with the most research staff? */\nSELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which is the email of the party that has used the services the most number of times? */\nSELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the name of the high school student with the most friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4333,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation type hires most research staff?"
                },
                {
                    "ex_id": 4334,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of the organization with the most research staff?"
                },
                {
                    "ex_id": 6341,
                    "db_id": "e_government",
                    "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which is the email of the party that has used the services the most number of times?"
                }
            ],
            "example_quality": 0.7199107158483872,
            "example_similarity": 0.35722834563462486,
            "db_id": "network_1"
        },
        {
            "index": 889,
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of counties that have at least two delegates. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Which counties have two or more delegates? Give me the county names. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: List the names of aircrafts and that won matches at least twice. */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have at least 3 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2787,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Show the names of counties that have at least two delegates."
                },
                {
                    "ex_id": 2788,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Which counties have two or more delegates? Give me the county names."
                },
                {
                    "ex_id": 4830,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
                    "question": "List the names of aircrafts and that won matches at least twice."
                }
            ],
            "example_quality": 0.7200923943737559,
            "example_similarity": 0.3573671633053418,
            "db_id": "network_1"
        },
        {
            "index": 890,
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of counties that have at least two delegates. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Which counties have two or more delegates? Give me the county names. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: List the names of aircrafts and that won matches at least twice. */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have 3 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2787,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Show the names of counties that have at least two delegates."
                },
                {
                    "ex_id": 2788,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Which counties have two or more delegates? Give me the county names."
                },
                {
                    "ex_id": 4830,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
                    "question": "List the names of aircrafts and that won matches at least twice."
                }
            ],
            "example_quality": 0.7202736646327755,
            "example_similarity": 0.35733922032572374,
            "db_id": "network_1"
        },
        {
            "index": 891,
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the location and all games score of the school that has Clemson as its team name. */\nSELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'\n\n/* Answer the following: What are the all games score and location of the school called Clemson? */\nSELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'\n\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all of the high schooler Kyle's friends. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 994,
                    "db_id": "university_basketball",
                    "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
                    "question": "Find the location and all games score of the school that has Clemson as its team name."
                },
                {
                    "ex_id": 995,
                    "db_id": "university_basketball",
                    "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
                    "question": "What are the all games score and location of the school called Clemson?"
                },
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                }
            ],
            "example_quality": 0.7199537462336763,
            "example_similarity": 0.35743578818194993,
            "db_id": "network_1"
        },
        {
            "index": 892,
            "question": "Return the names of friends of the high school student Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: where can we find some restaurants in the bay area ? */\nSELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );\n\n/* Answer the following: give me some restaurants in the bay area ? */\nSELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );\n\n/* Answer the following: give me a restaurant in the bay area ? */\nSELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the names of friends of the high school student Kyle. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8652,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
                    "question": "where can we find some restaurants in the bay area ?"
                },
                {
                    "ex_id": 8653,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
                    "question": "give me some restaurants in the bay area ?"
                },
                {
                    "ex_id": 8654,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
                    "question": "give me a restaurant in the bay area ?"
                }
            ],
            "example_quality": 0.7194155046000881,
            "example_similarity": 0.3571493371529819,
            "db_id": "network_1"
        },
        {
            "index": 893,
            "question": "How many friends does the high school student Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does the high school student Kyle have? */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                },
                {
                    "ex_id": 573,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums has Billy Cobam released?"
                },
                {
                    "ex_id": 6870,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "Find the number of routes with destination airports in Italy."
                }
            ],
            "example_quality": 0.7197297089622381,
            "example_similarity": 0.35724920330843984,
            "db_id": "network_1"
        },
        {
            "index": 894,
            "question": "Count the number of friends Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of friends Kyle has. */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                },
                {
                    "ex_id": 573,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums has Billy Cobam released?"
                },
                {
                    "ex_id": 6870,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "Find the number of routes with destination airports in Italy."
                }
            ],
            "example_quality": 0.7200432104063519,
            "example_similarity": 0.35719377053929424,
            "db_id": "network_1"
        },
        {
            "index": 895,
            "question": "Show ids of all students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what state has no rivers */\nSELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );\n\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show ids of all students who do not have any friends. */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7515,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
                    "question": "what state has no rivers"
                },
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                }
            ],
            "example_quality": 0.719404221509974,
            "example_similarity": 0.35712767606459817,
            "db_id": "network_1"
        },
        {
            "index": 896,
            "question": "What are the ids of high school students who do not have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids of the employees who don't authorize destruction for any document. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Which employees do not authorize destruction for any document? Give me their employee ids. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Show the ids of all employees who don't destroy any document. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of high school students who do not have friends? */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4241,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "Show the ids of the employees who don't authorize destruction for any document."
                },
                {
                    "ex_id": 4242,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "Which employees do not authorize destruction for any document? Give me their employee ids."
                },
                {
                    "ex_id": 4247,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "Show the ids of all employees who don't destroy any document."
                }
            ],
            "example_quality": 0.7197173864413245,
            "example_similarity": 0.35709090025212603,
            "db_id": "network_1"
        },
        {
            "index": 897,
            "question": "Show names of all high school students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that have not been on the affirmative side of debates. */\nSELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n\n/* Answer the following: List the names of aircrafts and that did not win any match. */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Answer the following: What are the names of all aicrafts that have never won any match? */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show names of all high school students who do not have any friends. */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1507,
                    "db_id": "debate",
                    "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
                    "question": "List the names of people that have not been on the affirmative side of debates."
                },
                {
                    "ex_id": 4832,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "List the names of aircrafts and that did not win any match."
                },
                {
                    "ex_id": 4833,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "What are the names of all aicrafts that have never won any match?"
                }
            ],
            "example_quality": 0.7189964940629918,
            "example_similarity": 0.35710827283770474,
            "db_id": "network_1"
        },
        {
            "index": 898,
            "question": "What are the names of students who have no friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that have not been on the affirmative side of debates. */\nSELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)\n\n/* Answer the following: List the names of aircrafts and that did not win any match. */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Answer the following: What are the names of all aicrafts that have never won any match? */\nSELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have no friends? */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1507,
                    "db_id": "debate",
                    "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
                    "question": "List the names of people that have not been on the affirmative side of debates."
                },
                {
                    "ex_id": 4832,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "List the names of aircrafts and that did not win any match."
                },
                {
                    "ex_id": 4833,
                    "db_id": "aircraft",
                    "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
                    "question": "What are the names of all aicrafts that have never won any match?"
                }
            ],
            "example_quality": 0.7182772072356132,
            "example_similarity": 0.35712313822817915,
            "db_id": "network_1"
        },
        {
            "index": 899,
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. */\nSELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: show the train name and station name for each train. */\nSELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id\n\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ids of high schoolers who have friends and are also liked by someone else. */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3135,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description."
                },
                {
                    "ex_id": 6614,
                    "db_id": "train_station",
                    "query": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
                    "question": "show the train name and station name for each train."
                },
                {
                    "ex_id": 659,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "Show the names of editors and the theme of journals for which they serve on committees."
                }
            ],
            "example_quality": 0.7175140333766703,
            "example_similarity": 0.35713008114707123,
            "db_id": "network_1"
        },
        {
            "index": 900,
            "question": "What are the ids of students who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name, checking balance and saving balance of all accounts in the bank. */\nSELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n\n/* Answer the following: What are the names, checking balances, and savings balances for all customers? */\nSELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n\n/* Answer the following: Show the school name and driver name for all school buses. */\nSELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of students who both have friends and are liked? */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1817,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
                    "question": "Find the name, checking balance and saving balance of all accounts in the bank."
                },
                {
                    "ex_id": 1818,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
                    "question": "What are the names, checking balances, and savings balances for all customers?"
                },
                {
                    "ex_id": 6360,
                    "db_id": "school_bus",
                    "query": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
                    "question": "Show the school name and driver name for all school buses."
                }
            ],
            "example_quality": 0.7167493018709173,
            "example_similarity": 0.35712376914064375,
            "db_id": "network_1"
        },
        {
            "index": 901,
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. */\nSELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: For each journal_committee, find the editor name and the journal theme. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show name of all students who have some friends and also are liked by someone else. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3135,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description."
                },
                {
                    "ex_id": 659,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "Show the names of editors and the theme of journals for which they serve on committees."
                },
                {
                    "ex_id": 660,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "For each journal_committee, find the editor name and the journal theme."
                }
            ],
            "example_quality": 0.7164364544075464,
            "example_similarity": 0.3570169696586868,
            "db_id": "network_1"
        },
        {
            "index": 902,
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. */\nSELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: For each journal_committee, find the editor name and the journal theme. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who both have friends and are liked? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3135,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description."
                },
                {
                    "ex_id": 659,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "Show the names of editors and the theme of journals for which they serve on committees."
                },
                {
                    "ex_id": 660,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "For each journal_committee, find the editor name and the journal theme."
                }
            ],
            "example_quality": 0.7161243006192605,
            "example_similarity": 0.35693834139531166,
            "db_id": "network_1"
        },
        {
            "index": 903,
            "question": "Count the number of likes for each student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of likes for each student id. */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7164386701645327,
            "example_similarity": 0.35690405795207975,
            "db_id": "network_1"
        },
        {
            "index": 904,
            "question": "How many likes correspond to each student id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes correspond to each student id? */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7167523442019612,
            "example_similarity": 0.3567551233818647,
            "db_id": "network_1"
        },
        {
            "index": 905,
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of people and the number of times they have been on the affirmative side of debates. */\nSELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name\n\n/* Answer the following: What are the hometowns of gymnasts and the corresponding number of gymnasts? */\nSELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\n\n/* Answer the following: How many gymnasts are from each hometown? */\nSELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have likes, and numbers of likes for each. */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1505,
                    "db_id": "debate",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
                    "question": "Show the names of people and the number of times they have been on the affirmative side of debates."
                },
                {
                    "ex_id": 1761,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
                    "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?"
                },
                {
                    "ex_id": 1762,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
                    "question": "How many gymnasts are from each hometown?"
                }
            ],
            "example_quality": 0.7169548277995281,
            "example_similarity": 0.3566790729271251,
            "db_id": "network_1"
        },
        {
            "index": 906,
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of each county along with the corresponding number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: For each county, find the name of the county and the number of delegates from that county. */\nSELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id\n\n/* Answer the following: How many patients do each physician take care of? List their names and number of patients they take care of. */\nSELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have likes, and how many likes does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2775,
                    "db_id": "election",
                    "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
                    "question": "Show the name of each county along with the corresponding number of delegates from that county."
                },
                {
                    "ex_id": 2776,
                    "db_id": "election",
                    "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
                    "question": "For each county, find the name of the county and the number of delegates from that county."
                },
                {
                    "ex_id": 3929,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
                    "question": "How many patients do each physician take care of? List their names and number of patients they take care of."
                }
            ],
            "example_quality": 0.717156864413436,
            "example_similarity": 0.35659183534580285,
            "db_id": "network_1"
        },
        {
            "index": 907,
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course with the most registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the nurse has the most appointments? */\nSELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 57,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "which course has most number of registered students?"
                },
                {
                    "ex_id": 58,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the course with the most registered students?"
                },
                {
                    "ex_id": 3927,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the nurse has the most appointments?"
                }
            ],
            "example_quality": 0.717376831119338,
            "example_similarity": 0.35671791869426894,
            "db_id": "network_1"
        },
        {
            "index": 908,
            "question": "Give the name of the student with the most likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which course has most number of registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course with the most registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the nurse has the most appointments? */\nSELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Give the name of the student with the most likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 57,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "which course has most number of registered students?"
                },
                {
                    "ex_id": 58,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the course with the most registered students?"
                },
                {
                    "ex_id": 3927,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the nurse has the most appointments?"
                }
            ],
            "example_quality": 0.7175963133170774,
            "example_similarity": 0.35679617845096884,
            "db_id": "network_1"
        },
        {
            "index": 909,
            "question": "Show the names of students who have at least 2 likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of counties that have at least two delegates. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Which counties have two or more delegates? Give me the county names. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: List the names of aircrafts and that won matches at least twice. */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have at least 2 likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2787,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Show the names of counties that have at least two delegates."
                },
                {
                    "ex_id": 2788,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Which counties have two or more delegates? Give me the county names."
                },
                {
                    "ex_id": 4830,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
                    "question": "List the names of aircrafts and that won matches at least twice."
                }
            ],
            "example_quality": 0.7177765406125495,
            "example_similarity": 0.3569650572618521,
            "db_id": "network_1"
        },
        {
            "index": 910,
            "question": "What are the names of students who have 2 or more likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of counties that have at least two delegates. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Which counties have two or more delegates? Give me the county names. */\nSELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: List the names of aircrafts and that won matches at least twice. */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have 2 or more likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2787,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Show the names of counties that have at least two delegates."
                },
                {
                    "ex_id": 2788,
                    "db_id": "election",
                    "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
                    "question": "Which counties have two or more delegates? Give me the county names."
                },
                {
                    "ex_id": 4830,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
                    "question": "List the names of aircrafts and that won matches at least twice."
                }
            ],
            "example_quality": 0.7179563718040755,
            "example_similarity": 0.35695740335277315,
            "db_id": "network_1"
        },
        {
            "index": 911,
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me ids for all the trip that took place in a zip code area with average mean temperature above 60. */\nSELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n\n/* Answer the following: For each zip code, find the ids of all trips that have a higher average mean temperature above 60? */\nSELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n\n/* Answer the following: Select the names of manufacturer whose products have an average price higher than or equal to $150. */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have a grade higher than 5 and have at least 2 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 156,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
                    "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60."
                },
                {
                    "ex_id": 157,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
                    "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?"
                },
                {
                    "ex_id": 5345,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
                    "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150."
                }
            ],
            "example_quality": 0.7176479068003714,
            "example_similarity": 0.356953071716137,
            "db_id": "network_1"
        },
        {
            "index": 912,
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me ids for all the trip that took place in a zip code area with average mean temperature above 60. */\nSELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n\n/* Answer the following: For each zip code, find the ids of all trips that have a higher average mean temperature above 60? */\nSELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60\n\n/* Answer the following: Select the names of manufacturer whose products have an average price higher than or equal to $150. */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 156,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
                    "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60."
                },
                {
                    "ex_id": 157,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
                    "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?"
                },
                {
                    "ex_id": 5345,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
                    "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150."
                }
            ],
            "example_quality": 0.717340118255009,
            "example_similarity": 0.35691073591491246,
            "db_id": "network_1"
        },
        {
            "index": 913,
            "question": "How many likes does Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many states border on the state whose capital is boston */\nSELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes does Kyle have? */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7550,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
                    "question": "how many states border on the state whose capital is boston"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.7167487194150723,
            "example_similarity": 0.3567851454508727,
            "db_id": "network_1"
        },
        {
            "index": 914,
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many albums does Billy Cobham has? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: How many albums has Billy Cobam released? */\nSELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the number of likes that the high schooler named Kyle has. */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 572,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums does Billy Cobham has?"
                },
                {
                    "ex_id": 573,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
                    "question": "How many albums has Billy Cobam released?"
                },
                {
                    "ex_id": 6870,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "Find the number of routes with destination airports in Italy."
                }
            ],
            "example_quality": 0.7170586223478786,
            "example_similarity": 0.35680507417576235,
            "db_id": "network_1"
        },
        {
            "index": 915,
            "question": "Find the average grade of all students who have some friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who had some tweets. */\nSELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the average grade of all students who have some friends. */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 300,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who had some tweets."
                },
                {
                    "ex_id": 3083,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who have some loan."
                },
                {
                    "ex_id": 3084,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have taken a loan?"
                }
            ],
            "example_quality": 0.7164567051079641,
            "example_similarity": 0.35706326001030464,
            "db_id": "network_1"
        },
        {
            "index": 916,
            "question": "What is the average grade of students who have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who had some tweets. */\nSELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the average grade of students who have friends? */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 300,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who had some tweets."
                },
                {
                    "ex_id": 3083,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who have some loan."
                },
                {
                    "ex_id": 3084,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have taken a loan?"
                }
            ],
            "example_quality": 0.7158561020978311,
            "example_similarity": 0.35723952120954944,
            "db_id": "network_1"
        },
        {
            "index": 917,
            "question": "Find the minimum grade of students who have no friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the highest point of the state with the smallest population density */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );\n\n/* Answer the following: what state borders the state with the smallest population */\nSELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );\n\n/* Answer the following: which rivers run through the state with the lowest elevation in the usa */\nSELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the minimum grade of students who have no friends. */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7339,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
                    "question": "what is the highest point of the state with the smallest population density"
                },
                {
                    "ex_id": 7481,
                    "db_id": "geo",
                    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
                    "question": "what state borders the state with the smallest population"
                },
                {
                    "ex_id": 7507,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
                    "question": "which rivers run through the state with the lowest elevation in the usa"
                }
            ],
            "example_quality": 0.7151525668564096,
            "example_similarity": 0.35710918290751675,
            "db_id": "network_1"
        },
        {
            "index": 918,
            "question": "What is the lowest grade of students who do not have any friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the highest point of the state with the smallest population density */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );\n\n/* Answer the following: what state borders the state with the smallest population */\nSELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );\n\n/* Answer the following: which rivers run through the state with the lowest elevation in the usa */\nSELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the lowest grade of students who do not have any friends? */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7339,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
                    "question": "what is the highest point of the state with the smallest population density"
                },
                {
                    "ex_id": 7481,
                    "db_id": "geo",
                    "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
                    "question": "what state borders the state with the smallest population"
                },
                {
                    "ex_id": 7507,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
                    "question": "which rivers run through the state with the lowest elevation in the usa"
                }
            ],
            "example_quality": 0.7144505643715052,
            "example_similarity": 0.35701127559906853,
            "db_id": "network_1"
        },
        {
            "index": 919,
            "question": "Which states have both owners and professionals living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of addresses of people? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Answer the following: What are the different cities where people live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Answer the following: Find the name of bank branches that provided some loans. */\nSELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which states have both owners and professionals living there? */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 92,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "Find distinct cities of addresses of people?"
                },
                {
                    "ex_id": 93,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "What are the different cities where people live?"
                },
                {
                    "ex_id": 3071,
                    "db_id": "loan_1",
                    "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
                    "question": "Find the name of bank branches that provided some loans."
                }
            ],
            "example_quality": 0.7137493123972163,
            "example_similarity": 0.3568548908060267,
            "db_id": "dog_kennels"
        },
        {
            "index": 920,
            "question": "Find the states where both owners and professionals live.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the common login name of course authors and students. */\nSELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\n\n/* Answer the following: What are the login names used both by some course authors and some students? */\nSELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\n\n/* Answer the following: Find the common personal name of course authors and students. */\nSELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the states where both owners and professionals live. */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3847,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
                    "question": "Find the common login name of course authors and students."
                },
                {
                    "ex_id": 3848,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
                    "question": "What are the login names used both by some course authors and some students?"
                },
                {
                    "ex_id": 3849,
                    "db_id": "e_learning",
                    "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                    "question": "Find the common personal name of course authors and students."
                }
            ],
            "example_quality": 0.7140604544489585,
            "example_similarity": 0.3568474398377593,
            "db_id": "dog_kennels"
        },
        {
            "index": 921,
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who had some tweets. */\nSELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of the dogs who have gone through any treatments? */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 300,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who had some tweets."
                },
                {
                    "ex_id": 3083,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who have some loan."
                },
                {
                    "ex_id": 3084,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have taken a loan?"
                }
            ],
            "example_quality": 0.7139366103073201,
            "example_similarity": 0.35695978513686866,
            "db_id": "dog_kennels"
        },
        {
            "index": 922,
            "question": "Find the average age of the dogs who went through treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who had some tweets. */\nSELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the average age of the dogs who went through treatments. */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 300,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who had some tweets."
                },
                {
                    "ex_id": 3083,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who have some loan."
                },
                {
                    "ex_id": 3084,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have taken a loan?"
                }
            ],
            "example_quality": 0.7138130348080715,
            "example_similarity": 0.3571480668835266,
            "db_id": "dog_kennels"
        },
        {
            "index": 923,
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time. */\nSELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1\n\n/* Answer the following: What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: What is the id, first name, and last name of the driver who was in the first position for laptime at least twice? */\nSELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5626,
                    "db_id": "swimming",
                    "query": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
                    "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time."
                },
                {
                    "ex_id": 2170,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
                    "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?"
                },
                {
                    "ex_id": 2171,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
                    "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?"
                }
            ],
            "example_quality": 0.7135507141130583,
            "example_similarity": 0.3570604597431184,
            "db_id": "dog_kennels"
        },
        {
            "index": 924,
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what states border texas and have a major river */\nSELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );\n\n/* Answer the following: how many major cities are in states bordering nebraska */\nSELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );\n\n/* Answer the following: Show headquarters with at least two companies in the banking industry. */\nSELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7417,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
                    "question": "what states border texas and have a major river"
                },
                {
                    "ex_id": 7496,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );",
                    "question": "how many major cities are in states bordering nebraska"
                },
                {
                    "ex_id": 2012,
                    "db_id": "gas_company",
                    "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
                    "question": "Show headquarters with at least two companies in the banking industry."
                }
            ],
            "example_quality": 0.7129127090666197,
            "example_similarity": 0.35685622415269674,
            "db_id": "dog_kennels"
        },
        {
            "index": 925,
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many architects haven't built a mill before year 1850? */\nSELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );\n\n/* Answer the following: What is the total number of enrollment of schools that do not have any goalie player? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Answer the following: What is the total number of students enrolled in schools without any goalies? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6961,
                    "db_id": "architecture",
                    "query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
                    "question": "How many architects haven't built a mill before year 1850?"
                },
                {
                    "ex_id": 5045,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of enrollment of schools that do not have any goalie player?"
                },
                {
                    "ex_id": 5046,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of students enrolled in schools without any goalies?"
                }
            ],
            "example_quality": 0.7121994033408872,
            "example_similarity": 0.3566878924782478,
            "db_id": "dog_kennels"
        },
        {
            "index": 926,
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many architects haven't built a mill before year 1850? */\nSELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );\n\n/* Answer the following: What is the total number of enrollment of schools that do not have any goalie player? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Answer the following: What is the total number of students enrolled in schools without any goalies? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6961,
                    "db_id": "architecture",
                    "query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );",
                    "question": "How many architects haven't built a mill before year 1850?"
                },
                {
                    "ex_id": 5045,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of enrollment of schools that do not have any goalie player?"
                },
                {
                    "ex_id": 5046,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of students enrolled in schools without any goalies?"
                }
            ],
            "example_quality": 0.7114876382322729,
            "example_similarity": 0.3565307281045326,
            "db_id": "dog_kennels"
        },
        {
            "index": 927,
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all employees who don't have a certificate. */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which first names are used for professionals or owners but are not used as dog names? */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 422,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "Show ids for all employees who don't have a certificate."
                },
                {
                    "ex_id": 423,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "What are the ids of all employees that don't have certificates?"
                },
                {
                    "ex_id": 508,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
                    "question": "What are the student ids of students who don't have any allergies?"
                }
            ],
            "example_quality": 0.7112206344750422,
            "example_similarity": 0.3563120823933585,
            "db_id": "dog_kennels"
        },
        {
            "index": 928,
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all employees who don't have a certificate. */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names that are used for professionals or owners but are not used as dog names. */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 422,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "Show ids for all employees who don't have a certificate."
                },
                {
                    "ex_id": 423,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "What are the ids of all employees that don't have certificates?"
                },
                {
                    "ex_id": 508,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
                    "question": "What are the student ids of students who don't have any allergies?"
                }
            ],
            "example_quality": 0.7109542061569437,
            "example_similarity": 0.35611199924491194,
            "db_id": "dog_kennels"
        },
        {
            "index": 929,
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and director of the films without any schedule? */\nSELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\n\n/* Answer the following: Which engineers have never visited to maintain the assets? List the engineer first name and last name. */\nSELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)\n\n/* Answer the following: Find the market shares and names of furnitures which no any company is producing in our records. */\nSELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professional did not operate any treatment on dogs? List the professional's id, role and email. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1955,
                    "db_id": "cinema",
                    "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
                    "question": "What are the title and director of the films without any schedule?"
                },
                {
                    "ex_id": 3141,
                    "db_id": "assets_maintenance",
                    "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
                    "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name."
                },
                {
                    "ex_id": 3404,
                    "db_id": "manufacturer",
                    "query": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
                    "question": "Find the market shares and names of furnitures which no any company is producing in our records."
                }
            ],
            "example_quality": 0.7102836830905873,
            "example_similarity": 0.35608042618520874,
            "db_id": "dog_kennels"
        },
        {
            "index": 930,
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and director of the films without any schedule? */\nSELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\n\n/* Answer the following: Which engineers have never visited to maintain the assets? List the engineer first name and last name. */\nSELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)\n\n/* Answer the following: Find the market shares and names of furnitures which no any company is producing in our records. */\nSELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the id, role and email of the professionals who did not perform any treatment on dogs. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1955,
                    "db_id": "cinema",
                    "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
                    "question": "What are the title and director of the films without any schedule?"
                },
                {
                    "ex_id": 3141,
                    "db_id": "assets_maintenance",
                    "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
                    "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name."
                },
                {
                    "ex_id": 3404,
                    "db_id": "manufacturer",
                    "query": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
                    "question": "Find the market shares and names of furnitures which no any company is producing in our records."
                }
            ],
            "example_quality": 0.70961460200932,
            "example_similarity": 0.3560153456791554,
            "db_id": "dog_kennels"
        },
        {
            "index": 931,
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the description of the most popular role among the users that have logged in. */\nSELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What is the description of the most popular role among users that have logged in? */\nSELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: List the project details of the projects launched by the organisation */\nSELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner owns the most dogs? List the owner id, first name and last name. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4534,
                    "db_id": "document_management",
                    "query": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
                    "question": "Find the description of the most popular role among the users that have logged in."
                },
                {
                    "ex_id": 4535,
                    "db_id": "document_management",
                    "query": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What is the description of the most popular role among users that have logged in?"
                },
                {
                    "ex_id": 4385,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
                    "question": "List the project details of the projects launched by the organisation"
                }
            ],
            "example_quality": 0.7090113922496853,
            "example_similarity": 0.3559003106665222,
            "db_id": "dog_kennels"
        },
        {
            "index": 932,
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the description of the most popular role among the users that have logged in. */\nSELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What is the description of the most popular role among users that have logged in? */\nSELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What are all the customer phone numbers under the most popular policy type? */\nSELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the owner id, first name and last name of the owner who has the most dogs. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4534,
                    "db_id": "document_management",
                    "query": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
                    "question": "Find the description of the most popular role among the users that have logged in."
                },
                {
                    "ex_id": 4535,
                    "db_id": "document_management",
                    "query": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What is the description of the most popular role among users that have logged in?"
                },
                {
                    "ex_id": 898,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are all the customer phone numbers under the most popular policy type?"
                }
            ],
            "example_quality": 0.7083968806160565,
            "example_similarity": 0.3557947036154678,
            "db_id": "dog_kennels"
        },
        {
            "index": 933,
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show id, first and last names for all customers with at least two cards. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and full names of customers who hold two or more cards? */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and names of the medicine that can interact with two or more enzymes? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two treatments? List the professional's id, role, and first name. */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 716,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
                    "question": "Show id, first and last names for all customers with at least two cards."
                },
                {
                    "ex_id": 717,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
                    "question": "What are the ids and full names of customers who hold two or more cards?"
                },
                {
                    "ex_id": 950,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
                    "question": "What are the ids and names of the medicine that can interact with two or more enzymes?"
                }
            ],
            "example_quality": 0.7085299981230563,
            "example_similarity": 0.3556895436882823,
            "db_id": "dog_kennels"
        },
        {
            "index": 934,
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show id, first and last names for all customers with at least two cards. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and full names of customers who hold two or more cards? */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids and names of the medicine that can interact with two or more enzymes? */\nSELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the id, role, and first name of the professionals who have performed two or more treatments? */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 716,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
                    "question": "Show id, first and last names for all customers with at least two cards."
                },
                {
                    "ex_id": 717,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
                    "question": "What are the ids and full names of customers who hold two or more cards?"
                },
                {
                    "ex_id": 950,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
                    "question": "What are the ids and names of the medicine that can interact with two or more enzymes?"
                }
            ],
            "example_quality": 0.708662830581861,
            "example_similarity": 0.3557489583049961,
            "db_id": "dog_kennels"
        },
        {
            "index": 935,
            "question": "What is the name of the breed with the most dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which song has the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the song with the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer who has the most orders? */\nSELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the name of the breed with the most dogs? */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5219,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which song has the most vocals?"
                },
                {
                    "ex_id": 5220,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the song with the most vocals?"
                },
                {
                    "ex_id": 6900,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id of the customer who has the most orders?"
                }
            ],
            "example_quality": 0.708775113178911,
            "example_similarity": 0.35602461938006247,
            "db_id": "dog_kennels"
        },
        {
            "index": 936,
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the artist with the greatest number of albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the customer that has been involved in the most policies. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which breed do the most dogs have? Give me the breed name. */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                },
                {
                    "ex_id": 827,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the artist with the greatest number of albums?"
                },
                {
                    "ex_id": 1540,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the customer that has been involved in the most policies."
                }
            ],
            "example_quality": 0.708915310707566,
            "example_similarity": 0.3559983120582713,
            "db_id": "dog_kennels"
        },
        {
            "index": 937,
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and surname of the driver who participated the most number of races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the ids and last names of all drivers who participated in the most races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which part fault requires the most number of skills to fix? List part id and name. */\nSELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2232,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and surname of the driver who participated the most number of races?"
                },
                {
                    "ex_id": 2233,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the ids and last names of all drivers who participated in the most races?"
                },
                {
                    "ex_id": 3144,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which part fault requires the most number of skills to fix? List part id and name."
                }
            ],
            "example_quality": 0.7092259667260211,
            "example_similarity": 0.3559730491042023,
            "db_id": "dog_kennels"
        },
        {
            "index": 938,
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer that has purchased the most items? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Give me the name of the customer who ordered the most items in total. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Find the name of the department that offers the largest number of credits of all classes. */\nSELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6110,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                    "question": "What is the name of the customer that has purchased the most items?"
                },
                {
                    "ex_id": 6111,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                    "question": "Give me the name of the customer who ordered the most items in total."
                },
                {
                    "ex_id": 3240,
                    "db_id": "college_1",
                    "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
                    "question": "Find the name of the department that offers the largest number of credits of all classes."
                }
            ],
            "example_quality": 0.709208295520492,
            "example_similarity": 0.3558780853859816,
            "db_id": "dog_kennels"
        },
        {
            "index": 939,
            "question": "What is the description of the treatment type that costs the least money in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the effective date of the claim that has the largest amount of total settlement? */\nSELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1\n\n/* Answer the following: Find the claim that has the largest total settlement amount. Return the effective date of the claim. */\nSELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1\n\n/* Answer the following: Find the name of customer who has the highest amount of loans. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the description of the treatment type that costs the least money in total? */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 906,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
                    "question": "What is the effective date of the claim that has the largest amount of total settlement?"
                },
                {
                    "ex_id": 907,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
                    "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim."
                },
                {
                    "ex_id": 3053,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
                    "question": "Find the name of customer who has the highest amount of loans."
                }
            ],
            "example_quality": 0.7092741590301126,
            "example_similarity": 0.3559174243020774,
            "db_id": "dog_kennels"
        },
        {
            "index": 940,
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the effective date of the claim that has the largest amount of total settlement? */\nSELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1\n\n/* Answer the following: Find the claim that has the largest total settlement amount. Return the effective date of the claim. */\nSELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1\n\n/* Answer the following: Find the name of customer who has the highest amount of loans. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the description of the treatment type whose total cost is the lowest. */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 906,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
                    "question": "What is the effective date of the claim that has the largest amount of total settlement?"
                },
                {
                    "ex_id": 907,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
                    "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim."
                },
                {
                    "ex_id": 3053,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
                    "question": "Find the name of customer who has the highest amount of loans."
                }
            ],
            "example_quality": 0.7093398824046063,
            "example_similarity": 0.3559234120355005,
            "db_id": "dog_kennels"
        },
        {
            "index": 941,
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer that has purchased the most items? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Give me the name of the customer who ordered the most items in total. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Find the name of the department that offers the largest number of credits of all classes. */\nSELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6110,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                    "question": "What is the name of the customer that has purchased the most items?"
                },
                {
                    "ex_id": 6111,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                    "question": "Give me the name of the customer who ordered the most items in total."
                },
                {
                    "ex_id": 3240,
                    "db_id": "college_1",
                    "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
                    "question": "Find the name of the department that offers the largest number of credits of all classes."
                }
            ],
            "example_quality": 0.7094119152681694,
            "example_similarity": 0.35577070760967416,
            "db_id": "dog_kennels"
        },
        {
            "index": 942,
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer that has purchased the most items? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Give me the name of the customer who ordered the most items in total. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Answer the following: Find the name of the department that offers the largest number of credits of all classes. */\nSELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6110,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                    "question": "What is the name of the customer that has purchased the most items?"
                },
                {
                    "ex_id": 6111,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                    "question": "Give me the name of the customer who ordered the most items in total."
                },
                {
                    "ex_id": 3240,
                    "db_id": "college_1",
                    "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
                    "question": "Find the name of the department that offers the largest number of credits of all classes."
                }
            ],
            "example_quality": 0.7094837951957166,
            "example_similarity": 0.35569414839936814,
            "db_id": "dog_kennels"
        },
        {
            "index": 943,
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the authors who have submissions to more than one workshop. */\nSELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\n\n/* Answer the following: Which authors have submitted to more than one workshop? */\nSELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\n\n/* Answer the following: papers with at least 5 citations */\nSELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two types of treatments? List the professional id and cell phone. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5839,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                    "question": "Show the authors who have submissions to more than one workshop."
                },
                {
                    "ex_id": 5840,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                    "question": "Which authors have submitted to more than one workshop?"
                },
                {
                    "ex_id": 8130,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
                    "question": "papers with at least 5 citations"
                }
            ],
            "example_quality": 0.7092719191506359,
            "example_similarity": 0.35554276171807137,
            "db_id": "dog_kennels"
        },
        {
            "index": 944,
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the ids of the departments where any manager is managing 4 or more employees. */\nSELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\n\n/* Answer the following: What are department ids for departments with managers managing more than 3 employees? */\nSELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\n\n/* Answer the following: What are the unique ids of those departments where any manager is managing 4 or more employees. */\nSELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id and cell phone of the professionals who operate two or more types of treatments. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3452,
                    "db_id": "hr_1",
                    "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
                    "question": "Find the ids of the departments where any manager is managing 4 or more employees."
                },
                {
                    "ex_id": 3453,
                    "db_id": "hr_1",
                    "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
                    "question": "What are department ids for departments with managers managing more than 3 employees?"
                },
                {
                    "ex_id": 3488,
                    "db_id": "hr_1",
                    "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
                    "question": "What are the unique ids of those departments where any manager is managing 4 or more employees."
                }
            ],
            "example_quality": 0.7086946032556519,
            "example_similarity": 0.35546458721598234,
            "db_id": "dog_kennels"
        },
        {
            "index": 945,
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name, location, open year for all tracks with a seating higher than the average. */\nSELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)\n\n/* Answer the following: What are the names, locations, and years of opening for tracks with seating higher than average? */\nSELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)\n\n/* Answer the following: Find the name and budget of departments whose budgets are more than the average budget. */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the first name and last name of the professionals who have done treatment with cost below average? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 758,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
                    "question": "Show the name, location, open year for all tracks with a seating higher than the average."
                },
                {
                    "ex_id": 759,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
                    "question": "What are the names, locations, and years of opening for tracks with seating higher than average?"
                },
                {
                    "ex_id": 1359,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
                    "question": "Find the name and budget of departments whose budgets are more than the average budget."
                }
            ],
            "example_quality": 0.7081150890086584,
            "example_similarity": 0.3555258239843605,
            "db_id": "dog_kennels"
        },
        {
            "index": 946,
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of accounts whose checking balance is below the average checking balance. */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: What are the names of customers with checking balances lower than the average checking balance? */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: What is the theme and artist name for the exhibition with a ticket price higher than the average? */\nSELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1809,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "Find the name of accounts whose checking balance is below the average checking balance."
                },
                {
                    "ex_id": 1810,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "What are the names of customers with checking balances lower than the average checking balance?"
                },
                {
                    "ex_id": 1674,
                    "db_id": "theme_gallery",
                    "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
                    "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?"
                }
            ],
            "example_quality": 0.7076941646385864,
            "example_similarity": 0.3555349103339259,
            "db_id": "dog_kennels"
        },
        {
            "index": 947,
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the date of each treatment, together with the first name of the professional who operated it. */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7080028297234453,
            "example_similarity": 0.355462263492237,
            "db_id": "dog_kennels"
        },
        {
            "index": 948,
            "question": "What are the date and the operating professional's first name of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the date and the operating professional's first name of each treatment? */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7083108436161422,
            "example_similarity": 0.35552561107455105,
            "db_id": "dog_kennels"
        },
        {
            "index": 949,
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the cost of each treatment and the corresponding treatment type description. */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7086182083752399,
            "example_similarity": 0.3555553034798505,
            "db_id": "dog_kennels"
        },
        {
            "index": 950,
            "question": "What are the cost and treatment type description of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the cost and treatment type description of each treatment? */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7089249260506344,
            "example_similarity": 0.3556433015174016,
            "db_id": "dog_kennels"
        },
        {
            "index": 951,
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which staff have contacted which engineers? List the staff name and the engineer first name and last name. */\nSELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id\n\n/* Answer the following: List all every engineer's first name, last name, details and coresponding skill description. */\nSELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: Show the customer name, customer address city, date from, and date to for each customer address history. */\nSELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each owner's first name, last name, and the size of his for her dog. */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3147,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
                    "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name."
                },
                {
                    "ex_id": 3134,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "List all every engineer's first name, last name, details and coresponding skill description."
                },
                {
                    "ex_id": 5665,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
                    "question": "Show the customer name, customer address city, date from, and date to for each customer address history."
                }
            ],
            "example_quality": 0.7085249349250902,
            "example_similarity": 0.3557938820179522,
            "db_id": "dog_kennels"
        },
        {
            "index": 952,
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which staff have contacted which engineers? List the staff name and the engineer first name and last name. */\nSELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id\n\n/* Answer the following: List all every engineer's first name, last name, details and coresponding skill description. */\nSELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: Show the customer name, customer address city, date from, and date to for each customer address history. */\nSELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name, last name, and the size of their dog? */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3147,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
                    "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name."
                },
                {
                    "ex_id": 3134,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "List all every engineer's first name, last name, details and coresponding skill description."
                },
                {
                    "ex_id": 5665,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
                    "question": "Show the customer name, customer address city, date from, and date to for each customer address history."
                }
            ],
            "example_quality": 0.7081257841170364,
            "example_similarity": 0.3558612976303005,
            "db_id": "dog_kennels"
        },
        {
            "index": 953,
            "question": "List pairs of the owner's first name and the dogs's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List pairs of the owner's first name and the dogs's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7084320529689598,
            "example_similarity": 0.3559472540627742,
            "db_id": "dog_kennels"
        },
        {
            "index": 954,
            "question": "What are each owner's first name and their dogs's name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name and their dogs's name? */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7087376797478183,
            "example_similarity": 0.3558620122003118,
            "db_id": "dog_kennels"
        },
        {
            "index": 955,
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and open year for the branch with most number of memberships registered in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and opening year for the branch that registered the most members in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first and last names of the instructors who teach the top 3 number of courses? */\nSELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the names of the dogs of the rarest breed and the treatment dates of them. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5429,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and open year for the branch with most number of memberships registered in 2016?"
                },
                {
                    "ex_id": 5430,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and opening year for the branch that registered the most members in 2016?"
                },
                {
                    "ex_id": 4680,
                    "db_id": "college_3",
                    "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the first and last names of the instructors who teach the top 3 number of courses?"
                }
            ],
            "example_quality": 0.708473492616946,
            "example_similarity": 0.35593776415424344,
            "db_id": "dog_kennels"
        },
        {
            "index": 956,
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and open year for the branch with most number of memberships registered in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and opening year for the branch that registered the most members in 2016? */\nSELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first and last names of the instructors who teach the top 3 number of courses? */\nSELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are of the rarest breed? Show their names and treatment dates. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5429,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and open year for the branch with most number of memberships registered in 2016?"
                },
                {
                    "ex_id": 5430,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and opening year for the branch that registered the most members in 2016?"
                },
                {
                    "ex_id": 4680,
                    "db_id": "college_3",
                    "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the first and last names of the instructors who teach the top 3 number of courses?"
                }
            ],
            "example_quality": 0.7082098581788162,
            "example_similarity": 0.3559478246055001,
            "db_id": "dog_kennels"
        },
        {
            "index": 957,
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\". */\nSELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n\n/* Answer the following: Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names. */\nSELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"\n\n/* Answer the following: Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\". */\nSELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1237,
                    "db_id": "apartment_rentals",
                    "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                    "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\"."
                },
                {
                    "ex_id": 1238,
                    "db_id": "apartment_rentals",
                    "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                    "question": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names."
                },
                {
                    "ex_id": 1247,
                    "db_id": "apartment_rentals",
                    "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
                    "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\"."
                }
            ],
            "example_quality": 0.7084152417175655,
            "example_similarity": 0.35589851274637524,
            "db_id": "dog_kennels"
        },
        {
            "index": 958,
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and college of students whose decisions are yes in the tryout. */\nSELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n\n/* Answer the following: What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges? */\nSELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n\n/* Answer the following: Find the name and active date of the customer that use email as the contact channel. */\nSELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names of owners living in Virginia and the names of dogs they own. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4999,
                    "db_id": "soccer_2",
                    "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
                    "question": "Find the name and college of students whose decisions are yes in the tryout."
                },
                {
                    "ex_id": 5000,
                    "db_id": "soccer_2",
                    "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
                    "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?"
                },
                {
                    "ex_id": 6106,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
                    "question": "Find the name and active date of the customer that use email as the contact channel."
                }
            ],
            "example_quality": 0.7086201964806599,
            "example_similarity": 0.35599395317913524,
            "db_id": "dog_kennels"
        },
        {
            "index": 959,
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the phones and emails of workshop groups in which services are performed? */\nSELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n\n/* Answer the following: Give me all the phone numbers and email addresses of the workshop groups where services are performed. */\nSELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of the dogs who have gone through a treatment? */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5133,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
                    "question": "What are the phones and emails of workshop groups in which services are performed?"
                },
                {
                    "ex_id": 5134,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
                    "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed."
                },
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.7087343136704165,
            "example_similarity": 0.3559372973183598,
            "db_id": "dog_kennels"
        },
        {
            "index": 960,
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the phones and emails of workshop groups in which services are performed? */\nSELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n\n/* Answer the following: Give me all the phone numbers and email addresses of the workshop groups where services are performed. */\nSELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the arriving date and the departing date of the dogs that received a treatment. */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5133,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
                    "question": "What are the phones and emails of workshop groups in which services are performed?"
                },
                {
                    "ex_id": 5134,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
                    "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed."
                },
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.7088481931160278,
            "example_similarity": 0.3558145451733357,
            "db_id": "dog_kennels"
        },
        {
            "index": 961,
            "question": "List the last name of the owner owning the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which trip started from the station with the largest dock count? Give me the trip id. */\nSELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\n\n/* Answer the following: What is the id of the trip that started from the station with the highest dock count? */\nSELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1\n\n/* Answer the following: What is the name of the perpetrator with the biggest weight. */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the last name of the owner owning the youngest dog. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 164,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
                    "question": "Which trip started from the station with the largest dock count? Give me the trip id."
                },
                {
                    "ex_id": 165,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
                    "question": "What is the id of the trip that started from the station with the highest dock count?"
                },
                {
                    "ex_id": 2312,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
                    "question": "What is the name of the perpetrator with the biggest weight."
                }
            ],
            "example_quality": 0.7084566414580594,
            "example_similarity": 0.35586998363734984,
            "db_id": "dog_kennels"
        },
        {
            "index": 962,
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the lowest point of all states through which the mississippi river runs through */\nSELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;\n\n/* Answer the following: which is the lowest point of the states that the mississippi runs through */\nSELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;\n\n/* Answer the following: what is the longest river in the state with the most major cities */\nSELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Who owns the youngest dog? Give me his or her last name. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7361,
                    "db_id": "geo",
                    "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
                    "question": "what is the lowest point of all states through which the mississippi river runs through"
                },
                {
                    "ex_id": 7362,
                    "db_id": "geo",
                    "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
                    "question": "which is the lowest point of the states that the mississippi runs through"
                },
                {
                    "ex_id": 7350,
                    "db_id": "geo",
                    "query": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
                    "question": "what is the longest river in the state with the most major cities"
                }
            ],
            "example_quality": 0.7077937167830057,
            "example_similarity": 0.3556760183345239,
            "db_id": "dog_kennels"
        },
        {
            "index": 963,
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". */\nSELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1983,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
                    "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.7080971500989112,
            "example_similarity": 0.355609949034126,
            "db_id": "dog_kennels"
        },
        {
            "index": 964,
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of phones with carrier either \"Sprint\" or \"TMobile\". */\nSELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: Show the prices of publications whose publisher is either \"Person\" or \"Wiley\" */\nSELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1983,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
                    "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 234,
                    "db_id": "book_2",
                    "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
                    "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
                }
            ],
            "example_quality": 0.7083999538851157,
            "example_similarity": 0.3556054540066851,
            "db_id": "dog_kennels"
        },
        {
            "index": 965,
            "question": "What are the arriving date and the departing date of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of all the dogs? */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7087021300987062,
            "example_similarity": 0.3557185114453858,
            "db_id": "dog_kennels"
        },
        {
            "index": 966,
            "question": "List the arrival date and the departure date for all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the arrival date and the departure date for all the dogs. */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7090036806886663,
            "example_similarity": 0.3557663812930757,
            "db_id": "dog_kennels"
        },
        {
            "index": 967,
            "question": "How many dogs went through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs went through any treatments? */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7093046075959168,
            "example_similarity": 0.35566595898424935,
            "db_id": "dog_kennels"
        },
        {
            "index": 968,
            "question": "Count the number of dogs that went through a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs that went through a treatment. */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7096049127533591,
            "example_similarity": 0.3555112238540395,
            "db_id": "dog_kennels"
        },
        {
            "index": 969,
            "question": "How many professionals have performed any treatment to dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals have performed any treatment to dogs? */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.709904598085915,
            "example_similarity": 0.35541155135411645,
            "db_id": "dog_kennels"
        },
        {
            "index": 970,
            "question": "Find the number of professionals who have ever treated dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many acting statuses are there? */\nSELECT count(DISTINCT temporary_acting) FROM management\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have ever treated dogs. */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 11,
                    "db_id": "department_management",
                    "query": "SELECT count(DISTINCT temporary_acting) FROM management",
                    "question": "How many acting statuses are there?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                }
            ],
            "example_quality": 0.7102036655105687,
            "example_similarity": 0.35524175091788035,
            "db_id": "dog_kennels"
        },
        {
            "index": 971,
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                },
                {
                    "ex_id": 3429,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Return the full names and salaries for employees with first names that end with the letter m."
                },
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                }
            ],
            "example_quality": 0.7101641527084918,
            "example_similarity": 0.35518126936309374,
            "db_id": "dog_kennels"
        },
        {
            "index": 972,
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name. */\nSELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                },
                {
                    "ex_id": 3429,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Return the full names and salaries for employees with first names that end with the letter m."
                },
                {
                    "ex_id": 1031,
                    "db_id": "phone_1",
                    "query": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
                    "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name."
                }
            ],
            "example_quality": 0.7101247212084766,
            "example_similarity": 0.3551840079103075,
            "db_id": "dog_kennels"
        },
        {
            "index": 973,
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                },
                {
                    "ex_id": 3429,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Return the full names and salaries for employees with first names that end with the letter m."
                },
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                }
            ],
            "example_quality": 0.7101842511324947,
            "example_similarity": 0.3551279643202366,
            "db_id": "dog_kennels"
        },
        {
            "index": 974,
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Display the first and last name, and salary for those employees whose first name is ending with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Return the full names and salaries for employees with first names that end with the letter m. */\nSELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'\n\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3428,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m."
                },
                {
                    "ex_id": 3429,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
                    "question": "Return the full names and salaries for employees with first names that end with the letter m."
                },
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                }
            ],
            "example_quality": 0.7102436588184758,
            "example_similarity": 0.35508484660854367,
            "db_id": "dog_kennels"
        },
        {
            "index": 975,
            "question": "How many dogs have an age below the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts have a savings balance above the average savings balance? */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Answer the following: Find the number of accounts with a savings balance that is higher than the average savings balance. */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Answer the following: How many branches where have more than average number of memberships are there? */\nSELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have an age below the average? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1785,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "How many accounts have a savings balance above the average savings balance?"
                },
                {
                    "ex_id": 1786,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "Find the number of accounts with a savings balance that is higher than the average savings balance."
                },
                {
                    "ex_id": 5401,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
                    "question": "How many branches where have more than average number of memberships are there?"
                }
            ],
            "example_quality": 0.7100280242966107,
            "example_similarity": 0.35510074752001597,
            "db_id": "dog_kennels"
        },
        {
            "index": 976,
            "question": "Count the number of dogs of an age below the average.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts have a savings balance above the average savings balance? */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Answer the following: Find the number of accounts with a savings balance that is higher than the average savings balance. */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Answer the following: How many branches where have more than average number of memberships are there? */\nSELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs of an age below the average. */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1785,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "How many accounts have a savings balance above the average savings balance?"
                },
                {
                    "ex_id": 1786,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "Find the number of accounts with a savings balance that is higher than the average savings balance."
                },
                {
                    "ex_id": 5401,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
                    "question": "How many branches where have more than average number of memberships are there?"
                }
            ],
            "example_quality": 0.7098128316487659,
            "example_similarity": 0.355007477557464,
            "db_id": "dog_kennels"
        },
        {
            "index": 977,
            "question": "How much does the most recent treatment cost?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most recent treatment cost? */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7101098502448265,
            "example_similarity": 0.35490571226689444,
            "db_id": "dog_kennels"
        },
        {
            "index": 978,
            "question": "Show me the cost of the most recently performed treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Show me the cost of the most recently performed treatment. */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7104062614408951,
            "example_similarity": 0.35489855940846027,
            "db_id": "dog_kennels"
        },
        {
            "index": 979,
            "question": "How many dogs have not gone through any treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists do not have any album? */\nSELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\n\n/* Answer the following: How many departments are led by heads who are not mentioned? */\nSELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);\n\n/* Answer the following: Show the number of all customers without an account. */\nSELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have not gone through any treatment? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 888,
                    "db_id": "chinook_1",
                    "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
                    "question": "How many artists do not have any album?"
                },
                {
                    "ex_id": 12,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
                    "question": "How many departments are led by heads who are not mentioned?"
                },
                {
                    "ex_id": 684,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
                    "question": "Show the number of all customers without an account."
                }
            ],
            "example_quality": 0.7102977429579799,
            "example_similarity": 0.3549001762849394,
            "db_id": "dog_kennels"
        },
        {
            "index": 980,
            "question": "Tell me the number of dogs that have not received any treatment .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists do not have any album? */\nSELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\n\n/* Answer the following: How many departments are led by heads who are not mentioned? */\nSELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);\n\n/* Answer the following: Show the number of all customers without an account. */\nSELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the number of dogs that have not received any treatment . */\nSELECT ",
            "response": "count(*) from dogs where dog_id not in ( select dog_id from treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 888,
                    "db_id": "chinook_1",
                    "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
                    "question": "How many artists do not have any album?"
                },
                {
                    "ex_id": 12,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
                    "question": "How many departments are led by heads who are not mentioned?"
                },
                {
                    "ex_id": 684,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
                    "question": "Show the number of all customers without an account."
                }
            ],
            "example_quality": 0.7097614230005779,
            "example_similarity": 0.35480450347236736,
            "db_id": "dog_kennels"
        },
        {
            "index": 981,
            "question": "How many owners temporarily do not have any dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many airports haven't the pilot 'Thompson' driven an aircraft? */\nSELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );\n\n/* Answer the following: how many rivers do not traverse the state with the capital albany */\nSELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );\n\n/* Answer the following: What is the total number of people who has no friend living in the city of Austin. */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many owners temporarily do not have any dogs? */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6379,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
                    "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?"
                },
                {
                    "ex_id": 7457,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );",
                    "question": "how many rivers do not traverse the state with the capital albany"
                },
                {
                    "ex_id": 4481,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who has no friend living in the city of Austin."
                }
            ],
            "example_quality": 0.7094623449698073,
            "example_similarity": 0.3547096488681673,
            "db_id": "dog_kennels"
        },
        {
            "index": 982,
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many enzymes do not have any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Answer the following: What is the count of enzymes without any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Answer the following: How many persons are not body builders? */\nSELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of owners who do not own any dogs at this moment. */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 962,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
                    "question": "How many enzymes do not have any interactions?"
                },
                {
                    "ex_id": 963,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
                    "question": "What is the count of enzymes without any interactions?"
                },
                {
                    "ex_id": 1171,
                    "db_id": "body_builder",
                    "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
                    "question": "How many persons are not body builders?"
                }
            ],
            "example_quality": 0.7094599473101001,
            "example_similarity": 0.35457354192591756,
            "db_id": "dog_kennels"
        },
        {
            "index": 983,
            "question": "How many professionals did not operate any treatment on dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists do not have any album? */\nSELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\n\n/* Answer the following: How many departments are led by heads who are not mentioned? */\nSELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);\n\n/* Answer the following: Show the number of all customers without an account. */\nSELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals did not operate any treatment on dogs? */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 888,
                    "db_id": "chinook_1",
                    "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
                    "question": "How many artists do not have any album?"
                },
                {
                    "ex_id": 12,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
                    "question": "How many departments are led by heads who are not mentioned?"
                },
                {
                    "ex_id": 684,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
                    "question": "Show the number of all customers without an account."
                }
            ],
            "example_quality": 0.7093528330876754,
            "example_similarity": 0.3545508037933469,
            "db_id": "dog_kennels"
        },
        {
            "index": 984,
            "question": "Find the number of professionals who have not treated any dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists do not have any album? */\nSELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\n\n/* Answer the following: How many departments are led by heads who are not mentioned? */\nSELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);\n\n/* Answer the following: Show the number of all customers without an account. */\nSELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have not treated any dogs. */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 888,
                    "db_id": "chinook_1",
                    "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
                    "question": "How many artists do not have any album?"
                },
                {
                    "ex_id": 12,
                    "db_id": "department_management",
                    "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
                    "question": "How many departments are led by heads who are not mentioned?"
                },
                {
                    "ex_id": 684,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
                    "question": "Show the number of all customers without an account."
                }
            ],
            "example_quality": 0.7092459365770849,
            "example_similarity": 0.35449113156726964,
            "db_id": "dog_kennels"
        },
        {
            "index": 985,
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                },
                {
                    "ex_id": 471,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "What are the full names and ages for all female students whose sex is F?"
                },
                {
                    "ex_id": 942,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
                    "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?"
                }
            ],
            "example_quality": 0.7093849293786857,
            "example_similarity": 0.35441935662696966,
            "db_id": "dog_kennels"
        },
        {
            "index": 986,
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show first name, last name, age for all female students. Their sex is F. */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What are the full names and ages for all female students whose sex is F? */\nSELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 470,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "Show first name, last name, age for all female students. Their sex is F."
                },
                {
                    "ex_id": 471,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
                    "question": "What are the full names and ages for all female students whose sex is F?"
                },
                {
                    "ex_id": 942,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
                    "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?"
                }
            ],
            "example_quality": 0.7095236402476262,
            "example_similarity": 0.3543539227797074,
            "db_id": "dog_kennels"
        },
        {
            "index": 987,
            "question": "What is the average age of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of all the dogs? */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.7098179425371423,
            "example_similarity": 0.35461713199081346,
            "db_id": "dog_kennels"
        },
        {
            "index": 988,
            "question": "Compute the average age of all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of all the tracks? */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: Find the average unit price for a track. */\nSELECT AVG(UnitPrice) FROM TRACK\n\n/* Answer the following: What is the average snatch score of body builders? */\nSELECT avg(Snatch) FROM body_builder\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Compute the average age of all the dogs. */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 830,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "What is the average unit price of all the tracks?"
                },
                {
                    "ex_id": 831,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM TRACK",
                    "question": "Find the average unit price for a track."
                },
                {
                    "ex_id": 1154,
                    "db_id": "body_builder",
                    "query": "SELECT avg(Snatch) FROM body_builder",
                    "question": "What is the average snatch score of body builders?"
                }
            ],
            "example_quality": 0.7101116490730358,
            "example_similarity": 0.3546901307709239,
            "db_id": "dog_kennels"
        },
        {
            "index": 989,
            "question": "What is the age of the oldest dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the age of the oldest dog? */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 940,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
                },
                {
                    "ex_id": 941,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum OMIM value in the database?"
                },
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                }
            ],
            "example_quality": 0.7104047616624463,
            "example_similarity": 0.3548053692318845,
            "db_id": "dog_kennels"
        },
        {
            "index": 990,
            "question": "Tell me the age of the oldest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the highest acc percent score in the competition? */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: Return the highest acc percent across all basketball matches. */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: what are the top 3 highest support rates? */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the age of the oldest dog. */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 988,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "What is the highest acc percent score in the competition?"
                },
                {
                    "ex_id": 989,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "Return the highest acc percent across all basketball matches."
                },
                {
                    "ex_id": 2399,
                    "db_id": "candidate_poll",
                    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                    "question": "what are the top 3 highest support rates?"
                }
            ],
            "example_quality": 0.7098111480372592,
            "example_similarity": 0.3546882818780027,
            "db_id": "dog_kennels"
        },
        {
            "index": 991,
            "question": "How much does each charge type costs? List both charge type and amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the transaction types and the total amount of transactions. */\nSELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type\n\n/* Answer the following: What are total transaction amounts for each transaction type? */\nSELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type\n\n/* Answer the following: Show order ids and the total quantity in each order. */\nSELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does each charge type costs? List both charge type and amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1588,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
                    "question": "Show the transaction types and the total amount of transactions."
                },
                {
                    "ex_id": 1589,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
                    "question": "What are total transaction amounts for each transaction type?"
                },
                {
                    "ex_id": 1626,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
                    "question": "Show order ids and the total quantity in each order."
                }
            ],
            "example_quality": 0.709405377259918,
            "example_similarity": 0.3546384078881104,
            "db_id": "dog_kennels"
        },
        {
            "index": 992,
            "question": "List each charge type and its amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each charge type and its amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7096983153876802,
            "example_similarity": 0.3545273252636712,
            "db_id": "dog_kennels"
        },
        {
            "index": 993,
            "question": "How much does the most expensive charge type costs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and durations of the trips with the top 3 durations? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: What are the ids of the trips that lasted the longest and how long did they last? */\nSELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3\n\n/* Answer the following: Show the name and opening year for three churches that opened most recently. */\nSELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most expensive charge type costs? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 188,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids and durations of the trips with the top 3 durations?"
                },
                {
                    "ex_id": 189,
                    "db_id": "bike_1",
                    "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
                    "question": "What are the ids of the trips that lasted the longest and how long did they last?"
                },
                {
                    "ex_id": 1636,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
                    "question": "Show the name and opening year for three churches that opened most recently."
                }
            ],
            "example_quality": 0.7091123257960388,
            "example_similarity": 0.3544155317837429,
            "db_id": "dog_kennels"
        },
        {
            "index": 994,
            "question": "What is the charge amount of the most expensive charge type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the highest acc percent score in the competition? */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: Return the highest acc percent across all basketball matches. */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: what are the top 3 highest support rates? */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the charge amount of the most expensive charge type? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 988,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "What is the highest acc percent score in the competition?"
                },
                {
                    "ex_id": 989,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "Return the highest acc percent across all basketball matches."
                },
                {
                    "ex_id": 2399,
                    "db_id": "candidate_poll",
                    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                    "question": "what are the top 3 highest support rates?"
                }
            ],
            "example_quality": 0.7085224011953658,
            "example_similarity": 0.35443845970182064,
            "db_id": "dog_kennels"
        },
        {
            "index": 995,
            "question": "List the email, cell phone and home phone of all the professionals.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the email, cell phone and home phone of all the professionals. */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 1631,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date ,  organized_by FROM Church",
                    "question": "Show the name, open date, and organizer for all churches."
                }
            ],
            "example_quality": 0.7088153435057223,
            "example_similarity": 0.35471038084784895,
            "db_id": "dog_kennels"
        },
        {
            "index": 996,
            "question": "What are the email, cell phone and home phone of each professional?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the creation year, name and budget of each department. */\nSELECT creation ,  name ,  budget_in_billions FROM department\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: Show the name, open date, and organizer for all churches. */\nSELECT name ,  open_date ,  organized_by FROM Church\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the email, cell phone and home phone of each professional? */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3,
                    "db_id": "department_management",
                    "query": "SELECT creation ,  name ,  budget_in_billions FROM department",
                    "question": "List the creation year, name and budget of each department."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 1631,
                    "db_id": "wedding",
                    "query": "SELECT name ,  open_date ,  organized_by FROM Church",
                    "question": "Show the name, open date, and organizer for all churches."
                }
            ],
            "example_quality": 0.7091076975785077,
            "example_similarity": 0.35478242924884035,
            "db_id": "dog_kennels"
        },
        {
            "index": 997,
            "question": "What are all the possible breed type and size type combinations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids, first names, last names, and phones for all customers. */\nSELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\n\n/* Answer the following: What are the ids, full names, and phones of each customer? */\nSELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\n\n/* Answer the following: Show ids, customer ids, card type codes, card numbers for all cards. */\nSELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are all the possible breed type and size type combinations? */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 694,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
                    "question": "Show ids, first names, last names, and phones for all customers."
                },
                {
                    "ex_id": 695,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
                    "question": "What are the ids, full names, and phones of each customer?"
                },
                {
                    "ex_id": 700,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
                    "question": "Show ids, customer ids, card type codes, card numbers for all cards."
                }
            ],
            "example_quality": 0.7088450747396856,
            "example_similarity": 0.35460879257624034,
            "db_id": "dog_kennels"
        },
        {
            "index": 998,
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find distinct cities of address of students? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: What are the different cities where students live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. */\nSELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the distinct breed type and size type combinations for dogs. */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 94,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
                    "question": "Find distinct cities of address of students?"
                },
                {
                    "ex_id": 95,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
                    "question": "What are the different cities where students live?"
                },
                {
                    "ex_id": 2481,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
                    "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars."
                }
            ],
            "example_quality": 0.708169214401463,
            "example_similarity": 0.3544854185170272,
            "db_id": "dog_kennels"
        },
        {
            "index": 999,
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description. */\nSELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id\n\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: For each journal_committee, find the editor name and the journal theme. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the first name of all the professionals along with the description of the treatment they have done. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3135,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
                    "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description."
                },
                {
                    "ex_id": 659,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "Show the names of editors and the theme of journals for which they serve on committees."
                },
                {
                    "ex_id": 660,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "For each journal_committee, find the editor name and the journal theme."
                }
            ],
            "example_quality": 0.7082652894102184,
            "example_similarity": 0.3544664877169679,
            "db_id": "dog_kennels"
        },
        {
            "index": 1000,
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors and the theme of journals for which they serve on committees. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: For each journal_committee, find the editor name and the journal theme. */\nSELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID\n\n/* Answer the following: Show the names of members and the location of the performances they attended. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each professional's first name and description of the treatment they have performed? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 659,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "Show the names of editors and the theme of journals for which they serve on committees."
                },
                {
                    "ex_id": 660,
                    "db_id": "journal_committee",
                    "query": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
                    "question": "For each journal_committee, find the editor name and the journal theme."
                },
                {
                    "ex_id": 1318,
                    "db_id": "performance_attendance",
                    "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",
                    "question": "Show the names of members and the location of the performances they attended."
                }
            ],
            "example_quality": 0.7083160884482934,
            "example_similarity": 0.3544459606231903,
            "db_id": "dog_kennels"
        },
        {
            "index": 1001,
            "question": "How many singers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are there? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7086074809673262,
            "example_similarity": 0.354788142177982,
            "db_id": "singer"
        },
        {
            "index": 1002,
            "question": "What is the count of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the count of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7088982918645643,
            "example_similarity": 0.3547028848198805,
            "db_id": "singer"
        },
        {
            "index": 1003,
            "question": "List the name of singers in ascending order of net worth.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Answer the following: What is the list of school locations sorted in ascending order of school enrollment? */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers in ascending order of net worth. */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                },
                {
                    "ex_id": 4864,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "What is the list of school locations sorted in ascending order of school enrollment?"
                }
            ],
            "example_quality": 0.7091885228796545,
            "example_similarity": 0.35513800904102966,
            "db_id": "singer"
        },
        {
            "index": 1004,
            "question": "What are the names of singers ordered by ascending net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Answer the following: What is the list of school locations sorted in ascending order of school enrollment? */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of singers ordered by ascending net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                },
                {
                    "ex_id": 4864,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "What is the list of school locations sorted in ascending order of school enrollment?"
                }
            ],
            "example_quality": 0.7094781757453122,
            "example_similarity": 0.3551846452713809,
            "db_id": "singer"
        },
        {
            "index": 1005,
            "question": "What are the birth year and citizenship of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth year and citizenship of singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.7097672521873567,
            "example_similarity": 0.3553759566168348,
            "db_id": "singer"
        },
        {
            "index": 1006,
            "question": "What are the birth years and citizenships of the singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and issues of the books? */\nSELECT Title ,  Issues FROM book\n\n/* Answer the following: Show name and distance for all aircrafts. */\nSELECT name ,  distance FROM Aircraft\n\n/* Answer the following: What are the names and distances for all airplanes? */\nSELECT name ,  distance FROM Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth years and citizenships of the singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 218,
                    "db_id": "book_2",
                    "query": "SELECT Title ,  Issues FROM book",
                    "question": "What are the title and issues of the books?"
                },
                {
                    "ex_id": 346,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "Show name and distance for all aircrafts."
                },
                {
                    "ex_id": 347,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft",
                    "question": "What are the names and distances for all airplanes?"
                }
            ],
            "example_quality": 0.710055753924745,
            "example_similarity": 0.35557795453131696,
            "db_id": "singer"
        },
        {
            "index": 1007,
            "question": "List the name of singers whose citizenship is not \"France\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers whose citizenship is not \"France\". */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7103436826696062,
            "example_similarity": 0.3556224976752113,
            "db_id": "singer"
        },
        {
            "index": 1008,
            "question": "What are the names of the singers who are not French citizens?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the heads who are born outside the California state? */\nSELECT name FROM head WHERE born_state != 'California'\n\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the names of enzymes whose product is not 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who are not French citizens? */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6,
                    "db_id": "department_management",
                    "query": "SELECT name FROM head WHERE born_state != 'California'",
                    "question": "What are the names of the heads who are born outside the California state?"
                },
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 945,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes whose product is not 'Heme'?"
                }
            ],
            "example_quality": 0.7106310401272753,
            "example_similarity": 0.35573437337715585,
            "db_id": "singer"
        },
        {
            "index": 1009,
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors of age either 24 or 25. */\nSELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\n\n/* Answer the following: Show the names of people aged either 35 or 36. */\nSELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\n\n/* Answer the following: Show the name of technicians aged either 36 or 37 */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name of singers whose birth year is either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 654,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                    "question": "Show the names of editors of age either 24 or 25."
                },
                {
                    "ex_id": 1497,
                    "db_id": "debate",
                    "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
                    "question": "Show the names of people aged either 35 or 36."
                },
                {
                    "ex_id": 2242,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
                    "question": "Show the name of technicians aged either 36 or 37"
                }
            ],
            "example_quality": 0.7109178279963265,
            "example_similarity": 0.3560100861601603,
            "db_id": "singer"
        },
        {
            "index": 1010,
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of editors of age either 24 or 25. */\nSELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\n\n/* Answer the following: Show the names of people aged either 35 or 36. */\nSELECT Name FROM  people WHERE Age  =  35 OR Age  =  36\n\n/* Answer the following: Show the name of technicians aged either 36 or 37 */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers whose birth years are either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 654,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                    "question": "Show the names of editors of age either 24 or 25."
                },
                {
                    "ex_id": 1497,
                    "db_id": "debate",
                    "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
                    "question": "Show the names of people aged either 35 or 36."
                },
                {
                    "ex_id": 2242,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
                    "question": "Show the name of technicians aged either 36 or 37"
                }
            ],
            "example_quality": 0.7112040479686074,
            "example_similarity": 0.35612761696819006,
            "db_id": "singer"
        },
        {
            "index": 1011,
            "question": "What is the name of the singer with the largest net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer with the largest net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7114897017292715,
            "example_similarity": 0.35620918855499517,
            "db_id": "singer"
        },
        {
            "index": 1012,
            "question": "What is the name of the singer who is worth the most?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: What is the id of the candidate who most recently accessed the course? */\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1\n\n/* Answer the following: List the publisher of the publication with the highest price. */\nSELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer who is worth the most? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 76,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "Find id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 77,
                    "db_id": "student_assessment",
                    "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                    "question": "What is the id of the candidate who most recently accessed the course?"
                },
                {
                    "ex_id": 221,
                    "db_id": "book_2",
                    "query": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
                    "question": "List the publisher of the publication with the highest price."
                }
            ],
            "example_quality": 0.7117747909568117,
            "example_similarity": 0.35634844876677463,
            "db_id": "singer"
        },
        {
            "index": 1013,
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenship of singers and the number of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7120593173230932,
            "example_similarity": 0.35635445608530086,
            "db_id": "singer"
        },
        {
            "index": 1014,
            "question": "For each citizenship, how many singers are from that country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different publishers together with the number of publications they have. */\nSELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\n\n/* Answer the following: Show different nominees and the number of musicals they have been nominated. */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Answer the following: How many musicals has each nominee been nominated for? */\nSELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, how many singers are from that country? */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 227,
                    "db_id": "book_2",
                    "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
                    "question": "Show different publishers together with the number of publications they have."
                },
                {
                    "ex_id": 261,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "Show different nominees and the number of musicals they have been nominated."
                },
                {
                    "ex_id": 262,
                    "db_id": "musical",
                    "query": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
                    "question": "How many musicals has each nominee been nominated for?"
                }
            ],
            "example_quality": 0.7123432824933862,
            "example_similarity": 0.3562148995143143,
            "db_id": "singer"
        },
        {
            "index": 1015,
            "question": "Please show the most common citizenship of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Please show the most common citizenship of singers. */\nSELECT ",
            "response": "Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7126266881263976,
            "example_similarity": 0.35621659568024755,
            "db_id": "singer"
        },
        {
            "index": 1016,
            "question": "What is the most common singer citizenship ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which year were most departments established? */\nSELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of Status across cities. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common status across all cities? */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the most common singer citizenship ? */\nSELECT ",
            "response": "citizenship from singer group by citizenship order by count(*) desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 9,
                    "db_id": "department_management",
                    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
                    "question": "In which year were most departments established?"
                },
                {
                    "ex_id": 47,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of Status across cities."
                },
                {
                    "ex_id": 48,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common status across all cities?"
                }
            ],
            "example_quality": 0.7121596296125875,
            "example_similarity": 0.3563303538260297,
            "db_id": "singer"
        },
        {
            "index": 1017,
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum point for climbers whose country is United Kingdom? */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Answer the following: Return the maximum number of points for climbers from the United Kingdom. */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Answer the following: What is the maximum elevation of all airports in the country of Iceland? */\nSELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenships and the maximum net worth of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1117,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "What is the maximum point for climbers whose country is United Kingdom?"
                },
                {
                    "ex_id": 1118,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "Return the maximum number of points for climbers from the United Kingdom."
                },
                {
                    "ex_id": 6812,
                    "db_id": "flight_4",
                    "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
                    "question": "What is the maximum elevation of all airports in the country of Iceland?"
                }
            ],
            "example_quality": 0.7116084877463492,
            "example_similarity": 0.3563638056680817,
            "db_id": "singer"
        },
        {
            "index": 1018,
            "question": "For each citizenship, what is the maximum net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: For each city, what is the highest latitude for its stations? */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Answer the following: display the employee ID for each employee and the date on which he ended his previous job. */\nSELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, what is the maximum net worth? */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                },
                {
                    "ex_id": 115,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, what is the highest latitude for its stations?"
                },
                {
                    "ex_id": 3448,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
                    "question": "display the employee ID for each employee and the date on which he ended his previous job."
                }
            ],
            "example_quality": 0.7118917799980718,
            "example_similarity": 0.35647630202122477,
            "db_id": "singer"
        },
        {
            "index": 1019,
            "question": "Show titles of songs and names of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show titles of songs and names of singers. */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.711956437503253,
            "example_similarity": 0.35670809563324907,
            "db_id": "singer"
        },
        {
            "index": 1020,
            "question": "What are the song titles and singer names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Answer the following: Show the names of climbers and the heights of mountains they climb. */\nSELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the song titles and singer names? */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                },
                {
                    "ex_id": 1131,
                    "db_id": "climbing",
                    "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
                    "question": "Show the names of climbers and the heights of mountains they climb."
                }
            ],
            "example_quality": 0.7120209682290124,
            "example_similarity": 0.3567819284256279,
            "db_id": "singer"
        },
        {
            "index": 1021,
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of cities in counties that have a crime rate less than 100. */\nSELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)\n\n/* Answer the following: What are the names of cities that are in counties that have a crime rate below 100? */\nSELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)\n\n/* Answer the following: What are the distinct publishers of publications with price higher than 5000000? */\nSELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show distinct names of singers that have songs with sales more than 300000. */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2569,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
                    "question": "Show the names of cities in counties that have a crime rate less than 100."
                },
                {
                    "ex_id": 2570,
                    "db_id": "county_public_safety",
                    "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)",
                    "question": "What are the names of cities that are in counties that have a crime rate below 100?"
                },
                {
                    "ex_id": 220,
                    "db_id": "book_2",
                    "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
                    "question": "What are the distinct publishers of publications with price higher than 5000000?"
                }
            ],
            "example_quality": 0.711425112842045,
            "example_similarity": 0.35686778789283535,
            "db_id": "singer"
        },
        {
            "index": 1022,
            "question": "what are the different names of the singers that have sales more than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds? */\nSELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\n\n/* Answer the following: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds? */\nSELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000\n\n/* Answer the following: List the name and country of origin for all singers who have produced songs with rating above 9. */\nSELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: what are the different names of the singers that have sales more than 300000? */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2164,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
                    "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?"
                },
                {
                    "ex_id": 2165,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
                    "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?"
                },
                {
                    "ex_id": 3538,
                    "db_id": "music_1",
                    "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
                    "question": "List the name and country of origin for all singers who have produced songs with rating above 9."
                }
            ],
            "example_quality": 0.7113694575990933,
            "example_similarity": 0.35690804833128165,
            "db_id": "singer"
        },
        {
            "index": 1023,
            "question": "Show the names of singers that have more than one song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of services that have been used for more than 2 times in first notification of loss. */\nSELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2\n\n/* Answer the following: Which services have been used more than twice in first notification of loss? Return the service name. */\nSELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2\n\n/* Answer the following: Show the locations of schools that have more than 1 player. */\nSELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers that have more than one song. */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 904,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
                    "question": "Find the name of services that have been used for more than 2 times in first notification of loss."
                },
                {
                    "ex_id": 905,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
                    "question": "Which services have been used more than twice in first notification of loss? Return the service name."
                },
                {
                    "ex_id": 4881,
                    "db_id": "school_player",
                    "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
                    "question": "Show the locations of schools that have more than 1 player."
                }
            ],
            "example_quality": 0.7114815959167109,
            "example_similarity": 0.3570963185309109,
            "db_id": "singer"
        },
        {
            "index": 1024,
            "question": "What are the names of the singers that have more than one songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: List the name of staff who has been assigned multiple jobs. */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers that have more than one songs? */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                },
                {
                    "ex_id": 4762,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                    "question": "List the name of staff who has been assigned multiple jobs."
                },
                {
                    "ex_id": 4763,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                    "question": "What are the names of staff who have been assigned multiple jobs?"
                }
            ],
            "example_quality": 0.7116745737616076,
            "example_similarity": 0.3571161732257384,
            "db_id": "singer"
        },
        {
            "index": 1025,
            "question": "Show the names of singers and the total sales of their songs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product name and total order quantity for each product. */\nSELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id\n\n/* Answer the following: What is total number of show times per dat for each cinema? */\nSELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id\n\n/* Answer the following: Show all product names and the total quantity ordered for each product name. */\nSELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers and the total sales of their songs. */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5662,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
                    "question": "Show the product name and total order quantity for each product."
                },
                {
                    "ex_id": 1951,
                    "db_id": "cinema",
                    "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
                    "question": "What is total number of show times per dat for each cinema?"
                },
                {
                    "ex_id": 1616,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
                    "question": "Show all product names and the total quantity ordered for each product name."
                }
            ],
            "example_quality": 0.7117459629431557,
            "example_similarity": 0.35721085663397345,
            "db_id": "singer"
        },
        {
            "index": 1026,
            "question": "For each singer name, what is the total sales for their songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product name and total order quantity for each product. */\nSELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id\n\n/* Answer the following: What is total number of show times per dat for each cinema? */\nSELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id\n\n/* Answer the following: Show all product names and the total quantity ordered for each product name. */\nSELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each singer name, what is the total sales for their songs? */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5662,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
                    "question": "Show the product name and total order quantity for each product."
                },
                {
                    "ex_id": 1951,
                    "db_id": "cinema",
                    "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
                    "question": "What is total number of show times per dat for each cinema?"
                },
                {
                    "ex_id": 1616,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
                    "question": "Show all product names and the total quantity ordered for each product name."
                }
            ],
            "example_quality": 0.711817212964506,
            "example_similarity": 0.35732815590904177,
            "db_id": "singer"
        },
        {
            "index": 1027,
            "question": "List the name of singers that do not have any song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers that do not have any song. */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7120978193783672,
            "example_similarity": 0.357611974183531,
            "db_id": "singer"
        },
        {
            "index": 1028,
            "question": "What is the sname of every sing that does not have any song?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the sname of every sing that does not have any song? */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                },
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7123778798653532,
            "example_similarity": 0.3575152167800534,
            "db_id": "singer"
        },
        {
            "index": 1029,
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address has both members younger than 30 and members older than 40? */\nSELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n\n/* Answer the following: Show the country where people older than 30 and younger than 25 are from. */\nSELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n\n/* Answer the following: Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. */\nSELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the citizenship shared by singers with birth year before 1945 and after 1955. */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 796,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
                    "question": "Which address has both members younger than 30 and members older than 40?"
                },
                {
                    "ex_id": 1638,
                    "db_id": "wedding",
                    "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
                    "question": "Show the country where people older than 30 and younger than 25 are from."
                },
                {
                    "ex_id": 1987,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
                    "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64."
                }
            ],
            "example_quality": 0.7126573960170876,
            "example_similarity": 0.35751855128340515,
            "db_id": "singer"
        },
        {
            "index": 1030,
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address has both members younger than 30 and members older than 40? */\nSELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n\n/* Answer the following: Show the country where people older than 30 and younger than 25 are from. */\nSELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30\n\n/* Answer the following: Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64. */\nSELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 796,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
                    "question": "Which address has both members younger than 30 and members older than 40?"
                },
                {
                    "ex_id": 1638,
                    "db_id": "wedding",
                    "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
                    "question": "Show the country where people older than 30 and younger than 25 are from."
                },
                {
                    "ex_id": 1987,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
                    "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64."
                }
            ],
            "example_quality": 0.7129363694190127,
            "example_similarity": 0.35745407295358206,
            "db_id": "singer"
        },
        {
            "index": 1031,
            "question": "How many available features are there in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: How many available features are there in total? */\nSELECT ",
            "response": "count(*) FROM Other_Available_Features",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7132148016504201,
            "example_similarity": 0.3575615413292371,
            "db_id": "real_estate_properties"
        },
        {
            "index": 1032,
            "question": "What is the feature type name of feature AirCon?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of catalog entries with level number 8. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Show all flight numbers with aircraft Airbus A340-300. */\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What is the feature type name of feature AirCon? */\nSELECT ",
            "response": "T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 330,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "Find the names of catalog entries with level number 8."
                },
                {
                    "ex_id": 331,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "What are the names of catalog entries with level number 8?"
                },
                {
                    "ex_id": 414,
                    "db_id": "flight_1",
                    "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
                    "question": "Show all flight numbers with aircraft Airbus A340-300."
                }
            ],
            "example_quality": 0.7132988958348674,
            "example_similarity": 0.35756767247997323,
            "db_id": "real_estate_properties"
        },
        {
            "index": 1033,
            "question": "Show the property type descriptions of properties belonging to that code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the highest point in the state with capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: what is the highest point in the state with the capital des moines */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );\n\n/* Answer the following: List the titles of books that are not published. */\nSELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: Show the property type descriptions of properties belonging to that code. */\nSELECT ",
            "response": "T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7332,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with capital des moines"
                },
                {
                    "ex_id": 7333,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
                    "question": "what is the highest point in the state with the capital des moines"
                },
                {
                    "ex_id": 230,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
                    "question": "List the titles of books that are not published."
                }
            ],
            "example_quality": 0.7126669609896643,
            "example_similarity": 0.35750812258558695,
            "db_id": "real_estate_properties"
        },
        {
            "index": 1034,
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what states border texas and have a major river */\nSELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );\n\n/* Answer the following: what are the major cities in states through which the mississippi runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );\n\n/* Answer the following: what are the major cities in the states through which the major river in virginia runs */\nSELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What are the names of properties that are either houses or apartments with more than 1 room? */\nSELECT ",
            "response": "property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7417,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
                    "question": "what states border texas and have a major river"
                },
                {
                    "ex_id": 7281,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );",
                    "question": "what are the major cities in states through which the mississippi runs"
                },
                {
                    "ex_id": 7551,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
                    "question": "what are the major cities in the states through which the major river in virginia runs"
                }
            ],
            "example_quality": 0.712184979265934,
            "example_similarity": 0.35735198924903216,
            "db_id": "real_estate_properties"
        }
    ]
}